/*  legalistic nonsense:
 *
 *  This file is part of pmb2ltad.
 *
 *  stolen from pmb2ltad is free software.
 *  
 *  You may redistribute it and/or modify it under the terms of the
 *  GNU General Public License, as published by the Free Software
 *  Foundation; either version 2, or (at your option) any later version.
 *  
 *  mb2l is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with mb2l.  See the file "COPYING".  If not,
 *  write to:  The Free Software Foundation, Inc.,
 *             59 Temple Place - Suite 330,
 *             Boston,  MA  02111-1307, USA.
 */

/** \file cache.cpp Helper functions for loading and evaluation of diagrams */
#include <string>
#include <fstream>
#include <vector>
#include <iterator>
#include <ginac/ginac.h>
#include "two_loop_thresholds/tquark_corrections.hpp"

using namespace std;
using namespace GiNaC;

namespace tquark_corrections {
	using namespace MSSM;

	const std::string data_prefix("@th_datadir@");
	const std::string tquark_twoloop_strong_pole_name(data_prefix + "/tquark_2loop_strong_pole.gar");


	/*! \brief Evaluate \f${\mathcal O}(\alpha_s^2)\f$ poles mass correction
	 *
	 * \param params MSSM parameters at the scale \f$\bar\mu\f$
	 * \return \f$\frac{\Delta m_b(\bar\mu)}{m_b(\bar\mu)}\f$
	 * Note: you need to specify the value of scale \f$\bar\mu\f$ too.
	 *
	 */
	ex eval_tquark_twoloop_strong_pole(const exmap &params)
	{
		static int refc;
		static exvector cache;
		if (refc++==0) {
			lst allsym = io_helper().getall();
			archive tmp_arch;
			ifstream tmp_file(tquark_twoloop_strong_pole_name.c_str());
			tmp_file >> tmp_arch;
			tmp_file.close();
			ex curr(0);
			int n_exp = tmp_arch.num_expressions();
			for (int i=0; i<n_exp; i++) {
				try {
					string dummy_s;
					ex e = tmp_arch.unarchive_ex(allsym, dummy_s, i);
					curr += e;
				} catch (exception &ee) {
					throw std::runtime_error("Error while unarchiving " + tquark_twoloop_strong_pole_name);
				}
			}
			cache.push_back(curr);
			}
		exvector::const_iterator ebeg=cache.begin();
		exvector::const_iterator eend=cache.end();
		exvector::const_iterator eit=ebeg;
		ex res(0);
		while (eit!=eend)
		{
			Digits = 80;
			res += eit->subs(params).evalf();
			++eit;
		}
		res = res*pow(4*Pi,-4);
		res = res.evalf();
		return res;
	}

} // namespace tquark_corrections


