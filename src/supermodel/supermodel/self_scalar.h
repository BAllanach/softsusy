/* Functions needed for scalar self energies */

#ifndef _SELF_SCALAR_H_
#define _SELF_SCALAR_H_

/* A_S (x,qq) */
SUMO_COMPLEX A_S (SUMO_REAL, TSIL_REAL);

/* B_SS (x,y,s,qq) */
SUMO_COMPLEX B_SS (SUMO_REAL, SUMO_REAL, SUMO_REAL, SUMO_REAL);

/* B_SS (x',y,s,qq) */
SUMO_COMPLEX B_SpS (SUMO_REAL, SUMO_REAL, SUMO_REAL, SUMO_REAL);

/* B_FF (x,y,s,qq) and B_ff (x,y,s,qq) */
int bFF (TSIL_REAL,
         TSIL_REAL,
         TSIL_REAL,
         TSIL_REAL,
         TSIL_COMPLEX *,
         TSIL_COMPLEX *);

/* B_FF (x',y,s,qq) and B_ff (x',y,s,qq) are derivatives of the previous 
   functions with respect to first mass^2 argument, x. */
int bFpF (TSIL_REAL,
         TSIL_REAL,
         TSIL_REAL,
         TSIL_REAL,
         TSIL_COMPLEX *,
         TSIL_COMPLEX *);

/* A_V (x,qq) */
SUMO_COMPLEX A_V (SUMO_REAL, TSIL_REAL);

/* A_V (x',qq) */
SUMO_COMPLEX A_Vp (SUMO_REAL, TSIL_REAL);

/* B_SV (x,y,s,qq) */
SUMO_COMPLEX B_SV (SUMO_REAL, SUMO_REAL, TSIL_REAL, TSIL_REAL);

/* B_SV (x',y,s,qq) */
SUMO_COMPLEX B_SpV (SUMO_REAL, SUMO_REAL, TSIL_REAL, TSIL_REAL);

/* B_SV (x,y',s,qq) */
SUMO_COMPLEX B_SVp (SUMO_REAL, SUMO_REAL, TSIL_REAL, TSIL_REAL);

/* B_VV (x,y,s,qq) */
SUMO_COMPLEX B_VV (SUMO_REAL, SUMO_REAL, TSIL_REAL, TSIL_REAL);

/* B_VV (x',y,s,qq) */
SUMO_COMPLEX B_VpV (SUMO_REAL, SUMO_REAL, TSIL_REAL, TSIL_REAL);

/* Returns gFF, gff */
void G_FF (TSIL_RESULT *, TSIL_COMPLEX *, TSIL_COMPLEX *);

/* Returns gSS */
void G_SS (TSIL_RESULT *, TSIL_COMPLEX *);

/* W_SSSV (x,qq) */
TSIL_COMPLEX W_SSSV (TSIL_REAL, TSIL_REAL);

/* Returns mSfSff, mSFSfF, mSFSFf */
void M_SFSFF (TSIL_RESULT *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *);

/* Vbar (x,0,u,v) */
TSIL_COMPLEX Vbar (TSIL_RESULT *);

/* Returns vFFFFS, vFffFS, vfFfFS, vfFFfS, vFFffS, vffffS */
void V_FFFFS (TSIL_RESULT  *, TSIL_RESULT  *, TSIL_COMPLEX *, TSIL_COMPLEX *,
	      TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *);

/* W_SSFF (x,y,z,u,qq) */
TSIL_COMPLEX W_SSFF (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);

/* W_SSSS (x,y,z,u,qq) */
TSIL_COMPLEX W_SSSS (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);

/* W_SSff (x,y,z,u,qq) */
TSIL_COMPLEX W_SSff (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);

/* Returns vSSSSS */
void V_SSSSS (TSIL_RESULT *, TSIL_RESULT *, TSIL_COMPLEX *);

/* Returns vSSSFF, vSSSff */
void V_SSSFF (TSIL_RESULT *, TSIL_RESULT *, TSIL_COMPLEX *, TSIL_COMPLEX *);

/* X_SSS (x,y,z,qq) */
TSIL_COMPLEX X_SSS (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);

/* Y_SSSS (x,y,z,u,s,qq) */
TSIL_COMPLEX Y_SSSS (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL,
		     TSIL_REAL);

/* Z_SSSS (x,y,z,u,s,qq) */
TSIL_COMPLEX Z_SSSS (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL,
		     TSIL_REAL);

/* DGR -- added 5/12 */

void S_SSS (TSIL_RESULT *, TSIL_COMPLEX *);
void U_SSSS (TSIL_RESULT *, TSIL_COMPLEX *);
void M_SSSSS (TSIL_RESULT *, TSIL_COMPLEX *);
void M_FFFFS (TSIL_RESULT *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *);
void M_FFFFS2 (TSIL_RESULT *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *, TSIL_COMPLEX *);

/* DGR stuff added 1/15 for squarks: */

void V_SSSSV (TSIL_RESULT *, TSIL_COMPLEX *);
TSIL_COMPLEX V_VSSSS (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL,
		      TSIL_REAL, TSIL_REAL);
/* void V_VSSSS (TSIL_RESULT *, TSIL_RESULT *, TSIL_COMPLEX *); */
void M_VSSSS (TSIL_RESULT *, TSIL_COMPLEX *);
TSIL_COMPLEX G_SSSS (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);
TSIL_COMPLEX Gtilde_SSS (TSIL_REAL, TSIL_REAL, TSIL_REAL);
void Gtilde_SSSS (TSIL_RESULT *, TSIL_COMPLEX *);
TSIL_REAL G_S (TSIL_REAL, TSIL_REAL);
void Gtilde_SSFF (TSIL_RESULT *, TSIL_COMPLEX *, TSIL_COMPLEX *);
TSIL_COMPLEX F1tilde (TSIL_REAL, TSIL_REAL);
TSIL_COMPLEX F2tilde (TSIL_REAL, TSIL_REAL);
TSIL_COMPLEX F3tilde (TSIL_REAL, TSIL_REAL, TSIL_REAL);
TSIL_COMPLEX F4tilde (TSIL_REAL, TSIL_REAL, TSIL_REAL);
TSIL_COMPLEX BpFF (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);
TSIL_COMPLEX Bpff (TSIL_REAL, TSIL_REAL, TSIL_REAL, TSIL_REAL);


#endif /* self_scalar.h */
