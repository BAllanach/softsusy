/** \file decays.cpp
   Project:     SOFTSUSY 
   Author:      Tom Cridge, Ben Allanach
   Manual:      hep-ph/0104145, Comp. Phys. Comm. 143 (2002) 305 
   Webpage:     http://softsusy.hepforge.org/

*/

#include "decays.h"
#include "threeBodyDecays.h"
#include <iostream>
#include <cstring>
#include <stdlib.h>
#include <iomanip>
#include "main.h"
#include <complex>

using namespace std;
static double m1 = 0.,m2 = 0.,m3 = 0.,m4 = 0.,mq = 0.,m5 = 0.,m6 = 0.,
  m7 = 0., m8 = 0., MZboson = 0., MWboson = 0., mh = 0., mH = 0.,
  mA = 0., mphi = 0., g1 = 0., g2 = 0., alphamix = 0., betavac = 0.;
const int NeutMIXdim = 4;
const double GFosqrt2 = GMU/pow(2,0.5);
static int neutralinoj = 0, neutralinoi = 0, AorhorH = 0;
static DoubleMatrix NeutMIX(NeutMIXdim,NeutMIXdim);
static double errorflag = 0; /// 0 output if no issues, -1 if issues in calculating decays
static ostream* ffout;

int calculateDecays(ostream & fout, MssmSoftsusy * r, const NmssmSoftsusy & nmssm, bool nmssmIsIt) { 

  /// If there is a serious problem with the point, return an error code and /// warning
  if (
      (!nmssmIsIt && r->displayProblem().testSeriousProblem()) ||
      (nmssmIsIt && nmssm.displayProblem().testSeriousProblem())
      ) {
    fout << "# Not calculating decays: serious problem with point\n";
    return -1;
  }
  ffout = &fout;

  double flaggluino = 1, flagsupL = 1, flagsupR = 1, flagsdownL = 1, flagsdownR = 1, flagscharmL = 1, flagscharmR = 1, flagsstrangeL = 1, flagsstrangeR = 1, flagstop1 = 1, flagstop2 = 1, flagsbottom1 = 1, flagsbottom2 = 1, flagselectronL = 1, flagselectronR = 1, flagsmuonL = 1, flagsmuonR = 1, flagstau1 = 1, flagstau2 = 1, flagsnueL = 1, flagsnumuL = 1, flagsnutauL = 1, flagneut1 = 1, flagneut2 = 1, flagneut3 = 1, flagneut4 = 1, flagneut5 = 1, flagchar1 = 1, flagchar2 = 1, flagh1 = 1, flagH2 = 1, flagH3 = 1, flagA1 = 1, flagA2 = 1, flagHpm = 1; ///< Flags to turn off decays, default 1 = on, 0 = off

  errorflag = 0; /// 0 output if no issues, -1 if issues in calculating decays

  bool QCDcorr = true; ///Turns on QCD corrections to h->gg and h->qq
  // //TEMP
  // QCDcorr = false;

  ///Switch on or off 1->3 decays
  bool onetothree = threeBodyDecays; ///Turns on 1->3 decays, reads this in from input file, default is true

  ///BR Tolerance
  double BRTol = minBR; ///BRs less than this are not output, read in from SOFTSUSY Block in input file
    
  NmssmSoftsusy nmssmrun = nmssm; ///Do this as nmssm is a const to ensure it can't be changed here (e.g. if run in RPV mode where NMSSM is not included don't want this to change NMSSM), copy to nmssmrun to allow me to run it to MSusy, 1000GeV or whatever scale for parameter extraction

  DoubleMatrix S(3,3);
  DoubleMatrix CPEMix(3,3); ///CP even higgses mixing matrix which I will transform to match that in NMSSMTools
   ///initialise CPEMix
   for (int i = 1; i <= 3; i++) {
     for (int j = 1; j <= 3; j++) {
      CPEMix(i,j) = 0;
     }
   }
   double thetaA = 0; double kappa = 0; double lam = 0; double Alambda = 0; double Akappa = 0; double svev = 0; double gs = 0; double gp =0; double g=0; double alphas = 0; double tanthetaW = 0; double greekmu = 0;  double mGluino = 0; DoubleVector mch(2); double mHpm; DoubleVector msnu(3); double thetaL=0; double thetaR=0; DoubleMatrix mu(2,3); DoubleMatrix md(2,3); DoubleMatrix me(2,3);  double mwSoftSusy=0; double runmz=0; double polemw=0; double thetaL2 = 0; double thetaR2 = 0; double mtPole = 0, mbPole = 0;
   DoubleVector mneut(5); DoubleVector mh0(3); DoubleVector mA0(2); DoubleMatrix mixNeut(5,5); DoubleMatrix mixh0(3,3);
   DoubleMatrix Ptemp(3,3);

  ///initialise Ptemp
  for (int i = 1; i <= 3; i++) {
    for (int j = 1; j <= 3; j++) {
      Ptemp(i,j) = 0;
    }
  }
  
  DoubleMatrix CPOMix(3,3); ///is pseudoscalar mixing matrix as in P in NMSSMTools (dropped first row as that's goldstones hence 2x3 - just made 3x3 to stop issue with DoubleMatrix, third row is all 0s)
  ///initialise CPOMix
  for (int i = 1; i <= 3; i++) {
    for (int j = 1; j <= 3; j++) {
      CPOMix(i,j) = 0;
    }
  }

  DoubleMatrix CPOMix2(2,2); ///is P2 in NMSSMTools
  ///initialise CPOMix2
  for (int i = 1; i <= 2; i++) {
    for (int j = 1; j <= 2; j++) {
  	CPOMix2(i,j) = 0;
    }
  }

   ///Initialise matrices and vectors:
   for (int i = 1; i <= 2; i++) {
     for (int j = 1; j <= 3; j++) {
       mu(i,j) = 0; md(i,j) = 0, me(i,j) = 0;
     }
   }

   for (int j = 1; j <= 3; j++) {
     msnu(j) = 0, mh0(j) = 0;
     }

   for (int j = 1; j <= 2; j++) {
     mA0(j) = 0, mch(j) = 0;
     }

   for (int i = 1; i <= 3; i++) {
     for (int j = 1; j <= 3; j++) {
       mixh0(i,j) = 0;
     }
   }

   for (int i = 1; i <= 5; i++) {
     for (int j = 1; j <= 5; j++) {
       mixNeut(i,j) = 0;
     }
   }

   double tanbeta = 0;
   double beta = 0;
   double alpha = 0;
   double runmw = 0;
   double polemz = 0;

   double thetat = 0 , thetab = 0, thetatau = 0;

   double runmt = 0, runmb = 0, runmtau = 0, runmc =0, runms = 0, runmd = 0, runmu = 0, runmel = 0, runmmu = 0, Au = 0, Ad = 0, Ac = 0, As =0, At =0, Ab =0, Atau = 0, Ae =0, Amu =0, mueff=0;

   double alphasAtMA = 0, alphaAtMA = 0, mbAtMA = 0, mtAtMA = 0, mcAtMA = 0, msAtMA = 0, alphasAtMH = 0, alphaAtMH = 0, mbAtMH = 0, mtAtMH = 0, mcAtMH = 0, msAtMH = 0, alphasAtMh = 0, alphaAtMh = 0, mbAtMh = 0, mtAtMh = 0, mcAtMh = 0, msAtMh = 0, alphasAtMA2 = 0, alphaAtMA2 = 0, mbAtMA2 = 0, mtAtMA2 = 0, mcAtMA2 = 0, alphasAtMH3 = 0, alphaAtMH3 = 0, mbAtMH3 = 0, mtAtMH3 = 0, mcAtMH3 = 0; //For running couplings and masses for higgs 1-loop decays
   // msAtMH3 = 0; 
   double g3atmh0 = 0, g3atmH0 = 0, g3atmA0 = 0;
   double mt = 0, mb = 0, mc = 0, ms = 0, mup = 0, mdo = 0, mel = 0, mmu = 0, mtau = 0; ///Quark pole masses for general use

 if(nmssmIsIt == true) {
   
   if(onetothree == true) {
     fout << "# No 1to3 decays included in NMSSM - therefore onetothree set to false" << endl;
   }
   onetothree = false;

   // fout << "MSUSY = " << nmssm.displayMsusy() << endl;

   nmssmrun.runto(nmssm.displayMsusy()); ///Run to scale Msusy for parameter extraction

   nmssmrun.calcDrBarPars(); ///Must redo calcDrBarPars at each scale

   S = nmssmrun.displayDrBarPars().mixh0; /// CP even higgs 3x3 mixing matrix as from softsusy

   CPEMix(1,1) = S(1,2); CPEMix(2,1) = S(2,2); CPEMix(1,2) = S(1,1); CPEMix(2,2) = S(2,1); CPEMix(3,1) = S(3,2); CPEMix(3,2) = S(3,1); CPEMix(1,3) = S(1,3); CPEMix(2,3) = S(2,3); CPEMix(3,3) = S(3,3); ///Transform to match conventions in NMSSMTools

   tanbeta = nmssmrun.displayTanb();
   beta = atan(tanbeta);
   thetaA = nmssmrun.displayDrBarPars().thetaA0; ///CP odd higgses mixing angle

   Ptemp(1,1) = -cos(beta), Ptemp(1,2) = sin(beta), Ptemp(1,3) = 0;
   Ptemp(2,1) = sin(beta)*cos(thetaA); Ptemp(2,2) = cos(beta)*cos(thetaA); Ptemp(2,3) = sin(thetaA);
   Ptemp(3,1) = sin(beta)*sin(thetaA); Ptemp(3,2) = cos(beta)*sin(thetaA); Ptemp(3,3) = -cos(thetaA);
  
   ///CPOMix is the mixing matrix used in the partial width formulae, not Ptemp or CPOMix2
   CPOMix(1,1) = Ptemp(2,2); CPOMix(1,2) = Ptemp(2,1); CPOMix(1,3) = Ptemp(2,3);
   CPOMix(2,1) = Ptemp(3,2); CPOMix(2,2) = Ptemp(3,1); CPOMix(2,3) = Ptemp(3,3);
   CPOMix(3,1) = 0; CPOMix(3,2) = 0; CPOMix(3,3) = 0; ///0s as never used as CPOMix is actually 2x3 as dropped goldstone row
 
   CPOMix2(1,1) = CPOMix(1,1)/sin(beta);
   CPOMix2(2,1) = CPOMix(2,1)/sin(beta);
   CPOMix2(1,2) = CPOMix(1,3);
   CPOMix2(2,2) = CPOMix(2,3);
   
   // fout << "S = " << S << " CPEMix = " << CPEMix << " CPOMix = " << CPOMix << endl;
   // *ffout << "CPEMix = " << CPEMix << std::endl;

   ///Additional NMSSM parameters
   kappa = nmssmrun.displayKappa();
   lam = nmssmrun.displayLambda();
   Alambda = nmssmrun.displaySoftAlambda();
   Akappa = nmssmrun.displaySoftAkappa();
   svev = nmssmrun.displaySvev();

   gs = nmssmrun.displayGaugeCoupling(3);
   gp= nmssmrun.displayGaugeCoupling(1)*pow(0.6,0.5);
   g = nmssmrun.displayGaugeCoupling(2);
   alphas = pow(gs,2)/(4*PI);
   tanthetaW = gp/g;
   //   alphaEm = pow(e,2)/(4*PI);

   ///Set masses from nmssmrun nmssmsoftsusy object passed from softpoint
   mGluino = nmssmrun.displayPhys().mGluino; mneut = nmssmrun.displayPhys().mneut; mch = nmssmrun.displayPhys().mch; mh0 = nmssmrun.displayPhys().mh0; mA0 = nmssmrun.displayPhys().mA0; mHpm = nmssmrun.displayPhys().mHpm; msnu = nmssmrun.displayPhys().msnu; mixNeut = nmssmrun.displayPhys().mixNeut.transpose();
   thetaL = nmssmrun.displayPhys().thetaL; thetaR = nmssmrun.displayPhys().thetaR; mu = nmssmrun.displayPhys().mu; md = nmssmrun.displayPhys().md; me = nmssmrun.displayPhys().me; DoubleMatrix mixh0(nmssmrun.displayPhys().mixh0); mwSoftSusy = nmssmrun.displayMwRun(); runmz = nmssmrun.displayMzRun(); polemw = nmssmrun.displayMw(); polemz = nmssmrun.displayMz();
 
   ///Set mixing angles in my conventions, note shift in thetaL2 and thetaR2, which are the angles used in the PW formulae
   tanbeta = nmssmrun.displayTanb();
   beta = atan(tanbeta);
   alpha =nmssmrun.displayDrBarPars().thetaH;
   thetaL2 = -thetaL + PI/2;
   thetaR2 = -thetaR + PI/2;
   
   runmw = mwSoftSusy; ///"running" W mass, i.e. that used for couplings

   // *ffout << "mixNeut = " << mixNeut << std::endl;

  ///Mixing angles taken from softsusy depend on the mass ordering, I have taken the Spheno method whereby the sfermions are always mass ordered, this isn't necessarily true of softsusy so if the mass ordering is reverse I must change the mixing angle and reorder the masses.
  if (mu(1,3) <= mu(2,3)) {
    // thetat = nmssmrun.displayPhys().thetat; 
    thetat = nmssmrun.displayDrBarPars().thetat;
    }
  else if (mu(1,3) > mu(2,3)) {
    // thetat = acos(-sin(nmssmrun.displayPhys().thetat));
    thetat = acos(-sin(nmssmrun.displayDrBarPars().thetat));
    DoubleMatrix mutemp (2,3);
    mutemp(1,1) = mu(1,1); mutemp(1,2) = mu(1,2); mutemp(2,1) = mu(2,1); mutemp(2,2) = mu(2,2); mutemp(1,3) = mu(2,3); mutemp(2,3) = mu(1,3);
    mu = mutemp;
  }
  if (md(1,3) <= md(2,3)) {
    // thetab = nmssmrun.displayPhys().thetab; 
    thetab = nmssmrun.displayDrBarPars().thetab; 
    }
  else if (md(1,3) > md(2,3)) {
    // thetab = acos(-sin(nmssmrun.displayPhys().thetab));
    thetab = acos(-sin(nmssmrun.displayDrBarPars().thetab));
    DoubleMatrix mdtemp (2,3);
    mdtemp(1,1) = md(1,1); mdtemp(1,2) = md(1,2); mdtemp(2,1) = md(2,1); mdtemp(2,2) = md(2,2); mdtemp(1,3) = md(2,3); mdtemp(2,3) = md(1,3);
    md = mdtemp;
  }
  if (me(1,3) <= me(2,3)) {
    // thetatau = nmssmrun.displayPhys().thetatau; 
    thetatau = nmssmrun.displayDrBarPars().thetatau; 
    }
  else if (me(1,3) > me(2,3)) {
    // thetatau = acos(-sin(nmssmrun.displayPhys().thetatau));
    thetatau = acos(-sin(nmssmrun.displayDrBarPars().thetatau));
    DoubleMatrix metemp (2,3);
    metemp(1,1) = me(1,1); metemp(1,2) = me(1,2); metemp(2,1) = me(2,1); metemp(2,2) = me(2,2); metemp(1,3) = me(2,3); metemp(2,3) = me(1,3);
    me = metemp;
  }

  ///Trilinear couplings
  At = nmssmrun.displaySoftA(UA, 3, 3), Ab = nmssmrun.displaySoftA(DA, 3, 3), Atau = nmssmrun.displaySoftA(EA, 3, 3), greekmu = nmssmrun.displaySusyMu();
  Au = nmssmrun.displaySoftA(UA, 1, 1), Ad = nmssmrun.displaySoftA(DA, 1, 1), Ac = nmssmrun.displaySoftA(UA, 2, 2), As = nmssmrun.displaySoftA(DA, 2, 2), Ae = nmssmrun.displaySoftA(EA, 1, 1), Amu = nmssmrun.displaySoftA(EA, 2, 2);

  ///Effective mu parameter of NMSSM - note resolves mu problem of MSSM
  mueff = lam*svev/pow(2,0.5);

  ///Run to mZ for fermion mass extraction
  nmssmrun.runto(nmssmrun.displayMz());

  ///Pole masses for quarks necessary for scheme used for h -> qq QCD corrections
  mtPole = nmssmrun.displayDataSet().displayPoleMt();
  mbPole = nmssmrun.displayDataSet().displayPoleMb();
  
  ///Masses used in general formulae for quarks
  mt = mtPole;
  mb = mbPole;
  mc = nmssmrun.displayDataSet().displayMass(mCharm);
  ms = nmssmrun.displayDataSet().displayMass(mStrange);
  mup = nmssmrun.displayDataSet().displayMass(mUp);
  mdo = nmssmrun.displayDataSet().displayMass(mDown);
  mel = nmssmrun.displayDataSet().displayMass(mElectron);
  mmu = nmssmrun.displayDataSet().displayMass(mMuon);
  mtau = nmssmrun.displayDataSet().displayPoleMtau();
  
  nmssmrun.calcDrBarPars(); ///Must redo calcDrBarPars at new scale

  ///"Running" masses used for couplings, e.g. in setting yukawas
  runmb = nmssmrun.displayDrBarPars().mb;
  runmt = nmssmrun.displayDrBarPars().mt;
  runmtau = nmssmrun.displayDrBarPars().mtau;
  runmc = pow(2,0.5)*runmw*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(2,2)/nmssmrun.displayGaugeCoupling(2);
  runms = pow(2,0.5)*runmw*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(2,2)/nmssmrun.displayGaugeCoupling(2);
  runmd = pow(2,0.5)*runmw*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(1,1)/nmssmrun.displayGaugeCoupling(2);
  runmu = pow(2,0.5)*runmw*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(1,1)/nmssmrun.displayGaugeCoupling(2);
  runmel = pow(2,0.5)*runmw*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YE)(1,1)/nmssmrun.displayGaugeCoupling(2);
  runmmu = pow(2,0.5)*runmw*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YE)(2,2)/nmssmrun.displayGaugeCoupling(2);

  // ///For NMSSM to match up with NMSSMTools I must transform 5x5 neutralino mixing matrix by swapping columns 3 and 4 - DON'T NEED TO FOR SUSY DECAYS, JUST WOULD NEED TO FOR HIGGS DECAYS BUT ACCOUNTED FOR THIS IN THEIR CODES!


  ///Instead of using Softsusy to run gs to different scales (time inefficient) use the one-loop renormalisation group equations for gs directly to run to different scales, this is accurate enough for our purposes here - NOT WHAT IS USED IN CODE, FULL RUNNING OF SOFTSUSY IS USED, just left for potential use:
 double alphasrun (double mu, double mu0, double alphasmu0); ///See later function definition
 double alpharun (double mu, double mu0, double alphamu0); ///See later function definition
 double alphasatmh = alphasrun(mh0(1), polemz, ALPHASMZ);
 double alphasatmH = alphasrun(mh0(2), polemz, ALPHASMZ);
 double alphasatmA = alphasrun(mA0(1), polemz, ALPHASMZ);
 g3atmh0 = pow(4*PI*alphasatmh,0.5);
 g3atmH0 = pow(4*PI*alphasatmH,0.5);
 g3atmA0 = pow(4*PI*alphasatmA,0.5);


 ///Or run fully to the mass of each decaying Higgs: - WHAT IS ACTUALLY USED, these are used for masses of quarks and for gauge couplings for the Higgs loop decays, here the scale at which you choose to set your masses can cause significant differences in the PWs determined:
 nmssmrun.runto(nmssmrun.displayPhys().mA0(2));
 alphasAtMA2 =  pow(nmssmrun.displayGaugeCoupling(3),2)/(4*PI);
 alphaAtMA2 = pow(nmssmrun.displayGaugeCoupling(2)*nmssmrun.calcSinthdrbar(),2)/(4*PI);
 mbAtMA2 = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(3,3)/nmssmrun.displayGaugeCoupling(2); 
 mtAtMA2 = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mcAtMA2 = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(2,2)/nmssmrun.displayGaugeCoupling(2);

 nmssmrun.runto(nmssmrun.displayPhys().mh0(3));
 alphasAtMH3 =  pow(nmssmrun.displayGaugeCoupling(3),2)/(4*PI);
 alphaAtMH3 = pow(nmssmrun.displayGaugeCoupling(2)*nmssmrun.calcSinthdrbar(),2)/(4*PI);
 mbAtMH3 = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mtAtMH3 = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mcAtMH3 = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(2,2)/nmssmrun.displayGaugeCoupling(2);
 // msAtMH3 = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(2,2)/nmssmrun.displayGaugeCoupling(2);

 nmssmrun.runto(nmssmrun.displayPhys().mA0(1));
 alphasAtMA =  pow(nmssmrun.displayGaugeCoupling(3),2)/(4*PI);
 alphaAtMA = pow(nmssmrun.displayGaugeCoupling(2)*nmssmrun.calcSinthdrbar(),2)/(4*PI);
 mbAtMA = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mtAtMA = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mcAtMA = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(2,2)/nmssmrun.displayGaugeCoupling(2);
 msAtMA = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(2,2)/nmssmrun.displayGaugeCoupling(2);

 nmssmrun.runto(nmssmrun.displayPhys().mh0(2));
 alphasAtMH = pow(nmssmrun.displayGaugeCoupling(3),2)/(4*PI);
 alphaAtMH = pow(nmssmrun.displayGaugeCoupling(2)*nmssmrun.calcSinthdrbar(),2)/(4*PI);
 mbAtMH = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mtAtMH = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(3,3)/nmssmrun.displayGaugeCoupling(2);
 mcAtMH = pow(2,0.5)*nmssmrun.displayMwRun()*sin(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YU)(2,2)/nmssmrun.displayGaugeCoupling(2);
 msAtMH = pow(2,0.5)*nmssmrun.displayMwRun()*cos(atan(nmssmrun.displayTanb()))*nmssmrun.displayYukawaMatrix(YD)(2,2)/nmssmrun.displayGaugeCoupling(2);

 ///If yukawa matrix elements are 0 (can occur if only include mixing in third generation in softsusy spectrum generator) then use a non-zero mass - avoids issues of inf in foftau for loop decays!
 if (mbAtMH3 <1.0e-66) {mbAtMH3 = mb;}
 if (mtAtMH3 <1.0e-66) {mtAtMH3 = mt;}
 if (mcAtMH3 <1.0e-66) {mcAtMH3 = mc;}
 // if (msAtMH3 <1.0e-66) {msAtMH3 = ms;}
 if (mbAtMH <1.0e-66) {mbAtMH = mb;}
 if (mtAtMH <1.0e-66) {mtAtMH = mt;}
 if (mcAtMH <1.0e-66) {mcAtMH = mc;}
 if (msAtMH <1.0e-66) {msAtMH = ms;}
 if (mbAtMA2 <1.0e-66) {mbAtMA2 = mb;}
 if (mtAtMA2 <1.0e-66) {mtAtMA2 = mt;}
 if (mcAtMA2 <1.0e-66) {mcAtMA2 = mc;}
 if (mbAtMA <1.0e-66) {mbAtMA = mb;}
 if (mtAtMA <1.0e-66) {mtAtMA = mt;}
 if (mcAtMA <1.0e-66) {mcAtMA = mc;}
 if (msAtMA <1.0e-66) {msAtMA = ms;}

///For mh should not use full susy running as susy not around this scale, instead use SM running as in QeDQcD object defined in lowe.h:
 QedQcd a(nmssmrun.displayDataSet());
 
 a.runto(nmssmrun.displayPhys().mh0(1));
 alphasAtMh = a.displayAlpha(ALPHAS);
 alphaAtMh =  a.displayAlpha(ALPHA);
 mbAtMh = a.displayMass()(6);
 mtAtMh = a.displayMass()(3);
 mcAtMh = a.displayMass()(2);
 msAtMh = a.displayMass()(5);

 g3atmh0 = pow(4*PI*alphasAtMh,0.5);
 g3atmH0 = pow(4*PI*alphasAtMH,0.5);
 g3atmA0 = pow(4*PI*alphasAtMA,0.5);

 }
  else if (nmssmIsIt == false) {  ///MSSM

    r->runto(r->displayMsusy()); ///Run to Msusy scale to extract parameters
    r->calcDrBarPars();
 
    gs = r->displayGaugeCoupling(3);
    gp= r->displayGaugeCoupling(1)*pow(0.6,0.5);
    g = r->displayGaugeCoupling(2);

    alphas = pow(gs,2)/(4*PI);
    tanthetaW = gp/g;

    ///Set masses
    mGluino = r->displayPhys().mGluino; mneut = r->displayPhys().mneut; mch = r->displayPhys().mch; mh0 = r->displayPhys().mh0; mA0 = r->displayPhys().mA0; mHpm = r->displayPhys().mHpm; msnu = r->displayPhys().msnu; mixNeut = r->displayPhys().mixNeut.transpose();
    thetaL = r->displayPhys().thetaL; thetaR = r->displayPhys().thetaR; mu = r->displayPhys().mu; md = r->displayPhys().md; me = r->displayPhys().me; mixh0 = r->displayPhys().mixh0; mwSoftSusy = r->displayMwRun(); runmz = r->displayMzRun(); polemw = r->displayMw(); polemz = r->displayMz();
    
    ///Set mixing angles - again note shift in thetaL2 and thetaR2 used in PW formulae
    tanbeta = r->displayTanb();
    beta = atan(tanbeta);
    alpha =r->displayDrBarPars().thetaH;
    thetaL2 = -thetaL + PI/2;
    thetaR2 = -thetaR + PI/2;
    
    runmw = mwSoftSusy; ///"Running" W mass, used for couplings
    
    ///Ensure mass ordering of sfermions, requires shift of sfermion mixing angles if mass order initially wrong
    if (mu(1,3) <= mu(2,3)) {
      // thetat = r->displayPhys().thetat; 
      thetat = r->displayDrBarPars().thetat; 
    }
    else if (mu(1,3) > mu(2,3)) {
    // thetat = acos(-sin(r->displayPhys().thetat)); ///Equivalent of adding pi/2 for the range -pi/4 -> pi/4
      thetat = acos(-sin(r->displayDrBarPars().thetat));
      DoubleMatrix mutemp (2,3);
      mutemp(1,1) = mu(1,1); mutemp(1,2) = mu(1,2); mutemp(2,1) = mu(2,1); mutemp(2,2) = mu(2,2); mutemp(1,3) = mu(2,3); mutemp(2,3) = mu(1,3);
      mu = mutemp;
    }
    
    if (md(1,3) <= md(2,3)) {
      // thetab = r->displayPhys().thetab; 
      thetab = r->displayDrBarPars().thetab; 
    }
    else if (md(1,3) > md(2,3)) {
    // thetab = acos(-sin(r->displayPhys().thetab)); ///Equivalent of adding pi/2 for the range -pi/4 -> pi/4
      thetab = acos(-sin(r->displayDrBarPars().thetab));
      DoubleMatrix mdtemp (2,3);
      mdtemp(1,1) = md(1,1); mdtemp(1,2) = md(1,2); mdtemp(2,1) = md(2,1); mdtemp(2,2) = md(2,2); mdtemp(1,3) = md(2,3); mdtemp(2,3) = md(1,3);
      md = mdtemp;
    }
    if (me(1,3) <= me(2,3)) {
      // thetatau = r->displayPhys().thetatau; 
      thetatau = r->displayDrBarPars().thetatau; 
    }
    else if (me(1,3) > me(2,3)) {
      // thetatau = acos(-sin(r->displayPhys().thetatau)); ///Equivalent of adding pi/2 for the range -pi/4 -> pi/4
      thetatau = acos(-sin(r->displayDrBarPars().thetatau));
      DoubleMatrix metemp (2,3);
      metemp(1,1) = me(1,1); metemp(1,2) = me(1,2); metemp(2,1) = me(2,1); metemp(2,2) = me(2,2); metemp(1,3) = me(2,3); metemp(2,3) = me(1,3);
      me = metemp;
    }
    
    ///Trilinear couplings
    At = r->displaySoftA(UA, 3, 3), Ab = r->displaySoftA(DA, 3, 3), Atau = r->displaySoftA(EA, 3, 3), greekmu = r->displaySusyMu();
    Au = r->displaySoftA(UA, 1, 1), Ad = r->displaySoftA(DA, 1, 1), Ac = r->displaySoftA(UA, 2, 2), As = r->displaySoftA(DA, 2, 2), Ae = r->displaySoftA(EA, 1, 1), Amu = r->displaySoftA(EA, 2, 2);
    
    r->runto(r->displayMz()); ///Run to mZ to extract quark masses
    mtPole = r->displayDataSet().displayPoleMt();
    mbPole = r->displayDataSet().displayPoleMb();
    
    ///Masses used in general formulae for quarks
    mt = mtPole;
    mb = mbPole;
    mc = r->displayDataSet().displayMass(mCharm);
    ms = r->displayDataSet().displayMass(mStrange);
    mup = r->displayDataSet().displayMass(mUp);
    mdo = r->displayDataSet().displayMass(mDown);
    mel = r->displayDataSet().displayMass(mElectron);
    mmu = r->displayDataSet().displayMass(mMuon);
    mtau = r->displayDataSet().displayPoleMtau();
    
    r->calcDrBarPars(); ///Need to recalc DrBarPars at each new scale
    
    ///"Running" masses used for couplings, e.g. yukawa couplings
    runmb = r->displayDrBarPars().mb;
    runmt = r->displayDrBarPars().mt;
    runmtau = r->displayDrBarPars().mtau;
    
    runmc = pow(2,0.5)*polemw*sin(atan(r->displayTanb()))*r->displayYukawaMatrix(YU)(2,2)/r->displayGaugeCoupling(2);
    runms = pow(2,0.5)*polemw*cos(atan(r->displayTanb()))*r->displayYukawaMatrix(YD)(2,2)/r->displayGaugeCoupling(2);
    runmd = pow(2,0.5)*polemw*cos(atan(r->displayTanb()))*r->displayYukawaMatrix(YD)(1,1)/r->displayGaugeCoupling(2);
    runmu = pow(2,0.5)*polemw*sin(atan(r->displayTanb()))*r->displayYukawaMatrix(YU)(1,1)/r->displayGaugeCoupling(2);
    runmel = pow(2,0.5)*runmw*cos(atan(r->displayTanb()))*r->displayYukawaMatrix(YE)(1,1)/r->displayGaugeCoupling(2);
    runmmu = pow(2,0.5)*runmw*cos(atan(r->displayTanb()))*r->displayYukawaMatrix(YE)(2,2)/r->displayGaugeCoupling(2);
    
    
    ///Instead of using Softsusy to run gs to different scales (time inefficient) use the one-loop renormalisation group equations for gs directly to run to different scales, this is accurate enough for our purposes here, NOT WHAT IS DONE - full running is done (see a few lines below) - just left for potential use:
    double alphasrun (double mu, double mu0, double alphasmu0); ///See later function definition
    double alpharun (double mu, double mu0, double alphamu0); ///See later function definition
    double alphasatmh = alphasrun(mh0(1), polemz, ALPHASMZ);
    double alphasatmH = alphasrun(mh0(2), polemz, ALPHASMZ);
    double alphasatmA = alphasrun(mA0(1), polemz, ALPHASMZ);
    g3atmh0 = pow(4*PI*alphasatmh,0.5);
    g3atmH0 = pow(4*PI*alphasatmH,0.5);
    g3atmA0 = pow(4*PI*alphasatmA,0.5);
    
    ///Look into hdecay's alphas values via their running function - NOT USED:
    double alphasrunlambdaQCD (double mu, double LAMBDA, double Nf);
    
    ///Or run fully using softsusy runto: - THIS IS WHAT IS ACTUALLY USED NOT 1-LOOP RENORMALISATION GROUP EQUATIONS APPROXIMATE WAY OF A FEW LINES ABOVE
    ///Determine gauge couplings and quark masses at the mass of the decaying Higgses for use in the Higgs loop decays, here the choice of scale for evaluating the mass of the quarks and couplings can have a significant effect on the PWs
    r->runto(r->displayPhys().mA0(1));
    r->calcDrBarPars();
    alphasAtMA = pow(r->displayGaugeCoupling(3),2)/(4*PI);
    alphaAtMA = pow(r->displayGaugeCoupling(2)*r->calcSinthdrbar(),2)/(4*PI);
    
    mbAtMA = pow(2,0.5)*mwSoftSusy*cos(atan(r->displayTanb()))*r->displayYukawaMatrix(YD)(3,3)/r->displayGaugeCoupling(2);
    mtAtMA = pow(2,0.5)*mwSoftSusy*sin(atan(r->displayTanb()))*r->displayYukawaMatrix(YU)(3,3)/r->displayGaugeCoupling(2);
    mcAtMA = pow(2,0.5)*mwSoftSusy*sin(atan(r->displayTanb()))*r->displayYukawaMatrix(YU)(2,2)/r->displayGaugeCoupling(2);
    msAtMA = pow(2,0.5)*mwSoftSusy*cos(atan(r->displayTanb()))*r->displayYukawaMatrix(YD)(2,2)/r->displayGaugeCoupling(2);
    
    r->runto(r->displayPhys().mh0(2));
    r->calcDrBarPars();
    alphasAtMH = pow(r->displayGaugeCoupling(3),2)/(4*PI);
    alphaAtMH = pow(r->displayGaugeCoupling(2)*r->calcSinthdrbar(),2)/(4*PI);
    mbAtMH = pow(2,0.5)*polemw*cos(beta)*r->displayYukawaMatrix(YD)(3,3)/r->displayGaugeCoupling(2);
    mtAtMH = pow(2,0.5)*polemw*sin(beta)*r->displayYukawaMatrix(YU)(3,3)/r->displayGaugeCoupling(2);
    mcAtMH = pow(2,0.5)*polemw*sin(beta)*r->displayYukawaMatrix(YU)(2,2)/r->displayGaugeCoupling(2);
    msAtMH = pow(2,0.5)*polemw*cos(beta)*r->displayYukawaMatrix(YD)(2,2)/r->displayGaugeCoupling(2);
    
    ///If yukawa matrix elements are 0 (can get if set mixing to 0 in softsusy spectrum generator) then use a non-zero mass - otherwise get inf issue in foftau function for loop decays!
    if (mbAtMH <1.0e-66) {mbAtMH = mb;}
    if (mtAtMH <1.0e-66) {mtAtMH = mt;}
    if (mcAtMH <1.0e-66) {mcAtMH = mc;}
    if (msAtMH <1.0e-66) {msAtMH = ms;}
    if (mbAtMA <1.0e-66) {mbAtMA = mb;}
    if (mtAtMA <1.0e-66) {mtAtMA = mt;}
    if (mcAtMA <1.0e-66) {mcAtMA = mc;}
    if (msAtMA <1.0e-66) {msAtMA = ms;}
    
    ///For mh should not use full susy running as susy not around this scale, instead use SM running as in QeDQcD object defined in lowe.h:
    QedQcd a(r->displayDataSet());
    
    a.runto(r->displayPhys().mh0(1));
    alphasAtMh = a.displayAlpha(ALPHAS);
    alphaAtMh =  a.displayAlpha(ALPHA);
    mbAtMh = a.displayMass()(6);
    mtAtMh = a.displayMass()(3);
    mcAtMh = a.displayMass()(2);
    msAtMh = a.displayMass()(5);
    
    g3atmh0 = pow(4*PI*alphasAtMh,0.5);
    g3atmH0 = pow(4*PI*alphasAtMH,0.5);
    g3atmA0 = pow(4*PI*alphasAtMA,0.5);
  }

 if (runmmu < 1.0e-66) {runmmu = mmu;} //Catches cases where mixing has been set off in the spectrum generator thereby giving lepton yukawa matrix only non-zero (3,3) element and so giving running mass for muon = 0, this would mean no higgs -> mu mu decay, therefore set runmmu = pole mmu in this case
 // if (runmc == 0) {runmc = mc;}
 // if (runms == 0) {runms = ms;}

 
 

 ///gravitino stuff - For NLSP decays to LSP gravitino, occur often in GMSB scenarios
 double mgravitino = r->displayGravitino();
 // mgravitino = 5.92500000e-08; ///Doesn't affect functions lsp(m,posi,posj) or nlsp(m,posi,posj) therefore these will read out the lsp and nlsp incorrectly with these, I just used to test gravitino decay formulae.
 int gravonoff = 0; ///a gravitino switch, by default it's off (0), it's turned on (1) a few lines below if the gravitino is the LSP as then decays to it are important, if it's not the LSP decays to it are unimportant as they are Planck suppressed.
 double MPlreduced = 2.4e18; ///Set by hand, could read in a value from softsusy spectrum generator
 int posi = 0, posj = 0;
 double m = mgravitino;
 double LSP = r->lsp(m, posi, posj); ///A number which indicates which type of particle is the LSP
 // LSP = -1; ///Temporary set to gravitino
 if (LSP == -1)     gravonoff = 1; ///< LSP is a gravitino
 else if( LSP > -1 && LSP < 7) gravonoff = 0; ///< LSP is not a gravitino
 else{throw("problem:LSP code not between -1 and 6 - issue reading LSP!");}
 int NLSP = 0; ///default position
 int neutNLSP = 1, upsquNLSP= 1, downsquNLSP = 1, slepNLSP = 1, snuNLSP = 1, gluNLSP = 1; ///Default position is 1 so all SUSY dedcays to LSP gravitino considered unless you only want the NLSP decays to gravitino decays, then if below section uncommented it sets all but NLSP switch to 0.
 
 ///Using the nlsp function from softsusy.cpp, Returns a label which says which particle is NLSP, 0 means NLSP is neutralino, 1=up squark, 2=down squark, 3=sleptons, 4=charginos, 5=sneutrinos, 6=gluino. Uncomment this if you only want the NLSP decays to the LSP gravitino to be considered, note one potential issue with this is particles only slightly heavier than the NLSP may still have only the decay to the LSPgravitino available and this function doesn't take account of this. If this section below is commented all SUSY decays to the LSP gravitino are considered and then they are not output if there BRs are less than BRTol
 NLSP = r->nlsp(m, posi, posj); 
 // fout << "NLSP = " << NLSP << endl;
 // NLSP = 0; /// Temporarily set to neutralino
 // neutNLSP = 0, upsquNLSP= 0, downsquNLSP = 0, slepNLSP = 0, snuNLSP = 0, gluNLSP = 0; /// For scans
 if( NLSP == 0) {
   //    ffout << "NLSP is neutralino" << endl;
   upsquNLSP= 0; downsquNLSP = 0; slepNLSP = 0; snuNLSP = 0; gluNLSP = 0;
 }
 else if (NLSP == 1) {
   //    fout << "NLSP is up squark" << endl;
   neutNLSP = 0; downsquNLSP = 0; slepNLSP = 0; snuNLSP = 0; gluNLSP = 0;
 }
 else if (NLSP == 2) {
   //    fout << "NLSP is down squark" << endl;
   neutNLSP = 0; upsquNLSP= 0; slepNLSP = 0; snuNLSP = 0; gluNLSP = 0;
 }
 else if (NLSP == 3) {
   //    fout << "NLSP is slepton" << endl;
   neutNLSP = 0; upsquNLSP= 0; downsquNLSP = 0; snuNLSP = 0; gluNLSP = 0;
 }
 else if (NLSP == 4) {
   //    fout << "NLSP is chargino - WARNING chargino NLSP decays to gravitino LSP not included in program!" << endl;
   neutNLSP = 0; upsquNLSP= 0; downsquNLSP = 0; slepNLSP = 0; snuNLSP = 0; gluNLSP = 0;
 }
 else if (NLSP == 5) {
   //    fout << "NLSP is sneutrino" << endl;
   neutNLSP = 0; upsquNLSP= 0; downsquNLSP = 0; slepNLSP = 0; gluNLSP = 0;
 }
 else if (NLSP == 6) {
   //    fout << "NLSP is gluino" << endl;
   neutNLSP = 0; upsquNLSP= 0; downsquNLSP = 0; slepNLSP = 0; snuNLSP = 0;
 }
 else{throw("problem:NLSP code not between 0 and 6 - issue reading NLSP!");}
 
 ///Obtaining the CKM Matrix from Yukawa Matrices:
 DoubleMatrix YUU(3,3), YDD(3,3), YEE(3,3);
 
 YUU = r->displayYukawaMatrix(YU); YDD = r->displayYukawaMatrix(YD); YEE = r->displayYukawaMatrix(YE);
 
 DoubleMatrix u(3, 3), v(3, 3), vul(3,3), vur(3,3), vdl(3,3), vdr(3,3), vel(3,3), ver(3,3);
 DoubleVector ydDiag(3), yuDiag(3), yeDiag(3);
 r->displayYukawaMatrix(YU).diagonalise(u, v, yuDiag);
 vul = u.transpose(); vur = v.transpose();
 
 r->displayYukawaMatrix(YD).diagonalise(u, v, ydDiag);
 vdl = u.transpose(); vdr = v.transpose();
 
 r->displayYukawaMatrix(YE).diagonalise(u, v, yeDiag);
 vel = u.transpose(); ver = v.transpose();
 
 DoubleMatrix I3(3,3);
 for (int i=1; i<=3; i++) {
   for (int j=1; j<=3; j++) {
     if (i==j) {I3(i,j) = 1;}
     else {I3(i,j) = 0;}
   }
 }

 ///Form hermitian conjugate of vdl - only need to transpose as must be real as taken Yukawa matrices as real:
 DoubleMatrix vdlT = vdl.transpose();
 DoubleMatrix VCKM = vul*vdlT; ///CKM only used so far in H+ decays to q q'bar, otherwise taken as diagonal
 DoubleMatrix Vu(3,3), Uu(3,3), yu(3,3), Vd(3,3), Ud(3,3), yd(3,3), Ve(3,3), Ue(3,3), ye(3,3);
 
 ///Define Particle PDG codes - for SLHA output of decay tables
 double PDGdown = 1, PDGup = 2, PDGstrange = 3, PDGcharm = 4, PDGbottom = 5, PDGtop = 6;
 double PDGelectron = 11, PDGnuelectron = 12, PDGmuon = 13, PDGnumuon = 14, PDGtau = 15, PDGnutau = 16, PDGgluon = 21, PDGphoton = 22, PDGZboson = 23, PDGWplus = 24, PDGh0 = 25, PDGH0 = 35, PDGA0 = 36, PDGHplus = 37;
 double PDGsdownL = 1000001, PDGsupL = 1000002, PDGsstrangeL = 1000003, PDGscharmL = 1000004, PDGsbottom1 = 1000005, PDGstop1 = 1000006;  double PDGselectronL = 1000011, PDGnuselectronL = 1000012, PDGsmuonL = 1000013, PDGnusmuonL = 1000014, PDGstau1 = 1000015, PDGnustauL = 1000016;
 double PDGgluino = 1000021, PDGneutralino1 = 1000022, PDGneutralino2 = 1000023, PDGchargino1 = 1000024, PDGneutralino3 = 1000025, PDGneutralino4 = 1000035, PDGchargino2 = 1000037;
 double PDGsdownR = 2000001, PDGsupR = 2000002, PDGsstrangeR = 2000003, PDGscharmR = 2000004, PDGsbottom2 = 2000005, PDGstop2 = 2000006;
 double PDGselectronR = 2000011, PDGsmuonR = 2000013, PDGstau2 = 2000015;
 /// double PDGnuselectronR = 2000012, PDGnusmuonR = 2000014, PDGnustauR = 2000016
 double PDGgravitino = 1000039;
 
 ///PDG codes for extra NMSSM particles:
 double PDGA2 = 46, PDGH3 = 45, PDGneutralino5 = 1000045;
 
 double MCH1=mch(1), MCH2=mch(2);
 
 ///Particle class used to store decay info in one place for ease of output into decay tables
 /// Create object ParticleGluino of class Particle, stores all decay info for gluino decays
 Particle ParticleGluino;
 ParticleGluino.name = "Gluino";
 ParticleGluino.PDG = PDGgluino;
 ParticleGluino.mass = mGluino;
 ParticleGluino.No_1to2_Decays = 24;
 ParticleGluino.No_1to3_Decays = 36;
 ParticleGluino.No_grav_Decays = 1;
 ParticleGluino.No_NMSSM_Decays = 0;
 ParticleGluino.No_of_Decays = ParticleGluino.No_1to2_Decays + ParticleGluino.No_1to3_Decays + ParticleGluino.No_grav_Decays;
 ParticleGluino.Array_Decays.resize(ParticleGluino.No_of_Decays);
 for (int i = 0; i < ParticleGluino.No_of_Decays; i++)
   ParticleGluino.Array_Decays[i].resize(6); 
 ParticleGluino.Array_Comments.resize(ParticleGluino.No_of_Decays);
 ParticleGluino.total_width = 0.0; ///initialise to 0
 ParticleGluino.two_width = 0.0;
 ParticleGluino.three_width = 0.0;
 
 /// Create object ParticleSdownL, stores all decay info for sdownL decays
 Particle ParticleSdownL;
 ParticleSdownL.name = "SdownL";
 ParticleSdownL.PDG = PDGsdownL;
 ParticleSdownL.mass = md(1,1);
 ParticleSdownL.No_1to2_Decays = 7;
 ParticleSdownL.No_1to3_Decays = 0;
 ParticleSdownL.No_grav_Decays = 1;
 ParticleSdownL.No_NMSSM_Decays = 1;
 ParticleSdownL.No_of_Decays = ParticleSdownL.No_1to2_Decays + ParticleSdownL.No_1to3_Decays + ParticleSdownL.No_grav_Decays + ParticleSdownL.No_NMSSM_Decays;
 ParticleSdownL.Array_Decays.resize(ParticleSdownL.No_of_Decays);
 for (int i = 0; i < ParticleSdownL.No_of_Decays; i++)
   ParticleSdownL.Array_Decays[i].resize(6); 
 ParticleSdownL.Array_Comments.resize(ParticleSdownL.No_of_Decays);
 ParticleSdownL.total_width = 0.0; ///initialise to 0
 ParticleSdownL.two_width = 0.0;
 ParticleSdownL.three_width = 0.0;
 
 ///Create object ParticleSdownR, stores all decay info for sdownR decays
 Particle ParticleSdownR;
 ParticleSdownR.name = "SdownR";
 ParticleSdownR.PDG = PDGsdownR;
 ParticleSdownR.mass = md(2,1);
 ParticleSdownR.No_1to2_Decays = 5;
 ParticleSdownR.No_1to3_Decays = 0;
 ParticleSdownR.No_grav_Decays = 1;
 ParticleSdownR.No_NMSSM_Decays = 1;
 ParticleSdownR.No_of_Decays = ParticleSdownR.No_1to2_Decays + ParticleSdownR.No_1to3_Decays + ParticleSdownR.No_grav_Decays + ParticleSdownR.No_NMSSM_Decays;
 ParticleSdownR.Array_Decays.resize(ParticleSdownR.No_of_Decays);
 for (int i = 0; i < ParticleSdownR.No_of_Decays; i++)
   ParticleSdownR.Array_Decays[i].resize(6);
 ParticleSdownR.Array_Comments.resize(ParticleSdownR.No_of_Decays);
 ParticleSdownR.total_width = 0.0; ///initialise to 0
 ParticleSdownR.two_width = 0.0;
 ParticleSdownR.three_width = 0.0;

 ///Create object ParticleSupL, stores all decay info for supL decays
 Particle ParticleSupL;
 ParticleSupL.name = "SupL";
 ParticleSupL.PDG = PDGsupL;
 ParticleSupL.mass = mu(1,1);
 ParticleSupL.No_1to2_Decays = 7;
 ParticleSupL.No_1to3_Decays = 0;
 ParticleSupL.No_grav_Decays = 1;
 ParticleSupL.No_NMSSM_Decays = 1;
 ParticleSupL.No_of_Decays = ParticleSupL.No_1to2_Decays + ParticleSupL.No_1to3_Decays + ParticleSupL.No_grav_Decays + ParticleSupL.No_NMSSM_Decays;
 ParticleSupL.Array_Decays.resize(ParticleSupL.No_of_Decays);
 for (int i = 0; i < ParticleSupL.No_of_Decays; i++)
   ParticleSupL.Array_Decays[i].resize(6);
 ParticleSupL.Array_Comments.resize(ParticleSupL.No_of_Decays);
 ParticleSupL.total_width = 0.0; ///initialise to 0
 ParticleSupL.two_width = 0.0;
 ParticleSupL.three_width = 0.0;
 
 ///Create object ParticleSupR, stores all decay info for supR decays
 Particle ParticleSupR;
 ParticleSupR.name = "SupR";
 ParticleSupR.PDG = PDGsupR;
 ParticleSupR.mass = mu(1,1);
 ParticleSupR.No_1to2_Decays = 5;
 ParticleSupR.No_1to3_Decays = 0;
 ParticleSupR.No_grav_Decays = 1;
 ParticleSupR.No_NMSSM_Decays = 1;
 ParticleSupR.No_of_Decays = ParticleSupR.No_1to2_Decays + ParticleSupR.No_1to3_Decays + ParticleSupR.No_grav_Decays + ParticleSupR.No_NMSSM_Decays;
 ParticleSupR.Array_Decays.resize(ParticleSupR.No_of_Decays);
 for (int i = 0; i < ParticleSupR.No_of_Decays; i++)
   ParticleSupR.Array_Decays[i].resize(6);
 ParticleSupR.Array_Comments.resize(ParticleSupR.No_of_Decays);
 ParticleSupR.total_width = 0.0; ///initialise to 0
 ParticleSupR.two_width = 0.0;
 ParticleSupR.three_width = 0.0;

 ///Create object ParticleSstrangeL, stores all decay info for sstrangeL decays
 Particle ParticleSstrangeL;
 ParticleSstrangeL.name = "SstrangeL";
 ParticleSstrangeL.PDG = PDGsstrangeL;
 ParticleSstrangeL.mass = md(2,1);
 ParticleSstrangeL.No_1to2_Decays = 7;
 ParticleSstrangeL.No_1to3_Decays = 0;
 ParticleSstrangeL.No_grav_Decays = 1;
 ParticleSstrangeL.No_NMSSM_Decays = 1;
 ParticleSstrangeL.No_of_Decays = ParticleSstrangeL.No_1to2_Decays + ParticleSstrangeL.No_1to3_Decays + ParticleSstrangeL.No_grav_Decays+ ParticleSstrangeL.No_NMSSM_Decays;
 ParticleSstrangeL.Array_Decays.resize(ParticleSstrangeL.No_of_Decays);
 for (int i = 0; i < ParticleSstrangeL.No_of_Decays; i++)
   ParticleSstrangeL.Array_Decays[i].resize(6);
 ParticleSstrangeL.Array_Comments.resize(ParticleSstrangeL.No_of_Decays);
 ParticleSstrangeL.total_width = 0.0; //initialise to 0
 ParticleSstrangeL.two_width = 0.0;
 ParticleSstrangeL.three_width = 0.0;

 ///Create object ParticleSstrangeR, stores all decay info for sstrangeR decays
 Particle ParticleSstrangeR;
 ParticleSstrangeR.name = "SstrangeR";
 ParticleSstrangeR.PDG = PDGsstrangeR;
 ParticleSstrangeR.mass = md(2,2);
 ParticleSstrangeR.No_1to2_Decays = 5;
 ParticleSstrangeR.No_1to3_Decays = 0;
 ParticleSstrangeR.No_grav_Decays = 1;
 ParticleSstrangeR.No_NMSSM_Decays = 1;
 ParticleSstrangeR.No_of_Decays = ParticleSstrangeR.No_1to2_Decays + ParticleSstrangeR.No_1to3_Decays + ParticleSstrangeR.No_grav_Decays+ ParticleSstrangeR.No_NMSSM_Decays;
 ParticleSstrangeR.Array_Decays.resize(ParticleSstrangeR.No_of_Decays);
 for (int i = 0; i < ParticleSstrangeR.No_of_Decays; i++)
   ParticleSstrangeR.Array_Decays[i].resize(6); 
 ParticleSstrangeR.Array_Comments.resize(ParticleSstrangeR.No_of_Decays);
 ParticleSstrangeR.total_width = 0.0; //initialise to 0
 ParticleSstrangeR.two_width = 0.0;
 ParticleSstrangeR.three_width = 0.0;
 
 ///Create object ParticleScharmL, stores all decay info for scharmL decays
 Particle ParticleScharmL;
 ParticleScharmL.name = "ScharmL";
 ParticleScharmL.PDG = PDGscharmL;
 ParticleScharmL.mass = mu(1,2);
 ParticleScharmL.No_1to2_Decays = 7;
 ParticleScharmL.No_1to3_Decays = 0;
 ParticleScharmL.No_grav_Decays = 1;
 ParticleScharmL.No_NMSSM_Decays = 1;
 ParticleScharmL.No_of_Decays = ParticleScharmL.No_1to2_Decays + ParticleScharmL.No_1to3_Decays + ParticleScharmL.No_grav_Decays + ParticleScharmL.No_NMSSM_Decays;
 ParticleScharmL.Array_Decays.resize(ParticleScharmL.No_of_Decays);
 for (int i = 0; i < ParticleScharmL.No_of_Decays; i++)
   ParticleScharmL.Array_Decays[i].resize(6);
 ParticleScharmL.Array_Comments.resize(ParticleScharmL.No_of_Decays);
 ParticleScharmL.total_width = 0.0; //initialise to 0
 ParticleScharmL.two_width = 0.0;
 ParticleScharmL.three_width = 0.0;

 ///Create object ParticleScharmR, stores all decay info for scharmR decays
 Particle ParticleScharmR;
 ParticleScharmR.name = "ScharmR";
 ParticleScharmR.PDG = PDGscharmR;
 ParticleScharmR.mass = mu(2,2);
 ParticleScharmR.No_1to2_Decays = 5;
 ParticleScharmR.No_1to3_Decays = 0;
 ParticleScharmR.No_grav_Decays = 1;
 ParticleScharmR.No_NMSSM_Decays = 1;
 ParticleScharmR.No_of_Decays = ParticleScharmR.No_1to2_Decays + ParticleScharmR.No_1to3_Decays + ParticleScharmR.No_grav_Decays + ParticleScharmR.No_NMSSM_Decays;
 ParticleScharmR.Array_Decays.resize(ParticleScharmR.No_of_Decays);
 for (int i = 0; i < ParticleScharmR.No_of_Decays; i++)
   ParticleScharmR.Array_Decays[i].resize(6); 
 ParticleScharmR.Array_Comments.resize(ParticleScharmR.No_of_Decays);
 ParticleScharmR.total_width = 0.0; //initialise to 0
 ParticleScharmR.two_width = 0.0;
 ParticleScharmR.three_width = 0.0;

 ///Create object ParticleSbottom1, stores all decay info for sbottom1 decays
 Particle ParticleSbottom1;
 ParticleSbottom1.name = "Sbottom1";
 ParticleSbottom1.PDG = PDGsbottom1;
 ParticleSbottom1.mass = md(1,3);
 ParticleSbottom1.No_1to2_Decays = 11;
 ParticleSbottom1.No_1to3_Decays = 0;
 ParticleSbottom1.No_grav_Decays = 1;
 ParticleSbottom1.No_NMSSM_Decays = 1;
 ParticleSbottom1.No_of_Decays = ParticleSbottom1.No_1to2_Decays + ParticleSbottom1.No_1to3_Decays + ParticleSbottom1.No_grav_Decays + ParticleSbottom1.No_NMSSM_Decays;
 ParticleSbottom1.Array_Decays.resize(ParticleSbottom1.No_of_Decays);
 for (int i = 0; i < ParticleSbottom1.No_of_Decays; i++)
   ParticleSbottom1.Array_Decays[i].resize(6);
 ParticleSbottom1.Array_Comments.resize(ParticleSbottom1.No_of_Decays);
 ParticleSbottom1.total_width = 0.0; //initialise to 0
 ParticleSbottom1.two_width = 0.0;
 ParticleSbottom1.three_width = 0.0;

 ///Create object ParticleSbottom2, stores all decay info for sbottom2 decays
 Particle ParticleSbottom2;
 ParticleSbottom2.name = "Sbottom2";
 ParticleSbottom2.PDG = PDGsbottom2;
 ParticleSbottom2.mass = md(2,3);
 ParticleSbottom2.No_1to2_Decays = 15;
 ParticleSbottom2.No_1to3_Decays = 0;
 ParticleSbottom2.No_grav_Decays = 1;
 ParticleSbottom2.No_NMSSM_Decays = 3;
 ParticleSbottom2.No_of_Decays = ParticleSbottom2.No_1to2_Decays + ParticleSbottom2.No_1to3_Decays + ParticleSbottom2.No_grav_Decays + ParticleSbottom2.No_NMSSM_Decays;
 ParticleSbottom2.Array_Decays.resize(ParticleSbottom2.No_of_Decays);
 for (int i = 0; i < ParticleSbottom2.No_of_Decays; i++)
   ParticleSbottom2.Array_Decays[i].resize(6);
 ParticleSbottom2.Array_Comments.resize(ParticleSbottom2.No_of_Decays);
 ParticleSbottom2.total_width = 0.0; //initialise to 0
 ParticleSbottom2.two_width = 0.0;
 ParticleSbottom2.three_width = 0.0;

 ///Create object ParticleStop1, stores all decay info for stop1 decays
 Particle ParticleStop1;
 ParticleStop1.name = "Stop1";
 ParticleStop1.PDG = PDGstop1;
 ParticleStop1.mass = mu(1,3);
 ParticleStop1.No_1to2_Decays = 11;
 ParticleStop1.No_1to3_Decays = 0;
 ParticleStop1.No_grav_Decays = 1;
 ParticleStop1.No_NMSSM_Decays = 1;
 ParticleStop1.No_of_Decays = ParticleStop1.No_1to2_Decays + ParticleStop1.No_1to3_Decays + ParticleStop1.No_grav_Decays + ParticleStop1.No_NMSSM_Decays;
 ParticleStop1.Array_Decays.resize(ParticleStop1.No_of_Decays);
 for (int i = 0; i < ParticleStop1.No_of_Decays; i++)
   ParticleStop1.Array_Decays[i].resize(6);
 ParticleStop1.Array_Comments.resize(ParticleStop1.No_of_Decays);
 ParticleStop1.total_width = 0.0; //initialise to 0
 ParticleStop1.two_width = 0.0;
 ParticleStop1.three_width = 0.0;

 ///Create object ParticleStop2, stores all decay info for stop2 decays
 Particle ParticleStop2;
 ParticleStop2.name = "Stop2";
 ParticleStop2.PDG = PDGstop2;
 ParticleStop2.mass = mu(2,3);
 ParticleStop2.No_1to2_Decays = 15;
 ParticleStop2.No_1to3_Decays = 0;
 ParticleStop2.No_grav_Decays = 1;
 ParticleStop2.No_NMSSM_Decays = 3;
 ParticleStop2.No_of_Decays = ParticleStop2.No_1to2_Decays + ParticleStop2.No_1to3_Decays + ParticleStop2.No_grav_Decays + ParticleStop2.No_NMSSM_Decays;
 ParticleStop2.Array_Decays.resize(ParticleStop2.No_of_Decays);
 for (int i = 0; i < ParticleStop2.No_of_Decays; i++)
   ParticleStop2.Array_Decays[i].resize(6);
 ParticleStop2.Array_Comments.resize(ParticleStop2.No_of_Decays);
 ParticleStop2.total_width = 0.0; //initialise to 0
 ParticleStop2.two_width = 0.0;
 ParticleStop2.three_width = 0.0;

 ///Create object ParticleSelectonL, stores all decay info for selectronL decays
 Particle ParticleSelectronL;
 ParticleSelectronL.name = "SelectronL";
 ParticleSelectronL.PDG = PDGselectronL;
 ParticleSelectronL.mass = me(1,1);
 ParticleSelectronL.No_1to2_Decays = 6;
 ParticleSelectronL.No_1to3_Decays = 0;
 ParticleSelectronL.No_grav_Decays = 1;
 ParticleSelectronL.No_NMSSM_Decays = 1;
 ParticleSelectronL.No_of_Decays = ParticleSelectronL.No_1to2_Decays + ParticleSelectronL.No_1to3_Decays + ParticleSelectronL.No_grav_Decays + ParticleSelectronL.No_NMSSM_Decays;
 ParticleSelectronL.Array_Decays.resize(ParticleSelectronL.No_of_Decays);
 for (int i = 0; i < ParticleSelectronL.No_of_Decays; i++)
   ParticleSelectronL.Array_Decays[i].resize(6);
 ParticleSelectronL.Array_Comments.resize(ParticleSelectronL.No_of_Decays);
 ParticleSelectronL.total_width = 0.0;
 ParticleSelectronL.two_width = 0.0;
 ParticleSelectronL.three_width = 0.0;

 ///Create object ParticleSelectronR, stores all decay info for selectronR decays
 Particle ParticleSelectronR;
 ParticleSelectronR.name = "SelectronR";
 ParticleSelectronR.PDG = PDGselectronR;
 ParticleSelectronR.mass = me(2,1);
 ParticleSelectronR.No_1to2_Decays = 4;
 ParticleSelectronR.No_1to3_Decays = 0;
 ParticleSelectronR.No_grav_Decays = 1;
 ParticleSelectronR.No_NMSSM_Decays = 1;
 ParticleSelectronR.No_of_Decays = ParticleSelectronR.No_1to2_Decays + ParticleSelectronR.No_1to3_Decays + ParticleSelectronR.No_grav_Decays + ParticleSelectronR.No_NMSSM_Decays;
 ParticleSelectronR.Array_Decays.resize(ParticleSelectronR.No_of_Decays);
 for (int i = 0; i < ParticleSelectronR.No_of_Decays; i++)
   ParticleSelectronR.Array_Decays[i].resize(6);
 ParticleSelectronR.Array_Comments.resize(ParticleSelectronR.No_of_Decays);
 ParticleSelectronR.total_width = 0.0;
 ParticleSelectronR.two_width = 0.0;
 ParticleSelectronR.three_width = 0.0;

 ///Create object ParticleSmuonL, stores all decay info for smuonL decays
 Particle ParticleSmuonL;
 ParticleSmuonL.name = "SmuonL";
 ParticleSmuonL.PDG = PDGsmuonL;
 ParticleSmuonL.mass = me(1,2);
 ParticleSmuonL.No_1to2_Decays = 6;
 ParticleSmuonL.No_1to3_Decays = 0;
 ParticleSmuonL.No_grav_Decays = 1;
 ParticleSmuonL.No_NMSSM_Decays = 1;
 ParticleSmuonL.No_of_Decays = ParticleSmuonL.No_1to2_Decays + ParticleSmuonL.No_1to3_Decays + ParticleSmuonL.No_grav_Decays + ParticleSmuonL.No_NMSSM_Decays;
 ParticleSmuonL.Array_Decays.resize(ParticleSmuonL.No_of_Decays);
 for (int i = 0; i < ParticleSmuonL.No_of_Decays; i++)
   ParticleSmuonL.Array_Decays[i].resize(6);
 ParticleSmuonL.Array_Comments.resize(ParticleSmuonL.No_of_Decays);
 ParticleSmuonL.total_width = 0.0;
 ParticleSmuonL.two_width = 0.0;
 ParticleSmuonL.three_width = 0.0;

 ///Create object ParticleSmuonR, stores all decay info for smuonR decays
 Particle ParticleSmuonR;
 ParticleSmuonR.name = "SmuonR";
 ParticleSmuonR.PDG = PDGsmuonR;
 ParticleSmuonR.mass = me(2,2);
 ParticleSmuonR.No_1to2_Decays = 4;
 ParticleSmuonR.No_1to3_Decays = 0;
 ParticleSmuonR.No_grav_Decays = 1;
 ParticleSmuonR.No_NMSSM_Decays = 1;
 ParticleSmuonR.No_of_Decays = ParticleSmuonR.No_1to2_Decays + ParticleSmuonR.No_1to3_Decays + ParticleSmuonR.No_grav_Decays + ParticleSmuonR.No_NMSSM_Decays;
 ParticleSmuonR.Array_Decays.resize(ParticleSmuonR.No_of_Decays);
 for (int i = 0; i < ParticleSmuonR.No_of_Decays; i++)
   ParticleSmuonR.Array_Decays[i].resize(6);
 ParticleSmuonR.Array_Comments.resize(ParticleSmuonR.No_of_Decays);
 ParticleSmuonR.total_width = 0.0;
 ParticleSmuonR.two_width = 0.0;
 ParticleSmuonR.three_width = 0.0;

 ///Create object ParticleSnue, stores all decay info for selectron sneutrino decays
 Particle ParticleSnue;
 ParticleSnue.name = "Selectron sneutrino";
 ParticleSnue.PDG = PDGnuselectronL;
 ParticleSnue.mass = msnu(1);
 ParticleSnue.No_1to2_Decays = 6;
 ParticleSnue.No_1to3_Decays = 0;
 ParticleSnue.No_grav_Decays = 1;
 ParticleSnue.No_NMSSM_Decays = 1;
 ParticleSnue.No_of_Decays = ParticleSnue.No_1to2_Decays + ParticleSnue.No_1to3_Decays + ParticleSnue.No_grav_Decays + ParticleSnue.No_NMSSM_Decays;
 ParticleSnue.Array_Decays.resize(ParticleSnue.No_of_Decays);
 for (int i = 0; i < ParticleSnue.No_of_Decays; i++)
    ParticleSnue.Array_Decays[i].resize(6);
 ParticleSnue.Array_Comments.resize(ParticleSnue.No_of_Decays);
 ParticleSnue.total_width = 0.0;
 ParticleSnue.two_width = 0.0;
 ParticleSnue.three_width = 0.0;

 ///Create object ParticleSnumu, stores all decay info for snumu decays
 Particle ParticleSnumu;
 ParticleSnumu.name = "Smuon sneutrino";
 ParticleSnumu.PDG = PDGnusmuonL;
 ParticleSnumu.mass = msnu(2);
 ParticleSnumu.No_1to2_Decays = 6;
 ParticleSnumu.No_1to3_Decays = 0;
 ParticleSnumu.No_grav_Decays = 1;
 ParticleSnumu.No_NMSSM_Decays = 1;
 ParticleSnumu.No_of_Decays = ParticleSnumu.No_1to2_Decays + ParticleSnumu.No_1to3_Decays + ParticleSnumu.No_grav_Decays + ParticleSnumu.No_NMSSM_Decays;
 ParticleSnumu.Array_Decays.resize(ParticleSnumu.No_of_Decays);
 for (int i = 0; i < ParticleSnumu.No_of_Decays; i++)
   ParticleSnumu.Array_Decays[i].resize(6);
 ParticleSnumu.Array_Comments.resize(ParticleSnumu.No_of_Decays);
 ParticleSnumu.total_width = 0.0;
 ParticleSnumu.two_width = 0.0;
 ParticleSnumu.three_width = 0.0;
 
 ///Create object ParticleStau1, stores all decay info for stau1 decays
 Particle ParticleStau1;
 ParticleStau1.name = "Stau1";
 ParticleStau1.PDG = PDGstau1;
 ParticleStau1.mass = me(1,3);
 ParticleStau1.No_1to2_Decays = 8;
 ParticleStau1.No_1to3_Decays = 0;
 ParticleStau1.No_grav_Decays = 1;
 ParticleStau1.No_NMSSM_Decays = 1;
 ParticleStau1.No_of_Decays = ParticleStau1.No_1to2_Decays + ParticleStau1.No_1to3_Decays + ParticleStau1.No_grav_Decays + ParticleStau1.No_NMSSM_Decays;
 ParticleStau1.Array_Decays.resize(ParticleStau1.No_of_Decays);
 for (int i = 0; i < ParticleStau1.No_of_Decays; i++)
   ParticleStau1.Array_Decays[i].resize(6);
 ParticleStau1.Array_Comments.resize(ParticleStau1.No_of_Decays);
 ParticleStau1.total_width = 0.0;
 ParticleStau1.two_width = 0.0;
 ParticleStau1.three_width = 0.0;

 ///Create object ParticleStau2, stores all decay info for stau2 decays
 Particle ParticleStau2;
 ParticleStau2.name = "Stau2";
 ParticleStau2.PDG = PDGstau2;
 ParticleStau2.mass = me(2,3);
 ParticleStau2.No_1to2_Decays = 12;
 ParticleStau2.No_1to3_Decays = 0;
 ParticleStau2.No_grav_Decays = 1;
 ParticleStau2.No_NMSSM_Decays = 3;
 ParticleStau2.No_of_Decays = ParticleStau2.No_1to2_Decays + ParticleStau2.No_1to3_Decays + ParticleStau2.No_grav_Decays + ParticleStau2.No_NMSSM_Decays;
 ParticleStau2.Array_Decays.resize(ParticleStau2.No_of_Decays);
 for (int i = 0; i < ParticleStau2.No_of_Decays; i++)
   ParticleStau2.Array_Decays[i].resize(6);
 ParticleStau2.Array_Comments.resize(ParticleStau2.No_of_Decays);
 ParticleStau2.total_width = 0.0;
 ParticleStau2.two_width = 0.0;
 ParticleStau2.three_width = 0.0;
  
 ///Create object ParticleSnutau, stores all decay info for snutau decays
 Particle ParticleSnutau;
 ParticleSnutau.name = "Stau sneutrino";
 ParticleSnutau.PDG = PDGnustauL;
 ParticleSnutau.mass = msnu(3);
 ParticleSnutau.No_1to2_Decays = 10;
 ParticleSnutau.No_1to3_Decays = 0;
 ParticleSnutau.No_grav_Decays = 1;
 ParticleSnutau.No_NMSSM_Decays = 1;
 ParticleSnutau.No_of_Decays = ParticleSnutau.No_1to2_Decays + ParticleSnutau.No_1to3_Decays + ParticleSnutau.No_grav_Decays + ParticleSnutau.No_NMSSM_Decays;
 ParticleSnutau.Array_Decays.resize(ParticleSnutau.No_of_Decays);
 for (int i = 0; i < ParticleSnutau.No_of_Decays; i++)
   ParticleSnutau.Array_Decays[i].resize(6);
 ParticleSnutau.Array_Comments.resize(ParticleSnutau.No_of_Decays);
 ParticleSnutau.total_width = 0.0;
 ParticleSnutau.two_width = 0.0;
 ParticleSnutau.three_width = 0.0;
  
 ///Create object ParticleChargino1, stores all decay info for chargino1 decays
 Particle ParticleChargino1;
 ParticleChargino1.name = "Chargino 1+ (lightest)";
 ParticleChargino1.PDG = PDGchargino1;
 ParticleChargino1.mass = MCH1;
 ParticleChargino1.No_1to2_Decays = 23; ///We consider decays of the W1+, the W1- decays then just follow with the same amplitudes but often particles swapped for their anitparticles
 ParticleChargino1.No_1to3_Decays = 20;
 ParticleChargino1.No_grav_Decays = 0;
 ParticleChargino1.No_NMSSM_Decays = 2;
 ParticleChargino1.No_of_Decays = ParticleChargino1.No_1to2_Decays + ParticleChargino1.No_1to3_Decays + ParticleChargino1.No_grav_Decays + ParticleChargino1.No_NMSSM_Decays; 
 ParticleChargino1.Array_Decays.resize(ParticleChargino1.No_of_Decays);
 for (int i = 0; i < ParticleChargino1.No_of_Decays; i++)
   ParticleChargino1.Array_Decays[i].resize(6);
 ParticleChargino1.Array_Comments.resize(ParticleChargino1.No_of_Decays);
 ParticleChargino1.total_width = 0.0;
 ParticleChargino1.two_width = 0.0;
 ParticleChargino1.three_width = 0.0;

 ///Create object ParticleChargino2, stores all decay info for chargino2 decays
 Particle ParticleChargino2;
 ParticleChargino2.name = "Chargino 2+ (heaviest)";
 ParticleChargino2.PDG = PDGchargino2;
 ParticleChargino2.mass = MCH2;
 ParticleChargino2.No_1to2_Decays = 27; /// has 4 additional decays cf chargino 1 as chargino2 -> chargino1 + Z/h/H/A as well
 ParticleChargino2.No_1to3_Decays = 20;
 ParticleChargino2.No_grav_Decays = 0;
 ParticleChargino2.No_NMSSM_Decays = 4;
 ParticleChargino2.No_of_Decays = ParticleChargino2.No_1to2_Decays + ParticleChargino2.No_1to3_Decays + ParticleChargino2.No_grav_Decays + ParticleChargino2.No_NMSSM_Decays;
 ParticleChargino2.Array_Decays.resize(ParticleChargino2.No_of_Decays);
 for (int i = 0; i < ParticleChargino2.No_of_Decays; i++)
   ParticleChargino2.Array_Decays[i].resize(6);
 ParticleChargino2.Array_Comments.resize(ParticleChargino2.No_of_Decays);
 ParticleChargino2.total_width = 0.0;
 ParticleChargino2.two_width = 0.0;
 ParticleChargino2.three_width = 0.0;
 
 ///Create object ParticleNeutralino1, stores all decay info for neutralino1 decays (remember neutralinos are mass-ordered)
 Particle ParticleNeutralino1;
 ParticleNeutralino1.name = "Neutralino1";
 ParticleNeutralino1.PDG = PDGneutralino1;
 ParticleNeutralino1.mass = mneut(1);
 ParticleNeutralino1.No_1to2_Decays = 62;
 ParticleNeutralino1.No_1to3_Decays = 10;
 ParticleNeutralino1.No_grav_Decays = 5;
 ParticleNeutralino1.No_NMSSM_Decays = 0;
 ParticleNeutralino1.No_of_Decays = ParticleNeutralino1.No_1to2_Decays + ParticleNeutralino1.No_1to3_Decays + ParticleNeutralino1.No_grav_Decays + ParticleNeutralino1.No_NMSSM_Decays;
 ParticleNeutralino1.Array_Decays.resize(ParticleNeutralino1.No_of_Decays);
 for (int i = 0; i < ParticleNeutralino1.No_of_Decays; i++)
   ParticleNeutralino1.Array_Decays[i].resize(6);
 ParticleNeutralino1.Array_Comments.resize(ParticleNeutralino1.No_of_Decays);
 ParticleNeutralino1.total_width = 0.0;
 ParticleNeutralino1.two_width = 0.0;
 ParticleNeutralino1.three_width = 0.0;

  ///Create object ParticleNeutralino2, stores all decay info for neutralino2 decays (remember neutralinos are mass-ordered)
 Particle ParticleNeutralino2;
 ParticleNeutralino2.name = "Neutralino2";
 ParticleNeutralino2.PDG = PDGneutralino2;
 ParticleNeutralino2.mass = mneut(2);
 ParticleNeutralino2.No_1to2_Decays = 62;
 ParticleNeutralino2.No_1to3_Decays = 12+10; 
 ParticleNeutralino2.No_grav_Decays = 5;
 ParticleNeutralino2.No_NMSSM_Decays = 2;
 ParticleNeutralino2.No_of_Decays = ParticleNeutralino2.No_1to2_Decays + ParticleNeutralino2.No_1to3_Decays + ParticleNeutralino2.No_grav_Decays + ParticleNeutralino2.No_NMSSM_Decays;
 ParticleNeutralino2.Array_Decays.resize(ParticleNeutralino2.No_of_Decays);
 for (int i = 0; i < ParticleNeutralino2.No_of_Decays; i++)
   ParticleNeutralino2.Array_Decays[i].resize(6); 
 ParticleNeutralino2.Array_Comments.resize(ParticleNeutralino2.No_of_Decays);
 ParticleNeutralino2.total_width = 0.0;
 ParticleNeutralino2.two_width = 0.0;
 ParticleNeutralino2.three_width = 0.0;
 
 ///Create object ParticleNeutralino3, stores all decay info for neutralino3 decays (remember neutralinos are mass-ordered)
 Particle ParticleNeutralino3;
 ParticleNeutralino3.name = "Neutralino3";
 ParticleNeutralino3.PDG = PDGneutralino3;
 ParticleNeutralino3.mass = mneut(3);
 ParticleNeutralino3.No_1to2_Decays = 62;
 ParticleNeutralino3.No_1to3_Decays = 24+10;
 ParticleNeutralino3.No_grav_Decays = 5;
 ParticleNeutralino3.No_NMSSM_Decays = 4;
 ParticleNeutralino3.No_of_Decays = ParticleNeutralino3.No_1to2_Decays + ParticleNeutralino3.No_1to3_Decays + ParticleNeutralino3.No_grav_Decays + ParticleNeutralino3.No_NMSSM_Decays;
 ParticleNeutralino3.Array_Decays.resize(ParticleNeutralino3.No_of_Decays);
 for (int i = 0; i < ParticleNeutralino3.No_of_Decays; i++)
   ParticleNeutralino3.Array_Decays[i].resize(6);
 ParticleNeutralino3.Array_Comments.resize(ParticleNeutralino3.No_of_Decays);
 ParticleNeutralino3.total_width = 0.0;
 ParticleNeutralino3.two_width = 0.0;
 ParticleNeutralino3.three_width = 0.0;

 ///Create object ParticleNeutralin4, stores all decay info for neutralino4 decays (remember neutralinos are mass-ordered)
 Particle ParticleNeutralino4;
 ParticleNeutralino4.name = "Neutralino4";
 ParticleNeutralino4.PDG = PDGneutralino4;
 ParticleNeutralino4.mass = mneut(4);
 ParticleNeutralino4.No_1to2_Decays = 62;
 ParticleNeutralino4.No_1to3_Decays = 46;
 ParticleNeutralino4.No_grav_Decays = 5;
 ParticleNeutralino4.No_NMSSM_Decays = 6;
 ParticleNeutralino4.No_of_Decays = ParticleNeutralino4.No_1to2_Decays + ParticleNeutralino4.No_1to3_Decays + ParticleNeutralino4.No_grav_Decays + ParticleNeutralino4.No_NMSSM_Decays;
 ParticleNeutralino4.Array_Decays.resize(ParticleNeutralino4.No_of_Decays);
 for (int i = 0; i < ParticleNeutralino4.No_of_Decays; i++)
   ParticleNeutralino4.Array_Decays[i].resize(6);
 ParticleNeutralino4.Array_Comments.resize(ParticleNeutralino4.No_of_Decays);
 ParticleNeutralino4.total_width = 0.0;
 ParticleNeutralino4.two_width = 0.0;
 ParticleNeutralino4.three_width = 0.0;
 
 ///Create object Particlehiggsl, stores all decay info for higgsl (lightest CP even neutral Higgs) decays
 Particle Particlehiggsl;
 Particlehiggsl.name = "light higgs";
 Particlehiggsl.PDG = PDGh0;
 Particlehiggsl.mass = mh0(1);
 Particlehiggsl.No_1to2_Decays = 68;
 Particlehiggsl.No_1to3_Decays = 2;
 Particlehiggsl.No_grav_Decays = 0;
 Particlehiggsl.No_NMSSM_Decays = 9;
 Particlehiggsl.No_of_Decays = Particlehiggsl.No_1to2_Decays + Particlehiggsl.No_1to3_Decays + Particlehiggsl.No_grav_Decays + Particlehiggsl.No_NMSSM_Decays;
 Particlehiggsl.Array_Decays.resize(Particlehiggsl.No_of_Decays);
 for (int i = 0; i < Particlehiggsl.No_of_Decays; i++)
   Particlehiggsl.Array_Decays[i].resize(6);
 Particlehiggsl.Array_Comments.resize(Particlehiggsl.No_of_Decays);
 Particlehiggsl.total_width = 0.0;
 Particlehiggsl.two_width = 0.0;
 Particlehiggsl.three_width = 0.0;

 ///Create object ParticleHiggsH, stores all decay info for HiggsH (heaviest CP even neutral Higgs of MSSM or second heaviest in NMSSM)
 Particle ParticleHiggsH;
 ParticleHiggsH.name = "heavy higgs";
 ParticleHiggsH.PDG = PDGH0;
 ParticleHiggsH.mass = mh0(2);
 ParticleHiggsH.No_1to2_Decays = 70;
 ParticleHiggsH.No_1to3_Decays = 2;
 ParticleHiggsH.No_grav_Decays = 0;
 ParticleHiggsH.No_NMSSM_Decays = 9;
 ParticleHiggsH.No_of_Decays = ParticleHiggsH.No_1to2_Decays + ParticleHiggsH.No_1to3_Decays + ParticleHiggsH.No_grav_Decays + ParticleHiggsH.No_NMSSM_Decays;
 ParticleHiggsH.Array_Decays.resize(ParticleHiggsH.No_of_Decays);
 for (int i = 0; i < ParticleHiggsH.No_of_Decays; i++)
   ParticleHiggsH.Array_Decays[i].resize(6);
 ParticleHiggsH.Array_Comments.resize(ParticleHiggsH.No_of_Decays);
 ParticleHiggsH.total_width = 0.0;
 ParticleHiggsH.two_width = 0.0;
 ParticleHiggsH.three_width = 0.0;

 ///Create object ParticleHiggsA, stores all decay info for HiggsA (CP odd neutral Higgs, or lightest CP odd neutral Higgs in NMSSM)
 Particle ParticleHiggsA;
 ParticleHiggsA.name = "pseudoscalar higgs";
 ParticleHiggsA.PDG = PDGA0;
 ParticleHiggsA.mass = mA0(1);
 ParticleHiggsA.No_1to2_Decays = 47;///Note A cannot decay into alike sfermion antisfermion paris because of CP conservation
 ParticleHiggsA.No_1to3_Decays = 0;
 ParticleHiggsA.No_grav_Decays = 0;
 ParticleHiggsA.No_NMSSM_Decays = 6;
 ParticleHiggsA.No_of_Decays = ParticleHiggsA.No_1to2_Decays + ParticleHiggsA.No_1to3_Decays + ParticleHiggsA.No_grav_Decays + ParticleHiggsA.No_NMSSM_Decays;
 ParticleHiggsA.Array_Decays.resize(ParticleHiggsA.No_of_Decays);
 for (int i = 0; i < ParticleHiggsA.No_of_Decays; i++)
   ParticleHiggsA.Array_Decays[i].resize(6);
 ParticleHiggsA.Array_Comments.resize(ParticleHiggsA.No_of_Decays);
 ParticleHiggsA.total_width = 0.0;
 ParticleHiggsA.two_width = 0.0;
 ParticleHiggsA.three_width = 0.0;

 ///Create object ParticleHiggsplus, stores all decay info for charged Higgs H+
 Particle ParticleHiggsplus;
 ParticleHiggsplus.name = "Charged higgs+";
 ParticleHiggsplus.PDG = PDGHplus;
 ParticleHiggsplus.mass = mHpm;
 ParticleHiggsplus.No_1to2_Decays = 39;
 ParticleHiggsplus.No_1to3_Decays = 0;
 ParticleHiggsplus.No_grav_Decays = 0;
 ParticleHiggsplus.No_NMSSM_Decays = 6;
 ParticleHiggsplus.No_of_Decays = ParticleHiggsplus.No_1to2_Decays + ParticleHiggsplus.No_1to3_Decays + ParticleHiggsplus.No_grav_Decays+ParticleHiggsplus.No_NMSSM_Decays;
 ParticleHiggsplus.Array_Decays.resize(ParticleHiggsplus.No_of_Decays);
 for (int i = 0; i < ParticleHiggsplus.No_of_Decays; i++)
   ParticleHiggsplus.Array_Decays[i].resize(6);
 ParticleHiggsplus.Array_Comments.resize(ParticleHiggsplus.No_of_Decays);
 ParticleHiggsplus.total_width = 0.0;
 ParticleHiggsplus.two_width = 0.0;
 ParticleHiggsplus.three_width = 0.0;
 
 ///Create also objects for NMSSM particles:
 ///Create object ParticleHiggsA2, stores all decay info for HiggsA2 (heaviest CP odd neutral Higgs of NMSSM)
 Particle ParticleHiggsA2;
 ParticleHiggsA2.name = "NMSSM second pseudoscalar higgs";
 ParticleHiggsA2.PDG = PDGA2;
 ParticleHiggsA2.mass = mA0(2);
 ParticleHiggsA2.No_1to2_Decays = 0;
 ParticleHiggsA2.No_1to3_Decays = 0;
 ParticleHiggsA2.No_grav_Decays = 0;
 if (nmssmIsIt == false) { ParticleHiggsA2.No_NMSSM_Decays = 0;}
 else if (nmssmIsIt == true) { ParticleHiggsA2.No_NMSSM_Decays = 56;} ///Number of extra 1->2 decays when in NMSSM (47 like A1 then 5 similarly extra decays to neutralinos + A2 -> h3 Z + 3 A2 -> A1 h decays?????)
 ParticleHiggsA2.No_of_Decays = ParticleHiggsA2.No_1to2_Decays + ParticleHiggsA2.No_1to3_Decays + ParticleHiggsA2.No_grav_Decays + ParticleHiggsA2.No_NMSSM_Decays;
 ParticleHiggsA2.Array_Decays.resize(ParticleHiggsA2.No_of_Decays);
 for (int i = 0; i < ParticleHiggsA2.No_of_Decays; i++)
   ParticleHiggsA2.Array_Decays[i].resize(6);
 ParticleHiggsA2.Array_Comments.resize(ParticleHiggsA2.No_of_Decays);
 ParticleHiggsA2.total_width = 0.0;
 ParticleHiggsA2.two_width = 0.0;
 ParticleHiggsA2.three_width = 0.0;
 
 ///Create object ParticleHiggsH3, stores all decay info for HiggsH3 (Heaviest of the 3 CP even neutral Higgses of the NMSSM)
 Particle ParticleHiggsH3;
 ParticleHiggsH3.name = "NMSSM third scalar higgs";
 ParticleHiggsH3.PDG = PDGH3;
 ParticleHiggsH3.mass = mh0(3);
 ParticleHiggsH3.No_1to2_Decays = 0;
 ParticleHiggsH3.No_1to3_Decays = 2;
 ParticleHiggsH3.No_grav_Decays = 0;
 if (nmssmIsIt == false) { ParticleHiggsH3.No_NMSSM_Decays = 0;}
 else if (nmssmIsIt == true) { ParticleHiggsH3.No_NMSSM_Decays = 81;}
 ParticleHiggsH3.No_of_Decays = ParticleHiggsH3.No_1to2_Decays + ParticleHiggsH3.No_1to3_Decays + ParticleHiggsH3.No_grav_Decays  + ParticleHiggsH3.No_NMSSM_Decays;
 ParticleHiggsH3.Array_Decays.resize(ParticleHiggsH3.No_of_Decays);
 for (int i = 0; i < ParticleHiggsH3.No_of_Decays; i++)
   ParticleHiggsH3.Array_Decays[i].resize(6);
 ParticleHiggsH3.Array_Comments.resize(ParticleHiggsH3.No_of_Decays);
 ParticleHiggsH3.total_width = 0.0;
 ParticleHiggsH3.two_width = 0.0;
 ParticleHiggsH3.three_width = 0.0;

 ///Create object ParticleNeutralino5, stores all decay info for neutralino5 decays (remember neutralinos are mass-ordered, so this is amix of singlino of NMSSM with the usual 4 neutralinos of MSSM)
 Particle ParticleNeutralino5;
 ParticleNeutralino5.name = "Neutralino5";
 ParticleNeutralino5.PDG = PDGneutralino5;
 ParticleNeutralino5.mass = mneut(5);
 ParticleNeutralino5.No_1to2_Decays = 0;
 ParticleNeutralino5.No_1to3_Decays = 0; ///1->3 decays not included in NMSSM, only in MSSM
 ParticleNeutralino5.No_grav_Decays = 0; ///Decays to gravitinos not included in NMSSM, only in MSSM
 if (nmssmIsIt == false) { ParticleNeutralino5.No_NMSSM_Decays = 0;}
 else if (nmssmIsIt == true) { ParticleNeutralino5.No_NMSSM_Decays = 74;} 
 ParticleNeutralino5.No_of_Decays = ParticleNeutralino5.No_1to2_Decays + ParticleNeutralino5.No_1to3_Decays + ParticleNeutralino5.No_grav_Decays + ParticleNeutralino5.No_NMSSM_Decays;
 ParticleNeutralino5.Array_Decays.resize(ParticleNeutralino5.No_of_Decays);
 for (int i = 0; i < ParticleNeutralino5.No_of_Decays; i++)
   ParticleNeutralino5.Array_Decays[i].resize(6);
 ParticleNeutralino5.Array_Comments.resize(ParticleNeutralino5.No_of_Decays);
 ParticleNeutralino5.total_width = 0.0;
 ParticleNeutralino5.two_width = 0.0;
 ParticleNeutralino5.three_width = 0.0;
 
 ///Initialise NeutMIX before using it in the integrals
 for (int i = 1; i<=NeutMIXdim; i++) {
   for (int j = 1; j<=NeutMIXdim; j++) {
     NeutMIX(i,j) = 0;
   }
 }

  NeutMIX = mixNeut;
  g1 = g; g2 = gp; alphamix = alpha; betavac = beta;
  ///Gluino Decays
  if (flaggluino == 1) {

 /// Now need to calculate the partial decays of the gluino
  double gluinoamplitudeupantisupL = 0, gluinoamplitudeupantisupR = 0, gluinoamplitudeantiupsupL = 0, gluinoamplitudeantiupsupR = 0;
  gluinoamplitudeupantisupL = gluinoamplitudedecay(mGluino, mup, mu(1,1), alphas);
  gluinoamplitudeupantisupR = gluinoamplitudedecay (mGluino, mup, mu(2,1), alphas);
  gluinoamplitudeantiupsupL = gluinoamplitudedecay (mGluino, mup, mu(1,1), alphas);
  gluinoamplitudeantiupsupR = gluinoamplitudedecay (mGluino, mup, mu(2,1), alphas);
  
 double gluinoamplitudedownantisdownL = 0, gluinoamplitudedownantisdownR = 0, gluinoamplitudeantidownsdownL = 0, gluinoamplitudeantidownsdownR = 0;
 gluinoamplitudedownantisdownL = gluinoamplitudedecay(mGluino, mdo, md(1,1), alphas);
 gluinoamplitudedownantisdownR = gluinoamplitudedecay(mGluino, mdo, md(2,1), alphas);
 gluinoamplitudeantidownsdownL = gluinoamplitudedecay(mGluino, mdo, md(1,1), alphas);
 gluinoamplitudeantidownsdownR = gluinoamplitudedecay(mGluino, mdo, md(2,1), alphas);
 
 double gluinoamplitudecharmantischarmL = 0, gluinoamplitudecharmantischarmR = 0, gluinoamplitudeanticharmscharmL = 0, 	gluinoamplitudeanticharmscharmR = 0;
 gluinoamplitudecharmantischarmL = gluinoamplitudedecay(mGluino, mc, mu(1,2), alphas);
 gluinoamplitudecharmantischarmR = gluinoamplitudedecay(mGluino, mc, mu(2,2), alphas);
 gluinoamplitudeanticharmscharmL = gluinoamplitudedecay(mGluino, mc, mu(1,2), alphas);
 gluinoamplitudeanticharmscharmR = gluinoamplitudedecay(mGluino, mc, mu(2,2), alphas);
 
 double gluinoamplitudestrangeantisstrangeL = 0, gluinoamplitudestrangeantisstrangeR = 0, gluinoamplitudeantistrangesstrangeL = 0, 	gluinoamplitudeantistrangesstrangeR = 0;
 gluinoamplitudestrangeantisstrangeL = gluinoamplitudedecay(mGluino, ms, md(1,2), alphas);
 gluinoamplitudestrangeantisstrangeR = gluinoamplitudedecay(mGluino, ms, md(2,2), alphas);
 gluinoamplitudeantistrangesstrangeL = gluinoamplitudedecay(mGluino, ms, md(1,2), alphas);
 gluinoamplitudeantistrangesstrangeR = gluinoamplitudedecay(mGluino, ms, md(2,2), alphas); 

 double gluinoamplitudetopantistop1 = 0, gluinoamplitudetopantistop2 = 0, gluinoamplitudeantitopstop1 = 0, 	gluinoamplitudeantitopstop2 = 0;
 gluinoamplitudetopantistop1 = gluinoamplitudedecaymix(mGluino, mt, mu(1,3), alphas, 1, thetat);
 gluinoamplitudetopantistop2 = gluinoamplitudedecaymix(mGluino, mt, mu(2,3), alphas, 2, thetat);
 gluinoamplitudeantitopstop1 = gluinoamplitudedecaymix(mGluino, mt, mu(1,3), alphas, 1, thetat);
 gluinoamplitudeantitopstop2 = gluinoamplitudedecaymix(mGluino, mt, mu(2,3), alphas, 2, thetat);

 double gluinoamplitudebottomantisbottom1 = 0, gluinoamplitudebottomantisbottom2 = 0, gluinoamplitudeantibottomsbottom1 = 0, 	gluinoamplitudeantibottomsbottom2 = 0;
 gluinoamplitudebottomantisbottom1 = gluinoamplitudedecaymix(mGluino, mb, md(1,3), alphas, 1, thetab);
 gluinoamplitudebottomantisbottom2 = gluinoamplitudedecaymix(mGluino, mb, md(2,3), alphas, 2, thetab);
 gluinoamplitudeantibottomsbottom1 = gluinoamplitudedecaymix(mGluino, mb, md(1,3), alphas, 1, thetab);
 gluinoamplitudeantibottomsbottom2 = gluinoamplitudedecaymix(mGluino, mb, md(2,3), alphas, 2, thetab); 

 double gluinoamplitudeneut1uubar = 0, gluinoamplitudeneut2uubar = 0, gluinoamplitudeneut3uubar = 0, gluinoamplitudeneut4uubar = 0, gluinoamplitudeneut1ddbar = 0, gluinoamplitudeneut2ddbar = 0, gluinoamplitudeneut3ddbar = 0, gluinoamplitudeneut4ddbar = 0, gluinoamplitudeneut1ccbar = 0, gluinoamplitudeneut2ccbar = 0, gluinoamplitudeneut3ccbar = 0, gluinoamplitudeneut4ccbar = 0, gluinoamplitudeneut1ssbar = 0, gluinoamplitudeneut2ssbar = 0, gluinoamplitudeneut3ssbar = 0, gluinoamplitudeneut4ssbar = 0, gluinoamplitudeneut1ttbar = 0, gluinoamplitudeneut2ttbar = 0, gluinoamplitudeneut3ttbar = 0, gluinoamplitudeneut4ttbar = 0, gluinoamplitudeneut1bbbar = 0, gluinoamplitudeneut2bbbar = 0, gluinoamplitudeneut3bbbar = 0, gluinoamplitudeneut4bbbar = 0, gluinoamplitudegravitinogluon = 0;
 
 ///1 to 3 decays of gluinos to neutralinos and first two gen quarks via dgauss method:
 gluinoamplitudeneut1uubar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(1), mu(1,1), mu(2,1), mup, g, gp, mixNeut, alphas, 'u', 1, onetothree);
 gluinoamplitudeneut2uubar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(2), mu(1,1), mu(2,1), mup, g, gp, mixNeut, alphas, 'u', 2, onetothree);
 gluinoamplitudeneut3uubar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(3), mu(1,1), mu(2,1), mup, g, gp, mixNeut, alphas, 'u', 3, onetothree);
 gluinoamplitudeneut4uubar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(4), mu(1,1), mu(2,1), mup, g, gp, mixNeut, alphas, 'u', 4, onetothree);
 gluinoamplitudeneut1ddbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(1), md(1,1), md(2,1), mdo, g, gp, mixNeut, alphas, 'd', 1, onetothree);
 gluinoamplitudeneut2ddbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(2), md(1,1), md(2,1), mdo, g, gp, mixNeut, alphas, 'd', 2, onetothree);
 gluinoamplitudeneut3ddbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(3), md(1,1), md(2,1), mdo, g, gp, mixNeut, alphas, 'd', 3, onetothree);
 gluinoamplitudeneut4ddbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(4), md(1,1), md(2,1), mdo, g, gp, mixNeut, alphas, 'd', 4, onetothree);
 gluinoamplitudeneut1ccbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(1), mu(1,2), mu(2,2), mc, g, gp, mixNeut, alphas, 'u', 1, onetothree);
 gluinoamplitudeneut2ccbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(2), mu(1,2), mu(2,2), mc, g, gp, mixNeut, alphas, 'u', 2, onetothree);
 gluinoamplitudeneut3ccbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(3), mu(1,2), mu(2,2), mc, g, gp, mixNeut, alphas, 'u', 3, onetothree);
 gluinoamplitudeneut4ccbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(4), mu(1,2), mu(2,2), mc, g, gp, mixNeut, alphas, 'u', 4, onetothree);
 gluinoamplitudeneut1ssbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(1), md(1,2), md(2,2), ms, g, gp, mixNeut, alphas, 'd', 1, onetothree);
 gluinoamplitudeneut2ssbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(2), md(1,2), md(2,2), ms, g, gp, mixNeut, alphas, 'd', 2, onetothree);
 gluinoamplitudeneut3ssbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(3), md(1,2), md(2,2), ms, g, gp, mixNeut, alphas, 'd', 3, onetothree);
 gluinoamplitudeneut4ssbar = gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (mGluino, mneut(4), md(1,2), md(2,2), ms, g, gp, mixNeut, alphas, 'd', 4, onetothree);
 
 gluinoamplitudeneut1ttbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, mu(1,3), mu(2,3), mneut(1), mt, runmw, g, gp, thetat, beta, alphas, mixNeut, runmt, 1, onetothree, 't');
 gluinoamplitudeneut2ttbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, mu(1,3), mu(2,3), mneut(2), mt, runmw, g, gp, thetat, beta, alphas, mixNeut, runmt, 2, onetothree, 't'); 
 gluinoamplitudeneut3ttbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, mu(1,3), mu(2,3), mneut(3), mt, runmw, g, gp, thetat, beta, alphas, mixNeut, runmt, 3, onetothree, 't');
 gluinoamplitudeneut4ttbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, mu(1,3), mu(2,3), mneut(4), mt, runmw, g, gp, thetat, beta, alphas, mixNeut, runmt, 4, onetothree, 't');
 gluinoamplitudeneut1bbbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, md(1,3), md(2,3), mneut(1), mb, runmw, g, gp, thetab, beta, alphas, mixNeut, runmb, 1, onetothree, 'b');
 gluinoamplitudeneut2bbbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, md(1,3), md(2,3), mneut(2), mb, runmw, g, gp, thetab, beta, alphas, mixNeut, runmb, 2, onetothree, 'b');
 gluinoamplitudeneut3bbbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, md(1,3), md(2,3), mneut(3), mb, runmw, g, gp, thetab, beta, alphas, mixNeut, runmb, 3, onetothree, 'b'); 
 gluinoamplitudeneut4bbbar = gluinoamplitudedecaydgaussneutralinottbar (mGluino, md(1,3), md(2,3), mneut(4), mb, runmw, g, gp, thetab, beta, alphas, mixNeut, runmb, 4, onetothree, 'b');

 ///Note no 1to3 decays calculated in NMSSM, only in MSSM

 gluinoamplitudegravitinogluon = gluinoamplitudedecaygravitino (mGluino, mgravitino, MPlreduced, gravonoff, gluNLSP);
  
 double gluinoamplitudechar1udbar = 0, gluinoamplitudechar2udbar = 0, gluinoamplitudechar1csbar = 0, gluinoamplitudechar2csbar = 0, gluinoamplitudechar1tbbar = 0, gluinoamplitudechar2tbbar = 0;

 ///1 to 3 decays of gluinos to charginos and q qpbar using dgauss method
 gluinoamplitudechar1udbar = gluinoamplitudedecaydgausscharginoqqpbarfirsttwogen (mGluino, MCH1, mup, mdo, mu(1,1), md(1,1), g, thetaL2, thetaR2, alphas, 1, onetothree);
 gluinoamplitudechar2udbar = gluinoamplitudedecaydgausscharginoqqpbarfirsttwogen (mGluino, MCH2, mup, mdo, mu(1,1), md(1,1), g, thetaL2, thetaR2, alphas, 2, onetothree);
 gluinoamplitudechar1csbar = gluinoamplitudedecaydgausscharginoqqpbarfirsttwogen (mGluino, MCH1, mc, ms, mu(1,2), md(1,2), g, thetaL2, thetaR2, alphas, 1, onetothree);
 gluinoamplitudechar2csbar = gluinoamplitudedecaydgausscharginoqqpbarfirsttwogen (mGluino, MCH2, mc, ms, mu(1,2), md(1,2), g, thetaL2, thetaR2, alphas, 2, onetothree);

  gluinoamplitudechar1tbbar = gluinoamplitudedecaydgausschartbbar (mGluino, mu(1,3), mu(2,3), md(1,3), md(2,3), mt, mb, MCH1, alphas, thetat, thetab, runmw, g, gp, thetaL2, thetaR2, beta, runmt, runmb, 1, onetothree);
  gluinoamplitudechar2tbbar = gluinoamplitudedecaydgausschartbbar (mGluino, mu(1,3), mu(2,3), md(1,3), md(2,3), mt, mb, MCH2, alphas, thetat, thetab, runmw, g, gp, thetaL2, thetaR2, beta, runmt, runmb, 2, onetothree);

 ///Now fill up Array_Decays for the Gluino
 ParticleGluino.Array_Decays[4][0] = PDGup; ParticleGluino.Array_Decays[4][1] = -PDGsupL; ParticleGluino.Array_Decays[4][2] =  gluinoamplitudeupantisupL; ParticleGluino.Array_Decays[4][3] = 2; ParticleGluino.Array_Comments[4] = "# ~g -> u ~u_L*"; 
 ParticleGluino.Array_Decays[5][0] = -PDGup; ParticleGluino.Array_Decays[5][1] = PDGsupL; ParticleGluino.Array_Decays[5][2] = gluinoamplitudeantiupsupL;ParticleGluino.Array_Decays[5][3] = 2; ParticleGluino.Array_Comments[5] = "# ~g -> ub ~u_L";
 ParticleGluino.Array_Decays[6][0] = PDGup;  ParticleGluino.Array_Decays[6][1] = -PDGsupR;  ParticleGluino.Array_Decays[6][2] = gluinoamplitudeupantisupR; ParticleGluino.Array_Decays[6][3] = 2; ParticleGluino.Array_Comments[6] = "# ~g -> u ~u_R*";
 ParticleGluino.Array_Decays[7][0] = -PDGup;  ParticleGluino.Array_Decays[7][1] = PDGsupR;  ParticleGluino.Array_Decays[7][2] = gluinoamplitudeantiupsupR; ParticleGluino.Array_Decays[7][3] = 2; ParticleGluino.Array_Comments[7] = "# ~g -> ub ~u_R";
 ParticleGluino.Array_Decays[0][0] = PDGdown;  ParticleGluino.Array_Decays[0][1] = -PDGsdownL;  ParticleGluino.Array_Decays[0][2] = gluinoamplitudedownantisdownL; ParticleGluino.Array_Decays[0][3] = 2; ParticleGluino.Array_Comments[0] = "# ~g -> d ~d_L*";
 ParticleGluino.Array_Decays[1][0] = -PDGdown;  ParticleGluino.Array_Decays[1][1] = PDGsdownL;  ParticleGluino.Array_Decays[1][2] = gluinoamplitudeantidownsdownL; ParticleGluino.Array_Decays[1][3] = 2; ParticleGluino.Array_Comments[1] = "# ~g -> db ~d_L";
 ParticleGluino.Array_Decays[2][0] = PDGdown;  ParticleGluino.Array_Decays[2][1] = -PDGsdownR;  ParticleGluino.Array_Decays[2][2] = gluinoamplitudedownantisdownR; ParticleGluino.Array_Decays[2][3] = 2; ParticleGluino.Array_Comments[2] = "# ~g -> d ~d_R*";
 ParticleGluino.Array_Decays[3][0] = -PDGdown;  ParticleGluino.Array_Decays[3][1] = PDGsdownR;  ParticleGluino.Array_Decays[3][2] = gluinoamplitudeantidownsdownR; ParticleGluino.Array_Decays[3][3] = 2; ParticleGluino.Array_Comments[3] = "# ~g -> db ~d_R";
 ParticleGluino.Array_Decays[12][0] = PDGcharm;  ParticleGluino.Array_Decays[12][1] = -PDGscharmL;  ParticleGluino.Array_Decays[12][2] = gluinoamplitudecharmantischarmL; ParticleGluino.Array_Decays[12][3] = 2; ParticleGluino.Array_Comments[12] = "# ~g -> c ~c_L*";
 ParticleGluino.Array_Decays[13][0] = -PDGcharm;  ParticleGluino.Array_Decays[13][1] = PDGscharmL;  ParticleGluino.Array_Decays[13][2] = gluinoamplitudeanticharmscharmL; ParticleGluino.Array_Decays[13][3] = 2; ParticleGluino.Array_Comments[13] = "# ~g -> cb ~c_L";
 ParticleGluino.Array_Decays[14][0] = PDGcharm;  ParticleGluino.Array_Decays[14][1] = -PDGscharmR;  ParticleGluino.Array_Decays[14][2] = gluinoamplitudecharmantischarmR; ParticleGluino.Array_Decays[14][3] = 2; ParticleGluino.Array_Comments[14] = "# ~g -> c ~c_R*";
 ParticleGluino.Array_Decays[15][0] = -PDGcharm;  ParticleGluino.Array_Decays[15][1] = PDGscharmR;  ParticleGluino.Array_Decays[15][2] = gluinoamplitudeanticharmscharmR; ParticleGluino.Array_Decays[15][3] = 2; ParticleGluino.Array_Comments[15] = "# ~g -> cb ~c_R";
 ParticleGluino.Array_Decays[8][0] = PDGstrange;  ParticleGluino.Array_Decays[8][1] = -PDGsstrangeL;  ParticleGluino.Array_Decays[8][2]=gluinoamplitudestrangeantisstrangeL; ParticleGluino.Array_Decays[8][3] = 2; ParticleGluino.Array_Comments[8] = "# ~g -> s ~s_L*";
 ParticleGluino.Array_Decays[9][0] = -PDGstrange;  ParticleGluino.Array_Decays[9][1] = PDGsstrangeL;  ParticleGluino.Array_Decays[9][2]=gluinoamplitudeantistrangesstrangeL; ParticleGluino.Array_Decays[9][3] = 2; ParticleGluino.Array_Comments[9] = "# ~g -> sb ~s_L";
 ParticleGluino.Array_Decays[10][0] = PDGstrange;  ParticleGluino.Array_Decays[10][1] = -PDGsstrangeR;  ParticleGluino.Array_Decays[10][2] = gluinoamplitudestrangeantisstrangeR; ParticleGluino.Array_Decays[10][3] = 2; ParticleGluino.Array_Comments[10] = "# ~g -> s ~s_R*";
 ParticleGluino.Array_Decays[11][0] = -PDGstrange;  ParticleGluino.Array_Decays[11][1] = PDGsstrangeR;  ParticleGluino.Array_Decays[11][2] = gluinoamplitudeantistrangesstrangeR; ParticleGluino.Array_Decays[11][3] = 2; ParticleGluino.Array_Comments[11] = "# ~g -> sb ~s_R";
 ParticleGluino.Array_Decays[20][0] = PDGtop;  ParticleGluino.Array_Decays[20][1] = -PDGstop1;  ParticleGluino.Array_Decays[20][2] = gluinoamplitudetopantistop1; ParticleGluino.Array_Decays[20][3] = 2; ParticleGluino.Array_Comments[20] = "# ~g -> t ~t_1*";
 ParticleGluino.Array_Decays[21][0] = -PDGtop;  ParticleGluino.Array_Decays[21][1] = PDGstop1;  ParticleGluino.Array_Decays[21][2] = gluinoamplitudeantitopstop1; ParticleGluino.Array_Decays[21][3] = 2; ParticleGluino.Array_Comments[21] = "# ~g -> tb ~t_1";
 ParticleGluino.Array_Decays[22][0] = PDGtop;  ParticleGluino.Array_Decays[22][1] = -PDGstop2;  ParticleGluino.Array_Decays[22][2] = gluinoamplitudetopantistop2; ParticleGluino.Array_Decays[22][3] = 2; ParticleGluino.Array_Comments[22] = "# ~g -> t ~t_2*";
 ParticleGluino.Array_Decays[23][0] = -PDGtop;  ParticleGluino.Array_Decays[23][1] = PDGstop2;  ParticleGluino.Array_Decays[23][2] = gluinoamplitudeantitopstop2; ParticleGluino.Array_Decays[23][3] = 2; ParticleGluino.Array_Comments[23] = "# ~g -> tb ~t_2";
 ParticleGluino.Array_Decays[16][0] = PDGbottom;  ParticleGluino.Array_Decays[16][1] = -PDGsbottom1;  ParticleGluino.Array_Decays[16][2] = gluinoamplitudebottomantisbottom1; ParticleGluino.Array_Decays[16][3] = 2; ParticleGluino.Array_Comments[16] = "# ~g -> b ~b_1*";
 ParticleGluino.Array_Decays[17][0] = -PDGbottom;  ParticleGluino.Array_Decays[17][1] = PDGsbottom1;  ParticleGluino.Array_Decays[17][2] = gluinoamplitudeantibottomsbottom1; ParticleGluino.Array_Decays[17][3] = 2; ParticleGluino.Array_Comments[17] = "# ~g -> bb ~b_1";
 ParticleGluino.Array_Decays[18][0] = PDGbottom;  ParticleGluino.Array_Decays[18][1] = -PDGsbottom2;  ParticleGluino.Array_Decays[18][2] = gluinoamplitudebottomantisbottom2; ParticleGluino.Array_Decays[18][3] = 2; ParticleGluino.Array_Comments[18] = "# ~g -> b ~b_2*";
 ParticleGluino.Array_Decays[19][0] = -PDGbottom;  ParticleGluino.Array_Decays[19][1] = PDGsbottom2;  ParticleGluino.Array_Decays[19][2] = gluinoamplitudeantibottomsbottom2; ParticleGluino.Array_Decays[19][3] = 2; ParticleGluino.Array_Comments[19] = "# ~g -> bb ~b_2";
 ParticleGluino.Array_Decays[24][0] = PDGgluon; ParticleGluino.Array_Decays[24][1] = PDGgravitino; ParticleGluino.Array_Decays[24][4] = 0; ParticleGluino.Array_Decays[24][2] =  gluinoamplitudegravitinogluon; ParticleGluino.Array_Decays[24][3] = 2; ParticleGluino.Array_Comments[24] = "# ~g -> g ~G";
 ParticleGluino.Array_Decays[25][0] = PDGneutralino1;ParticleGluino.Array_Decays[25][1] = PDGup; ParticleGluino.Array_Decays[25][4] = -PDGup; ParticleGluino.Array_Decays[25][2] = gluinoamplitudeneut1uubar; ParticleGluino.Array_Decays[25][3] = 3; ParticleGluino.Array_Comments[25] = "# ~g -> ~Z1 u ub";
 ParticleGluino.Array_Decays[26][0] = PDGneutralino2;ParticleGluino.Array_Decays[26][1] = PDGup; ParticleGluino.Array_Decays[26][4] = -PDGup; ParticleGluino.Array_Decays[26][2] = gluinoamplitudeneut2uubar; ParticleGluino.Array_Decays[26][3] = 3; ParticleGluino.Array_Comments[26] = "# ~g -> ~Z2 u ub";
 ParticleGluino.Array_Decays[27][0] = PDGneutralino3;ParticleGluino.Array_Decays[27][1] = PDGup; ParticleGluino.Array_Decays[27][4] = -PDGup; ParticleGluino.Array_Decays[27][2] = gluinoamplitudeneut3uubar; ParticleGluino.Array_Decays[27][3] = 3; ParticleGluino.Array_Comments[27] = "# ~g -> ~Z3 u ub";
 ParticleGluino.Array_Decays[28][0] = PDGneutralino4;ParticleGluino.Array_Decays[28][1] = PDGup; ParticleGluino.Array_Decays[28][4] = -PDGup; ParticleGluino.Array_Decays[28][2] = gluinoamplitudeneut4uubar; ParticleGluino.Array_Decays[28][3] = 3; ParticleGluino.Array_Comments[28] = "# ~g -> ~Z4 u ub";
 ParticleGluino.Array_Decays[29][0] = PDGneutralino1;ParticleGluino.Array_Decays[29][1] = PDGdown; ParticleGluino.Array_Decays[29][4] = -PDGdown; ParticleGluino.Array_Decays[29][2] = gluinoamplitudeneut1ddbar; ParticleGluino.Array_Decays[29][3] = 3; ParticleGluino.Array_Comments[29] = "# ~g -> ~Z1 d db";
 ParticleGluino.Array_Decays[30][0] = PDGneutralino2;ParticleGluino.Array_Decays[30][1] = PDGdown; ParticleGluino.Array_Decays[30][4] = -PDGdown; ParticleGluino.Array_Decays[30][2] = gluinoamplitudeneut2ddbar; ParticleGluino.Array_Decays[30][3] = 3; ParticleGluino.Array_Comments[30] = "# ~g -> ~Z2 d db";
 ParticleGluino.Array_Decays[31][0] = PDGneutralino3;ParticleGluino.Array_Decays[31][1] = PDGdown; ParticleGluino.Array_Decays[31][4] = -PDGdown; ParticleGluino.Array_Decays[31][2] = gluinoamplitudeneut3ddbar; ParticleGluino.Array_Decays[31][3] = 3; ParticleGluino.Array_Comments[31] = "# ~g -> ~Z3 d db"; 
 ParticleGluino.Array_Decays[32][0] = PDGneutralino4;ParticleGluino.Array_Decays[32][1] = PDGdown; ParticleGluino.Array_Decays[32][4] = -PDGdown; ParticleGluino.Array_Decays[32][2] = gluinoamplitudeneut4ddbar; ParticleGluino.Array_Decays[32][3] = 3; ParticleGluino.Array_Comments[32] = "# ~g -> ~Z4 d db";
 ParticleGluino.Array_Decays[33][0] = PDGneutralino1;ParticleGluino.Array_Decays[33][1] = PDGcharm; ParticleGluino.Array_Decays[33][4] = -PDGcharm; ParticleGluino.Array_Decays[33][2] = gluinoamplitudeneut1ccbar; ParticleGluino.Array_Decays[33][3] = 3; ParticleGluino.Array_Comments[33] = "# ~g -> ~Z1 c cb";
 ParticleGluino.Array_Decays[34][0] = PDGneutralino2;ParticleGluino.Array_Decays[34][1] = PDGcharm; ParticleGluino.Array_Decays[34][4] = -PDGcharm; ParticleGluino.Array_Decays[34][2] = gluinoamplitudeneut2ccbar; ParticleGluino.Array_Decays[34][3] = 3; ParticleGluino.Array_Comments[34] = "# ~g -> ~Z2 c cb";
 ParticleGluino.Array_Decays[35][0] = PDGneutralino3;ParticleGluino.Array_Decays[35][1] = PDGcharm; ParticleGluino.Array_Decays[35][4] = -PDGcharm; ParticleGluino.Array_Decays[35][2] = gluinoamplitudeneut3ccbar; ParticleGluino.Array_Decays[35][3] = 3; ParticleGluino.Array_Comments[35] = "# ~g -> ~Z3 c cb";
 ParticleGluino.Array_Decays[36][0] = PDGneutralino4;ParticleGluino.Array_Decays[36][1] = PDGcharm; ParticleGluino.Array_Decays[36][4] = -PDGcharm; ParticleGluino.Array_Decays[36][2] = gluinoamplitudeneut4ccbar; ParticleGluino.Array_Decays[36][3] = 3; ParticleGluino.Array_Comments[36] = "# ~g -> ~Z4 c cb";
 ParticleGluino.Array_Decays[37][0] = PDGneutralino1;ParticleGluino.Array_Decays[37][1] = PDGstrange; ParticleGluino.Array_Decays[37][4] = -PDGstrange; ParticleGluino.Array_Decays[37][2] = gluinoamplitudeneut1ssbar; ParticleGluino.Array_Decays[37][3] = 3; ParticleGluino.Array_Comments[37] = "# ~g -> ~Z1 s sb";
 ParticleGluino.Array_Decays[38][0] = PDGneutralino2;ParticleGluino.Array_Decays[38][1] = PDGstrange; ParticleGluino.Array_Decays[38][4] = -PDGstrange; ParticleGluino.Array_Decays[38][2] = gluinoamplitudeneut2ssbar; ParticleGluino.Array_Decays[38][3] = 3; ParticleGluino.Array_Comments[38] = "# ~g -> ~Z2 s sb";
 ParticleGluino.Array_Decays[39][0] = PDGneutralino3;ParticleGluino.Array_Decays[39][1] = PDGstrange; ParticleGluino.Array_Decays[39][4] = -PDGstrange; ParticleGluino.Array_Decays[39][2] = gluinoamplitudeneut3ssbar; ParticleGluino.Array_Decays[39][3] = 3; ParticleGluino.Array_Comments[39] = "# ~g -> ~Z3 s sb";
 ParticleGluino.Array_Decays[40][0] = PDGneutralino4;ParticleGluino.Array_Decays[40][1] = PDGstrange; ParticleGluino.Array_Decays[40][4] = -PDGstrange; ParticleGluino.Array_Decays[40][2] = gluinoamplitudeneut4ssbar; ParticleGluino.Array_Decays[40][3] = 3; ParticleGluino.Array_Comments[40] = "# ~g -> ~Z4 s sb";
 ParticleGluino.Array_Decays[41][0] = PDGchargino1;ParticleGluino.Array_Decays[41][1] = PDGup; ParticleGluino.Array_Decays[41][4] = -PDGdown; ParticleGluino.Array_Decays[41][2] = gluinoamplitudechar1udbar; ParticleGluino.Array_Decays[41][3] = 3; ParticleGluino.Array_Comments[41] = "# ~g -> ~W1- u db";
 ParticleGluino.Array_Decays[42][0] = -PDGchargino1;ParticleGluino.Array_Decays[42][1] = PDGdown; ParticleGluino.Array_Decays[42][4] = -PDGup; ParticleGluino.Array_Decays[42][2] = gluinoamplitudechar1udbar; ParticleGluino.Array_Decays[42][3] = 3; ParticleGluino.Array_Comments[42] = "# ~g -> ~W1+ ub d";
 ParticleGluino.Array_Decays[43][0] = PDGchargino1;ParticleGluino.Array_Decays[43][1] = PDGcharm; ParticleGluino.Array_Decays[43][4] = -PDGstrange; ParticleGluino.Array_Decays[43][2] = gluinoamplitudechar1csbar; ParticleGluino.Array_Decays[43][3] = 3; ParticleGluino.Array_Comments[43] = "# ~g -> ~W1- c sb";
 ParticleGluino.Array_Decays[44][0] = -PDGchargino1;ParticleGluino.Array_Decays[44][1] = PDGstrange; ParticleGluino.Array_Decays[44][4] = -PDGcharm; ParticleGluino.Array_Decays[44][2] = gluinoamplitudechar1csbar; ParticleGluino.Array_Decays[44][3] = 3; ParticleGluino.Array_Comments[44] = "# ~g -> ~W1+ cb s";
 ParticleGluino.Array_Decays[45][0] = PDGchargino2;ParticleGluino.Array_Decays[45][1] = PDGup; ParticleGluino.Array_Decays[45][4] = -PDGdown; ParticleGluino.Array_Decays[45][2] = gluinoamplitudechar2udbar; ParticleGluino.Array_Decays[45][3] = 3; ParticleGluino.Array_Comments[45] = "# ~g -> ~W2- u db";
 ParticleGluino.Array_Decays[46][0] = -PDGchargino2;ParticleGluino.Array_Decays[46][1] = PDGdown; ParticleGluino.Array_Decays[46][4] = -PDGup; ParticleGluino.Array_Decays[46][2] = gluinoamplitudechar2udbar; ParticleGluino.Array_Decays[46][3] = 3; ParticleGluino.Array_Comments[46] = "# ~g -> ~W2+ ub d";
 ParticleGluino.Array_Decays[47][0] = PDGchargino2;ParticleGluino.Array_Decays[47][1] = PDGcharm; ParticleGluino.Array_Decays[47][4] = -PDGstrange; ParticleGluino.Array_Decays[47][2] = gluinoamplitudechar2csbar; ParticleGluino.Array_Decays[47][3] = 3; ParticleGluino.Array_Comments[47] = "# ~g -> ~W2- c sb";
 ParticleGluino.Array_Decays[48][0] = -PDGchargino2;ParticleGluino.Array_Decays[48][1] = PDGstrange; ParticleGluino.Array_Decays[48][4] = -PDGcharm; ParticleGluino.Array_Decays[48][2] = gluinoamplitudechar2csbar; ParticleGluino.Array_Decays[48][3] = 3; ParticleGluino.Array_Comments[48] = "# ~g -> ~W2+ cb s";  
 ParticleGluino.Array_Decays[49][0] = PDGneutralino1; ParticleGluino.Array_Decays[49][1] = PDGtop; ParticleGluino.Array_Decays[49][4] = -PDGtop;  ParticleGluino.Array_Decays[49][2] = gluinoamplitudeneut1ttbar;  ParticleGluino.Array_Decays[49][3] = 3; ParticleGluino.Array_Comments[49] = "# ~g -> ~Z1 t tb";
 ParticleGluino.Array_Decays[50][0] = PDGneutralino2; ParticleGluino.Array_Decays[50][1] = PDGtop; ParticleGluino.Array_Decays[50][4] = -PDGtop;  ParticleGluino.Array_Decays[50][2] = gluinoamplitudeneut2ttbar;  ParticleGluino.Array_Decays[50][3] = 3; ParticleGluino.Array_Comments[50] = "# ~g -> ~Z2 t tb";
 ParticleGluino.Array_Decays[51][0] = PDGneutralino3; ParticleGluino.Array_Decays[51][1] = PDGtop; ParticleGluino.Array_Decays[51][4] = -PDGtop;  ParticleGluino.Array_Decays[51][2] = gluinoamplitudeneut3ttbar;  ParticleGluino.Array_Decays[51][3] = 3; ParticleGluino.Array_Comments[51] = "# ~g -> ~Z3 t tb";
 ParticleGluino.Array_Decays[52][0] = PDGneutralino4; ParticleGluino.Array_Decays[52][1] = PDGtop; ParticleGluino.Array_Decays[52][4] = -PDGtop;  ParticleGluino.Array_Decays[52][2] = gluinoamplitudeneut4ttbar;  ParticleGluino.Array_Decays[52][3] = 3; ParticleGluino.Array_Comments[52] = "# ~g -> ~Z4 t tb";
ParticleGluino.Array_Decays[53][0] = PDGneutralino1; ParticleGluino.Array_Decays[53][1] = PDGbottom; ParticleGluino.Array_Decays[53][4] = -PDGbottom;  ParticleGluino.Array_Decays[53][2] = gluinoamplitudeneut1bbbar;  ParticleGluino.Array_Decays[53][3] = 3; ParticleGluino.Array_Comments[53] = "# ~g -> ~Z1 b bb";
 ParticleGluino.Array_Decays[54][0] = PDGneutralino2; ParticleGluino.Array_Decays[54][1] = PDGbottom; ParticleGluino.Array_Decays[54][4] = -PDGbottom;  ParticleGluino.Array_Decays[54][2] = gluinoamplitudeneut2bbbar;  ParticleGluino.Array_Decays[54][3] = 3; ParticleGluino.Array_Comments[54] = "# ~g -> ~Z2 b bb";
 ParticleGluino.Array_Decays[55][0] = PDGneutralino3; ParticleGluino.Array_Decays[55][1] = PDGbottom; ParticleGluino.Array_Decays[55][4] = -PDGbottom;  ParticleGluino.Array_Decays[55][2] = gluinoamplitudeneut3bbbar;  ParticleGluino.Array_Decays[55][3] = 3; ParticleGluino.Array_Comments[55] = "# ~g -> ~Z3 b bb";
 ParticleGluino.Array_Decays[56][0] = PDGneutralino4; ParticleGluino.Array_Decays[56][1] = PDGbottom; ParticleGluino.Array_Decays[56][4] = -PDGbottom;  ParticleGluino.Array_Decays[56][2] = gluinoamplitudeneut4bbbar;  ParticleGluino.Array_Decays[56][3] = 3; ParticleGluino.Array_Comments[56] = "# ~g -> ~Z4 b bb";
 ParticleGluino.Array_Decays[57][0] = PDGchargino1; ParticleGluino.Array_Decays[57][1] = -PDGtop; ParticleGluino.Array_Decays[57][4] = PDGbottom; ParticleGluino.Array_Decays[57][2] =  gluinoamplitudechar1tbbar; ParticleGluino.Array_Decays[57][3] = 3; ParticleGluino.Array_Comments[57] = "# ~g -> ~W1+ tb b";
 ParticleGluino.Array_Decays[58][0] = -PDGchargino1; ParticleGluino.Array_Decays[58][1] = PDGtop; ParticleGluino.Array_Decays[58][4] = -PDGbottom; ParticleGluino.Array_Decays[58][2] =  gluinoamplitudechar1tbbar; ParticleGluino.Array_Decays[58][3] = 3; ParticleGluino.Array_Comments[58] = "# ~g -> ~W1- t bb";
 ParticleGluino.Array_Decays[59][0] = PDGchargino2; ParticleGluino.Array_Decays[59][1] = -PDGtop; ParticleGluino.Array_Decays[59][4] = PDGbottom; ParticleGluino.Array_Decays[59][2] =  gluinoamplitudechar2tbbar; ParticleGluino.Array_Decays[59][3] = 3; ParticleGluino.Array_Comments[59] = "# ~g -> ~W2+ tb b";
 ParticleGluino.Array_Decays[60][0] = -PDGchargino2; ParticleGluino.Array_Decays[60][1] = PDGtop; ParticleGluino.Array_Decays[60][4] = -PDGbottom; ParticleGluino.Array_Decays[60][2] =  gluinoamplitudechar2tbbar; ParticleGluino.Array_Decays[60][3] = 3; ParticleGluino.Array_Comments[60] = "# ~g -> ~W2- t bb";

 double Gluino_No_1to2_Decays = 0;
 ParticleGluino.two_width = 0;
 ParticleGluino.three_width = 0;

  Gluino_No_1to2_Decays = ParticleGluino.No_1to2_Decays + ParticleGluino.No_grav_Decays;
   
 for (int j = 0; j<Gluino_No_1to2_Decays; j++) {
   ParticleGluino.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
 } 

 for (int j=0; j<Gluino_No_1to2_Decays; j++) {
    ParticleGluino.two_width = ParticleGluino.two_width + ParticleGluino.Array_Decays[j][2];
  }
 for (int j=Gluino_No_1to2_Decays; j<ParticleGluino.No_of_Decays; j++) {
   ParticleGluino.three_width = ParticleGluino.three_width + ParticleGluino.Array_Decays[j][2];
 }
  
  if ( ParticleGluino.three_width != ParticleGluino.three_width) /// Tests for a nan as only nans aren't equal to themselves
    {
      fout << "# Three body decays give nan for gluino - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
      errorflag = -1;
      ParticleGluino.No_of_Decays = Gluino_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
      ParticleGluino.total_width = ParticleGluino.two_width;
    }
  else {
    ParticleGluino.total_width = ParticleGluino.two_width + ParticleGluino.three_width;
  }

  if ( ParticleGluino.total_width != ParticleGluino.total_width) /// Tests for a nan as only nans aren't equal to themselves
    {
      errorflag = -1;
      // for (int i = 0; i<ParticleGluino.No_of_Decays; i++) {
      //   fout << i << " " << ParticleGluino.Array_Decays[i][2] << endl;
      // }	  
      throw( "nan in gluino total width \n");
    }
  
  for (int i =0; i<ParticleGluino.No_of_Decays; i++) {
    ParticleGluino.Array_Decays[i][5]= ParticleGluino.Array_Decays[i][2]/ParticleGluino.total_width; ///Sets BRs of gluino decays
  }

  if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleGluino, BRTol);}
  else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleGluino, BRTol);}
  }

 
 ///Squark Decays

 ///SdownL Decays

 double sdownLamplitudegluinodown=0, sdownLamplitudedownneutralinoZ1=0, sdownLamplitudedownneutralinoZ2=0, sdownLamplitudedownneutralinoZ3=0, sdownLamplitudedownneutralinoZ4=0, sdownLamplitudecharginoW1up=0, sdownLamplitudecharginoW2up=0, sdownLamplitudedowngravitino=0;

 double sdownLamplitudedownneutralinoZ5 = 0;

 if (flagsdownL == 1) {
   sdownLamplitudegluinodown =  squarkamplitudedecaygluino (md(1,1), mdo, mGluino, alphas);
   sdownLamplitudecharginoW1up = squarkamplitudedecaycharginoW1 (md(1,1), mup, MCH1, g, thetaL2);
   sdownLamplitudecharginoW2up = squarkamplitudedecaycharginoW2 (md(1,1), mup, MCH2, g, thetaL2);
   if (nmssmIsIt == false) {
     sdownLamplitudedownneutralinoZ1 = squarkLamplitudedecayneutralino(md(1,1), mdo, mneut(1), g, gp, mixNeut, 1, -1);
     sdownLamplitudedownneutralinoZ2 = squarkLamplitudedecayneutralino(md(1,1), mdo, mneut(2), g, gp, mixNeut, 2, -1);
     sdownLamplitudedownneutralinoZ3 = squarkLamplitudedecayneutralino(md(1,1), mdo, mneut(3), g, gp, mixNeut, 3, -1);
     sdownLamplitudedownneutralinoZ4 = squarkLamplitudedecayneutralino(md(1,1), mdo, mneut(4), g, gp, mixNeut, 4, -1);
     sdownLamplitudedowngravitino = squarkamplitudedecaygravitino(md(1,1), mgravitino, mdo, MPlreduced, gravonoff, downsquNLSP); ///Gravitino decays only in MSSM
   }
   else if (nmssmIsIt == true) { ///Extended neutralino sector of NMSSM means decays to neutralinos are different in NMSSM
     sdownLamplitudedownneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,1), mdo, mneut(1), g, gp, mixNeut, 'd', 'L', 1); 
     sdownLamplitudedownneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,1), mdo, mneut(2), g, gp, mixNeut, 'd', 'L', 2);
     sdownLamplitudedownneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,1), mdo, mneut(3), g, gp, mixNeut, 'd', 'L', 3);
     sdownLamplitudedownneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,1), mdo, mneut(4), g, gp, mixNeut, 'd', 'L', 4);
     sdownLamplitudedownneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,1), mdo, mneut(5), g, gp, mixNeut, 'd', 'L', 5);
   }
   
   ParticleSdownL.Array_Decays[0][0] = PDGdown; ParticleSdownL.Array_Decays[0][1] = PDGgluino; ParticleSdownL.Array_Decays[0][2] = sdownLamplitudegluinodown; ParticleSdownL.Array_Decays[0][3] = 2; ParticleSdownL.Array_Comments[0] = "# ~d_L -> d ~g";
   ParticleSdownL.Array_Decays[1][0] = PDGup; ParticleSdownL.Array_Decays[1][1] = -PDGchargino1; ParticleSdownL.Array_Decays[1][2] = sdownLamplitudecharginoW1up; ParticleSdownL.Array_Decays[1][3] = 2; ParticleSdownL.Array_Comments[1] = "# ~d_L -> u ~chi_1-" ;
   ParticleSdownL.Array_Decays[2][0] = PDGup; ParticleSdownL.Array_Decays[2][1] = -PDGchargino2; ParticleSdownL.Array_Decays[2][2] = sdownLamplitudecharginoW2up; ParticleSdownL.Array_Decays[2][3] = 2; ParticleSdownL.Array_Comments[2] = "# ~d_L -> u ~chi_2-";
   ParticleSdownL.Array_Decays[3][0] = PDGdown; ParticleSdownL.Array_Decays[3][1] = PDGneutralino1; ParticleSdownL.Array_Decays[3][2] = sdownLamplitudedownneutralinoZ1; ParticleSdownL.Array_Decays[3][3] = 2; ParticleSdownL.Array_Comments[3] = "# ~d_L -> d ~chi_10";
   ParticleSdownL.Array_Decays[4][0] = PDGdown; ParticleSdownL.Array_Decays[4][1] = PDGneutralino2; ParticleSdownL.Array_Decays[4][2] = sdownLamplitudedownneutralinoZ2; ParticleSdownL.Array_Decays[4][3] = 2; ParticleSdownL.Array_Comments[4] = "# ~d_L -> d ~chi_20";
   ParticleSdownL.Array_Decays[5][0] = PDGdown; ParticleSdownL.Array_Decays[5][1] = PDGneutralino3; ParticleSdownL.Array_Decays[5][2] = sdownLamplitudedownneutralinoZ3; ParticleSdownL.Array_Decays[5][3] = 2; ParticleSdownL.Array_Comments[5] = "# ~d_L -> d ~chi_30";
   ParticleSdownL.Array_Decays[6][0] = PDGdown; ParticleSdownL.Array_Decays[6][1] = PDGneutralino4; ParticleSdownL.Array_Decays[6][2] = sdownLamplitudedownneutralinoZ4; ParticleSdownL.Array_Decays[6][3] = 2; ParticleSdownL.Array_Comments[6] = "# ~d_L -> d ~chi_40";
   ParticleSdownL.Array_Decays[7][0] = PDGdown; ParticleSdownL.Array_Decays[7][1] = PDGneutralino5; ParticleSdownL.Array_Decays[7][2] = sdownLamplitudedownneutralinoZ5; ParticleSdownL.Array_Decays[7][3] = 2; ParticleSdownL.Array_Comments[7] = "# ~d_L -> d ~chi_50";
   ParticleSdownL.Array_Decays[8][0] = PDGdown; ParticleSdownL.Array_Decays[8][1] = PDGgravitino; ParticleSdownL.Array_Decays[8][2] = sdownLamplitudedowngravitino; ParticleSdownL.Array_Decays[8][3] = 2; ParticleSdownL.Array_Comments[8] = "# ~d_L -> d ~G";
   
 double SdownL_No_1to2_Decays = 0;
 
 SdownL_No_1to2_Decays = ParticleSdownL.No_1to2_Decays + ParticleSdownL.No_grav_Decays + ParticleSdownL.No_NMSSM_Decays;
 
 for (int j = 0; j<SdownL_No_1to2_Decays; j++) {
   ParticleSdownL.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
 }
 
 for (int j=0; j<SdownL_No_1to2_Decays; j++) {
   ParticleSdownL.two_width = ParticleSdownL.two_width + ParticleSdownL.Array_Decays[j][2];
 }
 for (int j=SdownL_No_1to2_Decays; j<ParticleSdownL.No_of_Decays; j++) {
   ParticleSdownL.three_width = ParticleSdownL.three_width + ParticleSdownL.Array_Decays[j][2];
 }
 
 ///Note currently no squark three body decays included - may change in future versions
 if ( ParticleSdownL.three_width != ParticleSdownL.three_width) /// Tests for a nan as only nans aren't equal to themselves
   {
     fout << "# Three body decays give nan for sdownL - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
     errorflag = -1;
     ParticleSdownL.No_of_Decays = SdownL_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
     ParticleSdownL.total_width = ParticleSdownL.two_width;
   }
 else {
   ParticleSdownL.total_width = ParticleSdownL.two_width + ParticleSdownL.three_width;
 }
 if ( ParticleSdownL.total_width != ParticleSdownL.total_width) /// Tests for a nan as only nans aren't equal to themselves
   {
     errorflag = -1;
     // for (int i = 0; i<ParticleSdownL.No_of_Decays; i++) {
     //   fout << i << " " << ParticleSdownL.Array_Decays[i][2] << endl;
     // }	  
     throw( "nan in sdownL total width \n");
   }
 
 for (int i =0; i<ParticleSdownL.No_of_Decays; i++) {
   ParticleSdownL.Array_Decays[i][5]= ParticleSdownL.Array_Decays[i][2]/ParticleSdownL.total_width;
 }
 if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSdownL, BRTol);}
 else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSdownL, BRTol);}
 }

  
 ///SdownR Decays

 double sdownRamplitudegluinodown=0, sdownRamplitudedownneutralinoZ1=0, sdownRamplitudedownneutralinoZ2=0, sdownRamplitudedownneutralinoZ3=0, sdownRamplitudedownneutralinoZ4=0, sdownRamplitudedowngravitino=0;
 
 double sdownRamplitudedownneutralinoZ5 = 0;
 
 if (flagsdownR == 1) {
   
   sdownRamplitudegluinodown = squarkamplitudedecaygluino (md(2,1), mdo, mGluino, alphas);
   if (nmssmIsIt == false) {
     sdownRamplitudedownneutralinoZ1 = squarkRamplitudedecayneutralino (md(2,1), mdo, mneut(1), g, gp, mixNeut, 1, -1);
     sdownRamplitudedownneutralinoZ2 = squarkRamplitudedecayneutralino (md(2,1), mdo, mneut(2), g, gp, mixNeut, 2, -1);
     sdownRamplitudedownneutralinoZ3 = squarkRamplitudedecayneutralino (md(2,1), mdo, mneut(3), g, gp, mixNeut, 3, -1);
     sdownRamplitudedownneutralinoZ4 = squarkRamplitudedecayneutralino (md(2,1), mdo, mneut(4), g, gp, mixNeut, 4, -1);
     sdownRamplitudedowngravitino = squarkamplitudedecaygravitino(md(2,1), mgravitino, mdo, MPlreduced, gravonoff, downsquNLSP);
   }
   else if (nmssmIsIt == true) {
     sdownRamplitudedownneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,1), mdo, mneut(1), g, gp, mixNeut, 'd', 'R', 1); 
     sdownRamplitudedownneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,1), mdo, mneut(2), g, gp, mixNeut, 'd', 'R', 2);
     sdownRamplitudedownneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,1), mdo, mneut(3), g, gp, mixNeut, 'd', 'R', 3);
     sdownRamplitudedownneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,1), mdo, mneut(4), g, gp, mixNeut, 'd', 'R', 4);
     sdownRamplitudedownneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,1), mdo, mneut(5), g, gp, mixNeut, 'd', 'R', 5);
   }
   
   ParticleSdownR.Array_Decays[0][0] = PDGdown; ParticleSdownR.Array_Decays[0][1] = PDGgluino; ParticleSdownR.Array_Decays[0][2] = sdownRamplitudegluinodown; ParticleSdownR.Array_Decays[0][3] = 2; ParticleSdownR.Array_Comments[0] = "# ~d_R -> d ~g";
   ParticleSdownR.Array_Decays[1][0] = PDGdown; ParticleSdownR.Array_Decays[1][1] = PDGneutralino1; ParticleSdownR.Array_Decays[1][2] = sdownRamplitudedownneutralinoZ1; ParticleSdownR.Array_Decays[1][3] = 2; ParticleSdownR.Array_Comments[1] = "# ~d_R -> d ~chi_10";
   ParticleSdownR.Array_Decays[2][0] = PDGdown; ParticleSdownR.Array_Decays[2][1] = PDGneutralino2; ParticleSdownR.Array_Decays[2][2] = sdownRamplitudedownneutralinoZ2; ParticleSdownR.Array_Decays[2][3] = 2; ParticleSdownR.Array_Comments[2] = "# ~d_R -> d ~chi_20";
   ParticleSdownR.Array_Decays[3][0] = PDGdown; ParticleSdownR.Array_Decays[3][1] = PDGneutralino3; ParticleSdownR.Array_Decays[3][2] = sdownRamplitudedownneutralinoZ3; ParticleSdownR.Array_Decays[3][3] = 2; ParticleSdownR.Array_Comments[3] = "# ~d_R -> d ~chi_30";
   ParticleSdownR.Array_Decays[4][0] = PDGdown; ParticleSdownR.Array_Decays[4][1] = PDGneutralino4; ParticleSdownR.Array_Decays[4][2] = sdownRamplitudedownneutralinoZ4; ParticleSdownR.Array_Decays[4][3] = 2; ParticleSdownR.Array_Comments[4] = "# ~d_R -> d ~chi_40";
   ParticleSdownR.Array_Decays[5][0] = PDGdown; ParticleSdownR.Array_Decays[5][1] = PDGneutralino4; ParticleSdownR.Array_Decays[5][2] = sdownRamplitudedownneutralinoZ5; ParticleSdownR.Array_Decays[5][3] = 2; ParticleSdownR.Array_Comments[5] = "# ~d_R -> d ~chi_50";
   
   ParticleSdownR.Array_Decays[6][0] = PDGdown; ParticleSdownR.Array_Decays[6][1] = PDGgravitino; ParticleSdownR.Array_Decays[6][2] = sdownRamplitudedowngravitino; ParticleSdownR.Array_Decays[6][3] = 2; ParticleSdownR.Array_Comments[6] = "# ~d_R -> d ~G";

   double SdownR_No_1to2_Decays = 0;
   
   SdownR_No_1to2_Decays = ParticleSdownR.No_1to2_Decays + ParticleSdownR.No_grav_Decays + ParticleSdownR.No_NMSSM_Decays;
   
   for (int j = 0; j<SdownR_No_1to2_Decays; j++) {
     ParticleSdownR.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<SdownR_No_1to2_Decays; j++) {
     ParticleSdownR.two_width = ParticleSdownR.two_width + ParticleSdownR.Array_Decays[j][2];
   }
   for (int j=SdownR_No_1to2_Decays; j<ParticleSdownR.No_of_Decays; j++) {
     ParticleSdownR.three_width = ParticleSdownR.three_width + ParticleSdownR.Array_Decays[j][2];
   }
   
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleSdownR.three_width != ParticleSdownR.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for sdownR - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSdownR.No_of_Decays = SdownR_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSdownR.total_width = ParticleSdownR.two_width;
     }
   else {
     ParticleSdownR.total_width = ParticleSdownR.two_width + ParticleSdownR.three_width;
   }
   
   if ( ParticleSdownR.total_width != ParticleSdownR.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSdownR.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSdownR.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in sdownR total width \n");
     }
   
   for (int i =0; i<ParticleSdownR.No_of_Decays; i++) {
     ParticleSdownR.Array_Decays[i][5]= ParticleSdownR.Array_Decays[i][2]/ParticleSdownR.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSdownR, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSdownR, BRTol);}
   
 }
 
 ///SupL Decays
 
 double supLamplitudegluinoup=0, supLamplitudeupneutralinoZ1=0, supLamplitudeupneutralinoZ2=0, supLamplitudeupneutralinoZ3=0, supLamplitudeupneutralinoZ4=0, supLamplitudecharginoW1down=0, supLamplitudecharginoW2down=0, supLamplitudeupgravitino=0; 
 double supLamplitudeupneutralinoZ5 = 0;
 
 if (flagsupL == 1) {
   supLamplitudegluinoup = squarkamplitudedecaygluino (mu(1,1), mup, mGluino, alphas);
   supLamplitudecharginoW1down = squarkamplitudedecaycharginoW1 (mu(1,1), mdo, MCH1, g, thetaR2);
   supLamplitudecharginoW2down = squarkamplitudedecaycharginoW2 (mu(1,1), mdo, MCH2, g, thetaR2);
   if (nmssmIsIt == false) {
     supLamplitudeupneutralinoZ1 = squarkLamplitudedecayneutralino (mu(1,1), mup, mneut(1), g, gp, mixNeut, 1, 1);
     supLamplitudeupneutralinoZ2 = squarkLamplitudedecayneutralino (mu(1,1), mup, mneut(2), g, gp, mixNeut, 2, 1);
     supLamplitudeupneutralinoZ3 = squarkLamplitudedecayneutralino (mu(1,1), mup, mneut(3), g, gp, mixNeut, 3, 1);
     supLamplitudeupneutralinoZ4 = squarkLamplitudedecayneutralino (mu(1,1), mup, mneut(4), g, gp, mixNeut, 4, 1);
     supLamplitudeupgravitino = squarkamplitudedecaygravitino (mu(1,1), mgravitino, mup, MPlreduced, gravonoff, upsquNLSP);
   }
   else if (nmssmIsIt == true) {
     supLamplitudeupneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,1), mup, mneut(1), g, gp, mixNeut, 'u', 'L', 1); 
     supLamplitudeupneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,1), mup, mneut(2), g, gp, mixNeut, 'u', 'L', 2);
     supLamplitudeupneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,1), mup, mneut(3), g, gp, mixNeut, 'u', 'L', 3);
     supLamplitudeupneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,1), mup, mneut(4), g, gp, mixNeut, 'u', 'L', 4);
     supLamplitudeupneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,1), mup, mneut(5), g, gp, mixNeut, 'u', 'L', 5);
   }
   
   ParticleSupL.Array_Decays[0][0] = PDGup; ParticleSupL.Array_Decays[0][1] = PDGgluino; ParticleSupL.Array_Decays[0][2] = supLamplitudegluinoup; ParticleSupL.Array_Decays[0][3] = 2; ParticleSupL.Array_Comments[0] = "# ~u_L -> u ~g";
   ParticleSupL.Array_Decays[1][0] = PDGdown; ParticleSupL.Array_Decays[1][1] = PDGchargino1; ParticleSupL.Array_Decays[1][2] = supLamplitudecharginoW1down; ParticleSupL.Array_Decays[1][3] = 2; ParticleSupL.Array_Comments[1] = "# ~u_L -> d ~chi_1+"; 
   ParticleSupL.Array_Decays[2][0] = PDGdown; ParticleSupL.Array_Decays[2][1] = PDGchargino2; ParticleSupL.Array_Decays[2][2] = supLamplitudecharginoW2down; ParticleSupL.Array_Decays[2][3] = 2; ParticleSupL.Array_Comments[2] = "# ~u_L -> d ~chi_2+"; 
   ParticleSupL.Array_Decays[3][0] = PDGup; ParticleSupL.Array_Decays[3][1] = PDGneutralino1; ParticleSupL.Array_Decays[3][2] = supLamplitudeupneutralinoZ1; ParticleSupL.Array_Decays[3][3] = 2; ParticleSupL.Array_Comments[3] = "# ~u_L -> u ~chi_10";
   ParticleSupL.Array_Decays[4][0] = PDGup; ParticleSupL.Array_Decays[4][1] = PDGneutralino2; ParticleSupL.Array_Decays[4][2] = supLamplitudeupneutralinoZ2; ParticleSupL.Array_Decays[4][3] = 2; ParticleSupL.Array_Comments[4] = "# ~u_L -> u ~chi_20";
   ParticleSupL.Array_Decays[5][0] = PDGup; ParticleSupL.Array_Decays[5][1] = PDGneutralino3; ParticleSupL.Array_Decays[5][2] = supLamplitudeupneutralinoZ3; ParticleSupL.Array_Decays[5][3] = 2; ParticleSupL.Array_Comments[5] = "# ~u_L -> u ~chi_30";
   ParticleSupL.Array_Decays[6][0] = PDGup; ParticleSupL.Array_Decays[6][1] = PDGneutralino4; ParticleSupL.Array_Decays[6][2] = supLamplitudeupneutralinoZ4; ParticleSupL.Array_Decays[6][3] = 2; ParticleSupL.Array_Comments[6] = "# ~u_L -> u ~chi_40";
   ParticleSupL.Array_Decays[7][0] = PDGup; ParticleSupL.Array_Decays[7][1] = PDGneutralino5; ParticleSupL.Array_Decays[7][2] = supLamplitudeupneutralinoZ5; ParticleSupL.Array_Decays[7][3] = 2; ParticleSupL.Array_Comments[7] = "# ~u_L -> u ~chi_50";
   
   ParticleSupL.Array_Decays[8][0] = PDGup; ParticleSupL.Array_Decays[8][1] = PDGgravitino; ParticleSupL.Array_Decays[8][2] = supLamplitudeupgravitino; ParticleSupL.Array_Decays[8][3] = 2; ParticleSupL.Array_Comments[8] = "# ~u_L -> u ~G";
   
   double SupL_No_1to2_Decays = 0;
   
   SupL_No_1to2_Decays = ParticleSupL.No_1to2_Decays + ParticleSupL.No_grav_Decays + ParticleSupL.No_NMSSM_Decays;
   
   for (int j = 0; j<SupL_No_1to2_Decays; j++) {
     ParticleSupL.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<SupL_No_1to2_Decays; j++) {
     ParticleSupL.two_width = ParticleSupL.two_width + ParticleSupL.Array_Decays[j][2];
   }
   for (int j=SupL_No_1to2_Decays; j<ParticleSupL.No_of_Decays; j++) {
     ParticleSupL.three_width = ParticleSupL.three_width + ParticleSupL.Array_Decays[j][2];
   }
   
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleSupL.three_width != ParticleSupL.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for supL - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSupL.No_of_Decays = SupL_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSupL.total_width = ParticleSupL.two_width;
     }
   else {
     ParticleSupL.total_width = ParticleSupL.two_width + ParticleSupL.three_width;
   }
   
   if ( ParticleSupL.total_width != ParticleSupL.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSupL.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSupL.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in supL total width \n");
     }
 
   for (int i =0; i<ParticleSupL.No_of_Decays; i++) {
     ParticleSupL.Array_Decays[i][5]= ParticleSupL.Array_Decays[i][2]/ParticleSupL.total_width;
   }

   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSupL, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSupL, BRTol);}
   
 }

 ///SupR Decays
 double supRamplitudegluinoup=0, supRamplitudeupneutralinoZ1=0, supRamplitudeupneutralinoZ2=0, supRamplitudeupneutralinoZ3=0, supRamplitudeupneutralinoZ4=0, supRamplitudeupgravitino=0;
 double supRamplitudeupneutralinoZ5=0;

 if(flagsupR == 1) {
   
   supRamplitudegluinoup = squarkamplitudedecaygluino (mu(2,1), mup, mGluino, alphas);
   if (nmssmIsIt == false) {
     supRamplitudeupneutralinoZ1 = squarkRamplitudedecayneutralino (mu(2,1), mup, mneut(1), g, gp, mixNeut, 1, 1);
     supRamplitudeupneutralinoZ2 = squarkRamplitudedecayneutralino (mu(2,1), mup, mneut(2), g, gp, mixNeut, 2, 1);
     supRamplitudeupneutralinoZ3 = squarkRamplitudedecayneutralino (mu(2,1), mup, mneut(3), g, gp, mixNeut, 3, 1);
     supRamplitudeupneutralinoZ4 = squarkRamplitudedecayneutralino (mu(2,1), mup, mneut(4), g, gp, mixNeut, 4, 1);
     supRamplitudeupgravitino = squarkamplitudedecaygravitino(mu(2,1), mgravitino, mup, MPlreduced, gravonoff, upsquNLSP);
   }
   else if (nmssmIsIt == true) {
     supRamplitudeupneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,1), mup, mneut(1), g, gp, mixNeut, 'u', 'R', 1); 
     supRamplitudeupneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,1), mup, mneut(2), g, gp, mixNeut, 'u', 'R', 2);
     supRamplitudeupneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,1), mup, mneut(3), g, gp, mixNeut, 'u', 'R', 3);
     supRamplitudeupneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,1), mup, mneut(4), g, gp, mixNeut, 'u', 'R', 4);
     supRamplitudeupneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,1), mup, mneut(5), g, gp, mixNeut, 'u', 'R', 5);
   }
   
   ParticleSupR.Array_Decays[0][0] = PDGup; ParticleSupR.Array_Decays[0][1] = PDGgluino; ParticleSupR.Array_Decays[0][2] = supRamplitudegluinoup; ParticleSupR.Array_Decays[0][3] = 2; ParticleSupR.Array_Comments[0] = "# ~u_R -> u ~g";
   ParticleSupR.Array_Decays[1][0] = PDGup; ParticleSupR.Array_Decays[1][1] = PDGneutralino1; ParticleSupR.Array_Decays[1][2] = supRamplitudeupneutralinoZ1; ParticleSupR.Array_Decays[1][3] = 2; ParticleSupR.Array_Comments[1] = "# ~u_R -> u ~chi_10";
   ParticleSupR.Array_Decays[2][0] = PDGup; ParticleSupR.Array_Decays[2][1] = PDGneutralino2; ParticleSupR.Array_Decays[2][2] = supRamplitudeupneutralinoZ2; ParticleSupR.Array_Decays[2][3] = 2; ParticleSupR.Array_Comments[2] = "# ~u_R -> u ~chi_20";
   ParticleSupR.Array_Decays[3][0] = PDGup; ParticleSupR.Array_Decays[3][1] = PDGneutralino3; ParticleSupR.Array_Decays[3][2] = supRamplitudeupneutralinoZ3; ParticleSupR.Array_Decays[3][3] = 2; ParticleSupR.Array_Comments[3] = "# ~u_R -> u ~chi_30";
   ParticleSupR.Array_Decays[4][0] = PDGup; ParticleSupR.Array_Decays[4][1] = PDGneutralino4; ParticleSupR.Array_Decays[4][2] = supRamplitudeupneutralinoZ4; ParticleSupR.Array_Decays[4][3] = 2; ParticleSupR.Array_Comments[4] = "# ~u_R -> u ~chi_40";
   ParticleSupR.Array_Decays[5][0] = PDGup; ParticleSupR.Array_Decays[5][1] = PDGneutralino5; ParticleSupR.Array_Decays[5][2] = supRamplitudeupneutralinoZ5; ParticleSupR.Array_Decays[5][3] = 2; ParticleSupR.Array_Comments[5] = "# ~u_R -> u ~chi_50";
   
   ParticleSupR.Array_Decays[6][0] = PDGup; ParticleSupR.Array_Decays[6][1] = PDGgravitino; ParticleSupR.Array_Decays[6][2] = supRamplitudeupgravitino; ParticleSupR.Array_Decays[6][3] = 2; ParticleSupR.Array_Comments[6] = "# ~u_R -> u ~G";

   double SupR_No_1to2_Decays = 0;
   
   SupR_No_1to2_Decays = ParticleSupR.No_1to2_Decays + ParticleSupR.No_grav_Decays + ParticleSupR.No_NMSSM_Decays;
 
   for (int j = 0; j<SupR_No_1to2_Decays; j++) {
     ParticleSupR.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<SupR_No_1to2_Decays; j++) {
     ParticleSupR.two_width = ParticleSupR.two_width + ParticleSupR.Array_Decays[j][2];
   }
   for (int j=SupR_No_1to2_Decays; j<ParticleSupR.No_of_Decays; j++) {
     ParticleSupR.three_width = ParticleSupR.three_width + ParticleSupR.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleSupR.three_width != ParticleSupR.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for supR - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSupR.No_of_Decays = SupR_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSupR.total_width = ParticleSupR.two_width;
     }
   else {
     ParticleSupR.total_width = ParticleSupR.two_width + ParticleSupR.three_width;
   }
   
   if ( ParticleSupR.total_width != ParticleSupR.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSupR.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSupR.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in supR total width \n");
     }
   
   for (int i =0; i<ParticleSupR.No_of_Decays; i++) {
     ParticleSupR.Array_Decays[i][5]= ParticleSupR.Array_Decays[i][2]/ParticleSupR.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSupR, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSupR, BRTol);}
   
 }

 ///SstrangeL Decays

 double sstrangeLamplitudegluinostrange=0, sstrangeLamplitudestrangeneutralinoZ1=0, sstrangeLamplitudestrangeneutralinoZ2=0, sstrangeLamplitudestrangeneutralinoZ3=0, sstrangeLamplitudestrangeneutralinoZ4=0, sstrangeLamplitudecharginoW1charm=0, sstrangeLamplitudecharginoW2charm=0, sstrangeLamplitudestrangegravitino=0;
 double sstrangeLamplitudestrangeneutralinoZ5 = 0;
 
 if(flagsstrangeL == 1) {
   sstrangeLamplitudegluinostrange = squarkamplitudedecaygluino (md(1,2), ms, mGluino, alphas);
   sstrangeLamplitudecharginoW1charm = squarkamplitudedecaycharginoW1 (md(1,2), mc, MCH1, g, thetaL2);
   sstrangeLamplitudecharginoW2charm = squarkamplitudedecaycharginoW2 (md(1,2), mc, MCH2, g, thetaL2);
   if (nmssmIsIt == false) {
     sstrangeLamplitudestrangeneutralinoZ1 = squarkLamplitudedecayneutralino (md(1,2), ms, mneut(1), g, gp, mixNeut, 1, -1);
     sstrangeLamplitudestrangeneutralinoZ2 = squarkLamplitudedecayneutralino (md(1,2), ms, mneut(2), g, gp, mixNeut, 2, -1);
     sstrangeLamplitudestrangeneutralinoZ3 = squarkLamplitudedecayneutralino (md(1,2), ms, mneut(3), g, gp, mixNeut, 3, -1);
     sstrangeLamplitudestrangeneutralinoZ4 = squarkLamplitudedecayneutralino (md(1,2), ms, mneut(4), g, gp, mixNeut, 4, -1);
     
     sstrangeLamplitudestrangegravitino = squarkamplitudedecaygravitino (md(1,2), mgravitino, ms, MPlreduced, gravonoff, downsquNLSP);
   }
   else if (nmssmIsIt == true) {
     sstrangeLamplitudestrangeneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,2), ms, mneut(1), g, gp, mixNeut, 'd', 'L', 1); 
     sstrangeLamplitudestrangeneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,2), ms, mneut(2), g, gp, mixNeut, 'd', 'L', 2);
     sstrangeLamplitudestrangeneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,2), ms, mneut(3), g, gp, mixNeut, 'd', 'L', 3);
     sstrangeLamplitudestrangeneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,2), ms, mneut(4), g, gp, mixNeut, 'd', 'L', 4);
     sstrangeLamplitudestrangeneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (md(1,2), ms, mneut(5), g, gp, mixNeut, 'd', 'L', 5);
   }
   
   ParticleSstrangeL.Array_Decays[0][0] = PDGstrange; ParticleSstrangeL.Array_Decays[0][1] = PDGgluino; ParticleSstrangeL.Array_Decays[0][2] = sstrangeLamplitudegluinostrange; ParticleSstrangeL.Array_Decays[0][3] = 2; ParticleSstrangeL.Array_Comments[0] = "# ~s_L -> s ~g";
   ParticleSstrangeL.Array_Decays[1][0] = PDGcharm; ParticleSstrangeL.Array_Decays[1][1] = -PDGchargino1; ParticleSstrangeL.Array_Decays[1][2] = sstrangeLamplitudecharginoW1charm; ParticleSstrangeL.Array_Decays[1][3] = 2; ParticleSstrangeL.Array_Comments[1] = "# ~s_L -> c ~chi_1-" ;
   ParticleSstrangeL.Array_Decays[2][0] = PDGcharm; ParticleSstrangeL.Array_Decays[2][1] = -PDGchargino2; ParticleSstrangeL.Array_Decays[2][2] = sstrangeLamplitudecharginoW2charm; ParticleSstrangeL.Array_Decays[2][3] = 2; ParticleSstrangeL.Array_Comments[2] = "# ~s_L -> c ~chi_2-";
   ParticleSstrangeL.Array_Decays[3][0] = PDGstrange; ParticleSstrangeL.Array_Decays[3][1] = PDGneutralino1; ParticleSstrangeL.Array_Decays[3][2] = sstrangeLamplitudestrangeneutralinoZ1; ParticleSstrangeL.Array_Decays[3][3] = 2; ParticleSstrangeL.Array_Comments[3] = "# ~s_L -> s ~chi_10";
   ParticleSstrangeL.Array_Decays[4][0] = PDGstrange; ParticleSstrangeL.Array_Decays[4][1] = PDGneutralino2; ParticleSstrangeL.Array_Decays[4][2] = sstrangeLamplitudestrangeneutralinoZ2; ParticleSstrangeL.Array_Decays[4][3] = 2; ParticleSstrangeL.Array_Comments[4] = "# ~s_L -> s ~chi_20";
   ParticleSstrangeL.Array_Decays[5][0] = PDGstrange; ParticleSstrangeL.Array_Decays[5][1] = PDGneutralino3; ParticleSstrangeL.Array_Decays[5][2] = sstrangeLamplitudestrangeneutralinoZ3; ParticleSstrangeL.Array_Decays[5][3] = 2; ParticleSstrangeL.Array_Comments[5] = "# ~s_L -> s ~chi_30";
   ParticleSstrangeL.Array_Decays[6][0] = PDGstrange; ParticleSstrangeL.Array_Decays[6][1] = PDGneutralino4; ParticleSstrangeL.Array_Decays[6][2] = sstrangeLamplitudestrangeneutralinoZ4; ParticleSstrangeL.Array_Decays[6][3] = 2; ParticleSstrangeL.Array_Comments[6] = "# ~s_L -> s ~chi_40";
   ParticleSstrangeL.Array_Decays[7][0] = PDGstrange; ParticleSstrangeL.Array_Decays[7][1] = PDGneutralino5; ParticleSstrangeL.Array_Decays[7][2] = sstrangeLamplitudestrangeneutralinoZ5; ParticleSstrangeL.Array_Decays[7][3] = 2; ParticleSstrangeL.Array_Comments[7] = "# ~s_L -> s ~chi_50";

   ParticleSstrangeL.Array_Decays[8][0] = PDGstrange; ParticleSstrangeL.Array_Decays[8][1] = PDGgravitino; ParticleSstrangeL.Array_Decays[8][2] = sstrangeLamplitudestrangegravitino; ParticleSstrangeL.Array_Decays[8][3] = 2; ParticleSstrangeL.Array_Comments[8] = "# ~s_L -> s ~G";
   
   double SstrangeL_No_1to2_Decays = 0;

   SstrangeL_No_1to2_Decays = ParticleSstrangeL.No_1to2_Decays + ParticleSstrangeL.No_grav_Decays + ParticleSstrangeL.No_NMSSM_Decays;
 
   for (int j = 0; j<SstrangeL_No_1to2_Decays; j++) {
     ParticleSstrangeL.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<SstrangeL_No_1to2_Decays; j++) {
     ParticleSstrangeL.two_width = ParticleSstrangeL.two_width + ParticleSstrangeL.Array_Decays[j][2];
   }
   for (int j=SstrangeL_No_1to2_Decays; j<ParticleSstrangeL.No_of_Decays; j++) {
     ParticleSstrangeL.three_width = ParticleSstrangeL.three_width + ParticleSstrangeL.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions 
   if ( ParticleSstrangeL.three_width != ParticleSstrangeL.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for sstrangeL - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSstrangeL.No_of_Decays = SstrangeL_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSstrangeL.total_width = ParticleSstrangeL.two_width;
     }
   else {
     ParticleSstrangeL.total_width = ParticleSstrangeL.two_width + ParticleSstrangeL.three_width;
   }
   
   if ( ParticleSstrangeL.total_width != ParticleSstrangeL.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSstrangeL.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSstrangeL.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in sstrangeL total width \n");
     }
   
   for (int i =0; i<ParticleSstrangeL.No_of_Decays; i++) {
     ParticleSstrangeL.Array_Decays[i][5]= ParticleSstrangeL.Array_Decays[i][2]/ParticleSstrangeL.total_width;
   }

   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSstrangeL, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSstrangeL, BRTol);}
   
 }


 ///SstrangeR decays

 double sstrangeRamplitudegluinostrange=0, sstrangeRamplitudestrangeneutralinoZ1=0, sstrangeRamplitudestrangeneutralinoZ2=0, sstrangeRamplitudestrangeneutralinoZ3=0, sstrangeRamplitudestrangeneutralinoZ4=0, sstrangeRamplitudestrangegravitino=0;

 double sstrangeRamplitudestrangeneutralinoZ5 = 0;

 if (flagsstrangeR == 1) {
   sstrangeRamplitudegluinostrange = squarkamplitudedecaygluino (md(2,2), ms, mGluino, alphas);
   if (nmssmIsIt == false) {
     sstrangeRamplitudestrangeneutralinoZ1 = squarkRamplitudedecayneutralino (md(2,2), ms, mneut(1), g, gp, mixNeut, 1, -1);
     sstrangeRamplitudestrangeneutralinoZ2 = squarkRamplitudedecayneutralino (md(2,2), ms, mneut(2), g, gp, mixNeut, 2, -1);
     sstrangeRamplitudestrangeneutralinoZ3 = squarkRamplitudedecayneutralino (md(2,2), ms, mneut(3), g, gp, mixNeut, 3, -1);
     sstrangeRamplitudestrangeneutralinoZ4 = squarkRamplitudedecayneutralino (md(2,2), ms, mneut(4), g, gp, mixNeut, 4, -1);
     
     sstrangeRamplitudestrangegravitino = squarkamplitudedecaygravitino(md(2,2), mgravitino, ms, MPlreduced, gravonoff, downsquNLSP);
   }
   else if (nmssmIsIt == true) {
     sstrangeRamplitudestrangeneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,2), ms, mneut(1), g, gp, mixNeut, 'd', 'R', 1); 
     sstrangeRamplitudestrangeneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,2), ms, mneut(2), g, gp, mixNeut, 'd', 'R', 2);
     sstrangeRamplitudestrangeneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,2), ms, mneut(3), g, gp, mixNeut, 'd', 'R', 3);
     sstrangeRamplitudestrangeneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,2), ms, mneut(4), g, gp, mixNeut, 'd', 'R', 4);
     sstrangeRamplitudestrangeneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (md(2,2), ms, mneut(5), g, gp, mixNeut, 'd', 'R', 5);
   }
   
   ParticleSstrangeR.Array_Decays[0][0] = PDGstrange; ParticleSstrangeR.Array_Decays[0][1] = PDGgluino; ParticleSstrangeR.Array_Decays[0][2] = sstrangeRamplitudegluinostrange; ParticleSstrangeR.Array_Decays[0][3] = 2; ParticleSstrangeR.Array_Comments[0] = "# ~s_R -> s ~g";
   ParticleSstrangeR.Array_Decays[1][0] = PDGstrange; ParticleSstrangeR.Array_Decays[1][1] = PDGneutralino1; ParticleSstrangeR.Array_Decays[1][2] = sstrangeRamplitudestrangeneutralinoZ1; ParticleSstrangeR.Array_Decays[1][3] = 2; ParticleSstrangeR.Array_Comments[1] = "# ~s_R -> s ~chi_10";
   ParticleSstrangeR.Array_Decays[2][0] = PDGstrange; ParticleSstrangeR.Array_Decays[2][1] = PDGneutralino2; ParticleSstrangeR.Array_Decays[2][2] = sstrangeRamplitudestrangeneutralinoZ2; ParticleSstrangeR.Array_Decays[2][3] = 2; ParticleSstrangeR.Array_Comments[2] = "# ~s_R -> s ~chi_20";
   ParticleSstrangeR.Array_Decays[3][0] = PDGstrange; ParticleSstrangeR.Array_Decays[3][1] = PDGneutralino3; ParticleSstrangeR.Array_Decays[3][2] = sstrangeRamplitudestrangeneutralinoZ3; ParticleSstrangeR.Array_Decays[3][3] = 2; ParticleSstrangeR.Array_Comments[3] = "# ~s_R -> s ~chi_30";
   ParticleSstrangeR.Array_Decays[4][0] = PDGstrange; ParticleSstrangeR.Array_Decays[4][1] = PDGneutralino4; ParticleSstrangeR.Array_Decays[4][2] = sstrangeRamplitudestrangeneutralinoZ4; ParticleSstrangeR.Array_Decays[4][3] = 2; ParticleSstrangeR.Array_Comments[4] = "# ~s_R -> s ~chi_40";
   ParticleSstrangeR.Array_Decays[5][0] = PDGstrange; ParticleSstrangeR.Array_Decays[5][1] = PDGneutralino5; ParticleSstrangeR.Array_Decays[5][2] = sstrangeRamplitudestrangeneutralinoZ5; ParticleSstrangeR.Array_Decays[5][3] = 2; ParticleSstrangeR.Array_Comments[5] = "# ~s_R -> s ~chi_50";

   ParticleSstrangeR.Array_Decays[6][0] = PDGstrange; ParticleSstrangeR.Array_Decays[6][1] = PDGgravitino; ParticleSstrangeR.Array_Decays[6][2] = sstrangeRamplitudestrangegravitino; ParticleSstrangeR.Array_Decays[6][3] = 2; ParticleSstrangeR.Array_Comments[6] = "# ~s_R -> s ~G";

   double SstrangeR_No_1to2_Decays = 0;

   SstrangeR_No_1to2_Decays = ParticleSstrangeR.No_1to2_Decays + ParticleSstrangeR.No_grav_Decays + ParticleSstrangeR.No_NMSSM_Decays;
 
   for (int j = 0; j<SstrangeR_No_1to2_Decays; j++) {
     ParticleSstrangeR.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<SstrangeR_No_1to2_Decays; j++) {
     ParticleSstrangeR.two_width = ParticleSstrangeR.two_width + ParticleSstrangeR.Array_Decays[j][2];
   }
   for (int j=SstrangeR_No_1to2_Decays; j<ParticleSstrangeR.No_of_Decays; j++) {
     ParticleSstrangeR.three_width = ParticleSstrangeR.three_width + ParticleSstrangeR.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleSstrangeR.three_width != ParticleSstrangeR.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for sstrangeR - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSstrangeR.No_of_Decays = SstrangeR_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSstrangeR.total_width = ParticleSstrangeR.two_width;
     }
   else {
     ParticleSstrangeR.total_width = ParticleSstrangeR.two_width + ParticleSstrangeR.three_width;
   }

   if ( ParticleSstrangeR.total_width != ParticleSstrangeR.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSstrangeR.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSstrangeR.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in sstrangeR total width \n");
     }
    
   for (int i =0; i<ParticleSstrangeR.No_of_Decays; i++) {
     ParticleSstrangeR.Array_Decays[i][5]= ParticleSstrangeR.Array_Decays[i][2]/ParticleSstrangeR.total_width;
   }
 
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSstrangeR, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSstrangeR, BRTol);}
 }

 ///ScharmL Decays
 
 double scharmLamplitudegluinocharm=0, scharmLamplitudecharmneutralinoZ1=0, scharmLamplitudecharmneutralinoZ2=0, scharmLamplitudecharmneutralinoZ3=0, scharmLamplitudecharmneutralinoZ4=0, scharmLamplitudecharginoW1strange=0, scharmLamplitudecharginoW2strange=0, scharmLamplitudecharmgravitino=0;
 double scharmLamplitudecharmneutralinoZ5 = 0;

 if (flagscharmL == 1) { 
   scharmLamplitudegluinocharm = squarkamplitudedecaygluino (mu(1,2), mc, mGluino, alphas);
   scharmLamplitudecharginoW1strange = squarkamplitudedecaycharginoW1 (mu(1,2), ms, MCH1, g, thetaR2);
   scharmLamplitudecharginoW2strange = squarkamplitudedecaycharginoW2 (mu(1,2), ms, MCH2, g, thetaR2);
   if (nmssmIsIt == false) {
     scharmLamplitudecharmneutralinoZ1 = squarkLamplitudedecayneutralino (mu(1,2), mc, mneut(1), g, gp, mixNeut, 1, 1);
     scharmLamplitudecharmneutralinoZ2 = squarkLamplitudedecayneutralino (mu(1,2), mc, mneut(2), g, gp, mixNeut, 2, 1);
     scharmLamplitudecharmneutralinoZ3 = squarkLamplitudedecayneutralino (mu(1,2), mc, mneut(3), g, gp, mixNeut, 3, 1);
     scharmLamplitudecharmneutralinoZ4 = squarkLamplitudedecayneutralino (mu(1,2), mc, mneut(4), g, gp, mixNeut, 4, 1);
     
     scharmLamplitudecharmgravitino = squarkamplitudedecaygravitino(mu(1,2), mgravitino, mc, MPlreduced, gravonoff, upsquNLSP);
   }
   else if (nmssmIsIt == true) {
     scharmLamplitudecharmneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,2), mc, mneut(1), g, gp, mixNeut, 'u', 'L', 1); 
     scharmLamplitudecharmneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,2), mc, mneut(2), g, gp, mixNeut, 'u', 'L', 2);
     scharmLamplitudecharmneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,2), mc, mneut(3), g, gp, mixNeut, 'u', 'L', 3);
     scharmLamplitudecharmneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,2), mc, mneut(4), g, gp, mixNeut, 'u', 'L', 4);
     scharmLamplitudecharmneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (mu(1,2), mc, mneut(5), g, gp, mixNeut, 'u', 'L', 5);
   }
 
   ParticleScharmL.Array_Decays[0][0] = PDGcharm; ParticleScharmL.Array_Decays[0][1] = PDGgluino; ParticleScharmL.Array_Decays[0][2] = scharmLamplitudegluinocharm; ParticleScharmL.Array_Decays[0][3] = 2; ParticleScharmL.Array_Comments[0] = "# ~c_L -> c ~g";
   ParticleScharmL.Array_Decays[1][0] = PDGstrange; ParticleScharmL.Array_Decays[1][1] = PDGchargino1; ParticleScharmL.Array_Decays[1][2] = scharmLamplitudecharginoW1strange; ParticleScharmL.Array_Decays[1][3] = 2; ParticleScharmL.Array_Comments[1] = "# ~c_L -> s ~chi_1+";
   ParticleScharmL.Array_Decays[2][0] = PDGstrange; ParticleScharmL.Array_Decays[2][1] = PDGchargino2; ParticleScharmL.Array_Decays[2][2] = scharmLamplitudecharginoW2strange; ParticleScharmL.Array_Decays[2][3] = 2; ParticleScharmL.Array_Comments[2] = "# ~c_L -> s ~chi_2+";
   ParticleScharmL.Array_Decays[3][0] = PDGcharm; ParticleScharmL.Array_Decays[3][1] = PDGneutralino1; ParticleScharmL.Array_Decays[3][2] = scharmLamplitudecharmneutralinoZ1; ParticleScharmL.Array_Decays[3][3] = 2; ParticleScharmL.Array_Comments[3] = "# ~c_L -> c ~chi_10";
   ParticleScharmL.Array_Decays[4][0] = PDGcharm; ParticleScharmL.Array_Decays[4][1] = PDGneutralino2; ParticleScharmL.Array_Decays[4][2] = scharmLamplitudecharmneutralinoZ2; ParticleScharmL.Array_Decays[4][3] = 2; ParticleScharmL.Array_Comments[4] = "# ~c_L -> c ~chi_20";
   ParticleScharmL.Array_Decays[5][0] = PDGcharm; ParticleScharmL.Array_Decays[5][1] = PDGneutralino3; ParticleScharmL.Array_Decays[5][2] = scharmLamplitudecharmneutralinoZ3; ParticleScharmL.Array_Decays[5][3] = 2; ParticleScharmL.Array_Comments[5] = "# ~c_L -> c ~chi_30";
   ParticleScharmL.Array_Decays[6][0] = PDGcharm; ParticleScharmL.Array_Decays[6][1] = PDGneutralino4; ParticleScharmL.Array_Decays[6][2] = scharmLamplitudecharmneutralinoZ4; ParticleScharmL.Array_Decays[6][3] = 2; ParticleScharmL.Array_Comments[6] = "# ~c_L -> c ~chi_40";
   ParticleScharmL.Array_Decays[7][0] = PDGcharm; ParticleScharmL.Array_Decays[7][1] = PDGneutralino5; ParticleScharmL.Array_Decays[7][2] = scharmLamplitudecharmneutralinoZ5; ParticleScharmL.Array_Decays[7][3] = 2; ParticleScharmL.Array_Comments[7] = "# ~c_L -> c ~chi_50";
   
   ParticleScharmL.Array_Decays[8][0] = PDGcharm; ParticleScharmL.Array_Decays[8][1] = PDGgravitino; ParticleScharmL.Array_Decays[8][2] = scharmLamplitudecharmgravitino; ParticleScharmL.Array_Decays[8][3] = 2; ParticleScharmL.Array_Comments[8] = "# ~c_L -> c ~G";

   double ScharmL_No_1to2_Decays = 0;

   ScharmL_No_1to2_Decays = ParticleScharmL.No_1to2_Decays + ParticleScharmL.No_grav_Decays + ParticleScharmL.No_NMSSM_Decays;
 
   for (int j = 0; j<ScharmL_No_1to2_Decays; j++) {
     ParticleScharmL.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<ScharmL_No_1to2_Decays; j++) {
     ParticleScharmL.two_width = ParticleScharmL.two_width + ParticleScharmL.Array_Decays[j][2];
   }
   for (int j=ScharmL_No_1to2_Decays; j<ParticleScharmL.No_of_Decays; j++) {
     ParticleScharmL.three_width = ParticleScharmL.three_width + ParticleScharmL.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleScharmL.three_width != ParticleScharmL.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for scharmL - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleScharmL.No_of_Decays = ScharmL_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleScharmL.total_width = ParticleScharmL.two_width;
     }
   else {
     ParticleScharmL.total_width = ParticleScharmL.two_width + ParticleScharmL.three_width;
   }

   if ( ParticleScharmL.total_width != ParticleScharmL.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleScharmL.No_of_Decays; i++) {
       //   fout << i << " " << ParticleScharmL.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in scharmL total width \n");
     }
 
   for (int i =0; i<ParticleScharmL.No_of_Decays; i++) {
     ParticleScharmL.Array_Decays[i][5]= ParticleScharmL.Array_Decays[i][2]/ParticleScharmL.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleScharmL, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleScharmL, BRTol);}
 }
 
 
 ///ScharmR decays
 
 double scharmRamplitudegluinocharm=0, scharmRamplitudecharmneutralinoZ1=0, scharmRamplitudecharmneutralinoZ2=0, scharmRamplitudecharmneutralinoZ3=0, scharmRamplitudecharmneutralinoZ4=0, scharmRamplitudecharmgravitino=0;
 double scharmRamplitudecharmneutralinoZ5 = 0;

 if (flagscharmR == 1) {
   scharmRamplitudegluinocharm = squarkamplitudedecaygluino (mu(2,2), mc, mGluino, alphas);
   if (nmssmIsIt == false){
     scharmRamplitudecharmneutralinoZ1 = squarkRamplitudedecayneutralino (mu(2,2), mc, mneut(1), g, gp, mixNeut, 1, 1);
     scharmRamplitudecharmneutralinoZ2 = squarkRamplitudedecayneutralino (mu(2,2), mc, mneut(2), g, gp, mixNeut, 2, 1);
     scharmRamplitudecharmneutralinoZ3 = squarkRamplitudedecayneutralino (mu(2,2), mc, mneut(3), g, gp, mixNeut, 3, 1);
     scharmRamplitudecharmneutralinoZ4 = squarkRamplitudedecayneutralino (mu(2,2), mc, mneut(4), g, gp, mixNeut, 4, 1);
     
     scharmRamplitudecharmgravitino = squarkamplitudedecaygravitino(mu(2,2), mgravitino, mc, MPlreduced,gravonoff, upsquNLSP);
   }
   else if (nmssmIsIt == true) {
     scharmRamplitudecharmneutralinoZ1 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,2), mc, mneut(1), g, gp, mixNeut, 'u', 'R', 1); 
     scharmRamplitudecharmneutralinoZ2 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,2), mc, mneut(2), g, gp, mixNeut, 'u', 'R', 2);
     scharmRamplitudecharmneutralinoZ3 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,2), mc, mneut(3), g, gp, mixNeut, 'u', 'R', 3);
     scharmRamplitudecharmneutralinoZ4 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,2), mc, mneut(4), g, gp, mixNeut, 'u', 'R', 4);
     scharmRamplitudecharmneutralinoZ5 = squarkamplitudedecayquarkneutralinoNMSSM (mu(2,2), mc, mneut(5), g, gp, mixNeut, 'u', 'R', 5);
   }
   
   ParticleScharmR.Array_Decays[0][0] = PDGcharm; ParticleScharmR.Array_Decays[0][1] = PDGgluino; ParticleScharmR.Array_Decays[0][2] = scharmRamplitudegluinocharm; ParticleScharmR.Array_Decays[0][3] = 2; ParticleScharmR.Array_Comments[0] = "# ~c_R -> c ~g";
   ParticleScharmR.Array_Decays[1][0] = PDGcharm; ParticleScharmR.Array_Decays[1][1] = PDGneutralino1; ParticleScharmR.Array_Decays[1][2] = scharmRamplitudecharmneutralinoZ1; ParticleScharmR.Array_Decays[1][3] = 2; ParticleScharmR.Array_Comments[1] = "# ~c_R -> c ~chi_10";
   ParticleScharmR.Array_Decays[2][0] = PDGcharm; ParticleScharmR.Array_Decays[2][1] = PDGneutralino2; ParticleScharmR.Array_Decays[2][2] = scharmRamplitudecharmneutralinoZ2; ParticleScharmR.Array_Decays[2][3] = 2; ParticleScharmR.Array_Comments[2] = "# ~c_R -> c ~chi_20";
   ParticleScharmR.Array_Decays[3][0] = PDGcharm; ParticleScharmR.Array_Decays[3][1] = PDGneutralino3; ParticleScharmR.Array_Decays[3][2] = scharmRamplitudecharmneutralinoZ3; ParticleScharmR.Array_Decays[3][3] = 2; ParticleScharmR.Array_Comments[3] = "# ~c_R -> c ~chi_30";
   ParticleScharmR.Array_Decays[4][0] = PDGcharm; ParticleScharmR.Array_Decays[4][1] = PDGneutralino4; ParticleScharmR.Array_Decays[4][2] = scharmRamplitudecharmneutralinoZ4; ParticleScharmR.Array_Decays[4][3] = 2; ParticleScharmR.Array_Comments[4] = "# ~c_R -> c ~chi_40";
   ParticleScharmR.Array_Decays[5][0] = PDGcharm; ParticleScharmR.Array_Decays[5][1] = PDGneutralino5; ParticleScharmR.Array_Decays[5][2] = scharmRamplitudecharmneutralinoZ5; ParticleScharmR.Array_Decays[5][3] = 2; ParticleScharmR.Array_Comments[5] = "# ~c_R -> c ~chi_50";
   
   ParticleScharmR.Array_Decays[6][0] = PDGcharm; ParticleScharmR.Array_Decays[6][1] = PDGgravitino; ParticleScharmR.Array_Decays[6][2] = scharmRamplitudecharmgravitino; ParticleScharmR.Array_Decays[6][3] = 2; ParticleScharmR.Array_Comments[6] = "# ~c_R -> c ~G";

   double ScharmR_No_1to2_Decays = 0;

   ScharmR_No_1to2_Decays = ParticleScharmR.No_1to2_Decays + ParticleScharmR.No_grav_Decays + ParticleScharmR.No_NMSSM_Decays;
 
   for (int j = 0; j<ScharmR_No_1to2_Decays; j++) {
     ParticleScharmR.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<ScharmR_No_1to2_Decays; j++) {
     ParticleScharmR.two_width = ParticleScharmR.two_width + ParticleScharmR.Array_Decays[j][2];
   }
   for (int j=ScharmR_No_1to2_Decays; j<ParticleScharmR.No_of_Decays; j++) {
     ParticleScharmR.three_width = ParticleScharmR.three_width + ParticleScharmR.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions 
   if ( ParticleScharmR.three_width != ParticleScharmR.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for scharmR - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleScharmR.No_of_Decays = ScharmR_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleScharmR.total_width = ParticleScharmR.two_width;
     }
   else {
     ParticleScharmR.total_width = ParticleScharmR.two_width + ParticleScharmL.three_width;
   }
   
   if ( ParticleScharmR.total_width != ParticleScharmR.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleScharmR.No_of_Decays; i++) {
       //   fout << i << " " << ParticleScharmR.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in scharmR total width \n");
     }
 
   for (int i =0; i<ParticleScharmR.No_of_Decays; i++) {
     ParticleScharmR.Array_Decays[i][5]= ParticleScharmR.Array_Decays[i][2]/ParticleScharmR.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleScharmR, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleScharmR, BRTol);}
 }

 ///Sbottom1 Decays
 
 double sbottom1amplitudegluinobottom=0, sbottom1amplitudebottomneutralinoZ1=0, sbottom1amplitudebottomneutralinoZ2=0, sbottom1amplitudebottomneutralinoZ3=0, sbottom1amplitudebottomneutralinoZ4=0, sbottom1amplitudetopcharginoW1=0, sbottom1amplitudetopcharginoW2=0, sbottom1amplitudeWbosonstop1=0, sbottom1amplitudeWbosonstop2=0, sbottom1amplitudeHminusstop1=0, sbottom1amplitudeHminusstop2=0, sbottom1amplitudebottomgravitino=0;
 double sbottom1amplitudebottomneutralinoZ5 = 0;

 if (flagsbottom1 == 1) {
   sbottom1amplitudegluinobottom = squarkamplitudedecaygluinomix (md(1,3), mb, mGluino, alphas, 1, thetab);
   sbottom1amplitudetopcharginoW1 = squark1amplitudedecaycharginoW1mix (md(1,3), mt, MCH1, g, thetaL2, thetaR2, thetab, beta, runmw, runmt, runmb, 2);
   sbottom1amplitudetopcharginoW2 = squark1amplitudedecaycharginoW2mix (md(1,3), mt, MCH2, g, thetaL2, thetaR2, thetab, beta, runmw, runmt, runmb, 2);
   if (nmssmIsIt == false) {
     sbottom1amplitudebottomneutralinoZ1 = squark3amplitudedecayneutralino (md(1,3), mb, mneut(1), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 1);
     sbottom1amplitudebottomneutralinoZ2 = squark3amplitudedecayneutralino (md(1,3), mb, mneut(2), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 2);
     sbottom1amplitudebottomneutralinoZ3 = squark3amplitudedecayneutralino (md(1,3), mb, mneut(3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 3);
     sbottom1amplitudebottomneutralinoZ4 = squark3amplitudedecayneutralino (md(1,3), mb, mneut(4), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 4);
     sbottom1amplitudebottomgravitino = squarkamplitudedecaygravitino(md(1,3), mgravitino, mb, MPlreduced, gravonoff, downsquNLSP);
   }
   else if (nmssmIsIt == true) {
     sbottom1amplitudebottomneutralinoZ1 = sbottomamplitudedecaybottomneutralinoNMSSM (md(1,3), mb, mneut(1), g, gp, thetab, mixNeut, runmb, runmw, beta, 1, 1);
     sbottom1amplitudebottomneutralinoZ2 = sbottomamplitudedecaybottomneutralinoNMSSM (md(1,3), mb, mneut(2), g, gp, thetab, mixNeut, runmb, runmw, beta, 1, 2);
     sbottom1amplitudebottomneutralinoZ3 = sbottomamplitudedecaybottomneutralinoNMSSM (md(1,3), mb, mneut(3), g, gp, thetab, mixNeut, runmb, runmw, beta, 1, 3);
     sbottom1amplitudebottomneutralinoZ4 = sbottomamplitudedecaybottomneutralinoNMSSM (md(1,3), mb, mneut(4), g, gp, thetab, mixNeut, runmb, runmw, beta, 1, 4);
     sbottom1amplitudebottomneutralinoZ5 = sbottomamplitudedecaybottomneutralinoNMSSM (md(1,3), mb, mneut(5), g, gp, thetab, mixNeut, runmb, runmw, beta, 1, 5);
   }

   sbottom1amplitudeWbosonstop1 = squark3amplitudedecaysquark3Wboson (md(1,3), polemw, mu(1,3), g, thetat, thetab, 2, 1, 1, 1);
   sbottom1amplitudeWbosonstop2 = squark3amplitudedecaysquark3Wboson (md(1,3), polemw, mu(2,3), g, thetat, thetab, 2, 1, 1, 2);
   sbottom1amplitudeHminusstop1 = squark3amplitudedecaychargedHiggssquark3 (md(1,3), mHpm, mu(1,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 1);
   sbottom1amplitudeHminusstop2 = squark3amplitudedecaychargedHiggssquark3 (md(1,3), mHpm, mu(2,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 1);

   ParticleSbottom1.Array_Decays[0][0] = PDGbottom; ParticleSbottom1.Array_Decays[0][1] = PDGgluino; ParticleSbottom1.Array_Decays[0][2] = sbottom1amplitudegluinobottom; ParticleSbottom1.Array_Decays[0][3] = 2; ParticleSbottom1.Array_Comments[0] = "# ~b_1 -> b ~g";
   ParticleSbottom1.Array_Decays[1][0] = PDGtop; ParticleSbottom1.Array_Decays[1][1] = -PDGchargino1; ParticleSbottom1.Array_Decays[1][2] = sbottom1amplitudetopcharginoW1; ParticleSbottom1.Array_Decays[1][3] = 2; ParticleSbottom1.Array_Comments[1] = "# ~b_1 -> t ~chi_1-"; 
   ParticleSbottom1.Array_Decays[2][0] = PDGtop; ParticleSbottom1.Array_Decays[2][1] = PDGchargino2; ParticleSbottom1.Array_Decays[2][2] = sbottom1amplitudetopcharginoW2; ParticleSbottom1.Array_Decays[2][3] = 2; ParticleSbottom1.Array_Comments[2] = "# ~b_1 -> t ~-chi_2-";

   ParticleSbottom1.Array_Decays[3][0] = -PDGWplus; ParticleSbottom1.Array_Decays[3][1] = PDGstop1 ; ParticleSbottom1.Array_Decays[3][2] = sbottom1amplitudeWbosonstop1; ParticleSbottom1.Array_Decays[3][3] = 2; ParticleSbottom1.Array_Comments[3] = "# ~b_1 -> W- ~t_1";
   ParticleSbottom1.Array_Decays[4][0] = -PDGWplus; ParticleSbottom1.Array_Decays[4][1] = PDGstop2 ; ParticleSbottom1.Array_Decays[4][2] = sbottom1amplitudeWbosonstop2; ParticleSbottom1.Array_Decays[4][3] = 2; ParticleSbottom1.Array_Comments[4] = "# ~b_1 -> W- ~t_2";
   ParticleSbottom1.Array_Decays[5][0] = -PDGHplus; ParticleSbottom1.Array_Decays[5][1] = PDGstop1; ParticleSbottom1.Array_Decays[5][2] = sbottom1amplitudeHminusstop1; ParticleSbottom1.Array_Decays[5][3] = 2; ParticleSbottom1.Array_Comments[5] = "# ~b_1 -> H- ~t_1";
   ParticleSbottom1.Array_Decays[6][0] = -PDGHplus; ParticleSbottom1.Array_Decays[6][1] = PDGstop2; ParticleSbottom1.Array_Decays[6][2] = sbottom1amplitudeHminusstop2; ParticleSbottom1.Array_Decays[6][3] = 2; ParticleSbottom1.Array_Comments[6] = "# ~b_1 -> H- ~t_2";

   ParticleSbottom1.Array_Decays[7][0] = PDGbottom; ParticleSbottom1.Array_Decays[7][1] = PDGneutralino1; ParticleSbottom1.Array_Decays[7][2] = sbottom1amplitudebottomneutralinoZ1; ParticleSbottom1.Array_Decays[7][3] = 2; ParticleSbottom1.Array_Comments[7] = "# ~b_1 -> b ~chi_10";
   ParticleSbottom1.Array_Decays[8][0] = PDGbottom; ParticleSbottom1.Array_Decays[8][1] = PDGneutralino2; ParticleSbottom1.Array_Decays[8][2] = sbottom1amplitudebottomneutralinoZ2; ParticleSbottom1.Array_Decays[8][3] = 2; ParticleSbottom1.Array_Comments[8] = "# ~b_1 -> b ~chi_20";
   ParticleSbottom1.Array_Decays[9][0] = PDGbottom; ParticleSbottom1.Array_Decays[9][1] = PDGneutralino3; ParticleSbottom1.Array_Decays[9][2] = sbottom1amplitudebottomneutralinoZ3; ParticleSbottom1.Array_Decays[9][3] = 2; ParticleSbottom1.Array_Comments[9] = "# ~b_1 -> b ~chi_30";
   ParticleSbottom1.Array_Decays[10][0] = PDGbottom; ParticleSbottom1.Array_Decays[10][1] = PDGneutralino4; ParticleSbottom1.Array_Decays[10][2] = sbottom1amplitudebottomneutralinoZ4; ParticleSbottom1.Array_Decays[10][3] = 2; ParticleSbottom1.Array_Comments[10] = "# ~b_1 -> b ~chi_40";
   ParticleSbottom1.Array_Decays[11][0] = PDGbottom; ParticleSbottom1.Array_Decays[11][1] = PDGneutralino5; ParticleSbottom1.Array_Decays[11][2] = sbottom1amplitudebottomneutralinoZ5; ParticleSbottom1.Array_Decays[11][3] = 2; ParticleSbottom1.Array_Comments[11] = "# ~b_1 -> b ~chi_50";

   ParticleSbottom1.Array_Decays[12][0] = PDGbottom; ParticleSbottom1.Array_Decays[12][1] = PDGgravitino; ParticleSbottom1.Array_Decays[12][2] = sbottom1amplitudebottomgravitino; ParticleSbottom1.Array_Decays[12][3] = 2; ParticleSbottom1.Array_Comments[12] = "# ~b_1 -> b ~G";

   double Sbottom1_No_1to2_Decays = 0;

   Sbottom1_No_1to2_Decays = ParticleSbottom1.No_1to2_Decays + ParticleSbottom1.No_grav_Decays + ParticleSbottom1.No_NMSSM_Decays;
 
   for (int j = 0; j<Sbottom1_No_1to2_Decays; j++) {
     ParticleSbottom1.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Sbottom1_No_1to2_Decays; j++) {
     ParticleSbottom1.two_width = ParticleSbottom1.two_width + ParticleSbottom1.Array_Decays[j][2];
   }
   for (int j=Sbottom1_No_1to2_Decays; j<ParticleSbottom1.No_of_Decays; j++) {
     ParticleSbottom1.three_width = ParticleSbottom1.three_width + ParticleSbottom1.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleSbottom1.three_width != ParticleSbottom1.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for sbottom1 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       ParticleSbottom1.No_of_Decays = Sbottom1_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSbottom1.total_width = ParticleSbottom1.two_width;
     }
   else {
     ParticleSbottom1.total_width = ParticleSbottom1.two_width + ParticleSbottom1.three_width;
   }

   if ( ParticleSbottom1.total_width != ParticleSbottom1.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSbottom1.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSbottom1.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in sbottom1 total width \n");
     }
    
   for (int i =0; i<ParticleSbottom1.No_of_Decays; i++) {
     ParticleSbottom1.Array_Decays[i][5]= ParticleSbottom1.Array_Decays[i][2]/ParticleSbottom1.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSbottom1, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSbottom1, BRTol);}
   
 }

 ///Sbottom2 Decays

 double sbottom2amplitudegluinobottom=0, sbottom2amplitudebottomneutralinoZ1=0, sbottom2amplitudebottomneutralinoZ2=0, sbottom2amplitudebottomneutralinoZ3=0, sbottom2amplitudebottomneutralinoZ4=0, sbottom2amplitudetopcharginoW1=0, sbottom2amplitudetopcharginoW2=0, sbottom2amplitudeWbosonstop1=0, sbottom2amplitudeWbosonstop2=0, sbottom2amplitudeHminusstop1=0, sbottom2amplitudeHminusstop2=0, sbottom2amplitudeZbosonsbottom1=0, sbottom2amplitudehsbottom1=0, sbottom2amplitudeAsbottom1=0, sbottom2amplitudeHsbottom1=0, sbottom2amplitudebottomgravitino=0;

 double sbottom2amplitudeH3sbottom1 = 0, sbottom2amplitudeA2sbottom1 = 0, sbottom2amplitudebottomneutralinoZ5 = 0;
 
 if (flagsbottom2 == 1) {
   sbottom2amplitudegluinobottom =  squarkamplitudedecaygluinomix (md(2,3), mb, mGluino, alphas, 2, thetab);
   sbottom2amplitudetopcharginoW1 = squark2amplitudedecaycharginoW1mix (md(2,3), mt, MCH1, g, thetaL2, thetaR2, thetab, beta, runmw, runmt, runmb,2);
   sbottom2amplitudetopcharginoW2 = squark2amplitudedecaycharginoW2mix (md(2,3), mt, MCH2, g, thetaL2, thetaR2, thetab, beta, runmw, runmt, runmb,2); 
   sbottom2amplitudebottomneutralinoZ1 = squark3amplitudedecayneutralino (md(2,3), mb, mneut(1), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 1);
   sbottom2amplitudebottomneutralinoZ2 = squark3amplitudedecayneutralino (md(2,3), mb, mneut(2), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 2);
   sbottom2amplitudebottomneutralinoZ3 = squark3amplitudedecayneutralino (md(2,3), mb, mneut(3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 3);
   sbottom2amplitudebottomneutralinoZ4 = squark3amplitudedecayneutralino (md(2,3), mb, mneut(4), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 4);
   sbottom2amplitudeWbosonstop1 = squark3amplitudedecaysquark3Wboson (md(2,3), polemw, mu(1,3), g, thetat, thetab, 2, 2, 1, 1);
   sbottom2amplitudeWbosonstop2 = squark3amplitudedecaysquark3Wboson (md(2,3), polemw, mu(2,3), g, thetat, thetab, 2, 2, 1, 2);
   sbottom2amplitudeHminusstop1 = squark3amplitudedecaychargedHiggssquark3 (md(2,3), mHpm, mu(1,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 2);
   sbottom2amplitudeHminusstop2 = squark3amplitudedecaychargedHiggssquark3 (md(2,3), mHpm, mu(2,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 2);
   sbottom2amplitudeZbosonsbottom1 = squark32amplitudedecaysquark3Zboson (md(2,3), md(1,3), polemz, g, gp, thetab);
   if (nmssmIsIt == false) {
     sbottom2amplitudehsbottom1 = squark32amplitudedecayneutralHiggssquark3 (md(2,3), mh0(1), md(1,3), g, gp, runmw, beta, alpha, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 'h');
     sbottom2amplitudeHsbottom1 = squark32amplitudedecayneutralHiggssquark3 (md(2,3), mh0(2), md(1,3), g, gp, runmw, beta, alpha, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 'H');
     sbottom2amplitudeAsbottom1 = squark32amplitudedecayneutralHiggssquark3 (md(2,3), mA0(1), md(1,3), g, gp, runmw, beta, alpha, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 'A');
     sbottom2amplitudebottomgravitino = squarkamplitudedecaygravitino(md(2,3), mgravitino, mb, MPlreduced, gravonoff, downsquNLSP);
   }
   else if (nmssmIsIt == true) {
     sbottom2amplitudehsbottom1 = sbottom2amplitudedecaysbottom1CPevenhiggsNMSSM (md(2,3), md(1,3), mh0(1), runmb, thetab, CPEMix, beta, runmw, g, gp, Ab, mueff, lam, 1);
     sbottom2amplitudeHsbottom1 = sbottom2amplitudedecaysbottom1CPevenhiggsNMSSM (md(2,3), md(1,3), mh0(2), runmb, thetab, CPEMix, beta, runmw, g, gp, Ab, mueff, lam, 2);
     sbottom2amplitudeH3sbottom1 = sbottom2amplitudedecaysbottom1CPevenhiggsNMSSM (md(2,3), md(1,3), mh0(3), runmb, thetab, CPEMix, beta, runmw, g, gp, Ab, mueff, lam, 3);
     sbottom2amplitudeAsbottom1 = sbottom2amplitudedecaysbottom1CPoddhiggsNMSSM (md(2,3), md(1,3), mA0(1), runmb , thetab, CPOMix, beta, runmw, g, Ab, mueff, lam, 1); 
     sbottom2amplitudeA2sbottom1 = sbottom2amplitudedecaysbottom1CPoddhiggsNMSSM (md(2,3), md(1,3), mA0(2), runmb , thetab, CPOMix, beta, runmw, g, Ab, mueff, lam, 2);
     sbottom2amplitudebottomneutralinoZ1 = sbottomamplitudedecaybottomneutralinoNMSSM (md(2,3), mb, mneut(1), g, gp, thetab, mixNeut, runmb, runmw, beta, 2, 1);
     sbottom2amplitudebottomneutralinoZ2 = sbottomamplitudedecaybottomneutralinoNMSSM (md(2,3), mb, mneut(2), g, gp, thetab, mixNeut, runmb, runmw, beta, 2, 2);
     sbottom2amplitudebottomneutralinoZ3 = sbottomamplitudedecaybottomneutralinoNMSSM (md(2,3), mb, mneut(3), g, gp, thetab, mixNeut, runmb, runmw, beta, 2, 3);
     sbottom2amplitudebottomneutralinoZ4 = sbottomamplitudedecaybottomneutralinoNMSSM (md(2,3), mb, mneut(4), g, gp, thetab, mixNeut, runmb, runmw, beta, 2, 4);
     sbottom2amplitudebottomneutralinoZ5 = sbottomamplitudedecaybottomneutralinoNMSSM (md(2,3), mb, mneut(5), g, gp, thetab, mixNeut, runmb, runmw, beta, 2, 5);   
   }
   
   ParticleSbottom2.Array_Decays[0][0] = PDGbottom; ParticleSbottom2.Array_Decays[0][1] = PDGgluino; ParticleSbottom2.Array_Decays[0][2] = sbottom2amplitudegluinobottom; ParticleSbottom2.Array_Decays[0][3] = 2; ParticleSbottom2.Array_Comments[0] = "# ~b_2 -> b ~g";
   ParticleSbottom2.Array_Decays[1][0] = PDGtop; ParticleSbottom2.Array_Decays[1][1] = -PDGchargino1; ParticleSbottom2.Array_Decays[1][2] = sbottom2amplitudetopcharginoW1; ParticleSbottom2.Array_Decays[1][3] = 2; ParticleSbottom2.Array_Comments[1] = "# ~b_2 -> t ~chi_1-";
   ParticleSbottom2.Array_Decays[2][0] = PDGtop; ParticleSbottom2.Array_Decays[2][1] = -PDGchargino2; ParticleSbottom2.Array_Decays[2][2] = sbottom2amplitudetopcharginoW2; ParticleSbottom2.Array_Decays[2][3] = 2; ParticleSbottom2.Array_Comments[2] = "# ~b_2 -> t ~chi_2-";

   ParticleSbottom2.Array_Decays[3][0] = -PDGWplus; ParticleSbottom2.Array_Decays[3][1] = PDGstop1 ; ParticleSbottom2.Array_Decays[3][2] = sbottom2amplitudeWbosonstop1; ParticleSbottom2.Array_Decays[3][3] = 2; ParticleSbottom2.Array_Comments[3] = "# ~b_2 -> W- ~t_1";
   ParticleSbottom2.Array_Decays[4][0] = -PDGWplus; ParticleSbottom2.Array_Decays[4][1] = PDGstop2 ; ParticleSbottom2.Array_Decays[4][2] = sbottom2amplitudeWbosonstop2; ParticleSbottom2.Array_Decays[4][3] = 2; ParticleSbottom2.Array_Comments[4] = "# ~b_2 -> W- ~t_2";
   ParticleSbottom2.Array_Decays[5][0] = -PDGHplus; ParticleSbottom2.Array_Decays[5][1] = PDGstop1; ParticleSbottom2.Array_Decays[5][2] = sbottom2amplitudeHminusstop1; ParticleSbottom2.Array_Decays[5][3] = 2; ParticleSbottom2.Array_Comments[5] = "# ~b_2 -> H- ~t_1";
   ParticleSbottom2.Array_Decays[6][0] = -PDGHplus; ParticleSbottom2.Array_Decays[6][1] = PDGstop2; ParticleSbottom2.Array_Decays[6][2] = sbottom2amplitudeHminusstop2; ParticleSbottom2.Array_Decays[6][3] = 2; ParticleSbottom2.Array_Comments[6] = "# ~b_2 -> H- ~t_2";
   ParticleSbottom2.Array_Decays[7][0] = PDGh0; ParticleSbottom2.Array_Decays[7][1] = PDGsbottom1; ParticleSbottom2.Array_Decays[7][2] = sbottom2amplitudehsbottom1; ParticleSbottom2.Array_Decays[7][3] = 2; ParticleSbottom2.Array_Comments[7] = "# ~b_2 -> h ~b_1";
   ParticleSbottom2.Array_Decays[8][0] = PDGH0; ParticleSbottom2.Array_Decays[8][1] = PDGsbottom1; ParticleSbottom2.Array_Decays[8][2] = sbottom2amplitudeHsbottom1; ParticleSbottom2.Array_Decays[8][3] = 2; ParticleSbottom2.Array_Comments[8] = "# ~b_2 -> H ~b_1";
   ParticleSbottom2.Array_Decays[9][0] = PDGA0; ParticleSbottom2.Array_Decays[9][1] = PDGsbottom1; ParticleSbottom2.Array_Decays[9][2] = sbottom2amplitudeAsbottom1; ParticleSbottom2.Array_Decays[9][3] = 2; ParticleSbottom2.Array_Comments[9] = "# ~b_2 -> A ~b_1";
   ParticleSbottom2.Array_Decays[10][0] = PDGsbottom1; ParticleSbottom2.Array_Decays[10][1] = PDGZboson; ParticleSbottom2.Array_Decays[10][2] = sbottom2amplitudeZbosonsbottom1; ParticleSbottom2.Array_Decays[10][3] = 2; ParticleSbottom2.Array_Comments[10] = "# ~b_2 -> Z ~b_1";

   ParticleSbottom2.Array_Decays[11][0] = PDGbottom; ParticleSbottom2.Array_Decays[11][1] = PDGneutralino1; ParticleSbottom2.Array_Decays[11][2] = sbottom2amplitudebottomneutralinoZ1; ParticleSbottom2.Array_Decays[11][3] = 2; ParticleSbottom2.Array_Comments[11] = "# ~b_2 -> b ~chi_10";
   ParticleSbottom2.Array_Decays[12][0] = PDGbottom; ParticleSbottom2.Array_Decays[12][1] = PDGneutralino2; ParticleSbottom2.Array_Decays[12][2] = sbottom2amplitudebottomneutralinoZ2; ParticleSbottom2.Array_Decays[12][3] = 2; ParticleSbottom2.Array_Comments[12] = "# ~b_2 -> b ~chi_20";
   ParticleSbottom2.Array_Decays[13][0] = PDGbottom; ParticleSbottom2.Array_Decays[13][1] = PDGneutralino3; ParticleSbottom2.Array_Decays[13][2] = sbottom2amplitudebottomneutralinoZ3; ParticleSbottom2.Array_Decays[13][3] = 2; ParticleSbottom2.Array_Comments[13] = "# ~b_2 -> b ~chi_30";
   ParticleSbottom2.Array_Decays[14][0] = PDGbottom; ParticleSbottom2.Array_Decays[14][1] = PDGneutralino4; ParticleSbottom2.Array_Decays[14][2] = sbottom2amplitudebottomneutralinoZ4; ParticleSbottom2.Array_Decays[14][3] = 2; ParticleSbottom2.Array_Comments[14] = "# ~b_2 -> b ~chi_40";
   ParticleSbottom2.Array_Decays[15][0] = PDGbottom; ParticleSbottom2.Array_Decays[15][1] = PDGneutralino5; ParticleSbottom2.Array_Decays[15][2] = sbottom2amplitudebottomneutralinoZ5; ParticleSbottom2.Array_Decays[15][3] = 2; ParticleSbottom2.Array_Comments[15] = "# ~b_2 -> b ~chi_50";

   ParticleSbottom2.Array_Decays[16][0] = PDGbottom; ParticleSbottom2.Array_Decays[16][1] = PDGgravitino; ParticleSbottom2.Array_Decays[16][2] = sbottom2amplitudebottomgravitino; ParticleSbottom2.Array_Decays[16][3] = 2; ParticleSbottom2.Array_Comments[16] = "# ~b_2 -> b ~G";
   ParticleSbottom2.Array_Decays[17][0] = PDGH3; ParticleSbottom2.Array_Decays[17][1] = PDGsbottom1; ParticleSbottom2.Array_Decays[17][2] = sbottom2amplitudeH3sbottom1; ParticleSbottom2.Array_Decays[17][3] = 2; ParticleSbottom2.Array_Comments[17] = "# ~b_2 -> H3 ~b_1";
   ParticleSbottom2.Array_Decays[18][0] = PDGA2; ParticleSbottom2.Array_Decays[18][1] = PDGsbottom1; ParticleSbottom2.Array_Decays[18][2] = sbottom2amplitudeA2sbottom1; ParticleSbottom2.Array_Decays[18][3] = 2; ParticleSbottom2.Array_Comments[18] = "# ~b_2 -> A2 ~b_1"; 
   double Sbottom2_No_1to2_Decays = 0;

   Sbottom2_No_1to2_Decays = ParticleSbottom2.No_1to2_Decays + ParticleSbottom2.No_grav_Decays + ParticleSbottom2.No_NMSSM_Decays;

   for (int j = 0; j<Sbottom2_No_1to2_Decays; j++) {
     ParticleSbottom2.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Sbottom2_No_1to2_Decays; j++) {
     ParticleSbottom2.two_width = ParticleSbottom2.two_width + ParticleSbottom2.Array_Decays[j][2];
   }
   for (int j=Sbottom2_No_1to2_Decays; j<ParticleSbottom2.No_of_Decays; j++) {
     ParticleSbottom2.three_width = ParticleSbottom2.three_width + ParticleSbottom2.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleSbottom2.three_width != ParticleSbottom2.three_width) /// Tests for a nan as only nans aren't equal to themselves
   {
     fout << "# Three body decays give nan for sbottom2 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
     errorflag = -1;
     ParticleSbottom2.No_of_Decays = Sbottom2_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
     ParticleSbottom2.total_width = ParticleSbottom2.two_width;
   }
   else {
     ParticleSbottom2.total_width = ParticleSbottom2.two_width + ParticleSbottom2.three_width;
   }
   
   if ( ParticleSbottom2.total_width != ParticleSbottom2.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSbottom2.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSbottom2.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in sbottom2 total width \n");
     }
   
   for (int i =0; i<ParticleSbottom2.No_of_Decays; i++) {
     ParticleSbottom2.Array_Decays[i][5]= ParticleSbottom2.Array_Decays[i][2]/ParticleSbottom2.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSbottom2, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSbottom2, BRTol);}
   
 }

 ///Stop1 Decays

 double stop1amplitudegluinotop=0, stop1amplitudetopneutralinoZ1=0, stop1amplitudetopneutralinoZ2=0, stop1amplitudetopneutralinoZ3=0, stop1amplitudetopneutralinoZ4=0, stop1amplitudebottomcharginoW1=0, stop1amplitudebottomcharginoW2=0, stop1amplitudeWbosonsbottom1=0, stop1amplitudeWbosonsbottom2=0, stop1amplitudeHplussbottom1=0, stop1amplitudeHplussbottom2=0, stop1amplitudetopgravitino=0;
 
 double stop1amplitudetopneutralinoZ5 = 0;

 if (flagstop1 == 1) {
   stop1amplitudegluinotop = squarkamplitudedecaygluinomix (mu(1,3), mt, mGluino, alphas, 1, thetat);
   stop1amplitudebottomcharginoW1 = squark1amplitudedecaycharginoW1mix (mu(1,3), mb, MCH1, g, thetaL2, thetaR2, thetat, beta, runmw, runmt, runmb, 1);
   stop1amplitudebottomcharginoW2 = squark1amplitudedecaycharginoW2mix (mu(1,3), mb, MCH2, g, thetaL2, thetaR2, thetat, beta, runmw, runmt, runmb, 1);
   if (nmssmIsIt == false) {
     stop1amplitudetopneutralinoZ1 = squark3amplitudedecayneutralino (mu(1,3), mt, mneut(1), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 1);
     stop1amplitudetopneutralinoZ2 = squark3amplitudedecayneutralino (mu(1,3), mt, mneut(2), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 2);
     stop1amplitudetopneutralinoZ3 = squark3amplitudedecayneutralino (mu(1,3), mt, mneut(3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 3);
     stop1amplitudetopneutralinoZ4 = squark3amplitudedecayneutralino (mu(1,3), mt, mneut(4), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 4);
     stop1amplitudetopgravitino = squarkamplitudedecaygravitino(mu(1,3), mgravitino, mt, MPlreduced, gravonoff, upsquNLSP);
   }
   else if (nmssmIsIt == true) {
     stop1amplitudetopneutralinoZ1 = stopamplitudedecaytopneutralinoNMSSM (mu(1,3), mt, mneut(1), g, gp, thetat, mixNeut, runmt, runmw, beta, 1, 1);
     stop1amplitudetopneutralinoZ2 = stopamplitudedecaytopneutralinoNMSSM (mu(1,3), mt, mneut(2), g, gp, thetat, mixNeut, runmt, runmw, beta, 1, 2);
     stop1amplitudetopneutralinoZ3 = stopamplitudedecaytopneutralinoNMSSM (mu(1,3), mt, mneut(3), g, gp, thetat, mixNeut, runmt, runmw, beta, 1, 3);
     stop1amplitudetopneutralinoZ4 = stopamplitudedecaytopneutralinoNMSSM (mu(1,3), mt, mneut(4), g, gp, thetat, mixNeut, runmt, runmw, beta, 1, 4);
     stop1amplitudetopneutralinoZ5 = stopamplitudedecaytopneutralinoNMSSM (mu(1,3), mt, mneut(5), g, gp, thetat, mixNeut, runmt, runmw, beta, 1, 5);
   }
   
   stop1amplitudeWbosonsbottom1 = squark3amplitudedecaysquark3Wboson (mu(1,3), polemw, md(1,3), g, thetat, thetab, 1, 1, 2, 1);
   stop1amplitudeWbosonsbottom2 = squark3amplitudedecaysquark3Wboson (mu(1,3), polemw, md(2,3), g, thetat, thetab, 1, 1, 2, 2);
   stop1amplitudeHplussbottom1 = squark3amplitudedecaychargedHiggssquark3 (mu(1,3), mHpm, md(1,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 1);
   stop1amplitudeHplussbottom2 = squark3amplitudedecaychargedHiggssquark3 (mu(1,3), mHpm, md(2,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 2);
 
   ParticleStop1.Array_Decays[0][0] = PDGtop; ParticleStop1.Array_Decays[0][1] = PDGgluino; ParticleStop1.Array_Decays[0][2] = stop1amplitudegluinotop; ParticleStop1.Array_Decays[0][3] = 2; ParticleStop1.Array_Comments[0] = "# ~t_1 -> t ~g";
   ParticleStop1.Array_Decays[1][0] = PDGbottom; ParticleStop1.Array_Decays[1][1] = PDGchargino1; ParticleStop1.Array_Decays[1][2] = stop1amplitudebottomcharginoW1; ParticleStop1.Array_Decays[1][3] = 2; ParticleStop1.Array_Comments[1] = "# ~t_1 -> b ~chi_1+";
   ParticleStop1.Array_Decays[2][0] = PDGbottom; ParticleStop1.Array_Decays[2][1] = PDGchargino2; ParticleStop1.Array_Decays[2][2] = stop1amplitudebottomcharginoW2; ParticleStop1.Array_Decays[2][3] = 2; ParticleStop1.Array_Comments[2] = "# ~t_1 -> b ~chi_2+";
   
   ParticleStop1.Array_Decays[3][0] = PDGWplus; ParticleStop1.Array_Decays[3][1] = PDGsbottom1 ; ParticleStop1.Array_Decays[3][2] = stop1amplitudeWbosonsbottom1; ParticleStop1.Array_Decays[3][3] = 2; ParticleStop1.Array_Comments[3] = "# ~t_1 -> W+ ~b_1";
   ParticleStop1.Array_Decays[4][0] = PDGWplus; ParticleStop1.Array_Decays[4][1] = PDGsbottom2 ; ParticleStop1.Array_Decays[4][2] = stop1amplitudeWbosonsbottom2; ParticleStop1.Array_Decays[4][3] = 2; ParticleStop1.Array_Comments[4] = "# ~t_1 -> W+ ~b_2";
   ParticleStop1.Array_Decays[5][0] = PDGHplus; ParticleStop1.Array_Decays[5][1] = PDGsbottom1; ParticleStop1.Array_Decays[5][2] = stop1amplitudeHplussbottom1; ParticleStop1.Array_Decays[5][3] = 2; ParticleStop1.Array_Comments[5] = "# ~t_1 -> H+ ~b_1";
   ParticleStop1.Array_Decays[6][0] = PDGHplus; ParticleStop1.Array_Decays[6][1] = PDGsbottom2; ParticleStop1.Array_Decays[6][2] = stop1amplitudeHplussbottom2; ParticleStop1.Array_Decays[6][3] = 2; ParticleStop1.Array_Comments[6] = "# ~t_1 -> H+ ~b_2"; 

   ParticleStop1.Array_Decays[7][0] = PDGtop; ParticleStop1.Array_Decays[7][1] = PDGneutralino1; ParticleStop1.Array_Decays[7][2] = stop1amplitudetopneutralinoZ1; ParticleStop1.Array_Decays[7][3] = 2; ParticleStop1.Array_Comments[7] = "# ~t_1 -> t ~chi_10";
   ParticleStop1.Array_Decays[8][0] = PDGtop; ParticleStop1.Array_Decays[8][1] = PDGneutralino2; ParticleStop1.Array_Decays[8][2] = stop1amplitudetopneutralinoZ2; ParticleStop1.Array_Decays[8][3] = 2; ParticleStop1.Array_Comments[8] = "# ~t_1 -> t ~chi_20";
   ParticleStop1.Array_Decays[9][0] = PDGtop; ParticleStop1.Array_Decays[9][1] = PDGneutralino3; ParticleStop1.Array_Decays[9][2] = stop1amplitudetopneutralinoZ3; ParticleStop1.Array_Decays[9][3] = 2; ParticleStop1.Array_Comments[9] = "# ~t_1 -> t ~chi_30";
   ParticleStop1.Array_Decays[10][0] = PDGtop; ParticleStop1.Array_Decays[10][1] = PDGneutralino4; ParticleStop1.Array_Decays[10][2] = stop1amplitudetopneutralinoZ4; ParticleStop1.Array_Decays[10][3] = 2; ParticleStop1.Array_Comments[10] = "# ~t_1 -> t ~chi_40";
   ParticleStop1.Array_Decays[11][0] = PDGtop; ParticleStop1.Array_Decays[11][1] = PDGneutralino5; ParticleStop1.Array_Decays[11][2] = stop1amplitudetopneutralinoZ5; ParticleStop1.Array_Decays[11][3] = 2; ParticleStop1.Array_Comments[11] = "# ~t_1 -> t ~chi_50";

   ParticleStop1.Array_Decays[12][0] = PDGtop; ParticleStop1.Array_Decays[12][1] = PDGgravitino; ParticleStop1.Array_Decays[12][2] = stop1amplitudetopgravitino; ParticleStop1.Array_Decays[12][3] = 2; ParticleStop1.Array_Comments[12] = "# ~t_1 -> t ~G";

   double Stop1_No_1to2_Decays = 0;

   Stop1_No_1to2_Decays = ParticleStop1.No_1to2_Decays + ParticleStop1.No_grav_Decays + ParticleStop1.No_NMSSM_Decays;
 
   for (int j = 0; j<Stop1_No_1to2_Decays; j++) {
     ParticleStop1.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Stop1_No_1to2_Decays; j++) {
     ParticleStop1.two_width = ParticleStop1.two_width + ParticleStop1.Array_Decays[j][2];
   }
   for (int j=Stop1_No_1to2_Decays; j<ParticleStop1.No_of_Decays; j++) {
     ParticleStop1.three_width = ParticleStop1.three_width + ParticleStop1.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions
   if ( ParticleStop1.three_width != ParticleStop1.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for stop1 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleStop1.No_of_Decays = Stop1_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleStop1.total_width = ParticleStop1.two_width;
     }
   else {
     ParticleStop1.total_width = ParticleStop1.two_width + ParticleStop1.three_width;
   }

   if ( ParticleStop1.total_width != ParticleStop1.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleStop1.No_of_Decays; i++) {
       //   fout << i << " " << ParticleStop1.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in stop1 total width \n");
     }
 
   for (int i =0; i<ParticleStop1.No_of_Decays; i++) {
     ParticleStop1.Array_Decays[i][5]= ParticleStop1.Array_Decays[i][2]/ParticleStop1.total_width;
   }

   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleStop1, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleStop1, BRTol);}
 }

 ///Stop2 Decays
 
 double stop2amplitudegluinotop=0, stop2amplitudetopneutralinoZ1=0, stop2amplitudetopneutralinoZ2=0, stop2amplitudetopneutralinoZ3=0, stop2amplitudetopneutralinoZ4=0, stop2amplitudebottomcharginoW1=0, stop2amplitudebottomcharginoW2=0, stop2amplitudeWbosonsbottom1=0, stop2amplitudeWbosonsbottom2=0, stop2amplitudeHplussbottom1=0, stop2amplitudeHplussbottom2=0, stop2amplitudeZbosonstop1=0, stop2amplitudehstop1=0, stop2amplitudeHstop1=0, stop2amplitudeAstop1=0, stop2amplitudetopgravitino=0;
 double stop2amplitudeH3stop1 = 0, stop2amplitudeA2stop1 = 0, stop2amplitudetopneutralinoZ5 = 0;

 if (flagstop2 == 1) {
   stop2amplitudegluinotop = squarkamplitudedecaygluinomix (mu(2,3), mt, mGluino, alphas, 2, thetat);
   stop2amplitudebottomcharginoW1 = squark2amplitudedecaycharginoW1mix (mu(2,3), mb, MCH1, g, thetaL2, thetaR2, thetat, beta, runmw, runmt, runmb,1);
   stop2amplitudebottomcharginoW2 = squark2amplitudedecaycharginoW2mix (mu(2,3), mb, MCH2, g, thetaL2, thetaR2, thetat, beta, runmw, runmt, runmb,1);
   
   stop2amplitudeWbosonsbottom1 = squark3amplitudedecaysquark3Wboson (mu(2,3), polemw, md(1,3), g, thetat, thetab, 1, 2, 2, 1);
   stop2amplitudeWbosonsbottom2 = squark3amplitudedecaysquark3Wboson (mu(2,3), polemw, md(2,3), g, thetat, thetab, 1, 2, 2, 2);
   stop2amplitudeHplussbottom1 = squark3amplitudedecaychargedHiggssquark3 (mu(2,3), mHpm, md(1,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 1);
   stop2amplitudeHplussbottom2 = squark3amplitudedecaychargedHiggssquark3 (mu(2,3), mHpm, md(2,3), g, runmw, beta, thetat, thetab, greekmu, At, Ab, runmt, runmb, 2, 2);

   stop2amplitudeZbosonstop1 = squark32amplitudedecaysquark3Zboson (mu(2,3), mu(1,3), polemz, g, gp, thetat); 
   
   if (nmssmIsIt == false) {
     stop2amplitudehstop1 = squark32amplitudedecayneutralHiggssquark3 (mu(2,3), mh0(1), mu(1,3), g, gp, runmw, beta, alpha, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 'h');
     stop2amplitudeHstop1 = squark32amplitudedecayneutralHiggssquark3 (mu(2,3), mh0(2), mu(1,3), g, gp, runmw, beta, alpha, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 'H'); 
     stop2amplitudeAstop1 = squark32amplitudedecayneutralHiggssquark3 (mu(2,3), mA0(1), mu(1,3), g, gp, runmw, beta, alpha, thetat, thetab, greekmu, At, Ab, runmt, runmb, 1, 'A');
     stop2amplitudetopneutralinoZ1 = squark3amplitudedecayneutralino (mu(2,3), mt, mneut(1), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 1);
     stop2amplitudetopneutralinoZ2 = squark3amplitudedecayneutralino (mu(2,3), mt, mneut(2), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 2);
     stop2amplitudetopneutralinoZ3 = squark3amplitudedecayneutralino (mu(2,3), mt, mneut(3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 3);
     stop2amplitudetopneutralinoZ4 = squark3amplitudedecayneutralino (mu(2,3), mt, mneut(4), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 4);
     stop2amplitudetopgravitino =squarkamplitudedecaygravitino(mu(2,3), mgravitino, mt, MPlreduced, gravonoff, upsquNLSP);
   }
   else if (nmssmIsIt == true) {
     stop2amplitudehstop1 = stop2amplitudedecaystop1CPevenhiggsNMSSM (mu(2,3), mu(1,3), mh0(1), runmt, thetat, CPEMix, beta, runmw, g, gp, At, mueff, lam, 1);
     stop2amplitudeHstop1 = stop2amplitudedecaystop1CPevenhiggsNMSSM (mu(2,3), mu(1,3), mh0(2), runmt, thetat, CPEMix, beta, runmw, g, gp, At, mueff, lam, 2);
     stop2amplitudeH3stop1 = stop2amplitudedecaystop1CPevenhiggsNMSSM (mu(2,3), mu(1,3), mh0(3), runmt, thetat, CPEMix, beta, runmw, g, gp, At, mueff, lam, 3);
     stop2amplitudeAstop1 = stop2amplitudedecaystop1CPoddhiggsNMSSM (mu(2,3), mu(1,3), mA0(1), runmt , thetat, CPOMix, beta, runmw, g, At, mueff, lam, 1);
     stop2amplitudeA2stop1 = stop2amplitudedecaystop1CPoddhiggsNMSSM (mu(2,3), mu(1,3), mA0(2), runmt , thetat, CPOMix, beta, runmw, g, At, mueff, lam, 2);
     stop2amplitudetopneutralinoZ1 = stopamplitudedecaytopneutralinoNMSSM (mu(2,3), mt, mneut(1), g, gp, thetat, mixNeut, runmt, runmw, beta, 2, 1);
     stop2amplitudetopneutralinoZ2 = stopamplitudedecaytopneutralinoNMSSM (mu(2,3), mt, mneut(2), g, gp, thetat, mixNeut, runmt, runmw, beta, 2, 2);
     stop2amplitudetopneutralinoZ3 = stopamplitudedecaytopneutralinoNMSSM (mu(2,3), mt, mneut(3), g, gp, thetat, mixNeut, runmt, runmw, beta, 2, 3);
     stop2amplitudetopneutralinoZ4 = stopamplitudedecaytopneutralinoNMSSM (mu(2,3), mt, mneut(4), g, gp, thetat, mixNeut, runmt, runmw, beta, 2, 4);
     stop2amplitudetopneutralinoZ5 = stopamplitudedecaytopneutralinoNMSSM (mu(2,3), mt, mneut(5), g, gp, thetat, mixNeut, runmt, runmw, beta, 2, 5);
   }
 
   ParticleStop2.Array_Decays[0][0] = PDGtop; ParticleStop2.Array_Decays[0][1] = PDGgluino; ParticleStop2.Array_Decays[0][2] = stop2amplitudegluinotop; ParticleStop2.Array_Decays[0][3] = 2; ParticleStop2.Array_Comments[0] = "# ~t_2 -> t ~g";
   ParticleStop2.Array_Decays[1][0] = PDGbottom; ParticleStop2.Array_Decays[1][1] = PDGchargino1; ParticleStop2.Array_Decays[1][2] = stop2amplitudebottomcharginoW1; ParticleStop2.Array_Decays[1][3] = 2; ParticleStop2.Array_Comments[1] = "# ~t_2 -> b ~chi_1+";
   ParticleStop2.Array_Decays[2][0] = PDGbottom; ParticleStop2.Array_Decays[2][1]= PDGchargino2; ParticleStop2.Array_Decays[2][2] = stop2amplitudebottomcharginoW2; ParticleStop2.Array_Decays[2][3] = 2; ParticleStop2.Array_Comments[2] = "# ~t_2 -> b ~chi_2+";
   
   ParticleStop2.Array_Decays[3][0] = PDGWplus; ParticleStop2.Array_Decays[3][1] = PDGsbottom1 ; ParticleStop2.Array_Decays[3][2] = stop2amplitudeWbosonsbottom1; ParticleStop2.Array_Decays[3][3] = 2; ParticleStop2.Array_Comments[3] = "# ~t_2 -> W+ ~b_1";
   ParticleStop2.Array_Decays[4][0] = PDGWplus; ParticleStop2.Array_Decays[4][1] = PDGsbottom2 ; ParticleStop2.Array_Decays[4][2] = stop2amplitudeWbosonsbottom2; ParticleStop2.Array_Decays[4][3] = 2; ParticleStop2.Array_Comments[4] = "# ~t_2 -> W+ ~b_2";
   ParticleStop2.Array_Decays[5][0] = PDGHplus; ParticleStop2.Array_Decays[5][1] = PDGsbottom1; ParticleStop2.Array_Decays[5][2] = stop2amplitudeHplussbottom1; ParticleStop2.Array_Decays[5][3] = 2; ParticleStop2.Array_Comments[5] = "# ~t_2 -> H+ ~b_1";
   ParticleStop2.Array_Decays[6][0] = PDGHplus; ParticleStop2.Array_Decays[6][1] = PDGsbottom2; ParticleStop2.Array_Decays[6][2] = stop2amplitudeHplussbottom2; ParticleStop2.Array_Decays[6][3] = 2; ParticleStop2.Array_Comments[6] = "# ~t_2 -> H+ ~b_2";
   ParticleStop2.Array_Decays[7][0] = PDGh0; ParticleStop2.Array_Decays[7][1] = PDGstop1; ParticleStop2.Array_Decays[7][2] = stop2amplitudehstop1; ParticleStop2.Array_Decays[7][3] = 2; ParticleStop2.Array_Comments[7] = "# ~t_2 -> h ~t_1";
   ParticleStop2.Array_Decays[8][0] = PDGH0; ParticleStop2.Array_Decays[8][1] = PDGstop1; ParticleStop2.Array_Decays[8][2] = stop2amplitudeHstop1; ParticleStop2.Array_Decays[8][3] = 2; ParticleStop2.Array_Comments[8] = "# ~t_2 -> H ~t_1";
   ParticleStop2.Array_Decays[9][0] = PDGA0; ParticleStop2.Array_Decays[9][1] = PDGstop1; ParticleStop2.Array_Decays[9][2] = stop2amplitudeAstop1; ParticleStop2.Array_Decays[9][3] = 2; ParticleStop2.Array_Comments[9] = "# ~t_2 -> A ~t_1";
   ParticleStop2.Array_Decays[10][0] = PDGstop1; ParticleStop2.Array_Decays[10][1] = PDGZboson; ParticleStop2.Array_Decays[10][2] = stop2amplitudeZbosonstop1; ParticleStop2.Array_Decays[10][3] = 2; ParticleStop2.Array_Comments[10] = "# ~t_2 -> Z ~t_1";

   ParticleStop2.Array_Decays[11][0] = PDGH3; ParticleStop2.Array_Decays[11][1] = PDGstop1; ParticleStop2.Array_Decays[11][2] = stop2amplitudeH3stop1; ParticleStop2.Array_Decays[11][3] = 2; ParticleStop2.Array_Comments[11] = "# ~t_2 -> H3 ~t_1";
   ParticleStop2.Array_Decays[12][0] = PDGA2; ParticleStop2.Array_Decays[12][1] = PDGstop1; ParticleStop2.Array_Decays[12][2] = stop2amplitudeA2stop1; ParticleStop2.Array_Decays[12][3] = 2; ParticleStop2.Array_Comments[12] = "# ~t_2 -> A2 ~t_1";
   ParticleStop2.Array_Decays[13][0] = PDGtop; ParticleStop2.Array_Decays[13][1] = PDGneutralino1; ParticleStop2.Array_Decays[13][2] = stop2amplitudetopneutralinoZ1; ParticleStop2.Array_Decays[13][3] = 2; ParticleStop2.Array_Comments[13] = "# ~t_2 -> t ~chi_10";
   ParticleStop2.Array_Decays[14][0] = PDGtop; ParticleStop2.Array_Decays[14][1] = PDGneutralino2; ParticleStop2.Array_Decays[14][2] = stop2amplitudetopneutralinoZ2; ParticleStop2.Array_Decays[14][3] = 2; ParticleStop2.Array_Comments[14] = "# ~t_2 -> t ~chi_20";
   ParticleStop2.Array_Decays[15][0] = PDGtop; ParticleStop2.Array_Decays[15][1] = PDGneutralino3; ParticleStop2.Array_Decays[15][2] = stop2amplitudetopneutralinoZ3; ParticleStop2.Array_Decays[15][3] = 2; ParticleStop2.Array_Comments[15] = "# ~t_2 -> t ~chi_30";
   ParticleStop2.Array_Decays[16][0] = PDGtop; ParticleStop2.Array_Decays[16][1] = PDGneutralino4; ParticleStop2.Array_Decays[16][2] = stop2amplitudetopneutralinoZ4; ParticleStop2.Array_Decays[16][3] = 2; ParticleStop2.Array_Comments[16] = "# ~t_2 -> t ~chi_40";
   ParticleStop2.Array_Decays[17][0] = PDGtop; ParticleStop2.Array_Decays[17][1] = PDGneutralino5; ParticleStop2.Array_Decays[17][2] = stop2amplitudetopneutralinoZ5; ParticleStop2.Array_Decays[17][3] = 2; ParticleStop2.Array_Comments[17] = "# ~t_2 -> t ~chi_50";
   
   ParticleStop2.Array_Decays[18][0] = PDGtop; ParticleStop2.Array_Decays[18][1] = PDGgravitino; ParticleStop2.Array_Decays[18][2] = stop2amplitudetopgravitino; ParticleStop2.Array_Decays[18][3] = 2; ParticleStop2.Array_Comments[18] = "# ~t_2 -> t ~G";
 
   double Stop2_No_1to2_Decays = 0;

   Stop2_No_1to2_Decays = ParticleStop2.No_1to2_Decays + ParticleStop2.No_grav_Decays + ParticleStop2.No_NMSSM_Decays;
   
   for (int j = 0; j<Stop2_No_1to2_Decays; j++) {
     ParticleStop2.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Stop2_No_1to2_Decays; j++) {
     ParticleStop2.two_width = ParticleStop2.two_width + ParticleStop2.Array_Decays[j][2];
   }
   for (int j=Stop2_No_1to2_Decays; j<ParticleStop2.No_of_Decays; j++) {
     ParticleStop2.three_width = ParticleStop2.three_width + ParticleStop2.Array_Decays[j][2];
   }
   ///Note currently no squark three body decays included - may change in future versions 
   if ( ParticleStop2.three_width != ParticleStop2.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for stop2 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleStop2.No_of_Decays = Stop2_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleStop2.total_width = ParticleStop2.two_width;
     }
   else {
     ParticleStop2.total_width = ParticleStop2.two_width + ParticleStop2.three_width;
   }
   
   if ( ParticleStop2.total_width != ParticleStop2.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleStop2.No_of_Decays; i++) {
       //   fout << i << " " << ParticleStop2.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in stop2 total width \n");
     }
   
   for (int i =0; i<ParticleStop2.No_of_Decays; i++) {
     ParticleStop2.Array_Decays[i][5]= ParticleStop2.Array_Decays[i][2]/ParticleStop2.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleStop2, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleStop2, BRTol);}
   
 }

 /// Slepton Decays

 ///SelectonL decays
 
 double selectronLamplitudeeneutralinoZ1=0, selectronLamplitudeeneutralinoZ2=0, selectronLamplitudeeneutralinoZ3=0, selectronLamplitudeeneutralinoZ4=0, selectronLamplitudenuecharginoW1=0, selectronLamplitudenuecharginoW2=0, selectronLamplitudeelectrongravitino=0;
 double selectronLamplitudeeneutralinoZ5 = 0;

 if (flagselectronL == 1) {
   
   if (nmssmIsIt == false) {
     selectronLamplitudeeneutralinoZ1 = sleptonamplitudedecayleptonneutralino(me(1,1), mel, mneut(1), g, gp, mixNeut, 'L', 1);
     selectronLamplitudeeneutralinoZ2 = sleptonamplitudedecayleptonneutralino(me(1,1), mel, mneut(2), g, gp, mixNeut, 'L', 2);
     selectronLamplitudeeneutralinoZ3 = sleptonamplitudedecayleptonneutralino(me(1,1), mel, mneut(3), g, gp, mixNeut, 'L', 3);
     selectronLamplitudeeneutralinoZ4 = sleptonamplitudedecayleptonneutralino(me(1,1), mel, mneut(4), g, gp, mixNeut, 'L', 4);
     selectronLamplitudeelectrongravitino = squarkamplitudedecaygravitino(me(1,1), mgravitino, mel, MPlreduced, gravonoff, slepNLSP);
   }
   else if (nmssmIsIt == true) {
     selectronLamplitudeeneutralinoZ1 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,1), mel, mneut(1), g, gp, mixNeut, 'd', 'L', 1); 
     selectronLamplitudeeneutralinoZ2 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,1), mel, mneut(2), g, gp, mixNeut, 'd', 'L', 2);
     selectronLamplitudeeneutralinoZ3 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,1), mel, mneut(3), g, gp, mixNeut, 'd', 'L', 3);
     selectronLamplitudeeneutralinoZ4 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,1), mel, mneut(4), g, gp, mixNeut, 'd', 'L', 4);
     selectronLamplitudeeneutralinoZ5 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,1), mel, mneut(5), g, gp, mixNeut, 'd', 'L', 5);
   }
   selectronLamplitudenuecharginoW1 = sleptonamplitudedecaychargino (me(1,1), 0, MCH1, g, thetaL2, 1);
   selectronLamplitudenuecharginoW2 = sleptonamplitudedecaychargino (me(1,1), 0, MCH2, g, thetaL2, 2);
   
   ParticleSelectronL.Array_Decays[0][0] = PDGnuelectron; ParticleSelectronL.Array_Decays[0][1] = -PDGchargino1; ParticleSelectronL.Array_Decays[0][2] = selectronLamplitudenuecharginoW1; ParticleSelectronL.Array_Decays[0][3] = 2; ParticleSelectronL.Array_Comments[0] = "# ~e_L -> nu_e ~chi_1-";
   ParticleSelectronL.Array_Decays[1][0] = PDGnuelectron; ParticleSelectronL.Array_Decays[1][1] = -PDGchargino2; ParticleSelectronL.Array_Decays[1][2] = selectronLamplitudenuecharginoW2; ParticleSelectronL.Array_Decays[1][3] = 2; ParticleSelectronL.Array_Comments[1] = "# ~e_L -> nu_e ~chi_2-";
   ParticleSelectronL.Array_Decays[2][0] = PDGelectron; ParticleSelectronL.Array_Decays[2][1] = PDGneutralino1; ParticleSelectronL.Array_Decays[2][2] = selectronLamplitudeeneutralinoZ1; ParticleSelectronL.Array_Decays[2][3] = 2; ParticleSelectronL.Array_Comments[2] = "# ~e_L -> e- ~chi_10";
   ParticleSelectronL.Array_Decays[3][0] = PDGelectron; ParticleSelectronL.Array_Decays[3][1] = PDGneutralino2; ParticleSelectronL.Array_Decays[3][2] = selectronLamplitudeeneutralinoZ2; ParticleSelectronL.Array_Decays[3][3] = 2; ParticleSelectronL.Array_Comments[3] = "# ~e_L -> e- ~chi_20";
   ParticleSelectronL.Array_Decays[4][0] = PDGelectron; ParticleSelectronL.Array_Decays[4][1] = PDGneutralino3; ParticleSelectronL.Array_Decays[4][2] = selectronLamplitudeeneutralinoZ3; ParticleSelectronL.Array_Decays[4][3] = 2; ParticleSelectronL.Array_Comments[4] = "# ~e_L -> e- ~chi_30";
   ParticleSelectronL.Array_Decays[5][0] = PDGelectron; ParticleSelectronL.Array_Decays[5][1] = PDGneutralino4; ParticleSelectronL.Array_Decays[5][2] = selectronLamplitudeeneutralinoZ4; ParticleSelectronL.Array_Decays[5][3] = 2; ParticleSelectronL.Array_Comments[5] = "# ~e_L -> e- ~chi_40";
   ParticleSelectronL.Array_Decays[6][0] = PDGelectron; ParticleSelectronL.Array_Decays[6][1] = PDGneutralino5; ParticleSelectronL.Array_Decays[6][2] = selectronLamplitudeeneutralinoZ5; ParticleSelectronL.Array_Decays[6][3] = 2; ParticleSelectronL.Array_Comments[6] = "# ~e_L -> e- ~chi_50";

   ParticleSelectronL.Array_Decays[7][0] = PDGelectron; ParticleSelectronL.Array_Decays[7][1] = PDGgravitino; ParticleSelectronL.Array_Decays[7][2] = selectronLamplitudeelectrongravitino; ParticleSelectronL.Array_Decays[7][3] = 2; ParticleSelectronL.Array_Comments[7] = "# ~e_L -> e- ~G";

   double SelectronL_No_1to2_Decays = 0;
   
   SelectronL_No_1to2_Decays = ParticleSelectronL.No_1to2_Decays + ParticleSelectronL.No_grav_Decays + ParticleSelectronL.No_NMSSM_Decays;
 
   for (int j = 0; j<SelectronL_No_1to2_Decays; j++) {
     ParticleSelectronL.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<SelectronL_No_1to2_Decays; j++) {
     ParticleSelectronL.two_width = ParticleSelectronL.two_width + ParticleSelectronL.Array_Decays[j][2];
   }
   for (int j=SelectronL_No_1to2_Decays; j<ParticleSelectronL.No_of_Decays; j++) {
     ParticleSelectronL.three_width = ParticleSelectronL.three_width + ParticleSelectronL.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSelectronL.three_width != ParticleSelectronL.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for selectronL - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSelectronL.No_of_Decays = SelectronL_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSelectronL.total_width = ParticleSelectronL.two_width;
     }
   else {
     ParticleSelectronL.total_width = ParticleSelectronL.two_width + ParticleSelectronL.three_width;
   }

   if ( ParticleSelectronL.total_width != ParticleSelectronL.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSelectronL.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSelectronL.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in selectronL total width \n");
     }
   
   for (int i =0; i<ParticleSelectronL.No_of_Decays; i++) {
     ParticleSelectronL.Array_Decays[i][5]= ParticleSelectronL.Array_Decays[i][2]/ParticleSelectronL.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSelectronL, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSelectronL, BRTol);}
   
 }


 ///SelectonR decays
 
 double selectronRamplitudeeneutralinoZ1=0, selectronRamplitudeeneutralinoZ2=0, selectronRamplitudeeneutralinoZ3=0, selectronRamplitudeeneutralinoZ4=0, selectronRamplitudeelectrongravitino=0;

 double selectronRamplitudeeneutralinoZ5 = 0;

 if (flagselectronR == 1) {

   if (nmssmIsIt == false) {
     selectronRamplitudeeneutralinoZ1 = sleptonamplitudedecayleptonneutralino(me(2,1), mel, mneut(1), g, gp, mixNeut, 'R', 1);
     selectronRamplitudeeneutralinoZ2 = sleptonamplitudedecayleptonneutralino(me(2,1), mel, mneut(2), g, gp, mixNeut, 'R', 2);
     selectronRamplitudeeneutralinoZ3 = sleptonamplitudedecayleptonneutralino(me(2,1), mel, mneut(3), g, gp, mixNeut, 'R', 3);
     selectronRamplitudeeneutralinoZ4 = sleptonamplitudedecayleptonneutralino(me(2,1), mel, mneut(4), g, gp, mixNeut, 'R', 4);
     selectronRamplitudeelectrongravitino = squarkamplitudedecaygravitino(me(2,1), mgravitino, mel, MPlreduced, gravonoff, slepNLSP);
   }
   else if (nmssmIsIt == true) {
     selectronRamplitudeeneutralinoZ1 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,1), mel, mneut(1), g, gp, mixNeut, 'd', 'R', 1);     selectronRamplitudeeneutralinoZ2 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,1), mel, mneut(2), g, gp, mixNeut, 'd', 'R', 2);
     selectronRamplitudeeneutralinoZ3 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,1), mel, mneut(3), g, gp, mixNeut, 'd', 'R', 3);
     selectronRamplitudeeneutralinoZ4 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,1), mel, mneut(4), g, gp, mixNeut, 'd', 'R', 4);
     selectronRamplitudeeneutralinoZ5 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,1), mel, mneut(5), g, gp, mixNeut, 'd', 'R', 5);
   }

   ParticleSelectronR.Array_Decays[0][0] = PDGelectron; ParticleSelectronR.Array_Decays[0][1] = PDGneutralino1; ParticleSelectronR.Array_Decays[0][2] = selectronRamplitudeeneutralinoZ1; ParticleSelectronR.Array_Decays[0][3] = 2; ParticleSelectronR.Array_Comments[0] = "# ~e_R -> e- ~chi_10";
   ParticleSelectronR.Array_Decays[1][0] = PDGelectron; ParticleSelectronR.Array_Decays[1][1] = PDGneutralino2; ParticleSelectronR.Array_Decays[1][2] = selectronRamplitudeeneutralinoZ2; ParticleSelectronR.Array_Decays[1][3] = 2; ParticleSelectronR.Array_Comments[1] = "# ~e_R -> e- ~chi_20";
   ParticleSelectronR.Array_Decays[2][0] = PDGelectron; ParticleSelectronR.Array_Decays[2][1] = PDGneutralino3; ParticleSelectronR.Array_Decays[2][2] = selectronRamplitudeeneutralinoZ3; ParticleSelectronR.Array_Decays[2][3] = 2; ParticleSelectronR.Array_Comments[2] = "# ~e_R -> e- ~chi_30";
   ParticleSelectronR.Array_Decays[3][0] = PDGelectron; ParticleSelectronR.Array_Decays[3][1] = PDGneutralino4; ParticleSelectronR.Array_Decays[3][2] = selectronRamplitudeeneutralinoZ4; ParticleSelectronR.Array_Decays[3][3] = 2; ParticleSelectronR.Array_Comments[3] = "# ~e_R -> e- ~chi_40";
   ParticleSelectronR.Array_Decays[4][0] = PDGelectron; ParticleSelectronR.Array_Decays[4][1] = PDGneutralino5; ParticleSelectronR.Array_Decays[4][2] = selectronRamplitudeeneutralinoZ5; ParticleSelectronR.Array_Decays[4][3] = 2; ParticleSelectronR.Array_Comments[4] = "# ~e_R -> e- ~chi_50";
 
   ParticleSelectronR.Array_Decays[5][0] = PDGelectron; ParticleSelectronR.Array_Decays[5][1] = PDGgravitino; ParticleSelectronR.Array_Decays[5][2] = selectronRamplitudeelectrongravitino; ParticleSelectronR.Array_Decays[5][3] = 2; ParticleSelectronR.Array_Comments[5] = "# ~e_R -> e- ~G";

   double SelectronR_No_1to2_Decays = 0;

   SelectronR_No_1to2_Decays = ParticleSelectronR.No_1to2_Decays + ParticleSelectronR.No_grav_Decays + ParticleSelectronR.No_NMSSM_Decays;
 
   for (int j = 0; j<SelectronR_No_1to2_Decays; j++) {
     ParticleSelectronR.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<SelectronR_No_1to2_Decays; j++) {
     ParticleSelectronR.two_width = ParticleSelectronR.two_width + ParticleSelectronR.Array_Decays[j][2];
   }
   for (int j=SelectronR_No_1to2_Decays; j<ParticleSelectronR.No_of_Decays; j++) {
     ParticleSelectronR.three_width = ParticleSelectronR.three_width + ParticleSelectronR.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSelectronR.three_width != ParticleSelectronR.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for selectronR - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSelectronR.No_of_Decays = SelectronR_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSelectronR.total_width = ParticleSelectronR.two_width;
     }
   else {
     ParticleSelectronR.total_width = ParticleSelectronR.two_width + ParticleSelectronR.three_width;
   }

   if ( ParticleSelectronR.total_width != ParticleSelectronR.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSelectronR.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSelectronR.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in selectronR total width \n");
     }
  
   for (int i =0; i<ParticleSelectronR.No_of_Decays; i++) {
     ParticleSelectronR.Array_Decays[i][5]= ParticleSelectronR.Array_Decays[i][2]/ParticleSelectronR.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSelectronR, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSelectronR, BRTol);}
   
 }


 ///SmuonL decays

 double smuonLamplitudemuneutralinoZ1=0, smuonLamplitudemuneutralinoZ2=0, smuonLamplitudemuneutralinoZ3=0, smuonLamplitudemuneutralinoZ4=0, smuonLamplitudenumucharginoW1=0, smuonLamplitudenumucharginoW2=0, smuonLamplitudemuongravitino=0;
 double smuonLamplitudemuneutralinoZ5 = 0;

 if(flagsmuonL == 1) {

   if (nmssmIsIt == false) {
     smuonLamplitudemuneutralinoZ1 = sleptonamplitudedecayleptonneutralino(me(1,2), mmu, mneut(1), g, gp, mixNeut, 'L', 1);
     smuonLamplitudemuneutralinoZ2 = sleptonamplitudedecayleptonneutralino(me(1,2), mmu, mneut(2), g, gp, mixNeut, 'L', 2);
     smuonLamplitudemuneutralinoZ3 = sleptonamplitudedecayleptonneutralino(me(1,2), mmu, mneut(3), g, gp, mixNeut, 'L', 3);
     smuonLamplitudemuneutralinoZ4 = sleptonamplitudedecayleptonneutralino(me(1,2), mmu, mneut(4), g, gp, mixNeut, 'L', 4);
     smuonLamplitudemuongravitino = squarkamplitudedecaygravitino(me(1,2), mgravitino, mmu, MPlreduced, gravonoff, slepNLSP);
   }
   else if (nmssmIsIt == true) {
     smuonLamplitudemuneutralinoZ1 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,2), mmu, mneut(1), g, gp, mixNeut, 'd', 'L', 1); 
     smuonLamplitudemuneutralinoZ2 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,2), mmu, mneut(2), g, gp, mixNeut, 'd', 'L', 2);
     smuonLamplitudemuneutralinoZ3 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,2), mmu, mneut(3), g, gp, mixNeut, 'd', 'L', 3);
     smuonLamplitudemuneutralinoZ4 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,2), mmu, mneut(4), g, gp, mixNeut, 'd', 'L', 4);
     smuonLamplitudemuneutralinoZ5 = sleptonamplitudedecayleptonneutralinoNMSSM (me(1,2), mmu, mneut(5), g, gp, mixNeut, 'd', 'L', 5);
   }
   smuonLamplitudenumucharginoW1 = sleptonamplitudedecaychargino (me(1,2), 0, MCH1, g, thetaL2, 1);
   smuonLamplitudenumucharginoW2 = sleptonamplitudedecaychargino (me(1,2), 0, MCH2, g, thetaL2, 2);

   ParticleSmuonL.Array_Decays[0][0] = PDGnumuon; ParticleSmuonL.Array_Decays[0][1] = -PDGchargino1; ParticleSmuonL.Array_Decays[0][2] = smuonLamplitudenumucharginoW1; ParticleSmuonL.Array_Decays[0][3] = 2; ParticleSmuonL.Array_Comments[0] = "# ~mu_L -> nu_mu ~chi_1-";
   ParticleSmuonL.Array_Decays[1][0] = PDGnumuon; ParticleSmuonL.Array_Decays[1][1] = -PDGchargino2; ParticleSmuonL.Array_Decays[1][2] = smuonLamplitudenumucharginoW2; ParticleSmuonL.Array_Decays[1][3] = 2; ParticleSmuonL.Array_Comments[1] = "# ~mu_L -> nu_mu ~chi_2-";
   ParticleSmuonL.Array_Decays[2][0] = PDGmuon; ParticleSmuonL.Array_Decays[2][1] = PDGneutralino1; ParticleSmuonL.Array_Decays[2][2] = smuonLamplitudemuneutralinoZ1; ParticleSmuonL.Array_Decays[2][3] = 2; ParticleSmuonL.Array_Comments[2] = "# ~mu_L -> mu- ~chi_10";
   ParticleSmuonL.Array_Decays[3][0] = PDGmuon; ParticleSmuonL.Array_Decays[3][1] = PDGneutralino2; ParticleSmuonL.Array_Decays[3][2] = smuonLamplitudemuneutralinoZ2; ParticleSmuonL.Array_Decays[3][3] = 2; ParticleSmuonL.Array_Comments[3] = "# ~mu_L -> mu- ~chi_20";
   ParticleSmuonL.Array_Decays[4][0] = PDGmuon; ParticleSmuonL.Array_Decays[4][1] = PDGneutralino3; ParticleSmuonL.Array_Decays[4][2] = smuonLamplitudemuneutralinoZ3; ParticleSmuonL.Array_Decays[4][3] = 2; ParticleSmuonL.Array_Comments[4] = "# ~mu_L -> mu- ~chi_30";
   ParticleSmuonL.Array_Decays[5][0] = PDGmuon; ParticleSmuonL.Array_Decays[5][1] = PDGneutralino4; ParticleSmuonL.Array_Decays[5][2] = smuonLamplitudemuneutralinoZ4; ParticleSmuonL.Array_Decays[5][3] = 2; ParticleSmuonL.Array_Comments[5] = "# ~mu_L -> mu- ~chi_40";
   ParticleSmuonL.Array_Decays[6][0] = PDGmuon; ParticleSmuonL.Array_Decays[6][1] = PDGneutralino4; ParticleSmuonL.Array_Decays[6][2] = smuonLamplitudemuneutralinoZ5; ParticleSmuonL.Array_Decays[6][3] = 2; ParticleSmuonL.Array_Comments[6] = "# ~mu_L -> mu- ~chi_50";

   ParticleSmuonL.Array_Decays[7][0] = PDGmuon; ParticleSmuonL.Array_Decays[7][1] = PDGgravitino; ParticleSmuonL.Array_Decays[7][2] = smuonLamplitudemuongravitino; ParticleSmuonL.Array_Decays[7][3] = 2; ParticleSmuonL.Array_Comments[7] = "# ~mu_L -> mu- ~G"; 
   
   double SmuonL_No_1to2_Decays = 0;

   SmuonL_No_1to2_Decays = ParticleSmuonL.No_1to2_Decays + ParticleSmuonL.No_grav_Decays + ParticleSmuonL.No_NMSSM_Decays;
 
   for (int j = 0; j<SmuonL_No_1to2_Decays; j++) {
     ParticleSmuonL.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<SmuonL_No_1to2_Decays; j++) {
     ParticleSmuonL.two_width = ParticleSmuonL.two_width + ParticleSmuonL.Array_Decays[j][2];
   }
   for (int j=SmuonL_No_1to2_Decays; j<ParticleSmuonL.No_of_Decays; j++) {
     ParticleSmuonL.three_width = ParticleSmuonL.three_width + ParticleSmuonL.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSmuonL.three_width != ParticleSmuonL.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for smuonL - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSmuonL.No_of_Decays = SmuonL_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSmuonL.total_width = ParticleSmuonL.two_width;
     }
   else {
     ParticleSmuonL.total_width = ParticleSmuonL.two_width + ParticleSmuonL.three_width;
   }

   if ( ParticleSmuonL.total_width != ParticleSmuonL.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSmuonL.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSmuonL.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in smuonL total width \n");
     }
  
   for (int i =0; i<ParticleSmuonL.No_of_Decays; i++) {
     ParticleSmuonL.Array_Decays[i][5]= ParticleSmuonL.Array_Decays[i][2]/ParticleSmuonL.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSmuonL, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSmuonL, BRTol);}
   
 }

 ///SmuonR decays
 
 double smuonRamplitudemuneutralinoZ1=0, smuonRamplitudemuneutralinoZ2=0, smuonRamplitudemuneutralinoZ3=0, smuonRamplitudemuneutralinoZ4=0, smuonRamplitudemuongravitino=0;
 double smuonRamplitudemuneutralinoZ5 = 0;
 
 if (flagsmuonR == 1) {
   if (nmssmIsIt == false) {
     smuonRamplitudemuneutralinoZ1 = sleptonamplitudedecayleptonneutralino(me(2,2), mmu, mneut(1), g, gp, mixNeut, 'R', 1);
     smuonRamplitudemuneutralinoZ2 = sleptonamplitudedecayleptonneutralino(me(2,2), mmu, mneut(2), g, gp, mixNeut, 'R', 2);
     smuonRamplitudemuneutralinoZ3 = sleptonamplitudedecayleptonneutralino(me(2,2), mmu, mneut(3), g, gp, mixNeut, 'R', 3);
     smuonRamplitudemuneutralinoZ4 = sleptonamplitudedecayleptonneutralino(me(2,2), mmu, mneut(4), g, gp, mixNeut, 'R', 4);
     smuonRamplitudemuongravitino = squarkamplitudedecaygravitino (me(2,2), mgravitino, mmu, MPlreduced, gravonoff, slepNLSP);
   }
   else if (nmssmIsIt == true) {
     smuonRamplitudemuneutralinoZ1 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,2), mmu, mneut(1), g, gp, mixNeut, 'd', 'R', 1); 
     smuonRamplitudemuneutralinoZ2 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,2), mmu, mneut(2), g, gp, mixNeut, 'd', 'R', 2);
     smuonRamplitudemuneutralinoZ3 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,2), mmu, mneut(3), g, gp, mixNeut, 'd', 'R', 3);
     smuonRamplitudemuneutralinoZ4 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,2), mmu, mneut(4), g, gp, mixNeut, 'd', 'R', 4);
     smuonRamplitudemuneutralinoZ5 = sleptonamplitudedecayleptonneutralinoNMSSM (me(2,2), mmu, mneut(5), g, gp, mixNeut, 'd', 'R', 5);
   }

   ParticleSmuonR.Array_Decays[0][0] = PDGmuon; ParticleSmuonR.Array_Decays[0][1] = PDGneutralino1; ParticleSmuonR.Array_Decays[0][2] = smuonRamplitudemuneutralinoZ1; ParticleSmuonR.Array_Decays[0][3] = 2; ParticleSmuonR.Array_Comments[0] = "# ~mu_R -> mu- ~chi_10";
   ParticleSmuonR.Array_Decays[1][0] = PDGmuon; ParticleSmuonR.Array_Decays[1][1] = PDGneutralino2; ParticleSmuonR.Array_Decays[1][2] = smuonRamplitudemuneutralinoZ2; ParticleSmuonR.Array_Decays[1][3] = 2; ParticleSmuonR.Array_Comments[1] = "# ~mu_R -> mu- ~chi_20";
   ParticleSmuonR.Array_Decays[2][0] = PDGmuon; ParticleSmuonR.Array_Decays[2][1] = PDGneutralino3; ParticleSmuonR.Array_Decays[2][2] = smuonRamplitudemuneutralinoZ3; ParticleSmuonR.Array_Decays[2][3] = 2; ParticleSmuonR.Array_Comments[2] = "# ~mu_R -> mu- ~chi_30";
   ParticleSmuonR.Array_Decays[3][0] = PDGmuon; ParticleSmuonR.Array_Decays[3][1] = PDGneutralino4; ParticleSmuonR.Array_Decays[3][2] = smuonRamplitudemuneutralinoZ4; ParticleSmuonR.Array_Decays[3][3] = 2; ParticleSmuonR.Array_Comments[3] = "# ~mu_R -> mu- ~chi_40";
   ParticleSmuonR.Array_Decays[4][0] = PDGmuon; ParticleSmuonR.Array_Decays[4][1] = PDGneutralino5; ParticleSmuonR.Array_Decays[4][2] = smuonRamplitudemuneutralinoZ5; ParticleSmuonR.Array_Decays[4][3] = 2; ParticleSmuonR.Array_Comments[4] = "# ~mu_R -> mu- ~chi_50";
 
   ParticleSmuonR.Array_Decays[5][0] = PDGmuon; ParticleSmuonR.Array_Decays[5][1] = PDGgravitino; ParticleSmuonR.Array_Decays[5][2] = smuonRamplitudemuongravitino; ParticleSmuonR.Array_Decays[5][3] = 2; ParticleSmuonR.Array_Comments[5] = "# ~mu_R -> mu- ~G";
 
   double SmuonR_No_1to2_Decays = 0;

   SmuonR_No_1to2_Decays = ParticleSmuonR.No_1to2_Decays + ParticleSmuonR.No_grav_Decays + ParticleSmuonR.No_NMSSM_Decays;
 
   for (int j = 0; j<SmuonR_No_1to2_Decays; j++) {
     ParticleSmuonR.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<SmuonR_No_1to2_Decays; j++) {
     ParticleSmuonR.two_width = ParticleSmuonR.two_width + ParticleSmuonR.Array_Decays[j][2];
   }
   for (int j=SmuonR_No_1to2_Decays; j<ParticleSmuonR.No_of_Decays; j++) {
     ParticleSmuonR.three_width = ParticleSmuonR.three_width + ParticleSmuonL.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSmuonR.three_width != ParticleSmuonR.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for smuonR - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSmuonR.No_of_Decays = SmuonR_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSmuonR.total_width = ParticleSmuonR.two_width;
     }
   else {
     ParticleSmuonR.total_width = ParticleSmuonR.two_width + ParticleSmuonR.three_width;
   }

   if ( ParticleSmuonR.total_width != ParticleSmuonR.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSmuonR.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSmuonR.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in smuonR total width \n");
     }
   
   for (int i =0; i<ParticleSmuonR.No_of_Decays; i++) {
     ParticleSmuonR.Array_Decays[i][5]= ParticleSmuonR.Array_Decays[i][2]/ParticleSmuonR.total_width;
   }
 
   if (outputPartialWidths ==  false) {  OutputNoPWs(fout, ParticleSmuonR, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSmuonR, BRTol);}
   
 }

 ///Selectron sneutrino decays

 double snueamplitudenueneutralinoZ1=0, snueamplitudenueneutralinoZ2=0, snueamplitudenueneutralinoZ3=0, snueamplitudenueneutralinoZ4=0, snueamplitudeecharginoW1=0, snueamplitudeecharginoW2=0, snueamplitudenuegravitino=0;
 double snueamplitudenueneutralinoZ5 = 0;

 if (flagsnueL == 1) {
   if (nmssmIsIt == false) {
     snueamplitudenueneutralinoZ1 = sneutrinoamplitudedecayneutrinoneutralino (msnu(1), 0, mneut(1), g, gp, mixNeut, 1);
     snueamplitudenueneutralinoZ2 = sneutrinoamplitudedecayneutrinoneutralino (msnu(1), 0, mneut(2), g, gp, mixNeut, 2);
     snueamplitudenueneutralinoZ3 = sneutrinoamplitudedecayneutrinoneutralino (msnu(1), 0, mneut(3), g, gp, mixNeut, 3);
     snueamplitudenueneutralinoZ4 = sneutrinoamplitudedecayneutrinoneutralino (msnu(1), 0, mneut(4), g, gp, mixNeut, 4);
     snueamplitudenuegravitino = squarkamplitudedecaygravitino(msnu(1),mgravitino, 0, MPlreduced, gravonoff, snuNLSP);
   }
   else if (nmssmIsIt == true) {
     snueamplitudenueneutralinoZ1 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(1), 0, mneut(1), g, gp, mixNeut, 'u', 'L', 1); 
     snueamplitudenueneutralinoZ2 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(1), 0, mneut(2), g, gp, mixNeut, 'u', 'L', 2);
     snueamplitudenueneutralinoZ3 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(1), 0, mneut(3), g, gp, mixNeut, 'u', 'L', 3);
     snueamplitudenueneutralinoZ4 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(1), 0, mneut(4), g, gp, mixNeut, 'u', 'L', 4);
     snueamplitudenueneutralinoZ5 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(1), 0, mneut(5), g, gp, mixNeut, 'u', 'L', 5);
   }

   snueamplitudeecharginoW1 = sleptonamplitudedecaychargino (msnu(1), mel, MCH1, g, thetaR2, 1);
   snueamplitudeecharginoW2 = sleptonamplitudedecaychargino (msnu(1), mel, MCH2, g, thetaR2, 2);

   ParticleSnue.Array_Decays[0][0] = PDGelectron; ParticleSnue.Array_Decays[0][1] = PDGchargino1; ParticleSnue.Array_Decays[0][2] = snueamplitudeecharginoW1; ParticleSnue.Array_Decays[0][3] = 2; ParticleSnue.Array_Comments[0] = "# ~nu_eL -> e- ~chi_1+";
   ParticleSnue.Array_Decays[1][0] = PDGelectron; ParticleSnue.Array_Decays[1][1] = PDGchargino2; ParticleSnue.Array_Decays[1][2] = snueamplitudeecharginoW2; ParticleSnue.Array_Decays[1][3] = 2; ParticleSnue.Array_Comments[1] = "# ~nu_eL -> e- ~chi_2+";
   ParticleSnue.Array_Decays[2][0] = PDGnuelectron; ParticleSnue.Array_Decays[2][1] = PDGneutralino1; ParticleSnue.Array_Decays[2][2] = snueamplitudenueneutralinoZ1; ParticleSnue.Array_Decays[2][3] = 2; ParticleSnue.Array_Comments[2] = "# ~nu_eL -> nu_e ~chi_10" ;
   ParticleSnue.Array_Decays[3][0] = PDGnuelectron; ParticleSnue.Array_Decays[3][1] = PDGneutralino2; ParticleSnue.Array_Decays[3][2] = snueamplitudenueneutralinoZ2; ParticleSnue.Array_Decays[3][3] = 2; ParticleSnue.Array_Comments[3] = "# ~nu_eL -> nu_e ~chi_20";
   ParticleSnue.Array_Decays[4][0] = PDGnuelectron; ParticleSnue.Array_Decays[4][1] = PDGneutralino3; ParticleSnue.Array_Decays[4][2] = snueamplitudenueneutralinoZ3; ParticleSnue.Array_Decays[4][3] = 2; ParticleSnue.Array_Comments[4] = "# ~nu_eL -> nu_e ~chi_30";
   ParticleSnue.Array_Decays[5][0] = PDGnuelectron; ParticleSnue.Array_Decays[5][1] = PDGneutralino4; ParticleSnue.Array_Decays[5][2] = snueamplitudenueneutralinoZ4; ParticleSnue.Array_Decays[5][3] = 2; ParticleSnue.Array_Comments[5] = "# ~nu_eL -> nu_e ~chi_40";
   ParticleSnue.Array_Decays[6][0] = PDGnuelectron; ParticleSnue.Array_Decays[6][1] = PDGneutralino5; ParticleSnue.Array_Decays[6][2] = snueamplitudenueneutralinoZ5; ParticleSnue.Array_Decays[6][3] = 2; ParticleSnue.Array_Comments[6] = "# ~nu_eL -> nu_e ~chi_50";

   ParticleSnue.Array_Decays[7][0] = PDGnuelectron; ParticleSnue.Array_Decays[7][1] = PDGgravitino; ParticleSnue.Array_Decays[7][2] = snueamplitudenuegravitino; ParticleSnue.Array_Decays[7][3] = 2; ParticleSnue.Array_Comments[7] = "# ~nu_eL -> nu_e ~G";

   double Snue_No_1to2_Decays = 0;

   Snue_No_1to2_Decays = ParticleSnue.No_1to2_Decays + ParticleSnue.No_grav_Decays + ParticleSnue.No_NMSSM_Decays;
  
   for (int j = 0; j<Snue_No_1to2_Decays; j++) {
     ParticleSnue.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Snue_No_1to2_Decays; j++) {
     ParticleSnue.two_width = ParticleSnue.two_width + ParticleSnue.Array_Decays[j][2];
   }
   for (int j=Snue_No_1to2_Decays; j<ParticleSnue.No_of_Decays; j++) {
     ParticleSnue.three_width = ParticleSnue.three_width + ParticleSnue.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSnue.three_width != ParticleSnue.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for snue - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSnue.No_of_Decays = Snue_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSnue.total_width = ParticleSnue.two_width;
     }
   else {
     ParticleSnue.total_width = ParticleSnue.two_width + ParticleSnue.three_width;
   }

   if ( ParticleSnue.total_width != ParticleSnue.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSnue.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSnue.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in snue total width \n");
     }
   
 
   for (int i =0; i<ParticleSnue.No_of_Decays; i++) {
     ParticleSnue.Array_Decays[i][5]= ParticleSnue.Array_Decays[i][2]/ParticleSnue.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSnue, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSnue, BRTol);}
   
 }
 

 ///Smuon sneutrino decays

 double snumuamplitudenumuneutralinoZ1=0, snumuamplitudenumuneutralinoZ2=0, snumuamplitudenumuneutralinoZ3=0, snumuamplitudenumuneutralinoZ4=0, snumuamplitudemucharginoW1=0, snumuamplitudemucharginoW2=0, snumuamplitudenumugravitino=0;
 double snumuamplitudenumuneutralinoZ5 = 0;

 if (flagsnumuL == 1) {
   if (nmssmIsIt == false) { 
     snumuamplitudenumuneutralinoZ1 = sneutrinoamplitudedecayneutrinoneutralino (msnu(2), 0, mneut(1), g, gp, mixNeut, 1);
     snumuamplitudenumuneutralinoZ2 = sneutrinoamplitudedecayneutrinoneutralino (msnu(2), 0, mneut(2), g, gp, mixNeut, 2);
     snumuamplitudenumuneutralinoZ3 = sneutrinoamplitudedecayneutrinoneutralino (msnu(2), 0, mneut(3), g, gp, mixNeut, 3);
     snumuamplitudenumuneutralinoZ4 = sneutrinoamplitudedecayneutrinoneutralino (msnu(2), 0, mneut(4), g, gp, mixNeut, 4);
     snumuamplitudenumugravitino = squarkamplitudedecaygravitino (msnu(2), mgravitino, 0, MPlreduced, gravonoff, snuNLSP);
   }
   else if (nmssmIsIt == true) {
     snumuamplitudenumuneutralinoZ1 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(2), 0, mneut(1), g, gp, mixNeut, 'u', 'L', 1); 
     snumuamplitudenumuneutralinoZ2 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(2), 0, mneut(2), g, gp, mixNeut, 'u', 'L', 2);
     snumuamplitudenumuneutralinoZ3 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(2), 0, mneut(3), g, gp, mixNeut, 'u', 'L', 3);
     snumuamplitudenumuneutralinoZ4 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(2), 0, mneut(4), g, gp, mixNeut, 'u', 'L', 4);
     snumuamplitudenumuneutralinoZ5 = sleptonamplitudedecayleptonneutralinoNMSSM (msnu(2), 0, mneut(5), g, gp, mixNeut, 'u', 'L', 5);
   }
 
   snumuamplitudemucharginoW1 = sleptonamplitudedecaychargino (msnu(2), mmu, MCH1, g, thetaR2, 1);
   snumuamplitudemucharginoW2 = sleptonamplitudedecaychargino (msnu(2), mmu, MCH2, g, thetaR2, 2);

   ParticleSnumu.Array_Decays[0][0] = PDGmuon; ParticleSnumu.Array_Decays[0][1] = PDGchargino1; ParticleSnumu.Array_Decays[0][2] = snumuamplitudemucharginoW1; ParticleSnumu.Array_Decays[0][3] = 2; ParticleSnumu.Array_Comments[0] = "# ~nu_muL -> mu- ~chi_1+";
   ParticleSnumu.Array_Decays[1][0] = PDGmuon; ParticleSnumu.Array_Decays[1][1] = PDGchargino2; ParticleSnumu.Array_Decays[1][2] = snumuamplitudemucharginoW2; ParticleSnumu.Array_Decays[1][3] = 2; ParticleSnumu.Array_Comments[1] = "# ~nu_muL -> mu- ~chi_2+";
   ParticleSnumu.Array_Decays[2][0] = PDGnumuon; ParticleSnumu.Array_Decays[2][1] = PDGneutralino1; ParticleSnumu.Array_Decays[2][2] = snumuamplitudenumuneutralinoZ1; ParticleSnumu.Array_Decays[2][3] = 2; ParticleSnumu.Array_Comments[2] = "# ~nu_muL -> nu_mu ~chi_10";
   ParticleSnumu.Array_Decays[3][0] = PDGnumuon; ParticleSnumu.Array_Decays[3][1] = PDGneutralino2; ParticleSnumu.Array_Decays[3][2] = snumuamplitudenumuneutralinoZ2; ParticleSnumu.Array_Decays[3][3] = 2; ParticleSnumu.Array_Comments[3] = "# ~nu_muL -> nu_mu ~chi_20";
   ParticleSnumu.Array_Decays[4][0] = PDGnumuon; ParticleSnumu.Array_Decays[4][1] = PDGneutralino3; ParticleSnumu.Array_Decays[4][2] = snumuamplitudenumuneutralinoZ3; ParticleSnumu.Array_Decays[4][3] = 2; ParticleSnumu.Array_Comments[4] = "# ~nu_muL -> nu_mu ~chi_30";
   ParticleSnumu.Array_Decays[5][0] = PDGnumuon; ParticleSnumu.Array_Decays[5][1] = PDGneutralino4; ParticleSnumu.Array_Decays[5][2] = snumuamplitudenumuneutralinoZ4; ParticleSnumu.Array_Decays[5][3] = 2; ParticleSnumu.Array_Comments[5] = "# ~nu_muL -> nu_mu ~chi_40";
   ParticleSnumu.Array_Decays[6][0] = PDGnumuon; ParticleSnumu.Array_Decays[6][1] = PDGneutralino5; ParticleSnumu.Array_Decays[6][2] = snumuamplitudenumuneutralinoZ5; ParticleSnumu.Array_Decays[6][3] = 2; ParticleSnumu.Array_Comments[6] = "# ~nu_muL -> nu_mu ~chi_50";

   ParticleSnumu.Array_Decays[7][0] = PDGnumuon; ParticleSnumu.Array_Decays[7][1] = PDGgravitino; ParticleSnumu.Array_Decays[7][2] = snumuamplitudenumugravitino; ParticleSnumu.Array_Decays[7][3] = 2; ParticleSnumu.Array_Comments[7] = "# ~nu_muL -> nu_mu ~G";

   double Snumu_No_1to2_Decays = 0;

   Snumu_No_1to2_Decays = ParticleSnumu.No_1to2_Decays + ParticleSnumu.No_grav_Decays + ParticleSnumu.No_NMSSM_Decays;
 
   for (int j = 0; j<Snumu_No_1to2_Decays; j++) {
     ParticleSnumu.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Snumu_No_1to2_Decays; j++) {
     ParticleSnumu.two_width = ParticleSnumu.two_width + ParticleSnumu.Array_Decays[j][2];
   }
   for (int j=Snumu_No_1to2_Decays; j<ParticleSnumu.No_of_Decays; j++) {
     ParticleSnumu.three_width = ParticleSnumu.three_width + ParticleSnumu.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSnumu.three_width != ParticleSnumu.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for snumu - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSnumu.No_of_Decays = Snumu_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSnumu.total_width = ParticleSnumu.two_width;
     }
   else {
     ParticleSnumu.total_width = ParticleSnumu.two_width + ParticleSnumu.three_width;
   }
   
   if ( ParticleSnumu.total_width != ParticleSnumu.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSnumu.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSnumu.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in snumu total width \n");
     }
   
   for (int i =0; i<ParticleSnumu.No_of_Decays; i++) {
     ParticleSnumu.Array_Decays[i][5]= ParticleSnumu.Array_Decays[i][2]/ParticleSnumu.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSnumu, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSnumu, BRTol);}
   
 }


 ///Stau1 decays

 double stau1amplitudetauneutralinoZ1=0, stau1amplitudetauneutralinoZ2=0, stau1amplitudetauneutralinoZ3=0, stau1amplitudetauneutralinoZ4=0, stau1amplitudetauneutrinocharginoW1=0, stau1amplitudetauneutrinocharginoW2=0, stau1amplitudetausneutrinoHminus=0, stau1amplitudesnustauWboson=0, stau1amplitudetaugravitino=0;
 double stau1amplitudetauneutralinoZ5 = 0;
 
 if (flagstau1 == 1) {
   if (nmssmIsIt == false) {
     stau1amplitudetauneutralinoZ1 = stauamplitudedecaytauneutralino (me(1,3), mtau, mneut(1), g, gp, runmw, mixNeut, thetatau, beta, 1, 1);
     stau1amplitudetauneutralinoZ2 = stauamplitudedecaytauneutralino (me(1,3), mtau, mneut(2), g, gp, runmw, mixNeut, thetatau, beta, 1, 2);
     stau1amplitudetauneutralinoZ3 = stauamplitudedecaytauneutralino (me(1,3), mtau, mneut(3), g, gp, runmw, mixNeut, thetatau, beta, 1, 3);
     stau1amplitudetauneutralinoZ4 = stauamplitudedecaytauneutralino (me(1,3), mtau, mneut(4), g, gp, runmw, mixNeut, thetatau, beta, 1, 4);
     stau1amplitudetaugravitino = squarkamplitudedecaygravitino(me(1,3), mgravitino, mtau, MPlreduced, gravonoff, slepNLSP);  
 }
   else if (nmssmIsIt == true) {
     stau1amplitudetauneutralinoZ1 = stauamplitudedecaytauneutralinoNMSSM(me(1,3), mtau, mneut(1), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 1, 1);
     stau1amplitudetauneutralinoZ2 = stauamplitudedecaytauneutralinoNMSSM(me(1,3), mtau, mneut(2), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 1, 2);
     stau1amplitudetauneutralinoZ3 = stauamplitudedecaytauneutralinoNMSSM(me(1,3), mtau, mneut(3), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 1, 3);
     stau1amplitudetauneutralinoZ4 = stauamplitudedecaytauneutralinoNMSSM(me(1,3), mtau, mneut(4), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 1, 4);
     stau1amplitudetauneutralinoZ5 = stauamplitudedecaytauneutralinoNMSSM(me(1,3), mtau, mneut(5), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 1, 5);
   }

   stau1amplitudetauneutrinocharginoW1 = stauamplitudedecaynutauchargino (me(1,3), 0, MCH1, g, runmw, thetatau, thetaL2, beta, runmtau, 1, 1);
   stau1amplitudetauneutrinocharginoW2 = stauamplitudedecaynutauchargino (me(1,3), 0, MCH2, g, runmw, thetatau, thetaL2, beta, runmtau, 1, 2);
   stau1amplitudetausneutrinoHminus = stauamplitudedecaysnustauHminus (me(1,3), msnu(3), mHpm, g, runmw, beta, thetatau, runmtau, greekmu, Atau, 1);
   stau1amplitudesnustauWboson = stauamplitudedecaysnustauWboson (me(1,3), msnu(3), polemw, g, thetatau, 1);
   
   ParticleStau1.Array_Decays[0][0] = PDGnutau; ParticleStau1.Array_Decays[0][1] = PDGchargino1; ParticleStau1.Array_Decays[0][2] = stau1amplitudetauneutrinocharginoW1; ParticleStau1.Array_Decays[0][3] = 2; ParticleStau1.Array_Comments[0] = "# ~tau_1- -> nu_tau ~chi_1-";
   ParticleStau1.Array_Decays[1][0] = PDGnutau; ParticleStau1.Array_Decays[1][1] = PDGchargino2; ParticleStau1.Array_Decays[1][2] = stau1amplitudetauneutrinocharginoW2; ParticleStau1.Array_Decays[1][3] = 2; ParticleStau1.Array_Comments[1] = "# ~tau_1- -> nu_tau ~chi_2-";
   ParticleStau1.Array_Decays[2][0] = PDGnustauL; ParticleStau1.Array_Decays[2][1] = -PDGHplus; ParticleStau1.Array_Decays[2][2] = stau1amplitudetausneutrinoHminus; ParticleStau1.Array_Decays[2][3] = 2; ParticleStau1.Array_Comments[2] = "# ~tau_1- -> H- ~nu_tauL";
   ParticleStau1.Array_Decays[3][0] = PDGnustauL; ParticleStau1.Array_Decays[3][1] = -PDGWplus; ParticleStau1.Array_Decays[3][2] = stau1amplitudesnustauWboson; ParticleStau1.Array_Decays[3][3] = 2; ParticleStau1.Array_Comments[3] = "# ~tau_1- -> W- ~nu_tauL";
   ParticleStau1.Array_Decays[4][0] = PDGtau; ParticleStau1.Array_Decays[4][1] = PDGneutralino1; ParticleStau1.Array_Decays[4][2] = stau1amplitudetauneutralinoZ1; ParticleStau1.Array_Decays[4][3] = 2; ParticleStau1.Array_Comments[4] = "# ~tau_1- -> tau- ~chi_10";
   ParticleStau1.Array_Decays[5][0] = PDGtau; ParticleStau1.Array_Decays[5][1] = PDGneutralino2; ParticleStau1.Array_Decays[5][2] = stau1amplitudetauneutralinoZ2; ParticleStau1.Array_Decays[5][3] = 2; ParticleStau1.Array_Comments[5] = "# ~tau_1- -> tau- ~chi_20";
   ParticleStau1.Array_Decays[6][0] = PDGtau; ParticleStau1.Array_Decays[6][1] = PDGneutralino3; ParticleStau1.Array_Decays[6][2] = stau1amplitudetauneutralinoZ3; ParticleStau1.Array_Decays[6][3] = 2; ParticleStau1.Array_Comments[6] = "# ~tau_1- -> tau- ~chi_30";
   ParticleStau1.Array_Decays[7][0] = PDGtau; ParticleStau1.Array_Decays[7][1] = PDGneutralino4; ParticleStau1.Array_Decays[7][2] = stau1amplitudetauneutralinoZ4; ParticleStau1.Array_Decays[7][3] = 2; ParticleStau1.Array_Comments[7] = "# ~tau_1- -> tau- ~chi_40";
   ParticleStau1.Array_Decays[8][0] = PDGtau; ParticleStau1.Array_Decays[8][1] = PDGneutralino5; ParticleStau1.Array_Decays[8][2] = stau1amplitudetauneutralinoZ5; ParticleStau1.Array_Decays[8][3] = 2; ParticleStau1.Array_Comments[8] = "# ~tau_1- -> tau- ~chi_50";
 
   ParticleStau1.Array_Decays[9][0] = PDGtau; ParticleStau1.Array_Decays[9][1] = PDGgravitino; ParticleStau1.Array_Decays[9][2] = stau1amplitudetaugravitino; ParticleStau1.Array_Decays[9][3] = 2; ParticleStau1.Array_Comments[9] = "# ~tau_1- -> tau- ~G";
   
   double Stau1_No_1to2_Decays = 0;
   
   Stau1_No_1to2_Decays = ParticleStau1.No_1to2_Decays + ParticleStau1.No_grav_Decays + ParticleStau1.No_NMSSM_Decays;
 
   for (int j = 0; j<Stau1_No_1to2_Decays; j++) {
     ParticleStau1.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Stau1_No_1to2_Decays; j++) {
     ParticleStau1.two_width = ParticleStau1.two_width + ParticleStau1.Array_Decays[j][2];
   }
   for (int j=Stau1_No_1to2_Decays; j<ParticleStau1.No_of_Decays; j++) {
     ParticleStau1.three_width = ParticleStau1.three_width + ParticleStau1.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleStau1.three_width != ParticleStau1.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for stau1 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleStau1.No_of_Decays = Stau1_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleStau1.total_width = ParticleStau1.two_width;
     }
   else {
     ParticleStau1.total_width = ParticleStau1.two_width + ParticleStau1.three_width;
   }
   if ( ParticleStau1.total_width != ParticleStau1.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleStau1.No_of_Decays; i++) {
       //   fout << i << " " << ParticleStau1.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in stau1 total width \n");
     }
  
   for (int i =0; i<ParticleStau1.No_of_Decays; i++) {
     ParticleStau1.Array_Decays[i][5]= ParticleStau1.Array_Decays[i][2]/ParticleStau1.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleStau1, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleStau1, BRTol);}
   
 }


///Stau2 decays

 double stau2amplitudetauneutralinoZ1=0, stau2amplitudetauneutralinoZ2=0, stau2amplitudetauneutralinoZ3=0, stau2amplitudetauneutralinoZ4=0, stau2amplitudetauneutrinocharginoW1=0, stau2amplitudetauneutrinocharginoW2=0, stau2amplitudestausneutrinoHminus=0, stau2amplitudestausneutrinoWboson=0, stau2amplitudestau1Zboson=0, stau2amplitudestau1h=0, stau2amplitudestau1H=0, stau2amplitudestau1A=0, stau2amplitudetaugravitino=0;
 double stau2amplitudestau1H3 = 0, stau2amplitudestau1A2 = 0, stau2amplitudetauneutralinoZ5 = 0;
 
 if (flagstau2 == 1) {
   stau2amplitudetauneutrinocharginoW1 = stauamplitudedecaynutauchargino (me(2,3), 0, MCH1, g, runmw, thetatau, thetaL2, beta, runmtau, 2, 1);
   stau2amplitudetauneutrinocharginoW2 = stauamplitudedecaynutauchargino (me(2,3), 0, MCH2, g, runmw, thetatau, thetaL2, beta, runmtau, 2, 2);
   stau2amplitudestausneutrinoHminus = stauamplitudedecaysnustauHminus (me(2,3), msnu(3), mHpm, g, runmw, beta, thetatau, runmtau, greekmu, Atau, 2);
   stau2amplitudestausneutrinoWboson = stauamplitudedecaysnustauWboson (me(2,3), msnu(3), polemw, g, thetatau, 2);
   stau2amplitudestau1Zboson = stau2amplitudedecaystau1Zboson (me(2,3), me(1,3), polemz, g, gp, thetatau);
   if (nmssmIsIt == false) {
     stau2amplitudestau1h = stau2amplitudedecaystau1phi (me(2,3), me(1,3), mh0(1), g, gp, thetatau, beta, alpha, runmw, runmtau, greekmu, Atau, 'h');
     stau2amplitudestau1H = stau2amplitudedecaystau1phi (me(2,3), me(1,3), mh0(2), g, gp, thetatau, beta, alpha, runmw, runmtau, greekmu, Atau, 'H');
     stau2amplitudestau1A = stau2amplitudedecaystau1phi (me(2,3), me(1,3), mA0(1), g, gp, thetatau, beta, alpha, runmw, runmtau, greekmu, Atau, 'A');
     stau2amplitudetauneutralinoZ1 = stauamplitudedecaytauneutralino (me(2,3), mtau, mneut(1), g, gp, runmw, mixNeut, thetatau, beta, 2, 1);
     stau2amplitudetauneutralinoZ2 = stauamplitudedecaytauneutralino (me(2,3), mtau, mneut(2), g, gp, runmw, mixNeut, thetatau, beta, 2, 2);
     stau2amplitudetauneutralinoZ3 = stauamplitudedecaytauneutralino (me(2,3), mtau, mneut(3), g, gp, runmw, mixNeut, thetatau, beta, 2, 3);
     stau2amplitudetauneutralinoZ4 = stauamplitudedecaytauneutralino (me(2,3), mtau, mneut(4), g, gp, runmw, mixNeut, thetatau, beta, 2, 4);
     stau2amplitudetaugravitino = squarkamplitudedecaygravitino(me(2,3), mgravitino, mtau, MPlreduced, gravonoff, slepNLSP);
   }
   else if (nmssmIsIt == true) {
     stau2amplitudestau1h = stau2amplitudedecaystau1CPevenhiggsNMSSM (me(2,3), me(1,3), mh0(1), runmtau, thetatau, CPEMix, beta, runmw, g, gp, Atau, mueff, lam, 1); 
     stau2amplitudestau1H = stau2amplitudedecaystau1CPevenhiggsNMSSM (me(2,3), me(1,3), mh0(2), runmtau, thetatau, CPEMix, beta, runmw, g, gp, Atau, mueff, lam, 2); 
     stau2amplitudestau1H3 = stau2amplitudedecaystau1CPevenhiggsNMSSM (me(2,3), me(1,3), mh0(3), runmtau, thetatau, CPEMix, beta, runmw, g, gp, Atau, mueff, lam, 3); 
     stau2amplitudestau1A = stau2amplitudedecaystau1CPoddhiggsNMSSM (me(2,3), me(1,3), mA0(1), runmtau, thetatau, CPOMix, beta, runmw, g , Atau, mueff, lam, 1); 
     stau2amplitudestau1A2 = stau2amplitudedecaystau1CPoddhiggsNMSSM (me(2,3), me(1,3), mA0(2), runmtau, thetatau, CPOMix, beta, runmw, g , Atau, mueff, lam, 2);
     stau2amplitudetauneutralinoZ1 = stauamplitudedecaytauneutralinoNMSSM(me(2,3), mtau, mneut(1), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 2, 1);
     stau2amplitudetauneutralinoZ2 = stauamplitudedecaytauneutralinoNMSSM(me(2,3), mtau, mneut(2), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 2, 2);
     stau2amplitudetauneutralinoZ3 = stauamplitudedecaytauneutralinoNMSSM(me(2,3), mtau, mneut(3), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 2, 3);
     stau2amplitudetauneutralinoZ4 = stauamplitudedecaytauneutralinoNMSSM(me(2,3), mtau, mneut(4), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 2, 4);
     stau2amplitudetauneutralinoZ5 = stauamplitudedecaytauneutralinoNMSSM(me(2,3), mtau, mneut(5), g, gp, thetatau, mixNeut, runmtau, runmw, beta, 2, 5);
   }
   
   ParticleStau2.Array_Decays[0][0] = PDGnutau; ParticleStau2.Array_Decays[0][1] = PDGchargino1; ParticleStau2.Array_Decays[0][2] = stau2amplitudetauneutrinocharginoW1; ParticleStau2.Array_Decays[0][3] = 2; ParticleStau2.Array_Comments[0] = "# ~tau_2- -> nu_tau ~chi_1-";
   ParticleStau2.Array_Decays[1][0] = PDGnutau; ParticleStau2.Array_Decays[1][1] = PDGchargino2; ParticleStau2.Array_Decays[1][2] = stau2amplitudetauneutrinocharginoW2; ParticleStau2.Array_Decays[1][3] = 2; ParticleStau2.Array_Comments[1] = "# ~tau_2- -> nu_tau ~chi_2-";
   ParticleStau2.Array_Decays[2][0] = PDGnustauL; ParticleStau2.Array_Decays[2][1] = -PDGHplus; ParticleStau2.Array_Decays[2][2] = stau2amplitudestausneutrinoHminus; ParticleStau2.Array_Decays[2][3] = 2; ParticleStau2.Array_Comments[2] = "# ~tau_2- -> H- ~nu_tauL";
   ParticleStau2.Array_Decays[3][0] = PDGnustauL; ParticleStau2.Array_Decays[3][1] = -PDGWplus; ParticleStau2.Array_Decays[3][2] = stau2amplitudestausneutrinoWboson; ParticleStau2.Array_Decays[3][3] = 2; ParticleStau2.Array_Comments[3] = "# ~tau_2- -> W- ~nu_tauL";
   ParticleStau2.Array_Decays[4][0] = PDGstau1; ParticleStau2.Array_Decays[4][1] = PDGZboson; ParticleStau2.Array_Decays[4][2] = stau2amplitudestau1Zboson; ParticleStau2.Array_Decays[4][3] = 2; ParticleStau2.Array_Comments[4] = "# ~tau_2- -> Z ~tau_1-";
   ParticleStau2.Array_Decays[5][0] = PDGstau1; ParticleStau2.Array_Decays[5][1] = PDGh0; ParticleStau2.Array_Decays[5][2] = stau2amplitudestau1h; ParticleStau2.Array_Decays[5][3] = 2; ParticleStau2.Array_Comments[5] = "# ~tau_2- -> h ~tau_1-";
   ParticleStau2.Array_Decays[6][0] = PDGstau1; ParticleStau2.Array_Decays[6][1] = PDGH0; ParticleStau2.Array_Decays[6][2] = stau2amplitudestau1H; ParticleStau2.Array_Decays[6][3] = 2; ParticleStau2.Array_Comments[6] = "# ~tau_2- -> H ~tau_1-";
   ParticleStau2.Array_Decays[7][0] = PDGstau1; ParticleStau2.Array_Decays[7][1] = PDGA0; ParticleStau2.Array_Decays[7][2] = stau2amplitudestau1A; ParticleStau2.Array_Decays[7][3] = 2; ParticleStau2.Array_Comments[7] = "# ~tau_2- -> A ~tau_1-";

   ParticleStau2.Array_Decays[8][0] = PDGH3; ParticleStau2.Array_Decays[8][1] = PDGstau1; ParticleStau2.Array_Decays[8][2] = stau2amplitudestau1H3; ParticleStau2.Array_Decays[8][3] = 2; ParticleStau2.Array_Comments[8] = "# ~tau_2 -> H3 ~tau_1-";
   ParticleStau2.Array_Decays[9][0] = PDGA2; ParticleStau2.Array_Decays[9][1] = PDGstau1; ParticleStau2.Array_Decays[9][2] = stau2amplitudestau1A2; ParticleStau2.Array_Decays[9][3] = 2; ParticleStau2.Array_Comments[9] = "# ~tau_2 -> A2 ~tau_1-"; 
   ParticleStau2.Array_Decays[10][0] = PDGtau; ParticleStau2.Array_Decays[10][1] = PDGneutralino1; ParticleStau2.Array_Decays[10][2] = stau2amplitudetauneutralinoZ1; ParticleStau2.Array_Decays[10][3] = 2; ParticleStau2.Array_Comments[10] = "# ~tau_2- -> tau- ~chi_10";
   ParticleStau2.Array_Decays[11][0] = PDGtau; ParticleStau2.Array_Decays[11][1] = PDGneutralino2; ParticleStau2.Array_Decays[11][2] = stau2amplitudetauneutralinoZ2; ParticleStau2.Array_Decays[11][3] = 2; ParticleStau2.Array_Comments[11] = "# ~tau_2- -> tau- ~chi_20";
   ParticleStau2.Array_Decays[12][0] = PDGtau; ParticleStau2.Array_Decays[12][1] = PDGneutralino3; ParticleStau2.Array_Decays[12][2] = stau2amplitudetauneutralinoZ3; ParticleStau2.Array_Decays[12][3] = 2; ParticleStau2.Array_Comments[12] = "# ~tau_2- -> tau- ~chi_30";
   ParticleStau2.Array_Decays[13][0] = PDGtau; ParticleStau2.Array_Decays[13][1] = PDGneutralino4; ParticleStau2.Array_Decays[13][2] = stau2amplitudetauneutralinoZ4; ParticleStau2.Array_Decays[13][3] = 2; ParticleStau2.Array_Comments[13] = "# ~tau_2- -> tau- ~chi_40";
   ParticleStau2.Array_Decays[14][0] = PDGtau; ParticleStau2.Array_Decays[14][1] = PDGneutralino5; ParticleStau2.Array_Decays[14][2] = stau2amplitudetauneutralinoZ5; ParticleStau2.Array_Decays[14][3] = 2; ParticleStau2.Array_Comments[14] = "# ~tau_2- -> tau- ~chi_50";
   
   ParticleStau2.Array_Decays[15][0] = PDGtau; ParticleStau2.Array_Decays[15][1] = PDGgravitino; ParticleStau2.Array_Decays[15][2] = stau2amplitudetaugravitino; ParticleStau2.Array_Decays[15][3] = 2; ParticleStau2.Array_Comments[15] = "# ~tau_2- -> tau- ~G";

   double Stau2_No_1to2_Decays = 0;

   Stau2_No_1to2_Decays = ParticleStau2.No_1to2_Decays + ParticleStau2.No_grav_Decays + ParticleStau2.No_NMSSM_Decays;
   
   for (int j = 0; j<Stau2_No_1to2_Decays; j++) {
     ParticleStau2.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Stau2_No_1to2_Decays; j++) {
     ParticleStau2.two_width = ParticleStau2.two_width + ParticleStau2.Array_Decays[j][2];
   }
   for (int j=Stau2_No_1to2_Decays; j<ParticleStau2.No_of_Decays; j++) {
     ParticleStau2.three_width = ParticleStau2.three_width + ParticleStau2.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleStau2.three_width != ParticleStau2.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for stau2 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleStau2.No_of_Decays = Stau2_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleStau2.total_width = ParticleStau2.two_width;
     }
   else {
     ParticleStau2.total_width = ParticleStau2.two_width + ParticleStau2.three_width;
   }

   if ( ParticleStau2.total_width != ParticleStau2.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleStau2.No_of_Decays; i++) {
       //   fout << i << " " << ParticleStau2.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in stau2 total width \n");
     }
  
   for (int i =0; i<ParticleStau2.No_of_Decays; i++) {
     ParticleStau2.Array_Decays[i][5]= ParticleStau2.Array_Decays[i][2]/ParticleStau2.total_width;
   }
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleStau2, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleStau2, BRTol);}

 }
 
 ///Stau sneutrino decays

 double snutauamplitudenutauneutralinoZ1=0, snutauamplitudenutauneutralinoZ2=0, snutauamplitudenutauneutralinoZ3=0, snutauamplitudenutauneutralinoZ4=0, snutauamplitudetaucharginoW1=0, snutauamplitudetaucharginoW2=0, snutauamplitudeWbosonstau1=0, snutauamplitudeWbosonstau2=0, snutauamplitudeHplusstau1=0, snutauamplitudeHplusstau2=0, snutauamplitudenutaugravitino=0;
 double snutauamplitudenutauneutralinoZ5 = 0;
 
 if (flagsnutauL == 1) {
   snutauamplitudetaucharginoW1 = stausneutrinoamplitudedecaytauchargino (msnu(3), mtau, MCH1, g, runmw, beta, thetaL2, thetaR2, 1);
   snutauamplitudetaucharginoW2 = stausneutrinoamplitudedecaytauchargino (msnu(3), mtau, MCH2, g, runmw, beta, thetaL2, thetaR2, 2);
   snutauamplitudeHplusstau1 = stauamplitudedecaysnustauHminus (msnu(3), me(1,3), mHpm, g, runmw, beta, thetatau, runmtau, greekmu, Atau, 1);
   snutauamplitudeHplusstau2 = stauamplitudedecaysnustauHminus (msnu(3), me(2,3), mHpm, g, runmw, beta, thetatau, runmtau, greekmu, Atau, 2);
   snutauamplitudeWbosonstau1 = stauamplitudedecaysnustauWboson (msnu(3), me(1,3), polemw, g, thetatau, 1);
   snutauamplitudeWbosonstau2 = stauamplitudedecaysnustauWboson (msnu(3), me(2,3), polemw, g, thetatau, 2);
   if (nmssmIsIt == false) {
     snutauamplitudenutauneutralinoZ1 = stausneutrinoamplitudedecaytauneutrinoneutralino (msnu(3), 0, mneut(1), g, gp, mixNeut, 1);
     snutauamplitudenutauneutralinoZ2 = stausneutrinoamplitudedecaytauneutrinoneutralino (msnu(3), 0, mneut(2), g, gp, mixNeut, 2);
     snutauamplitudenutauneutralinoZ3 = stausneutrinoamplitudedecaytauneutrinoneutralino (msnu(3), 0, mneut(3), g, gp, mixNeut, 3);
     snutauamplitudenutauneutralinoZ4 = stausneutrinoamplitudedecaytauneutrinoneutralino (msnu(3), 0, mneut(4), g, gp, mixNeut, 4);
     snutauamplitudenutaugravitino = squarkamplitudedecaygravitino(msnu(3), mgravitino, 0, MPlreduced, gravonoff, snuNLSP);
   }
   else if (nmssmIsIt == true) {
     snutauamplitudenutauneutralinoZ1 = snutauamplitudedecaynutauneutralinoNMSSM (msnu(3), mneut(1), g, gp, mixNeut, 1);
     snutauamplitudenutauneutralinoZ2 = snutauamplitudedecaynutauneutralinoNMSSM (msnu(3), mneut(2), g, gp, mixNeut, 2);
     snutauamplitudenutauneutralinoZ3 = snutauamplitudedecaynutauneutralinoNMSSM (msnu(3), mneut(3), g, gp, mixNeut, 3);
     snutauamplitudenutauneutralinoZ4 = snutauamplitudedecaynutauneutralinoNMSSM (msnu(3), mneut(4), g, gp, mixNeut, 4);
     snutauamplitudenutauneutralinoZ5 = snutauamplitudedecaynutauneutralinoNMSSM (msnu(3), mneut(5), g, gp, mixNeut, 5);
   }
   
   ParticleSnutau.Array_Decays[0][0] = PDGnutau; ParticleSnutau.Array_Decays[0][1] = PDGneutralino1; ParticleSnutau.Array_Decays[0][2] = snutauamplitudenutauneutralinoZ1; ParticleSnutau.Array_Decays[0][3] = 2; ParticleSnutau.Array_Comments[0] = "# ~nu_tauL -> nu_tau ~chi_10";
   ParticleSnutau.Array_Decays[1][0] = PDGnutau; ParticleSnutau.Array_Decays[1][1] = PDGneutralino2; ParticleSnutau.Array_Decays[1][2] = snutauamplitudenutauneutralinoZ2; ParticleSnutau.Array_Decays[1][3] = 2; ParticleSnutau.Array_Comments[1] = "# ~nu_tauL -> nu_tau ~chi_20";
   ParticleSnutau.Array_Decays[2][0] = PDGnutau; ParticleSnutau.Array_Decays[2][1] = PDGneutralino3; ParticleSnutau.Array_Decays[2][2] = snutauamplitudenutauneutralinoZ3; ParticleSnutau.Array_Decays[2][3] = 2; ParticleSnutau.Array_Comments[2] = "# ~nu_tauL -> nu_tau ~chi_30";
   ParticleSnutau.Array_Decays[3][0] = PDGnutau; ParticleSnutau.Array_Decays[3][1] = PDGneutralino4; ParticleSnutau.Array_Decays[3][2] = snutauamplitudenutauneutralinoZ4; ParticleSnutau.Array_Decays[3][3] = 2; ParticleSnutau.Array_Comments[3] = "# ~nu_tauL -> nu_tau ~chi_40";
   ParticleSnutau.Array_Decays[4][0] = PDGtau; ParticleSnutau.Array_Decays[4][1] = PDGchargino1; ParticleSnutau.Array_Decays[4][2] = snutauamplitudetaucharginoW1; ParticleSnutau.Array_Decays[4][3] = 2; ParticleSnutau.Array_Comments[4] = "# ~nu_tauL -> tau- ~chi_1+";
   ParticleSnutau.Array_Decays[5][0] = PDGtau; ParticleSnutau.Array_Decays[5][1] = PDGchargino2; ParticleSnutau.Array_Decays[5][2] = snutauamplitudetaucharginoW2; ParticleSnutau.Array_Decays[5][3] = 2; ParticleSnutau.Array_Comments[5] = "# ~nu_tauL -> tau- ~chi_2+";
   ParticleSnutau.Array_Decays[6][0] = PDGstau1; ParticleSnutau.Array_Decays[6][1] = PDGHplus; ParticleSnutau.Array_Decays[6][2] = snutauamplitudeHplusstau1; ParticleSnutau.Array_Decays[6][3] = 2; ParticleSnutau.Array_Comments[6] = "# ~nu_tauL -> H+ ~tau_1-";
   ParticleSnutau.Array_Decays[7][0] = PDGstau2; ParticleSnutau.Array_Decays[7][1] = PDGHplus; ParticleSnutau.Array_Decays[7][2] = snutauamplitudeHplusstau2; ParticleSnutau.Array_Decays[7][3] = 2; ParticleSnutau.Array_Comments[7] = "# ~nu_tauL -> H+ ~tau_2-";
   ParticleSnutau.Array_Decays[8][0] = PDGWplus; ParticleSnutau.Array_Decays[8][1] = PDGstau1; ParticleSnutau.Array_Decays[8][2] = snutauamplitudeWbosonstau1; ParticleSnutau.Array_Decays[8][3] = 2; ParticleSnutau.Array_Comments[8] = "# ~nu_tauL -> W+ ~tau_1-";
   ParticleSnutau.Array_Decays[9][0] = PDGWplus; ParticleSnutau.Array_Decays[9][1] = PDGstau2; ParticleSnutau.Array_Decays[9][2] = snutauamplitudeWbosonstau2; ParticleSnutau.Array_Decays[9][3] = 2; ParticleSnutau.Array_Comments[9] = "# ~nu_tauL -> W+ ~tau_2-";

   ParticleSnutau.Array_Decays[10][0] = PDGnutau; ParticleSnutau.Array_Decays[10][1] = PDGneutralino5; ParticleSnutau.Array_Decays[10][2] = snutauamplitudenutauneutralinoZ5; ParticleSnutau.Array_Decays[10][3] = 2; ParticleSnutau.Array_Comments[10] = "# ~nu_tauL -> nu_tau ~chi_50";

   ParticleSnutau.Array_Decays[11][0] = PDGnutau; ParticleSnutau.Array_Decays[11][1] = PDGgravitino; ParticleSnutau.Array_Decays[11][2] = snutauamplitudenutaugravitino; ParticleSnutau.Array_Decays[11][3] = 2; ParticleSnutau.Array_Comments[11] = "# ~nu_tauL -> nu_tau ~G";

   double Snutau_No_1to2_Decays = 0;

   Snutau_No_1to2_Decays = ParticleSnutau.No_1to2_Decays + ParticleSnutau.No_grav_Decays + ParticleSnutau.No_NMSSM_Decays;
 
   for (int j = 0; j<Snutau_No_1to2_Decays; j++) {
     ParticleSnutau.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Snutau_No_1to2_Decays; j++) {
     ParticleSnutau.two_width = ParticleSnutau.two_width + ParticleSnutau.Array_Decays[j][2];
   }
   for (int j=Snutau_No_1to2_Decays; j<ParticleSnutau.No_of_Decays; j++) {
     ParticleSnutau.three_width = ParticleSnutau.three_width + ParticleSnutau.Array_Decays[j][2];
   }
   ///Note currently no slepton three body decays included - may change in future versions
   if ( ParticleSnutau.three_width != ParticleSnutau.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for snutau - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleSnutau.No_of_Decays = Snutau_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleSnutau.total_width = ParticleSnutau.two_width;
     }
   else {
     ParticleSnutau.total_width = ParticleSnutau.two_width + ParticleSnutau.three_width;
   }
   
   if ( ParticleSnutau.total_width != ParticleSnutau.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleSnutau.No_of_Decays; i++) {
       //   fout << i << " " << ParticleSnutau.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in snutau total width \n");
     }
   
   for (int i =0; i<ParticleSnutau.No_of_Decays; i++) {
     ParticleSnutau.Array_Decays[i][5]= ParticleSnutau.Array_Decays[i][2]/ParticleSnutau.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleSnutau, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleSnutau, BRTol);}
 }


 ///Chargino Decays
 ///Chargino1 Decays
 
 double chargino1amplitudeWbosonneutralinoZ1=0, chargino1amplitudeWbosonneutralinoZ2=0, chargino1amplitudeWbosonneutralinoZ3=0, chargino1amplitudeWbosonneutralinoZ4=0, chargino1amplitudeHminusneutralinoZ1=0, chargino1amplitudeHminusneutralinoZ2=0, chargino1amplitudeHminusneutralinoZ3=0, chargino1amplitudeHminusneutralinoZ4=0, chargino1amplitudesupLd=0, chargino1amplitudesdownLu=0, chargino1amplitudescharmLs=0, chargino1amplitudesstrangeLc=0, chargino1amplitudestop1b=0, chargino1amplitudestop2b=0, chargino1amplitudesbottom1t=0, chargino1amplitudesbottom2t=0, chargino1amplitudesnuee=0, chargino1amplitudeselectronLnue=0, chargino1amplitudesnumumu=0, chargino1amplitudesmuonLnumu=0, chargino1amplitudesnutautau=0, chargino1amplitudenutaustau1=0, chargino1amplitudenutaustau2=0, chargino1amplitudeneut1udbar=0, chargino1amplitudeneut1csbar=0, chargino1amplitudeneut1nueebar=0, chargino1amplitudeneut1numumubar=0, chargino1amplitudeneut1nutautaubar=0, chargino1amplitudeneut2udbar=0, chargino1amplitudeneut2csbar=0, chargino1amplitudeneut2nueebar=0, chargino1amplitudeneut2numumubar=0, chargino1amplitudeneut2nutautaubar=0, chargino1amplitudeneut3udbar=0, chargino1amplitudeneut3csbar=0, chargino1amplitudeneut3nueebar=0, chargino1amplitudeneut3numumubar=0, chargino1amplitudeneut3nutautaubar=0, chargino1amplitudeneut4udbar=0, chargino1amplitudeneut4csbar=0, chargino1amplitudeneut4nueebar=0, chargino1amplitudeneut4numumubar=0, chargino1amplitudeneut4nutautaubar=0;
 double chargino1amplitudeHminusneutralinoZ5 = 0, chargino1amplitudeWbosonneutralinoZ5 = 0;

 if (flagchar1 == 1) {
   chargino1amplitudesupLd = charginoamplitudedecayquarksquarkL (MCH1, mdo, mu(1,1), g, thetaR2, 1);
   chargino1amplitudesdownLu = charginoamplitudedecayquarksquarkL (MCH1, mup, md(1,1), g, thetaL2, 1);
   chargino1amplitudescharmLs = charginoamplitudedecayquarksquarkL (MCH1, ms, mu(1,2), g , thetaR2, 1);
   chargino1amplitudesstrangeLc = charginoamplitudedecayquarksquarkL (MCH1, mc, md(1,2), g, thetaL2, 1);
   chargino1amplitudestop1b = charginoamplitudedecayquarksquarkmix (MCH1, mb, mu(1,3), g, thetat, thetaL2, thetaR2, beta, runmt, runmb, runmw, 1, 1, 1);
   chargino1amplitudestop2b = charginoamplitudedecayquarksquarkmix (MCH1, mb, mu(2,3), g, thetat, thetaL2, thetaR2, beta, runmt, runmb,  runmw, 1, 1, 2); 
   chargino1amplitudesbottom1t = charginoamplitudedecayquarksquarkmix (MCH1, mt, md(1,3), g, thetab, thetaL2, thetaR2, beta, runmt, runmb, runmw, 1, 2, 1);
   chargino1amplitudesbottom2t = charginoamplitudedecayquarksquarkmix (MCH1, mt, md(2,3), g, thetab, thetaL2, thetaR2, beta, runmt, runmb, runmw, 1, 2, 2);
   chargino1amplitudesnuee = charginoamplitudedecayleptonsleptonL (MCH1, mel, msnu(1), g, thetaR2, 1);
   chargino1amplitudeselectronLnue = charginoamplitudedecayleptonsleptonL (MCH1, 0, me(1,1), g, thetaL2, 1);
   chargino1amplitudesnumumu = charginoamplitudedecayleptonsleptonL (MCH1, mmu, msnu(2), g, thetaR2, 1);
   chargino1amplitudesmuonLnumu = charginoamplitudedecayleptonsleptonL (MCH1, 0, me(1,2), g, thetaL2, 1); 
   chargino1amplitudesnutautau = charginoamplitudedecaysnutautau (MCH1, mtau, msnu(3), g, thetaL2, thetaR2, beta, runmw, 1);
   chargino1amplitudenutaustau1 = charginoamplitudedecaystaunutau (MCH1, 0, me(1,3), g, thetaL2, thetaR2, thetatau, beta, runmw, runmtau, 1, 1);
   chargino1amplitudenutaustau2 = charginoamplitudedecaystaunutau (MCH1, 0, me(2,3), g, thetaL2, thetaR2, thetatau, beta, runmw, runmtau, 2, 1);
   if (nmssmIsIt == false) {
     chargino1amplitudeWbosonneutralinoZ1 = charginoamplitudedecayWbosonneutralino (MCH1, polemw, mneut(1), g, thetaL2, thetaR2, mixNeut, 1, 1);
     chargino1amplitudeWbosonneutralinoZ2 = charginoamplitudedecayWbosonneutralino (MCH1, polemw, mneut(2), g, thetaL2, thetaR2, mixNeut, 1, 2);
     chargino1amplitudeWbosonneutralinoZ3 = charginoamplitudedecayWbosonneutralino (MCH1, polemw, mneut(3), g, thetaL2, thetaR2, mixNeut, 1, 3);
     chargino1amplitudeWbosonneutralinoZ4 = charginoamplitudedecayWbosonneutralino (MCH1, polemw, mneut(4), g, thetaL2, thetaR2, mixNeut, 1, 4);
     chargino1amplitudeHminusneutralinoZ1 = charginoamplitudedecayHminusneutralino (MCH1, mHpm, mneut(1), g, gp, thetaL2, thetaR2, beta, mixNeut, 1, 1);
     chargino1amplitudeHminusneutralinoZ2 = charginoamplitudedecayHminusneutralino (MCH1, mHpm, mneut(2), g, gp, thetaL2, thetaR2, beta, mixNeut, 1, 2);
     chargino1amplitudeHminusneutralinoZ3 = charginoamplitudedecayHminusneutralino (MCH1, mHpm, mneut(3), g, gp, thetaL2, thetaR2, beta, mixNeut, 1, 3);
     chargino1amplitudeHminusneutralinoZ4 = charginoamplitudedecayHminusneutralino (MCH1, mHpm, mneut(4), g, gp, thetaL2, thetaR2, beta, mixNeut, 1, 4); 
   }
   else if (nmssmIsIt == true) {
     chargino1amplitudeHminusneutralinoZ1 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH1, mneut(1), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 1, 1);
     chargino1amplitudeHminusneutralinoZ2 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH1, mneut(2), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 1, 2);
     chargino1amplitudeHminusneutralinoZ3 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH1, mneut(3), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 1, 3);
     chargino1amplitudeHminusneutralinoZ4 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH1, mneut(4), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 1, 4);
     chargino1amplitudeHminusneutralinoZ5 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH1, mneut(5), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 1, 5);
     chargino1amplitudeWbosonneutralinoZ1 = charginoiamplitudedecayneutralinojWNMSSM (MCH1, mneut(1), polemw, g, gp, thetaL2, thetaR2, mixNeut, 1, 1);
     chargino1amplitudeWbosonneutralinoZ2 = charginoiamplitudedecayneutralinojWNMSSM (MCH1, mneut(2), polemw, g, gp, thetaL2, thetaR2, mixNeut, 1, 2);
     chargino1amplitudeWbosonneutralinoZ3 = charginoiamplitudedecayneutralinojWNMSSM (MCH1, mneut(3), polemw, g, gp, thetaL2, thetaR2, mixNeut, 1, 3);
     chargino1amplitudeWbosonneutralinoZ4 = charginoiamplitudedecayneutralinojWNMSSM (MCH1, mneut(4), polemw, g, gp, thetaL2, thetaR2, mixNeut, 1, 4);
     chargino1amplitudeWbosonneutralinoZ5 = charginoiamplitudedecayneutralinojWNMSSM (MCH1, mneut(5), polemw, g, gp, thetaL2, thetaR2, mixNeut, 1, 5);
   }
 
   chargino1amplitudeneut1udbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(1), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 1, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut1csbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(1), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 1, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut1nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(1), 10000000000, me(1,1), me(2,1), polemw, mHpm, mneut(1), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 1, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut1numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(2), 10000000000, me(1,2), me(2,2), polemw, mHpm, mneut(1), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 1, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut1nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(3), 10000000000, me(1,3), me(2,3), polemw, mHpm, mneut(1), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 1, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut2udbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(2), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 2, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut2csbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(2), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 2, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut2nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(1), 10000000000, me(1,1), me(2,1), polemw, mHpm, mneut(2), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 2, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut2numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(2), 10000000000, me(1,2), me(2,2), polemw, mHpm, mneut(2), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 2, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut2nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(3), 10000000000, me(1,3), me(2,3), polemw, mHpm, mneut(2), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 2, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut3udbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(3), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 3, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut3csbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(3), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 3, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut3nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(1), 10000000000, me(1,1), me(2,1), polemw, mHpm, mneut(3), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 3, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut3numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(2), 10000000000, me(1,2), me(2,2), polemw, mHpm, mneut(3), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 3, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut3nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(3), 10000000000, me(1,3), me(2,3), polemw, mHpm, mneut(3), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 3, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut4udbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(4), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 4, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut4csbar = neutralinoamplitudedecaycharginoffprimebar (MCH1, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(4), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 4, 1, onetothree, 'q', 'c');
   chargino1amplitudeneut4nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(1), 10000000000, me(1,1), me(2,1), polemw, mHpm, mneut(4), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 4, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut4numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(2), 10000000000, me(1,2), me(2,2), polemw, mHpm, mneut(4), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 4, 1, onetothree, 'l', 'c');
   chargino1amplitudeneut4nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH1, msnu(3), 10000000000, me(1,3), me(2,3), polemw, mHpm, mneut(4), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 4, 1, onetothree, 'l', 'c');
 
   ParticleChargino1.Array_Decays[0][0] = -PDGdown; ParticleChargino1.Array_Decays[0][1] = PDGsupL; ParticleChargino1.Array_Decays[0][2] = chargino1amplitudesupLd; ParticleChargino1.Array_Decays[0][3] = 2; ParticleChargino1.Array_Comments[0] = "# ~chi_1+ -> db ~u_L";
   ParticleChargino1.Array_Decays[1][0] = PDGup; ParticleChargino1.Array_Decays[1][1] = -PDGsdownL; ParticleChargino1.Array_Decays[1][2] = chargino1amplitudesdownLu; ParticleChargino1.Array_Decays[1][3] = 2; ParticleChargino1.Array_Comments[1] = "# ~chi_1+ -> u ~d_L*"; 
   ParticleChargino1.Array_Decays[2][0] = -PDGstrange; ParticleChargino1.Array_Decays[2][1] = PDGscharmL; ParticleChargino1.Array_Decays[2][2] = chargino1amplitudescharmLs; ParticleChargino1.Array_Decays[2][3] = 2; ParticleChargino1.Array_Comments[2] = "# ~chi_1+ -> sb ~s_L";
   ParticleChargino1.Array_Decays[3][0] = PDGcharm; ParticleChargino1.Array_Decays[3][1] = -PDGsstrangeL; ParticleChargino1.Array_Decays[3][2] = chargino1amplitudesstrangeLc; ParticleChargino1.Array_Decays[3][3] = 2; ParticleChargino1.Array_Comments[3] = "# ~chi_1+ -> c ~s_L*";
   ParticleChargino1.Array_Decays[4][0] = -PDGbottom; ParticleChargino1.Array_Decays[4][1] = PDGstop1; ParticleChargino1.Array_Decays[4][2] = chargino1amplitudestop1b; ParticleChargino1.Array_Decays[4][3] = 2; ParticleChargino1.Array_Comments[4] = "# ~chi_1+ -> bb ~t_1";
   ParticleChargino1.Array_Decays[5][0] = -PDGbottom; ParticleChargino1.Array_Decays[5][1] = PDGstop2; ParticleChargino1.Array_Decays[5][2] = chargino1amplitudestop2b; ParticleChargino1.Array_Decays[5][3] = 2; ParticleChargino1.Array_Comments[5] = "# ~chi_1+ -> bb ~t2";
   ParticleChargino1.Array_Decays[6][0] = PDGtop; ParticleChargino1.Array_Decays[6][1] = PDGsbottom1; ParticleChargino1.Array_Decays[6][2] = chargino1amplitudesbottom1t; ParticleChargino1.Array_Decays[6][3] = 2; ParticleChargino1.Array_Comments[6] = "# ~chi_1+ -> t ~b_1";
   ParticleChargino1.Array_Decays[7][0] = PDGtop; ParticleChargino1.Array_Decays[7][1] = PDGsbottom2; ParticleChargino1.Array_Decays[7][2] = chargino1amplitudesbottom2t; ParticleChargino1.Array_Decays[7][3] = 2; ParticleChargino1.Array_Comments[7] = "# ~chi_1+ -> t ~b_2";
   ParticleChargino1.Array_Decays[8][0] = PDGnuselectronL; ParticleChargino1.Array_Decays[8][1] = -PDGelectron; ParticleChargino1.Array_Decays[8][2] = chargino1amplitudesnuee; ParticleChargino1.Array_Decays[8][3] = 2; ParticleChargino1.Array_Comments[8] = "# ~chi_1+ -> e+ ~nu_eL";
   ParticleChargino1.Array_Decays[9][0] = -PDGselectronL; ParticleChargino1.Array_Decays[9][1] = PDGnuelectron; ParticleChargino1.Array_Decays[9][2] = chargino1amplitudeselectronLnue; ParticleChargino1.Array_Decays[9][3] = 2; ParticleChargino1.Array_Comments[9] = "# ~chi_1+ -> nu_e ~e_L+";
   ParticleChargino1.Array_Decays[10][0] = PDGnusmuonL; ParticleChargino1.Array_Decays[10][1] = -PDGmuon; ParticleChargino1.Array_Decays[10][2] = chargino1amplitudesnumumu; ParticleChargino1.Array_Decays[10][3] = 2; ParticleChargino1.Array_Comments[10] = "# ~chi_1+ -> mu+ ~nu_muL";
   ParticleChargino1.Array_Decays[11][0] = -PDGsmuonL; ParticleChargino1.Array_Decays[11][1] = PDGnumuon; ParticleChargino1.Array_Decays[11][2] = chargino1amplitudesmuonLnumu; ParticleChargino1.Array_Decays[11][3] = 2; ParticleChargino1.Array_Comments[11] = "# ~chi_1+ -> nu_mu ~muL+";
   ParticleChargino1.Array_Decays[12][0] = -PDGtau; ParticleChargino1.Array_Decays[12][1] = PDGnustauL; ParticleChargino1.Array_Decays[12][2] = chargino1amplitudesnutautau; ParticleChargino1.Array_Decays[12][3] = 2; ParticleChargino1.Array_Comments[12] = "# ~chi_1+ -> tau+ ~nu_tauL";
   ParticleChargino1.Array_Decays[13][0] = PDGnutau; ParticleChargino1.Array_Decays[13][1] = -PDGstau1; ParticleChargino1.Array_Decays[13][2] = chargino1amplitudenutaustau1; ParticleChargino1.Array_Decays[13][3] = 2; ParticleChargino1.Array_Comments[13] = "# ~chi_1+ -> nu_tau ~tau_1+";
   ParticleChargino1.Array_Decays[14][0] = PDGnutau; ParticleChargino1.Array_Decays[14][1] = -PDGstau2; ParticleChargino1.Array_Decays[14][2] = chargino1amplitudenutaustau2; ParticleChargino1.Array_Decays[14][3] = 2; ParticleChargino1.Array_Comments[14] = "# ~chi_1+ -> nu_tau ~tau_2+";
   ParticleChargino1.Array_Decays[15][0] = PDGWplus; ParticleChargino1.Array_Decays[15][1] = PDGneutralino1; ParticleChargino1.Array_Decays[15][2] = chargino1amplitudeWbosonneutralinoZ1; ParticleChargino1.Array_Decays[15][3] = 2; ParticleChargino1.Array_Comments[15] = "# ~chi_1+ -> W+ ~chi_10";
   ParticleChargino1.Array_Decays[16][0] = PDGWplus; ParticleChargino1.Array_Decays[16][1] = PDGneutralino2; ParticleChargino1.Array_Decays[16][2] = chargino1amplitudeWbosonneutralinoZ2; ParticleChargino1.Array_Decays[16][3] = 2; ParticleChargino1.Array_Comments[16] = "# ~chi_1+ -> W+ ~chi_20";
   ParticleChargino1.Array_Decays[17][0] = PDGWplus; ParticleChargino1.Array_Decays[17][1] = PDGneutralino3; ParticleChargino1.Array_Decays[17][2] = chargino1amplitudeWbosonneutralinoZ3; ParticleChargino1.Array_Decays[17][3] = 2; ParticleChargino1.Array_Comments[17] = "# ~chi_1+ -> W+ ~chi_30";
   ParticleChargino1.Array_Decays[18][0] = PDGWplus; ParticleChargino1.Array_Decays[18][1] = PDGneutralino4; ParticleChargino1.Array_Decays[18][2] = chargino1amplitudeWbosonneutralinoZ4; ParticleChargino1.Array_Decays[18][3] = 2; ParticleChargino1.Array_Comments[18] = "# ~chi_1+ -> W+ ~chi_40";
   ParticleChargino1.Array_Decays[19][0] = PDGHplus; ParticleChargino1.Array_Decays[19][1] = PDGneutralino1; ParticleChargino1.Array_Decays[19][2] = chargino1amplitudeHminusneutralinoZ1; ParticleChargino1.Array_Decays[19][3] = 2; ParticleChargino1.Array_Comments[19] = "# ~chi_1+ -> H+ ~chi_10";
   ParticleChargino1.Array_Decays[20][0] = PDGHplus; ParticleChargino1.Array_Decays[20][1] = PDGneutralino2; ParticleChargino1.Array_Decays[20][2] = chargino1amplitudeHminusneutralinoZ2; ParticleChargino1.Array_Decays[20][3] = 2; ParticleChargino1.Array_Comments[20] = "# ~chi_1+ -> H+ ~chi_20";
   ParticleChargino1.Array_Decays[21][0] = PDGHplus; ParticleChargino1.Array_Decays[21][1] = PDGneutralino3; ParticleChargino1.Array_Decays[21][2] = chargino1amplitudeHminusneutralinoZ3; ParticleChargino1.Array_Decays[21][3] = 2; ParticleChargino1.Array_Comments[21] = "# ~chi_1+ -> H+ ~chi_30";
   ParticleChargino1.Array_Decays[22][0] = PDGHplus; ParticleChargino1.Array_Decays[22][1] = PDGneutralino4; ParticleChargino1.Array_Decays[22][2] = chargino1amplitudeHminusneutralinoZ4; ParticleChargino1.Array_Decays[22][3] = 2; ParticleChargino1.Array_Comments[22] = "# ~chi_1+ -> H+ ~chi_40";

   ParticleChargino1.Array_Decays[23][0] = PDGHplus; ParticleChargino1.Array_Decays[23][1] = PDGneutralino5; ParticleChargino1.Array_Decays[23][2] = chargino1amplitudeHminusneutralinoZ5; ParticleChargino1.Array_Decays[23][3] = 2; ParticleChargino1.Array_Comments[23] = "# ~chi_1+ -> H+ ~chi_50";
   ParticleChargino1.Array_Decays[24][0] = PDGWplus; ParticleChargino1.Array_Decays[24][1] = PDGneutralino5; ParticleChargino1.Array_Decays[24][2] = chargino1amplitudeWbosonneutralinoZ5; ParticleChargino1.Array_Decays[24][3] = 2; ParticleChargino1.Array_Comments[24] = "# ~chi_1+ -> W+ ~chi_50";

   ParticleChargino1.Array_Decays[25][0] = PDGneutralino1; ParticleChargino1.Array_Decays[25][1] = PDGup; ParticleChargino1.Array_Decays[25][4] = -PDGdown; ParticleChargino1.Array_Decays[25][2] = chargino1amplitudeneut1udbar; ParticleChargino1.Array_Decays[25][3] = 3; ParticleChargino1.Array_Comments[25] = "# ~chi_1+ -> chi_10 u dbar";
   ParticleChargino1.Array_Decays[26][0] = PDGneutralino1; ParticleChargino1.Array_Decays[26][1] = PDGcharm; ParticleChargino1.Array_Decays[26][4] = -PDGstrange; ParticleChargino1.Array_Decays[26][2] = chargino1amplitudeneut1csbar; ParticleChargino1.Array_Decays[26][3] = 3; ParticleChargino1.Array_Comments[26] = "# ~chi_1+ -> chi_10 c sbar";
   ParticleChargino1.Array_Decays[27][0] = PDGneutralino1; ParticleChargino1.Array_Decays[27][1] = PDGnuelectron; ParticleChargino1.Array_Decays[27][4] = -PDGelectron; ParticleChargino1.Array_Decays[27][2] = chargino1amplitudeneut1nueebar; ParticleChargino1.Array_Decays[27][3] = 3; ParticleChargino1.Array_Comments[27] = "# ~chi_1+ -> chi_10 nu_e e+";
   ParticleChargino1.Array_Decays[28][0] = PDGneutralino1; ParticleChargino1.Array_Decays[28][1] = PDGnumuon; ParticleChargino1.Array_Decays[28][4] = -PDGmuon; ParticleChargino1.Array_Decays[28][2] = chargino1amplitudeneut1numumubar; ParticleChargino1.Array_Decays[28][3] = 3; ParticleChargino1.Array_Comments[28] = "# ~chi_1+ -> chi_10 nu_mu mu+";
   ParticleChargino1.Array_Decays[29][0] = PDGneutralino1; ParticleChargino1.Array_Decays[29][1] = PDGnutau; ParticleChargino1.Array_Decays[29][4] = -PDGtau; ParticleChargino1.Array_Decays[29][2] = chargino1amplitudeneut1nutautaubar; ParticleChargino1.Array_Decays[29][3] = 3; ParticleChargino1.Array_Comments[29] = "# ~chi_1+ -> chi_10 nu_tau tau+";
   ParticleChargino1.Array_Decays[30][0] = PDGneutralino2; ParticleChargino1.Array_Decays[30][1] = PDGup; ParticleChargino1.Array_Decays[30][4] = -PDGdown; ParticleChargino1.Array_Decays[30][2] = chargino1amplitudeneut2udbar; ParticleChargino1.Array_Decays[30][3] = 3; ParticleChargino1.Array_Comments[30] = "# ~chi_1+ -> chi_20 u dbar";
   ParticleChargino1.Array_Decays[31][0] = PDGneutralino2; ParticleChargino1.Array_Decays[31][1] = PDGcharm; ParticleChargino1.Array_Decays[31][4] = -PDGstrange; ParticleChargino1.Array_Decays[31][2] = chargino1amplitudeneut2csbar; ParticleChargino1.Array_Decays[31][3] = 3; ParticleChargino1.Array_Comments[31] = "# ~chi_1+ -> chi_20 c sbar";
   ParticleChargino1.Array_Decays[32][0] = PDGneutralino2; ParticleChargino1.Array_Decays[32][1] = PDGnuelectron; ParticleChargino1.Array_Decays[32][4] = -PDGelectron; ParticleChargino1.Array_Decays[32][2] = chargino1amplitudeneut2nueebar; ParticleChargino1.Array_Decays[32][3] = 3; ParticleChargino1.Array_Comments[32] = "# ~chi_1+ -> chi_20 nu_e e+";
   ParticleChargino1.Array_Decays[33][0] = PDGneutralino2; ParticleChargino1.Array_Decays[33][1] = PDGnumuon; ParticleChargino1.Array_Decays[33][4] = -PDGmuon; ParticleChargino1.Array_Decays[33][2] = chargino1amplitudeneut2numumubar; ParticleChargino1.Array_Decays[33][3] = 3; ParticleChargino1.Array_Comments[33] = "# ~chi_1+ -> chi_20 nu_mu mu+";
   ParticleChargino1.Array_Decays[34][0] = PDGneutralino2; ParticleChargino1.Array_Decays[34][1] = PDGnutau; ParticleChargino1.Array_Decays[34][4] = -PDGtau; ParticleChargino1.Array_Decays[34][2] = chargino1amplitudeneut2nutautaubar; ParticleChargino1.Array_Decays[34][3] = 3; ParticleChargino1.Array_Comments[34] = "# ~chi_1+ -> chi_20 nu_tau tau+";
   ParticleChargino1.Array_Decays[35][0] = PDGneutralino3; ParticleChargino1.Array_Decays[35][1] = PDGup; ParticleChargino1.Array_Decays[35][4] = -PDGdown; ParticleChargino1.Array_Decays[35][2] = chargino1amplitudeneut3udbar; ParticleChargino1.Array_Decays[35][3] = 3; ParticleChargino1.Array_Comments[35] = "# ~chi_1+ -> chi_30 u dbar";
   ParticleChargino1.Array_Decays[36][0] = PDGneutralino3; ParticleChargino1.Array_Decays[36][1] = PDGcharm; ParticleChargino1.Array_Decays[36][4] = -PDGstrange; ParticleChargino1.Array_Decays[36][2] = chargino1amplitudeneut3csbar; ParticleChargino1.Array_Decays[36][3] = 3; ParticleChargino1.Array_Comments[36] = "# ~chi_1+ -> chi_30 c sbar";
   ParticleChargino1.Array_Decays[37][0] = PDGneutralino3; ParticleChargino1.Array_Decays[37][1] = PDGnuelectron; ParticleChargino1.Array_Decays[37][4] = -PDGelectron; ParticleChargino1.Array_Decays[37][2] = chargino1amplitudeneut3nueebar; ParticleChargino1.Array_Decays[37][3] = 3; ParticleChargino1.Array_Comments[37] = "# ~chi_1+ -> chi_30 nu_e e+";
   ParticleChargino1.Array_Decays[38][0] = PDGneutralino3; ParticleChargino1.Array_Decays[38][1] = PDGnumuon; ParticleChargino1.Array_Decays[38][4] = -PDGmuon; ParticleChargino1.Array_Decays[38][2] = chargino1amplitudeneut3numumubar; ParticleChargino1.Array_Decays[38][3] = 3; ParticleChargino1.Array_Comments[38] = "# ~chi_1+ -> chi_30 nu_mu mu+";
   ParticleChargino1.Array_Decays[39][0] = PDGneutralino3; ParticleChargino1.Array_Decays[39][1] = PDGnutau; ParticleChargino1.Array_Decays[39][4] = -PDGtau; ParticleChargino1.Array_Decays[39][2] = chargino1amplitudeneut3nutautaubar; ParticleChargino1.Array_Decays[39][3] = 3; ParticleChargino1.Array_Comments[39] = "# ~chi_1+ -> chi_30 nu_tau tau+";
   ParticleChargino1.Array_Decays[40][0] = PDGneutralino4; ParticleChargino1.Array_Decays[40][1] = PDGup; ParticleChargino1.Array_Decays[40][4] = -PDGdown; ParticleChargino1.Array_Decays[40][2] = chargino1amplitudeneut4udbar; ParticleChargino1.Array_Decays[40][3] = 3; ParticleChargino1.Array_Comments[40] = "# ~chi_1+ -> chi_40 u dbar";
   ParticleChargino1.Array_Decays[41][0] = PDGneutralino4; ParticleChargino1.Array_Decays[41][1] = PDGcharm; ParticleChargino1.Array_Decays[41][4] = -PDGstrange; ParticleChargino1.Array_Decays[41][2] = chargino1amplitudeneut4csbar; ParticleChargino1.Array_Decays[41][3] = 3; ParticleChargino1.Array_Comments[41] = "# ~chi_1+ -> chi_40 c sbar";
   ParticleChargino1.Array_Decays[42][0] = PDGneutralino4; ParticleChargino1.Array_Decays[42][1] = PDGnuelectron; ParticleChargino1.Array_Decays[42][4] = -PDGelectron; ParticleChargino1.Array_Decays[42][2] = chargino1amplitudeneut4nueebar; ParticleChargino1.Array_Decays[42][3] = 3; ParticleChargino1.Array_Comments[42] = "# ~chi_1+ -> chi_40 nu_e e+";
   ParticleChargino1.Array_Decays[43][0] = PDGneutralino4; ParticleChargino1.Array_Decays[43][1] = PDGnumuon; ParticleChargino1.Array_Decays[43][4] = -PDGmuon; ParticleChargino1.Array_Decays[43][2] = chargino1amplitudeneut4numumubar; ParticleChargino1.Array_Decays[43][3] = 3; ParticleChargino1.Array_Comments[43] = "# ~chi_1+ -> chi_40 nu_mu mu+";
   ParticleChargino1.Array_Decays[44][0] = PDGneutralino4; ParticleChargino1.Array_Decays[44][1] = PDGnutau; ParticleChargino1.Array_Decays[44][4] = -PDGtau; ParticleChargino1.Array_Decays[44][2] = chargino1amplitudeneut4nutautaubar; ParticleChargino1.Array_Decays[44][3] = 3; ParticleChargino1.Array_Comments[44] = "# ~chi_1+ -> chi_40 nu_tau tau+";
 
   double Chargino1_No_1to2_Decays = 0;
 
   Chargino1_No_1to2_Decays = ParticleChargino1.No_1to2_Decays + ParticleChargino1.No_grav_Decays + ParticleChargino1.No_NMSSM_Decays;
 
   for (int j = 0; j<Chargino1_No_1to2_Decays; j++) {
     ParticleChargino1.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Chargino1_No_1to2_Decays; j++) {
     ParticleChargino1.two_width = ParticleChargino1.two_width + ParticleChargino1.Array_Decays[j][2];
   }
   for (int j=Chargino1_No_1to2_Decays; j<ParticleChargino1.No_of_Decays; j++) {
     ParticleChargino1.three_width = ParticleChargino1.three_width + ParticleChargino1.Array_Decays[j][2];
   }
   
   if ( ParticleChargino1.three_width != ParticleChargino1.three_width) /// Tests for a nan as only nans aren't equal to themselves
   {
     fout << "# Three body decays give nan for chargino1 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
     errorflag = -1;
     ParticleChargino1.No_of_Decays = Chargino1_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
     ParticleChargino1.total_width = ParticleChargino1.two_width;
   }
   else {
     ParticleChargino1.total_width = ParticleChargino1.two_width + ParticleChargino1.three_width;
   }

   if ( ParticleChargino1.total_width != ParticleChargino1.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleChargino1.No_of_Decays; i++) {
       //   fout << i << " " << ParticleChargino1.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in chargino1 total width \n");
     }
   
   for (int i =0; i<ParticleChargino1.No_of_Decays; i++) {
     ParticleChargino1.Array_Decays[i][5]= ParticleChargino1.Array_Decays[i][2]/ParticleChargino1.total_width;
   }
 
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleChargino1, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleChargino1, BRTol);}

 }

 ///Chargino2 Decays
 
 double chargino2amplitudeWbosonneutralinoZ1=0, chargino2amplitudeWbosonneutralinoZ2=0, chargino2amplitudeWbosonneutralinoZ3=0, chargino2amplitudeWbosonneutralinoZ4=0, chargino2amplitudeHminusneutralinoZ1=0, chargino2amplitudeHminusneutralinoZ2=0, chargino2amplitudeHminusneutralinoZ3=0, chargino2amplitudeHminusneutralinoZ4=0, chargino2amplitudesupLd=0, chargino2amplitudesdownLu=0, chargino2amplitudescharmLs=0, chargino2amplitudesstrangeLc=0, chargino2amplitudestop1b=0, chargino2amplitudestop2b=0, chargino2amplitudesbottom1t=0, chargino2amplitudesbottom2t=0, chargino2amplitudesnuee=0, chargino2amplitudeselectronLnue=0, chargino2amplitudesnumumu=0, chargino2amplitudesmuonLnumu=0, chargino2amplitudesnutautau=0, chargino2amplitudenutaustau1=0, chargino2amplitudenutaustau2=0, chargino2amplitudechargino1Zboson=0, chargino2amplitudechargino1h=0, chargino2amplitudechargino1H=0, chargino2amplitudechargino1A=0, chargino2amplitudeneut1udbar=0, chargino2amplitudeneut1csbar=0, chargino2amplitudeneut1nueebar=0, chargino2amplitudeneut1numumubar=0, chargino2amplitudeneut1nutautaubar=0, chargino2amplitudeneut2udbar=0, chargino2amplitudeneut2csbar=0, chargino2amplitudeneut2nueebar=0, chargino2amplitudeneut2numumubar=0, chargino2amplitudeneut2nutautaubar=0, chargino2amplitudeneut3udbar=0, chargino2amplitudeneut3csbar=0, chargino2amplitudeneut3nueebar=0, chargino2amplitudeneut3numumubar=0, chargino2amplitudeneut3nutautaubar=0, chargino2amplitudeneut4udbar=0, chargino2amplitudeneut4csbar=0, chargino2amplitudeneut4nueebar=0, chargino2amplitudeneut4numumubar=0, chargino2amplitudeneut4nutautaubar=0;

 double chargino2amplitudechargino1H3 = 0, chargino2amplitudechargino1A2 = 0, chargino2amplitudeHminusneutralinoZ5 = 0, chargino2amplitudeWbosonneutralinoZ5 = 0;

 if (flagchar2 == 1) {
   chargino2amplitudesupLd = charginoamplitudedecayquarksquarkL (MCH2, mdo, mu(1,1), g, thetaR2, 2);
   chargino2amplitudesdownLu = charginoamplitudedecayquarksquarkL (MCH2, mup, md(1,1), g, thetaL2, 2);
   chargino2amplitudescharmLs = charginoamplitudedecayquarksquarkL (MCH2, ms, mu(1,2), g , thetaR2, 2);
   chargino2amplitudesstrangeLc = charginoamplitudedecayquarksquarkL (MCH2, mc, md(1,2), g, thetaL2, 2);
   chargino2amplitudestop1b = charginoamplitudedecayquarksquarkmix (MCH2, mb, mu(1,3), g, thetat, thetaL2, thetaR2, beta, runmt, runmb, runmw, 2, 1, 1);
   chargino2amplitudestop2b = charginoamplitudedecayquarksquarkmix (MCH2, mb, mu(2,3), g, thetat, thetaL2, thetaR2, beta, runmt, runmb, runmw, 2, 1, 2);
   chargino2amplitudesbottom1t = charginoamplitudedecayquarksquarkmix (MCH2, mt, md(1,3), g, thetab, thetaL2, thetaR2, beta, runmt, runmb, runmw, 2, 2, 1);
   chargino2amplitudesbottom2t = charginoamplitudedecayquarksquarkmix (MCH2, mt, md(2,3), g, thetab, thetaL2, thetaR2, beta, runmt, runmb, runmw, 2, 2, 2);
   chargino2amplitudesnuee = charginoamplitudedecayleptonsleptonL (MCH2, mel, msnu(1), g, thetaR2, 2);
   chargino2amplitudeselectronLnue = charginoamplitudedecayleptonsleptonL (MCH2, 0, me(1,1), g, thetaL2, 2);
   chargino2amplitudesnumumu = charginoamplitudedecayleptonsleptonL (MCH2, mmu, msnu(2), g, thetaR2, 2);
   chargino2amplitudesmuonLnumu = charginoamplitudedecayleptonsleptonL (MCH2, 0, me(1,2), g, thetaL2, 2); 
   chargino2amplitudesnutautau = charginoamplitudedecaysnutautau (MCH2, mtau, msnu(3), g, thetaL2, thetaR2, beta, runmw, 2);
   chargino2amplitudenutaustau1 = charginoamplitudedecaystaunutau (MCH2, 0, me(1,3), g, thetaL2, thetaR2, thetatau, beta, runmw, runmtau, 1, 2);
   chargino2amplitudenutaustau2 = charginoamplitudedecaystaunutau (MCH2, 0, me(2,3), g, thetaL2, thetaR2, thetatau, beta, runmw, runmtau, 2, 2);
   chargino2amplitudechargino1Zboson = chargino2amplitudedecaychargino1Zboson (MCH2, polemz, MCH1, g, gp, thetaL2, thetaR2);
   if (nmssmIsIt == false) {
     chargino2amplitudechargino1h = chargino2amplitudedecaychargino1neutHiggs (MCH2, mh0(1), MCH1, g, gp, thetaL2, thetaR2, beta, alpha, 'h');
     chargino2amplitudechargino1H = chargino2amplitudedecaychargino1neutHiggs (MCH2, mh0(2), MCH1, g, gp, thetaL2, thetaR2, beta, alpha, 'H');
     chargino2amplitudechargino1A = chargino2amplitudedecaychargino1neutHiggs (MCH2, mA0(1), MCH1, g, gp, thetaL2, thetaR2, beta, alpha, 'A');
     chargino2amplitudeWbosonneutralinoZ1 = charginoamplitudedecayWbosonneutralino (MCH2, polemw, mneut(1), g, thetaL2, thetaR2, mixNeut, 2, 1);
     chargino2amplitudeWbosonneutralinoZ2 = charginoamplitudedecayWbosonneutralino (MCH2, polemw, mneut(2), g, thetaL2, thetaR2, mixNeut, 2, 2);
     chargino2amplitudeWbosonneutralinoZ3 = charginoamplitudedecayWbosonneutralino (MCH2, polemw, mneut(3), g, thetaL2, thetaR2, mixNeut, 2, 3);
     chargino2amplitudeWbosonneutralinoZ4 = charginoamplitudedecayWbosonneutralino (MCH2, polemw, mneut(4), g, thetaL2, thetaR2, mixNeut, 2, 4);
     chargino2amplitudeHminusneutralinoZ1 = charginoamplitudedecayHminusneutralino (MCH2, mHpm, mneut(1), g, gp, thetaL2, thetaR2, beta, mixNeut, 2, 1);
     chargino2amplitudeHminusneutralinoZ2 = charginoamplitudedecayHminusneutralino (MCH2, mHpm, mneut(2), g, gp, thetaL2, thetaR2, beta, mixNeut, 2, 2);
     chargino2amplitudeHminusneutralinoZ3 = charginoamplitudedecayHminusneutralino (MCH2, mHpm, mneut(3), g, gp, thetaL2, thetaR2, beta, mixNeut, 2, 3);
     chargino2amplitudeHminusneutralinoZ4 = charginoamplitudedecayHminusneutralino (MCH2, mHpm, mneut(4), g, gp, thetaL2, thetaR2, beta, mixNeut, 2, 4);
   }
   else if (nmssmIsIt == true) {
     chargino2amplitudechargino1h = chargino2amplitudedecaychargino1CPevenhiggsNMSSM (MCH2, MCH1, mh0(1), g, lam, thetaL2, thetaR2, CPEMix, 1);
     chargino2amplitudechargino1H = chargino2amplitudedecaychargino1CPevenhiggsNMSSM (MCH2, MCH1, mh0(2), g, lam, thetaL2, thetaR2, CPEMix, 2);
     chargino2amplitudechargino1H3 = chargino2amplitudedecaychargino1CPevenhiggsNMSSM (MCH2, MCH1, mh0(3), g, lam, thetaL2, thetaR2, CPEMix, 3);
     chargino2amplitudechargino1A = chargino2amplitudedecaychargino1CPoddhiggsNMSSM (MCH2, MCH1, mA0(1), g, lam, thetaL2, thetaR2, CPOMix, 1);
     chargino2amplitudechargino1A2 = chargino2amplitudedecaychargino1CPoddhiggsNMSSM (MCH2, MCH1, mA0(2), g, lam, thetaL2, thetaR2, CPOMix, 2); 
     chargino2amplitudeHminusneutralinoZ1 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH2, mneut(1), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 2, 1);
     chargino2amplitudeHminusneutralinoZ2 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH2, mneut(2), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 2, 2);
     chargino2amplitudeHminusneutralinoZ3 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH2, mneut(3), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 2, 3);
     chargino2amplitudeHminusneutralinoZ4 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH2, mneut(4), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 2, 4);
     chargino2amplitudeHminusneutralinoZ5 = charginoiamplitudedecayneutralinojHpmNMSSM (MCH2, mneut(5), mHpm, g, gp, thetaL2, thetaR2, beta, mixNeut, lam, 2, 5);
     chargino2amplitudeWbosonneutralinoZ1 = charginoiamplitudedecayneutralinojWNMSSM (MCH2, mneut(1), polemw, g, gp, thetaL2, thetaR2, mixNeut, 2, 1);
     chargino2amplitudeWbosonneutralinoZ2 = charginoiamplitudedecayneutralinojWNMSSM (MCH2, mneut(2), polemw, g, gp, thetaL2, thetaR2, mixNeut, 2, 2);
     chargino2amplitudeWbosonneutralinoZ3 = charginoiamplitudedecayneutralinojWNMSSM (MCH2, mneut(3), polemw, g, gp, thetaL2, thetaR2, mixNeut, 2, 3);
     chargino2amplitudeWbosonneutralinoZ4 = charginoiamplitudedecayneutralinojWNMSSM (MCH2, mneut(4), polemw, g, gp, thetaL2, thetaR2, mixNeut, 2, 4);
     chargino2amplitudeWbosonneutralinoZ5 = charginoiamplitudedecayneutralinojWNMSSM (MCH2, mneut(5), polemw, g, gp, thetaL2, thetaR2, mixNeut, 2, 5);
   }

   chargino2amplitudeneut1udbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(1), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 1, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut1csbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(1), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 1, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut1nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(1), 0, me(1,1), me(2,1), polemw, mHpm, mneut(1), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 1, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut1numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(2), 0, me(1,2), me(2,2), polemw, mHpm, mneut(1), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 1, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut1nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(3), 0, me(1,3), me(2,3), polemw, mHpm, mneut(1), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 1, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut2udbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(2), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 2, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut2csbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(2), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 2, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut2nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(1), 0, me(1,1), me(2,1), polemw, mHpm, mneut(2), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 2, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut2numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(2), 0, me(1,2), me(2,2), polemw, mHpm, mneut(2), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 2, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut2nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(3), 0, me(1,3), me(2,3), polemw, mHpm, mneut(2), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 2, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut3udbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(3), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 3, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut3csbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(3), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 3, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut3nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(1), 0, me(1,1), me(2,1), polemw, mHpm, mneut(3), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 3, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut3numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(2), 0, me(1,2), me(2,2), polemw, mHpm, mneut(3), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 3, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut3nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(3), 0, me(1,3), me(2,3), polemw, mHpm, mneut(3), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 3, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut4udbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mneut(4), mup, mdo, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 4, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut4csbar = neutralinoamplitudedecaycharginoffprimebar (MCH2, mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mneut(4), mc, ms, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 4, 2, onetothree, 'q', 'c');
   chargino2amplitudeneut4nueebar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(1), 0, me(1,1), me(2,1), polemw, mHpm, mneut(4), 0, mel, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 4, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut4numumubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(2), 0, me(1,2), me(2,2), polemw, mHpm, mneut(4), 0, mmu, 0, 0, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 4, 2, onetothree, 'l', 'c');
   chargino2amplitudeneut4nutautaubar = neutralinoamplitudedecaycharginoffprimebar (MCH2, msnu(3), 0, me(1,3), me(2,3), polemw, mHpm, mneut(4), 0, mtau, 0, thetatau-PI/2, g, gp, alpha, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 4, 2, onetothree, 'l', 'c');
 
   ParticleChargino2.Array_Decays[0][0] = -PDGdown; ParticleChargino2.Array_Decays[0][1] = PDGsupL; ParticleChargino2.Array_Decays[0][2] = chargino2amplitudesupLd; ParticleChargino2.Array_Decays[0][3] = 2; ParticleChargino2.Array_Comments[0] = "# ~chi_2+ -> db ~u_L";
   ParticleChargino2.Array_Decays[1][0] = PDGup; ParticleChargino2.Array_Decays[1][1] = -PDGsdownL; ParticleChargino2.Array_Decays[1][2] = chargino2amplitudesdownLu; ParticleChargino2.Array_Decays[1][3] = 2; ParticleChargino2.Array_Comments[1] = "# ~chi_2+ -> u ~d_L*";
   ParticleChargino2.Array_Decays[2][0] = -PDGstrange; ParticleChargino2.Array_Decays[2][1] = PDGscharmL; ParticleChargino2.Array_Decays[2][2] = chargino2amplitudescharmLs; ParticleChargino2.Array_Decays[2][3] = 2; ParticleChargino2.Array_Comments[2] = "# ~chi_2+ -> sb ~c_L";
   ParticleChargino2.Array_Decays[3][0] = PDGcharm; ParticleChargino2.Array_Decays[3][1] = -PDGsstrangeL; ParticleChargino2.Array_Decays[3][2] = chargino2amplitudesstrangeLc; ParticleChargino2.Array_Decays[3][3] = 2; ParticleChargino2.Array_Comments[3] = "# ~chi_2+ -> c ~s_L*";
   ParticleChargino2.Array_Decays[4][0] = -PDGbottom; ParticleChargino2.Array_Decays[4][1] = PDGstop1; ParticleChargino2.Array_Decays[4][2] = chargino2amplitudestop1b; ParticleChargino2.Array_Decays[4][3] = 2; ParticleChargino2.Array_Comments[4] = "# ~chi_2+ -> bb ~t_1";
   ParticleChargino2.Array_Decays[5][0] = -PDGbottom; ParticleChargino2.Array_Decays[5][1] = PDGstop2; ParticleChargino2.Array_Decays[5][2] = chargino2amplitudestop2b; ParticleChargino2.Array_Decays[5][3] = 2; ParticleChargino2.Array_Comments[5] = "# ~chi_2+ -> bb ~t_2";
   ParticleChargino2.Array_Decays[6][0] = PDGtop; ParticleChargino2.Array_Decays[6][1] = -PDGsbottom1; ParticleChargino2.Array_Decays[6][2] = chargino2amplitudesbottom1t; ParticleChargino2.Array_Decays[6][3] = 2; ParticleChargino2.Array_Comments[6] = "# ~chi_2+ -> t ~b_1*";
   ParticleChargino2.Array_Decays[7][0] = PDGtop; ParticleChargino2.Array_Decays[7][1] = -PDGsbottom2; ParticleChargino2.Array_Decays[7][2] = chargino2amplitudesbottom2t; ParticleChargino2.Array_Decays[7][3] = 2; ParticleChargino2.Array_Comments[7] = "# ~chi_2+ -> t ~b_2*";
   ParticleChargino2.Array_Decays[8][0] = PDGnuselectronL; ParticleChargino2.Array_Decays[8][1] = -PDGelectron; ParticleChargino2.Array_Decays[8][2] = chargino2amplitudesnuee; ParticleChargino2.Array_Decays[8][3] = 2; ParticleChargino2.Array_Comments[8] = "# ~chi_2+ -> e+ ~nu_eL";
   ParticleChargino2.Array_Decays[9][0] = -PDGselectronL; ParticleChargino2.Array_Decays[9][1] = PDGnuelectron; ParticleChargino2.Array_Decays[9][2] = chargino2amplitudeselectronLnue; ParticleChargino2.Array_Decays[9][3] = 2; ParticleChargino2.Array_Comments[9] = "# ~chi_2+ -> nu_e ~e_L+";
   ParticleChargino2.Array_Decays[10][0] = PDGnusmuonL; ParticleChargino2.Array_Decays[10][1] = -PDGmuon; ParticleChargino2.Array_Decays[10][2] = chargino2amplitudesnumumu; ParticleChargino2.Array_Decays[10][3] = 2; ParticleChargino2.Array_Comments[10] = "# ~chi_2+ -> mu+ ~nu_muL";
   ParticleChargino2.Array_Decays[11][0] = -PDGsmuonL; ParticleChargino2.Array_Decays[11][1] = PDGnumuon; ParticleChargino2.Array_Decays[11][2] = chargino2amplitudesmuonLnumu; ParticleChargino2.Array_Decays[11][3] = 2; ParticleChargino2.Array_Comments[11] = "# ~chi_2+ -> nu_mu ~muL+";
   ParticleChargino2.Array_Decays[12][0] = -PDGtau; ParticleChargino2.Array_Decays[12][1] = PDGnustauL; ParticleChargino2.Array_Decays[12][2] = chargino2amplitudesnutautau; ParticleChargino2.Array_Decays[12][3] = 2; ParticleChargino2.Array_Comments[12] = "# ~chi_2+ -> tau+ ~nu_tauL";
   ParticleChargino2.Array_Decays[13][0] = PDGnutau; ParticleChargino2.Array_Decays[13][1] = -PDGstau1; ParticleChargino2.Array_Decays[13][2] = chargino2amplitudenutaustau1; ParticleChargino2.Array_Decays[13][3] = 2; ParticleChargino2.Array_Comments[13] = "# ~chi_2+ -> nu_tau ~tau_1+";
   ParticleChargino2.Array_Decays[14][0] = PDGnutau; ParticleChargino2.Array_Decays[14][1] = -PDGstau2; ParticleChargino2.Array_Decays[14][2] = chargino2amplitudenutaustau2; ParticleChargino2.Array_Decays[14][3] = 2; ParticleChargino2.Array_Comments[14] = "# ~chi_2+ -> nu_tau ~tau_2+";
   ParticleChargino2.Array_Decays[15][0] = PDGWplus; ParticleChargino2.Array_Decays[15][1] = PDGneutralino1; ParticleChargino2.Array_Decays[15][2] = chargino2amplitudeWbosonneutralinoZ1; ParticleChargino2.Array_Decays[15][3] = 2; ParticleChargino2.Array_Comments[15] = "# ~chi_2+ -> W+ ~chi_10";
   ParticleChargino2.Array_Decays[16][0] = PDGWplus; ParticleChargino2.Array_Decays[16][1] = PDGneutralino2; ParticleChargino2.Array_Decays[16][2] = chargino2amplitudeWbosonneutralinoZ2; ParticleChargino2.Array_Decays[16][3] = 2; ParticleChargino2.Array_Comments[16] = "# ~chi_2+ -> W+ ~chi_20";
   ParticleChargino2.Array_Decays[17][0] = PDGWplus; ParticleChargino2.Array_Decays[17][1] = PDGneutralino3; ParticleChargino2.Array_Decays[17][2] = chargino2amplitudeWbosonneutralinoZ3; ParticleChargino2.Array_Decays[17][3] = 2; ParticleChargino2.Array_Comments[17] = "# ~chi_2+ -> W+ ~chi_30";
   ParticleChargino2.Array_Decays[18][0] = PDGWplus; ParticleChargino2.Array_Decays[18][1] = PDGneutralino4; ParticleChargino2.Array_Decays[18][2] = chargino2amplitudeWbosonneutralinoZ4; ParticleChargino2.Array_Decays[18][3] = 2; ParticleChargino2.Array_Comments[18] = "# ~chi_2+ -> W+ ~chi_40";
   ParticleChargino2.Array_Decays[19][0] = PDGHplus; ParticleChargino2.Array_Decays[19][1] = PDGneutralino1; ParticleChargino2.Array_Decays[19][2] = chargino2amplitudeHminusneutralinoZ1; ParticleChargino2.Array_Decays[19][3] = 2; ParticleChargino2.Array_Comments[19] = "# ~chi_2+ -> H+ ~chi_10";
   ParticleChargino2.Array_Decays[20][0] = PDGHplus; ParticleChargino2.Array_Decays[20][1] = PDGneutralino2; ParticleChargino2.Array_Decays[20][2] = chargino2amplitudeHminusneutralinoZ2; ParticleChargino2.Array_Decays[20][3] = 2; ParticleChargino2.Array_Comments[20] = "# ~chi_2+ -> H+ ~chi_20";
   ParticleChargino2.Array_Decays[21][0] = PDGHplus; ParticleChargino2.Array_Decays[21][1] = PDGneutralino3; ParticleChargino2.Array_Decays[21][2] = chargino2amplitudeHminusneutralinoZ3; ParticleChargino2.Array_Decays[21][3] = 2; ParticleChargino2.Array_Comments[21] = "# ~chi_2+ -> H+ ~chi_30";
   ParticleChargino2.Array_Decays[22][0] = PDGHplus; ParticleChargino2.Array_Decays[22][1] = PDGneutralino4; ParticleChargino2.Array_Decays[22][2] = chargino2amplitudeHminusneutralinoZ4; ParticleChargino2.Array_Decays[22][3] = 2; ParticleChargino2.Array_Comments[22] = "# ~chi_2+ -> H+ ~chi_40";
   ParticleChargino2.Array_Decays[23][0] = PDGchargino1; ParticleChargino2.Array_Decays[23][1] = PDGZboson; ParticleChargino2.Array_Decays[23][2] = chargino2amplitudechargino1Zboson; ParticleChargino2.Array_Decays[23][3] = 2; ParticleChargino2.Array_Comments[23] = "# ~chi_2+ -> Z ~chi_1+";
   ParticleChargino2.Array_Decays[24][0] = PDGchargino1; ParticleChargino2.Array_Decays[24][1] = PDGh0; ParticleChargino2.Array_Decays[24][2] = chargino2amplitudechargino1h; ParticleChargino2.Array_Decays[24][3] = 2; ParticleChargino2.Array_Comments[24] = "# ~chi_2+ -> h ~chi_1+";
   ParticleChargino2.Array_Decays[25][0] = PDGchargino1; ParticleChargino2.Array_Decays[25][1] = PDGH0; ParticleChargino2.Array_Decays[25][2] = chargino2amplitudechargino1H; ParticleChargino2.Array_Decays[25][3] = 2; ParticleChargino2.Array_Comments[25] = "# ~chi_2+ -> H ~chi_1+";
   ParticleChargino2.Array_Decays[26][0] = PDGchargino1; ParticleChargino2.Array_Decays[26][1] = PDGA0; ParticleChargino2.Array_Decays[26][2] = chargino2amplitudechargino1A; ParticleChargino2.Array_Decays[26][3] = 2; ParticleChargino2.Array_Comments[26] = "# ~chi_2+ -> A ~chi_1+";

   ParticleChargino2.Array_Decays[27][0] = PDGHplus; ParticleChargino2.Array_Decays[27][1] = PDGneutralino5; ParticleChargino2.Array_Decays[27][2] = chargino2amplitudeHminusneutralinoZ5; ParticleChargino2.Array_Decays[27][3] = 2; ParticleChargino2.Array_Comments[27] = "# ~chi_2+ -> H+ ~chi_50";
   ParticleChargino2.Array_Decays[28][0] = PDGWplus; ParticleChargino2.Array_Decays[28][1] = PDGneutralino5; ParticleChargino2.Array_Decays[28][2] = chargino2amplitudeWbosonneutralinoZ5; ParticleChargino2.Array_Decays[28][3] = 2; ParticleChargino2.Array_Comments[28] = "# ~chi_2+ -> W+ ~chi_50";
 
   ParticleChargino2.Array_Decays[29][0] = PDGchargino1; ParticleChargino2.Array_Decays[29][1] = PDGH3; ParticleChargino2.Array_Decays[29][4] = 0; ParticleChargino2.Array_Decays[29][2] = chargino2amplitudechargino1H3; ParticleChargino2.Array_Decays[29][3] = 2; ParticleChargino2.Array_Comments[29] = "# ~chi_2+ -> ~chi_1+ H3";
   ParticleChargino2.Array_Decays[30][0] = PDGchargino1; ParticleChargino2.Array_Decays[30][1] = PDGA2; ParticleChargino2.Array_Decays[30][4] = 0; ParticleChargino2.Array_Decays[30][2] = chargino2amplitudechargino1A2; ParticleChargino2.Array_Decays[30][3] = 2; ParticleChargino2.Array_Comments[30] = "# ~chi_2+ -> ~chi_1+ A2";
   
   ParticleChargino2.Array_Decays[31][0] = PDGneutralino1; ParticleChargino2.Array_Decays[31][1] = PDGup; ParticleChargino2.Array_Decays[31][4] = -PDGdown; ParticleChargino2.Array_Decays[31][2] = chargino2amplitudeneut1udbar; ParticleChargino2.Array_Decays[31][3] = 3; ParticleChargino2.Array_Comments[31] = "# ~chi_2+ -> ~chi_10 u dbar";
   ParticleChargino2.Array_Decays[32][0] = PDGneutralino1; ParticleChargino2.Array_Decays[32][1] = PDGcharm; ParticleChargino2.Array_Decays[32][4] = -PDGstrange; ParticleChargino2.Array_Decays[32][2] = chargino2amplitudeneut1csbar; ParticleChargino2.Array_Decays[32][3] = 3; ParticleChargino2.Array_Comments[32] = "# ~chi_2+ -> ~chi_10 c sbar";
   ParticleChargino2.Array_Decays[33][0] = PDGneutralino1; ParticleChargino2.Array_Decays[33][1] = PDGnuelectron; ParticleChargino2.Array_Decays[33][4] = -PDGelectron; ParticleChargino2.Array_Decays[33][2] = chargino2amplitudeneut1nueebar; ParticleChargino2.Array_Decays[33][3] = 3; ParticleChargino2.Array_Comments[33] = "# ~chi_2+ -> ~chi_10 nu_e e+";
   ParticleChargino2.Array_Decays[34][0] = PDGneutralino1; ParticleChargino2.Array_Decays[34][1] = PDGnumuon; ParticleChargino2.Array_Decays[34][4] = -PDGmuon; ParticleChargino2.Array_Decays[34][2] = chargino2amplitudeneut1numumubar; ParticleChargino2.Array_Decays[34][3] = 3; ParticleChargino2.Array_Comments[34] = "# ~chi_2+ -> ~chi_10 nu_mu mu+";
   ParticleChargino2.Array_Decays[35][0] = PDGneutralino1; ParticleChargino2.Array_Decays[35][1] = PDGnutau; ParticleChargino2.Array_Decays[35][4] = -PDGtau; ParticleChargino2.Array_Decays[35][2] = chargino2amplitudeneut1nutautaubar; ParticleChargino2.Array_Decays[35][3] = 3; ParticleChargino2.Array_Comments[35] = "# ~chi_2+ -> ~chi_10 nu_tau tau+";
   ParticleChargino2.Array_Decays[36][0] = PDGneutralino2; ParticleChargino2.Array_Decays[36][1] = PDGup; ParticleChargino2.Array_Decays[36][4] = -PDGdown; ParticleChargino2.Array_Decays[36][2] = chargino2amplitudeneut2udbar; ParticleChargino2.Array_Decays[36][3] = 3; ParticleChargino2.Array_Comments[36] = "# ~chi_2+ -> ~chi_20 u dbar";
   ParticleChargino2.Array_Decays[37][0] = PDGneutralino2; ParticleChargino2.Array_Decays[37][1] = PDGcharm; ParticleChargino2.Array_Decays[37][4] = -PDGstrange; ParticleChargino2.Array_Decays[37][2] = chargino2amplitudeneut2csbar; ParticleChargino2.Array_Decays[37][3] = 3; ParticleChargino2.Array_Comments[37] = "# ~chi_2+ -> ~chi_20 c sbar";
   ParticleChargino2.Array_Decays[38][0] = PDGneutralino2; ParticleChargino2.Array_Decays[38][1] = PDGnuelectron; ParticleChargino2.Array_Decays[38][4] = -PDGelectron; ParticleChargino2.Array_Decays[38][2] = chargino2amplitudeneut2nueebar; ParticleChargino2.Array_Decays[38][3] = 3; ParticleChargino2.Array_Comments[38] = "# ~chi_2+ -> ~chi_20 nu_e e+";
   ParticleChargino2.Array_Decays[39][0] = PDGneutralino2; ParticleChargino2.Array_Decays[39][1] = PDGnumuon; ParticleChargino2.Array_Decays[39][4] = -PDGmuon; ParticleChargino2.Array_Decays[39][2] = chargino2amplitudeneut2numumubar; ParticleChargino2.Array_Decays[39][3] = 3; ParticleChargino2.Array_Comments[39] = "# ~chi_2+ -> ~chi_20 nu_mu mu+";
   ParticleChargino2.Array_Decays[40][0] = PDGneutralino2; ParticleChargino2.Array_Decays[40][1] = PDGnutau; ParticleChargino2.Array_Decays[40][4] = -PDGtau; ParticleChargino2.Array_Decays[40][2] = chargino2amplitudeneut2nutautaubar; ParticleChargino2.Array_Decays[40][3] = 3; ParticleChargino2.Array_Comments[40] = "# ~chi_2+ -> ~chi_20 nu_tau tau+";
   ParticleChargino2.Array_Decays[41][0] = PDGneutralino3; ParticleChargino2.Array_Decays[41][1] = PDGup; ParticleChargino2.Array_Decays[41][4] = -PDGdown; ParticleChargino2.Array_Decays[41][2] = chargino2amplitudeneut3udbar; ParticleChargino2.Array_Decays[41][3] = 3; ParticleChargino2.Array_Comments[41] = "# ~chi_2+ -> ~chi_30 u dbar";
   ParticleChargino2.Array_Decays[42][0] = PDGneutralino3; ParticleChargino2.Array_Decays[42][1] = PDGcharm; ParticleChargino2.Array_Decays[42][4] = -PDGstrange; ParticleChargino2.Array_Decays[42][2] = chargino2amplitudeneut3csbar; ParticleChargino2.Array_Decays[42][3] = 3; ParticleChargino2.Array_Comments[42] = "# ~chi_2+ -> ~chi_30 c sbar";
   ParticleChargino2.Array_Decays[43][0] = PDGneutralino3; ParticleChargino2.Array_Decays[43][1] = PDGnuelectron; ParticleChargino2.Array_Decays[43][4] = -PDGelectron; ParticleChargino2.Array_Decays[43][2] = chargino2amplitudeneut3nueebar; ParticleChargino2.Array_Decays[43][3] = 3; ParticleChargino2.Array_Comments[43] = "# ~chi_2+ -> ~chi_30 nu_e e+";
   ParticleChargino2.Array_Decays[44][0] = PDGneutralino3; ParticleChargino2.Array_Decays[44][1] = PDGnumuon; ParticleChargino2.Array_Decays[44][4] = -PDGmuon; ParticleChargino2.Array_Decays[44][2] = chargino2amplitudeneut3numumubar; ParticleChargino2.Array_Decays[44][3] = 3; ParticleChargino2.Array_Comments[44] = "# ~chi_2+ -> ~chi_30 nu_mu mu+";
   ParticleChargino2.Array_Decays[45][0] = PDGneutralino3; ParticleChargino2.Array_Decays[45][1] = PDGnutau; ParticleChargino2.Array_Decays[45][4] = -PDGtau; ParticleChargino2.Array_Decays[45][2] = chargino2amplitudeneut3nutautaubar; ParticleChargino2.Array_Decays[45][3] = 3; ParticleChargino2.Array_Comments[45] = "# ~chi_2+ -> ~chi_30 nu_tau tau+";
   ParticleChargino2.Array_Decays[46][0] = PDGneutralino4; ParticleChargino2.Array_Decays[46][1] = PDGup; ParticleChargino2.Array_Decays[46][4] = -PDGdown; ParticleChargino2.Array_Decays[46][2] = chargino2amplitudeneut4udbar; ParticleChargino2.Array_Decays[46][3] = 3; ParticleChargino2.Array_Comments[46] = "# ~chi_2+ -> ~chi_40 u dbar";
   ParticleChargino2.Array_Decays[47][0] = PDGneutralino4; ParticleChargino2.Array_Decays[47][1] = PDGcharm; ParticleChargino2.Array_Decays[47][4] = -PDGstrange; ParticleChargino2.Array_Decays[47][2] = chargino2amplitudeneut4csbar; ParticleChargino2.Array_Decays[47][3] = 3; ParticleChargino2.Array_Comments[47] = "# ~chi_2+ -> ~chi_40 c sbar";
   ParticleChargino2.Array_Decays[48][0] = PDGneutralino4; ParticleChargino2.Array_Decays[48][1] = PDGnuelectron; ParticleChargino2.Array_Decays[48][4] = -PDGelectron; ParticleChargino2.Array_Decays[48][2] = chargino2amplitudeneut4nueebar; ParticleChargino2.Array_Decays[48][3] = 3; ParticleChargino2.Array_Comments[48] = "# ~chi_2+ -> ~chi_40 nu_e e+";
   ParticleChargino2.Array_Decays[49][0] = PDGneutralino4; ParticleChargino2.Array_Decays[49][1] = PDGnumuon; ParticleChargino2.Array_Decays[49][4] = -PDGmuon; ParticleChargino2.Array_Decays[49][2] = chargino2amplitudeneut4numumubar; ParticleChargino2.Array_Decays[49][3] = 3; ParticleChargino2.Array_Comments[49] = "# ~chi_2+ -> ~chi_40 nu_mu mu+";
   ParticleChargino2.Array_Decays[50][0] = PDGneutralino4; ParticleChargino2.Array_Decays[50][1] = PDGnutau; ParticleChargino2.Array_Decays[50][4] = -PDGtau; ParticleChargino2.Array_Decays[50][2] = chargino2amplitudeneut4nutautaubar; ParticleChargino2.Array_Decays[50][3] = 3; ParticleChargino2.Array_Comments[50] = "# ~chi_2+ -> ~chi_40 nu_tau tau+";

   double Chargino2_No_1to2_Decays = 0;
   Chargino2_No_1to2_Decays = ParticleChargino2.No_1to2_Decays + ParticleChargino2.No_grav_Decays + ParticleChargino2.No_NMSSM_Decays;
 
   for (int j = 0; j<Chargino2_No_1to2_Decays; j++) {
     ParticleChargino2.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
 
   for (int j=0; j<Chargino2_No_1to2_Decays; j++) {
     ParticleChargino2.two_width = ParticleChargino2.two_width + ParticleChargino2.Array_Decays[j][2];
   }
   for (int j=Chargino2_No_1to2_Decays; j<ParticleChargino2.No_of_Decays; j++) {
     ParticleChargino2.three_width = ParticleChargino2.three_width + ParticleChargino2.Array_Decays[j][2];
   }
 
   if ( ParticleChargino2.three_width != ParticleChargino2.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for chargino2 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleChargino2.No_of_Decays = Chargino2_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleChargino2.total_width = ParticleChargino2.two_width;
     }
   else {
     ParticleChargino2.total_width = ParticleChargino2.two_width + ParticleChargino2.three_width;
   }
   
   if ( ParticleChargino2.total_width != ParticleChargino2.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleChargino2.No_of_Decays; i++) {
       //   fout << i << " " << ParticleChargino2.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in chargino2 total width \n");
     }
 
   for (int i =0; i<ParticleChargino2.No_of_Decays; i++) {
     ParticleChargino2.Array_Decays[i][5]= ParticleChargino2.Array_Decays[i][2]/ParticleChargino2.total_width;
   }
 
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleChargino2, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleChargino2, BRTol);}

 }


 ///Neutralino Decays
 ///Neutralino1 Decays
  
 double neutralino1amplitudeuLubar=0, neutralino1amplitudeuRubar=0, neutralino1amplitudeuLbaru=0, neutralino1amplitudeuRbaru=0, neutralino1amplitudedLdbar=0, neutralino1amplitudedRdbar=0, neutralino1amplitudedLbard=0, neutralino1amplitudedRbard=0, neutralino1amplitudecLcbar=0, neutralino1amplitudecRcbar=0, neutralino1amplitudecLbarc=0, neutralino1amplitudecRbarc=0, neutralino1amplitudesLsbar=0, neutralino1amplitudesRsbar=0, neutralino1amplitudesLbars=0, neutralino1amplitudesRbars=0, neutralino1amplitudeeLebar=0, neutralino1amplitudeeRebar=0, neutralino1amplitudeeLbare=0, neutralino1amplitudeeRbare=0, neutralino1amplitudemuLmubar=0, neutralino1amplitudemuRmubar=0, neutralino1amplitudemuLbarmu=0, neutralino1amplitudemuRbarmu=0, neutralino1amplitudesnuenuebar=0, neutralino1amplitudesnuebarnue=0, neutralino1amplitudesnumunumubar=0, neutralino1amplitudesnumubarnumu=0, neutralino1amplitudetopstop1bar=0, neutralino1amplitudetopstop2bar=0, neutralino1amplitudetopbarstop1=0, neutralino1amplitudetopbarstop2=0, neutralino1amplitudebottomsbottom1bar=0, neutralino1amplitudebottomsbottom2bar=0, neutralino1amplitudebottombarsbottom1=0, neutralino1amplitudebottombarsbottom2=0, neutralino1amplitudetaustau1bar=0, neutralino1amplitudetaustau2bar=0, neutralino1amplitudetaubarstau1=0, neutralino1amplitudetaubarstau2=0, neutralino1amplitudenutausnutaubar=0, neutralino1amplitudenutaubarsnutau=0, neutralino1amplitudeWbosonpluscharginoW1=0, neutralino1amplitudeWbosonpluscharginoW2=0, neutralino1amplitudeWbosonminuscharginoW1=0, neutralino1amplitudeWbosonminuscharginoW2=0, neutralino1amplitudeHpluscharginoW1=0, neutralino1amplitudeHpluscharginoW2=0, neutralino1amplitudeHminuscharginoW1=0, neutralino1amplitudeHminuscharginoW2=0, neutralino1amplitudeZbosonneutralino2=0, neutralino1amplitudeZbosonneutralino3=0, neutralino1amplitudeZbosonneutralino4=0, neutralino1amplitudehneutralino2=0, neutralino1amplitudehneutralino3=0, neutralino1amplitudehneutralino4=0, neutralino1amplitudeHneutralino2=0, neutralino1amplitudeHneutralino3=0, neutralino1amplitudeHneutralino4=0, neutralino1amplitudeAneutralino2=0, neutralino1amplitudeAneutralino3=0, neutralino1amplitudeAneutralino4=0, neutralino1amplitudephotongravitino=0, neutralino1amplitudeZgravitino=0, neutralino1amplitudehgravitino=0, neutralino1amplitudeHgravitino=0, neutralino1amplitudeAgravitino=0;

 double neutralino1amplitudechargino1udbar=0, neutralino1amplitudechargino1csbar=0, neutralino1amplitudechargino1enuebar=0, neutralino1amplitudechargino1munumubar=0, neutralino1amplitudechargino1taunutaubar=0, neutralino1amplitudechargino2udbar=0, neutralino1amplitudechargino2csbar=0, neutralino1amplitudechargino2enuebar=0, neutralino1amplitudechargino2munumubar=0, neutralino1amplitudechargino2taunutaubar=0;

 if (flagneut1 == 1) {
   if (nmssmIsIt == false) {
     neutralino1amplitudeuLubar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 1);
     neutralino1amplitudeuRubar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 1);
     neutralino1amplitudeuLbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 1); 
     neutralino1amplitudeuRbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 1);
     neutralino1amplitudedLdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 1);
     neutralino1amplitudedRdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 1);
     neutralino1amplitudedLbard = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 1);
     neutralino1amplitudedRbard = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 1);
     neutralino1amplitudecLcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 1);
     neutralino1amplitudecRcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 1);
     neutralino1amplitudecLbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 1);
     neutralino1amplitudecRbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(1), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 1);
     neutralino1amplitudesLsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), ms, md(1,2), g, gp, mixNeut, 2, 'L', 1);
     neutralino1amplitudesRsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(1), ms, md(2,2), g, gp, mixNeut, 2, 'R', 1);
     neutralino1amplitudesLbars = neutralinoamplitudedecayquarksquarkLorR (mneut(1), ms, md(1,2), g, gp, mixNeut, 2, 'L', 1);
     neutralino1amplitudesRbars = neutralinoamplitudedecayquarksquarkLorR (mneut(1), ms, md(2,2), g, gp, mixNeut, 2, 'R', 1);
     neutralino1amplitudeeLebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mel, me(1,1), g, gp, mixNeut, 'L', 1);
     neutralino1amplitudeeRebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mel, me(2,1), g, gp, mixNeut, 'R', 1);
     neutralino1amplitudeeLbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mel, me(1,1), g, gp, mixNeut, 'L', 1);
     neutralino1amplitudeeRbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mel, me(2,1), g, gp, mixNeut, 'R', 1);
     neutralino1amplitudemuLmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mmu, me(1,2), g, gp, mixNeut, 'L', 1);
     neutralino1amplitudemuRmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mmu, me(2,2), g, gp, mixNeut, 'R', 1);
     neutralino1amplitudemuLbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mmu, me(1,2), g, gp, mixNeut, 'L', 1);
     neutralino1amplitudemuRbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(1), mmu, me(2,2), g, gp, mixNeut, 'R', 1);
     neutralino1amplitudesnuenuebar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(1), 0, msnu(1), g, gp, mixNeut, 1);
     neutralino1amplitudesnuebarnue = neutralinoamplitudedecayneutrinosneutrinoL (mneut(1), 0, msnu(1), g, gp, mixNeut, 1);
     neutralino1amplitudesnumunumubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(1), 0, msnu(2), g, gp, mixNeut, 1);
     neutralino1amplitudesnumubarnumu = neutralinoamplitudedecayneutrinosneutrinoL (mneut(1), 0, msnu(2), g, gp, mixNeut, 1);
     neutralino1amplitudetopstop1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 1);
     neutralino1amplitudetopstop2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 1);
     neutralino1amplitudetopbarstop1 = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 1);
     neutralino1amplitudetopbarstop2 = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 1);
     neutralino1amplitudebottomsbottom1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 1);
     neutralino1amplitudebottomsbottom2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 1);
     neutralino1amplitudebottombarsbottom1 = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 1);
     neutralino1amplitudebottombarsbottom2 = neutralinoamplitudedecaysquark3quarkmix (mneut(1), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 1);
     neutralino1amplitudetaustau1bar = neutralinoamplitudedecaystautau (mneut(1), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 1);
     neutralino1amplitudetaustau2bar = neutralinoamplitudedecaystautau (mneut(1), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 1);
     neutralino1amplitudetaubarstau1 = neutralinoamplitudedecaystautau (mneut(1), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 1);
     neutralino1amplitudetaubarstau2 = neutralinoamplitudedecaystautau (mneut(1), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 1);
     neutralino1amplitudenutausnutaubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(1), 0, msnu(3), g, gp, mixNeut, 1);
     neutralino1amplitudenutaubarsnutau = neutralinoamplitudedecayneutrinosneutrinoL (mneut(1), 0, msnu(3), g, gp, mixNeut, 1);
     neutralino1amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(1), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 1, 1);
     neutralino1amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(1), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 1, 2);
     neutralino1amplitudeWbosonminuscharginoW1 = neutralino1amplitudeWbosonpluscharginoW1;
     neutralino1amplitudeWbosonminuscharginoW2 = neutralino1amplitudeWbosonpluscharginoW2;
     neutralino1amplitudeHpluscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(1), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 1, 1);
     neutralino1amplitudeHpluscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(1), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 1, 2);
     neutralino1amplitudeHminuscharginoW1 = neutralino1amplitudeHpluscharginoW1;
     neutralino1amplitudeHminuscharginoW2 = neutralino1amplitudeHpluscharginoW2;
     
     neutralino1amplitudechargino1udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(1), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 1, 1, onetothree, 'q', 'n');
     neutralino1amplitudechargino1csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(1), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 1, 1, onetothree, 'q', 'n');
     neutralino1amplitudechargino1enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(1), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 1, 1, onetothree, 'l', 'n');
     neutralino1amplitudechargino1munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(1), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 1, 1, onetothree, 'l', 'n');
     neutralino1amplitudechargino1taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(1), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 1, 1, onetothree, 'l', 'n');
     neutralino1amplitudechargino2udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(2), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 1, 2, onetothree, 'q', 'n');
     neutralino1amplitudechargino2csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(2), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 1, 2, onetothree, 'q', 'n');
     neutralino1amplitudechargino2enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(2), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 1, 2, onetothree, 'l', 'n');
     neutralino1amplitudechargino2munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(2), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 1, 2, onetothree, 'l', 'n');
     neutralino1amplitudechargino2taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(1), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(2), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 1, 2, onetothree, 'l', 'n');
     
     neutralino1amplitudephotongravitino = neutralinoamplitudedecayphotongravitino(mneut(1), mgravitino, MPlreduced, mixNeut, g, gp, 1, gravonoff, neutNLSP);
     neutralino1amplitudeZgravitino = neutralinoamplitudedecayZgravitino(mneut(1), polemz, mgravitino, MPlreduced, mixNeut, g, gp, beta, 1, gravonoff, neutNLSP);
     neutralino1amplitudehgravitino = neutralinoamplitudedecayphigravitino(mneut(1), mh0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 1, gravonoff, 'h', neutNLSP);
     neutralino1amplitudeHgravitino = neutralinoamplitudedecayphigravitino(mneut(1), mh0(2), mgravitino, MPlreduced, mixNeut, alpha, beta, 1, gravonoff, 'H', neutNLSP);
     neutralino1amplitudeAgravitino = neutralinoamplitudedecayphigravitino(mneut(1), mA0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 1, gravonoff, 'A', neutNLSP);
   }
   else if (nmssmIsIt == true){
       neutralino1amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWNMSSM (mneut(1), MCH1, polemw, g, thetaL2, thetaR2, mixNeut, 1, 1);
       neutralino1amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWNMSSM (mneut(1), MCH2, polemw, g, thetaL2, thetaR2, mixNeut, 1, 2);
       neutralino1amplitudeWbosonminuscharginoW1 = neutralino1amplitudeWbosonpluscharginoW1;
       neutralino1amplitudeWbosonminuscharginoW2 = neutralino1amplitudeWbosonpluscharginoW2;
       
       neutralino1amplitudeHpluscharginoW1 = neutralinoamplitudecharginoHpmNMSSM (mneut(1), MCH1, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 1, 1);
       neutralino1amplitudeHpluscharginoW2 = neutralinoamplitudecharginoHpmNMSSM (mneut(1), MCH2, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 1, 2);
       neutralino1amplitudeHminuscharginoW1 = neutralino1amplitudeHpluscharginoW1;
       neutralino1amplitudeHminuscharginoW2 = neutralino1amplitudeHpluscharginoW2;
       
       neutralino1amplitudeuLubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), mu(1,1), mup, g, gp, mixNeut, 1, 'u', 'L');
       neutralino1amplitudeuRubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), mu(2,1), mup, g, gp, mixNeut, 1, 'u', 'R');
       neutralino1amplitudeuLbaru = neutralino1amplitudeuLubar;
       neutralino1amplitudeuRbaru = neutralino1amplitudeuRubar;
       neutralino1amplitudedLdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), md(1,1), mdo, g, gp, mixNeut, 1, 'd', 'L');
       neutralino1amplitudedRdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), md(2,1), mdo, g, gp, mixNeut, 1, 'd', 'R');
       neutralino1amplitudedLbard = neutralino1amplitudedLdbar;
       neutralino1amplitudedRbard = neutralino1amplitudedRdbar;
       neutralino1amplitudecLcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), mu(1,2), mc, g, gp, mixNeut, 1, 'u', 'L');
       neutralino1amplitudecRcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), mu(2,2), mc, g, gp, mixNeut, 1, 'u', 'R');
       neutralino1amplitudecLbarc = neutralino1amplitudecLcbar;
       neutralino1amplitudecRbarc = neutralino1amplitudecRcbar;
       neutralino1amplitudesLsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), md(1,2), ms, g, gp, mixNeut, 1, 'd', 'L');
       neutralino1amplitudesRsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), md(2,2), ms, g, gp, mixNeut, 1, 'd', 'R');
       neutralino1amplitudesLbars = neutralino1amplitudesLsbar;
       neutralino1amplitudesRbars = neutralino1amplitudesRsbar;
       neutralino1amplitudeeLebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), me(1,1), mel, g, gp, mixNeut, 1, 'l', 'L');
       neutralino1amplitudeeRebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), me(2,1), mel, g, gp, mixNeut, 1, 'l', 'R');
       neutralino1amplitudeeLbare = neutralino1amplitudeeLebar;
       neutralino1amplitudeeRbare = neutralino1amplitudeeRebar;
       neutralino1amplitudemuLmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), me(1,2), mmu, g, gp, mixNeut, 1, 'l', 'L');
       neutralino1amplitudemuRmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(1), me(2,2), mmu, g, gp, mixNeut, 1, 'l', 'R');
       neutralino1amplitudemuLbarmu = neutralino1amplitudemuLmubar;
       neutralino1amplitudemuRbarmu = neutralino1amplitudemuRmubar;
       
       neutralino1amplitudetopstop1bar = neutralinoamplitudestoptopNMSSM (mneut(1), mu(1,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 1, 1);
       neutralino1amplitudetopstop2bar = neutralinoamplitudestoptopNMSSM (mneut(1), mu(2,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 1, 2);
       neutralino1amplitudetopbarstop1 = neutralino1amplitudetopstop1bar;
       neutralino1amplitudetopbarstop2 = neutralino1amplitudetopstop2bar;
       neutralino1amplitudebottomsbottom1bar = neutralinoamplitudesbottombottomNMSSM (mneut(1), md(1,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 1, 1);
       neutralino1amplitudebottomsbottom2bar = neutralinoamplitudesbottombottomNMSSM (mneut(1), md(2,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 1, 2);
       neutralino1amplitudebottombarsbottom1 = neutralino1amplitudebottomsbottom1bar;
       neutralino1amplitudebottombarsbottom2 = neutralino1amplitudebottomsbottom2bar;
       
       neutralino1amplitudetaustau1bar = neutralinoamplitudestautauNMSSM (mneut(1), me(1,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 1, 1);
       neutralino1amplitudetaustau2bar = neutralinoamplitudestautauNMSSM (mneut(1), me(2,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 1, 2);
       neutralino1amplitudetaubarstau1 = neutralino1amplitudetaustau1bar;
       neutralino1amplitudetaubarstau2 = neutralino1amplitudetaustau2bar;
       
       neutralino1amplitudesnuenuebar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(1), msnu(1), 0, g, gp, mixNeut, 1);
       neutralino1amplitudesnuebarnue = neutralino1amplitudesnuenuebar;
       neutralino1amplitudesnumunumubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(1), msnu(2), 0, g, gp, mixNeut, 1);
       neutralino1amplitudesnumubarnumu = neutralino1amplitudesnumunumubar;
       neutralino1amplitudenutausnutaubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(1), msnu(3), 0, g, gp, mixNeut, 1);
       neutralino1amplitudenutaubarsnutau = neutralino1amplitudenutausnutaubar;
   }
 
   ParticleNeutralino1.Array_Decays[0][0] = -PDGup; ParticleNeutralino1.Array_Decays[0][1] = PDGsupL; ParticleNeutralino1.Array_Decays[0][2] = neutralino1amplitudeuLubar; ParticleNeutralino1.Array_Decays[0][3] = 2; ParticleNeutralino1.Array_Comments[0] = "# ~chi_10 -> ub ~u_L";
   ParticleNeutralino1.Array_Decays[1][0] = -PDGup; ParticleNeutralino1.Array_Decays[1][1] = PDGsupR; ParticleNeutralino1.Array_Decays[1][2] = neutralino1amplitudeuRubar; ParticleNeutralino1.Array_Decays[1][3] = 2; ParticleNeutralino1.Array_Comments[1] = "# ~chi_10 -> ub ~u_R"; 
   ParticleNeutralino1.Array_Decays[2][0] = PDGup; ParticleNeutralino1.Array_Decays[2][1] = -PDGsupL; ParticleNeutralino1.Array_Decays[2][2] = neutralino1amplitudeuLbaru; ParticleNeutralino1.Array_Decays[2][3] = 2; ParticleNeutralino1.Array_Comments[2] = "# ~chi_10 -> u ~u_L*";
   ParticleNeutralino1.Array_Decays[3][0] = PDGup; ParticleNeutralino1.Array_Decays[3][1] = -PDGsupR; ParticleNeutralino1.Array_Decays[3][2] = neutralino1amplitudeuRbaru; ParticleNeutralino1.Array_Decays[3][3] = 2; ParticleNeutralino1.Array_Comments[3] = "# ~chi_10 -> u ~u_R*";
   ParticleNeutralino1.Array_Decays[4][0] = -PDGdown; ParticleNeutralino1.Array_Decays[4][1] = PDGsdownL; ParticleNeutralino1.Array_Decays[4][2] = neutralino1amplitudedLdbar; ParticleNeutralino1.Array_Decays[4][3] = 2; ParticleNeutralino1.Array_Comments[4] = "# ~chi_10 -> db ~d_L";
   ParticleNeutralino1.Array_Decays[5][0] = -PDGdown; ParticleNeutralino1.Array_Decays[5][1] = PDGsdownR; ParticleNeutralino1.Array_Decays[5][2] = neutralino1amplitudedRdbar; ParticleNeutralino1.Array_Decays[5][3] = 2; ParticleNeutralino1.Array_Comments[5] = "# ~chi_10 -> db ~d_R";
   ParticleNeutralino1.Array_Decays[6][0] = PDGdown; ParticleNeutralino1.Array_Decays[6][1] = -PDGsdownL; ParticleNeutralino1.Array_Decays[6][2] = neutralino1amplitudedLbard; ParticleNeutralino1.Array_Decays[6][3] = 2; ParticleNeutralino1.Array_Comments[6] = "# ~chi_10 -> d ~d_L*";
   ParticleNeutralino1.Array_Decays[7][0] = PDGdown; ParticleNeutralino1.Array_Decays[7][1] = -PDGsdownR; ParticleNeutralino1.Array_Decays[7][2] = neutralino1amplitudedRbard; ParticleNeutralino1.Array_Decays[7][3] = 2; ParticleNeutralino1.Array_Comments[7] = "# ~chi_10 -> d ~d_R*";
   ParticleNeutralino1.Array_Decays[8][0] = -PDGcharm; ParticleNeutralino1.Array_Decays[8][1] = PDGscharmL; ParticleNeutralino1.Array_Decays[8][2] = neutralino1amplitudecLcbar; ParticleNeutralino1.Array_Decays[8][3] = 2; ParticleNeutralino1.Array_Comments[8] = "# ~chi_10 -> cb ~c_L";
   ParticleNeutralino1.Array_Decays[9][0] = -PDGcharm; ParticleNeutralino1.Array_Decays[9][1] = PDGscharmR; ParticleNeutralino1.Array_Decays[9][2] = neutralino1amplitudecRcbar; ParticleNeutralino1.Array_Decays[9][3] = 2; ParticleNeutralino1.Array_Comments[9] = "# ~chi_10 -> cb ~c_R";
   ParticleNeutralino1.Array_Decays[10][0] = PDGcharm; ParticleNeutralino1.Array_Decays[10][1] = -PDGscharmL; ParticleNeutralino1.Array_Decays[10][2] = neutralino1amplitudecLbarc; ParticleNeutralino1.Array_Decays[10][3] = 2; ParticleNeutralino1.Array_Comments[10] = "# ~chi_10 -> c ~c_L*";
   ParticleNeutralino1.Array_Decays[11][0] = PDGcharm; ParticleNeutralino1.Array_Decays[11][1] = -PDGscharmR; ParticleNeutralino1.Array_Decays[11][2] = neutralino1amplitudecRbarc; ParticleNeutralino1.Array_Decays[11][3] = 2; ParticleNeutralino1.Array_Comments[11] = "# ~chi_10 -> c ~c_R*";
   ParticleNeutralino1.Array_Decays[12][0] = -PDGstrange; ParticleNeutralino1.Array_Decays[12][1] = PDGsstrangeL; ParticleNeutralino1.Array_Decays[12][2] = neutralino1amplitudesLsbar; ParticleNeutralino1.Array_Decays[12][3] = 2; ParticleNeutralino1.Array_Comments[12] = "# ~chi_10 -> sb ~s_L";
   ParticleNeutralino1.Array_Decays[13][0] = -PDGstrange; ParticleNeutralino1.Array_Decays[13][1] = PDGsstrangeR; ParticleNeutralino1.Array_Decays[13][2] = neutralino1amplitudesRsbar; ParticleNeutralino1.Array_Decays[13][3] = 2; ParticleNeutralino1.Array_Comments[13] = "# ~chi_10 -> sb ~s_R";
   ParticleNeutralino1.Array_Decays[14][0] = PDGstrange; ParticleNeutralino1.Array_Decays[14][1] = -PDGsstrangeL; ParticleNeutralino1.Array_Decays[14][2] = neutralino1amplitudesLbars; ParticleNeutralino1.Array_Decays[14][3] = 2; ParticleNeutralino1.Array_Comments[14] = "# ~chi_10 -> s ~s_L*";
   ParticleNeutralino1.Array_Decays[15][0] = PDGstrange; ParticleNeutralino1.Array_Decays[15][1] = -PDGsstrangeR; ParticleNeutralino1.Array_Decays[15][2] = neutralino1amplitudesRbars; ParticleNeutralino1.Array_Decays[15][3] = 2; ParticleNeutralino1.Array_Comments[15] = "# ~chi_10 -> s ~s_R*";
   ParticleNeutralino1.Array_Decays[16][0] = -PDGelectron; ParticleNeutralino1.Array_Decays[16][1] = PDGselectronL; ParticleNeutralino1.Array_Decays[16][2] = neutralino1amplitudeeLebar; ParticleNeutralino1.Array_Decays[16][3] = 2; ParticleNeutralino1.Array_Comments[16] = "# ~chi_10 -> e+ ~e_L-";
   ParticleNeutralino1.Array_Decays[17][0] = -PDGelectron; ParticleNeutralino1.Array_Decays[17][1] = PDGselectronR; ParticleNeutralino1.Array_Decays[17][2] = neutralino1amplitudeeRebar; ParticleNeutralino1.Array_Decays[17][3] = 2; ParticleNeutralino1.Array_Comments[17] = "# ~chi_10 -> e+ ~e_R-";
   ParticleNeutralino1.Array_Decays[18][0] = PDGelectron; ParticleNeutralino1.Array_Decays[18][1] = -PDGselectronL; ParticleNeutralino1.Array_Decays[18][2] = neutralino1amplitudeeLbare; ParticleNeutralino1.Array_Decays[18][3] = 2; ParticleNeutralino1.Array_Comments[18] = "# ~chi_10 -> e- ~e_L+";
   ParticleNeutralino1.Array_Decays[19][0] = PDGelectron; ParticleNeutralino1.Array_Decays[19][1] = -PDGselectronR; ParticleNeutralino1.Array_Decays[19][2] = neutralino1amplitudeeRbare; ParticleNeutralino1.Array_Decays[19][3] = 2; ParticleNeutralino1.Array_Comments[19] = "# ~chi_10 -> e- ~e_R+";
   ParticleNeutralino1.Array_Decays[20][0] = -PDGmuon; ParticleNeutralino1.Array_Decays[20][1] = PDGsmuonL; ParticleNeutralino1.Array_Decays[20][2] = neutralino1amplitudemuLmubar; ParticleNeutralino1.Array_Decays[20][3] = 2; ParticleNeutralino1.Array_Comments[20] = "# ~chi_10 -> mu+ ~mu_L-";
   ParticleNeutralino1.Array_Decays[21][0] = -PDGmuon; ParticleNeutralino1.Array_Decays[21][1] = PDGsmuonR; ParticleNeutralino1.Array_Decays[21][2] = neutralino1amplitudemuRmubar; ParticleNeutralino1.Array_Decays[21][3] = 2; ParticleNeutralino1.Array_Comments[21] = "# ~chi_10 -> mu+ ~mu_R-";
   ParticleNeutralino1.Array_Decays[22][0] = PDGmuon; ParticleNeutralino1.Array_Decays[22][1] = -PDGsmuonL; ParticleNeutralino1.Array_Decays[22][2] = neutralino1amplitudemuLbarmu; ParticleNeutralino1.Array_Decays[22][3] = 2; ParticleNeutralino1.Array_Comments[22] = "# ~chi_10 -> mu- ~mu_L+";
   ParticleNeutralino1.Array_Decays[23][0] = PDGmuon; ParticleNeutralino1.Array_Decays[23][1] = -PDGsmuonR; ParticleNeutralino1.Array_Decays[23][2] = neutralino1amplitudemuRbarmu; ParticleNeutralino1.Array_Decays[23][3] = 2; ParticleNeutralino1.Array_Comments[23] = "# ~chi_10 -> mu- ~mu_R+";
   ParticleNeutralino1.Array_Decays[24][0] = PDGnuelectron; ParticleNeutralino1.Array_Decays[24][1] = -PDGnuselectronL; ParticleNeutralino1.Array_Decays[24][2] = neutralino1amplitudesnuebarnue; ParticleNeutralino1.Array_Decays[24][3] = 2; ParticleNeutralino1.Array_Comments[24] = "# ~chi_10 -> nu_e ~nu_eL*";
   ParticleNeutralino1.Array_Decays[25][0] = -PDGnuelectron; ParticleNeutralino1.Array_Decays[25][1] = PDGnuselectronL; ParticleNeutralino1.Array_Decays[25][2] = neutralino1amplitudesnuenuebar; ParticleNeutralino1.Array_Decays[25][3] = 2; ParticleNeutralino1.Array_Comments[25] = "# ~chi_10 -> nu_eb ~nu_eL";
   ParticleNeutralino1.Array_Decays[26][0] = PDGnumuon; ParticleNeutralino1.Array_Decays[26][1] = -PDGnusmuonL; ParticleNeutralino1.Array_Decays[26][2] = neutralino1amplitudesnumubarnumu; ParticleNeutralino1.Array_Decays[26][3] = 2; ParticleNeutralino1.Array_Comments[26] = "# ~chi_10 -> nu_mu ~nu_muL*";
   ParticleNeutralino1.Array_Decays[27][0] = -PDGnumuon; ParticleNeutralino1.Array_Decays[27][1] = PDGnusmuonL; ParticleNeutralino1.Array_Decays[27][2] = neutralino1amplitudesnumunumubar; ParticleNeutralino1.Array_Decays[27][3] = 2; ParticleNeutralino1.Array_Comments[27] = "# ~chi_10 -> nu_mub ~nu_muL";
   ParticleNeutralino1.Array_Decays[28][0] = PDGtop; ParticleNeutralino1.Array_Decays[28][1] = -PDGstop1; ParticleNeutralino1.Array_Decays[28][2] = neutralino1amplitudetopstop1bar; ParticleNeutralino1.Array_Decays[28][3] = 2; ParticleNeutralino1.Array_Comments[28] = "# ~chi_10 -> t ~t_1*";
   ParticleNeutralino1.Array_Decays[29][0] = PDGtop; ParticleNeutralino1.Array_Decays[29][1] = -PDGstop2; ParticleNeutralino1.Array_Decays[29][2] = neutralino1amplitudetopstop2bar; ParticleNeutralino1.Array_Decays[29][3] = 2; ParticleNeutralino1.Array_Comments[29] = "# ~chi_10 -> t ~t_2*";
   ParticleNeutralino1.Array_Decays[30][0] = -PDGtop; ParticleNeutralino1.Array_Decays[30][1] = PDGstop1; ParticleNeutralino1.Array_Decays[30][2] = neutralino1amplitudetopbarstop1; ParticleNeutralino1.Array_Decays[30][3] = 2; ParticleNeutralino1.Array_Comments[30] = "# ~chi_10 -> tb ~t_1";
   ParticleNeutralino1.Array_Decays[31][0] = -PDGtop; ParticleNeutralino1.Array_Decays[31][1] = PDGstop2; ParticleNeutralino1.Array_Decays[31][2] = neutralino1amplitudetopbarstop2; ParticleNeutralino1.Array_Decays[31][3] = 2; ParticleNeutralino1.Array_Comments[31] = "# ~chi_10 -> tb ~t_2";
   ParticleNeutralino1.Array_Decays[32][0] = PDGbottom; ParticleNeutralino1.Array_Decays[32][1] = -PDGsbottom1; ParticleNeutralino1.Array_Decays[32][2] = neutralino1amplitudebottomsbottom1bar; ParticleNeutralino1.Array_Decays[32][3] = 2; ParticleNeutralino1.Array_Comments[32] = "# ~chi_10 -> b ~b_1*";
   ParticleNeutralino1.Array_Decays[33][0] = PDGbottom; ParticleNeutralino1.Array_Decays[33][1] = -PDGsbottom2; ParticleNeutralino1.Array_Decays[33][2] = neutralino1amplitudebottomsbottom2bar; ParticleNeutralino1.Array_Decays[33][3] = 2; ParticleNeutralino1.Array_Comments[33] = "# ~chi_10 -> b ~b_2*";
   ParticleNeutralino1.Array_Decays[34][0] = -PDGbottom; ParticleNeutralino1.Array_Decays[34][1] = PDGsbottom1; ParticleNeutralino1.Array_Decays[34][2] = neutralino1amplitudebottombarsbottom1; ParticleNeutralino1.Array_Decays[34][3] = 2; ParticleNeutralino1.Array_Comments[34] = "# ~chi_10 -> bb ~b_1";
   ParticleNeutralino1.Array_Decays[35][0] = -PDGbottom; ParticleNeutralino1.Array_Decays[35][1] = PDGsbottom2; ParticleNeutralino1.Array_Decays[35][2] = neutralino1amplitudebottombarsbottom2; ParticleNeutralino1.Array_Decays[35][3] = 2; ParticleNeutralino1.Array_Comments[35] = "# ~chi_10 -> bb ~b_2";
   ParticleNeutralino1.Array_Decays[36][0] = -PDGstau1; ParticleNeutralino1.Array_Decays[36][1] = PDGtau; ParticleNeutralino1.Array_Decays[36][2] = neutralino1amplitudetaustau1bar; ParticleNeutralino1.Array_Decays[36][3] = 2; ParticleNeutralino1.Array_Comments[36] = "# ~chi_10 -> tau- ~tau_1+";
   ParticleNeutralino1.Array_Decays[37][0] = -PDGstau2; ParticleNeutralino1.Array_Decays[37][1] = PDGtau; ParticleNeutralino1.Array_Decays[37][2] = neutralino1amplitudetaustau2bar; ParticleNeutralino1.Array_Decays[37][3] = 2; ParticleNeutralino1.Array_Comments[37] = "# ~chi_10 -> tau- ~tau_2+";
   ParticleNeutralino1.Array_Decays[38][0] = PDGstau1; ParticleNeutralino1.Array_Decays[38][1] = -PDGtau; ParticleNeutralino1.Array_Decays[38][2] = neutralino1amplitudetaubarstau1; ParticleNeutralino1.Array_Decays[38][3] = 2; ParticleNeutralino1.Array_Comments[38] = "# ~chi_10 -> tau+ ~tau_1-";
   ParticleNeutralino1.Array_Decays[39][0] = PDGstau2; ParticleNeutralino1.Array_Decays[39][1] = -PDGtau; ParticleNeutralino1.Array_Decays[39][2] = neutralino1amplitudetaubarstau2; ParticleNeutralino1.Array_Decays[39][3] = 2; ParticleNeutralino1.Array_Comments[39] = "# ~chi_10 -> tau+ ~tau_2-";
   ParticleNeutralino1.Array_Decays[40][0] = PDGnutau; ParticleNeutralino1.Array_Decays[40][1] = -PDGnustauL; ParticleNeutralino1.Array_Decays[40][2] = neutralino1amplitudenutausnutaubar; ParticleNeutralino1.Array_Decays[40][3] = 2; ParticleNeutralino1.Array_Comments[40] = "# ~chi_10 -> nu_tau ~nu_tauL*";
   ParticleNeutralino1.Array_Decays[41][0] = -PDGnutau; ParticleNeutralino1.Array_Decays[41][1] = PDGnustauL; ParticleNeutralino1.Array_Decays[41][2] = neutralino1amplitudenutaubarsnutau; ParticleNeutralino1.Array_Decays[41][3] = 2; ParticleNeutralino1.Array_Comments[41] = "# ~chi_10 -> nu_taub ~nu_tauL";
   ParticleNeutralino1.Array_Decays[42][0] = PDGWplus; ParticleNeutralino1.Array_Decays[42][1] = -PDGchargino1; ParticleNeutralino1.Array_Decays[42][2] = neutralino1amplitudeWbosonpluscharginoW1; ParticleNeutralino1.Array_Decays[42][3] = 2; ParticleNeutralino1.Array_Comments[42] = "# ~chi_10 -> W+ ~chi_1-";
   ParticleNeutralino1.Array_Decays[43][0] = PDGWplus; ParticleNeutralino1.Array_Decays[43][1] = -PDGchargino2; ParticleNeutralino1.Array_Decays[43][2] = neutralino1amplitudeWbosonpluscharginoW2; ParticleNeutralino1.Array_Decays[43][3] = 2; ParticleNeutralino1.Array_Comments[43] = "# ~chi_10 -> W+ ~chi_2-";
   ParticleNeutralino1.Array_Decays[44][0] = -PDGWplus; ParticleNeutralino1.Array_Decays[44][1] = PDGchargino1; ParticleNeutralino1.Array_Decays[44][2] = neutralino1amplitudeWbosonminuscharginoW1; ParticleNeutralino1.Array_Decays[44][3] = 2; ParticleNeutralino1.Array_Comments[44] = "# ~chi_10 -> W- ~chi_1+";
   ParticleNeutralino1.Array_Decays[45][0] = -PDGWplus; ParticleNeutralino1.Array_Decays[45][1] = PDGchargino2; ParticleNeutralino1.Array_Decays[45][2] = neutralino1amplitudeWbosonminuscharginoW2; ParticleNeutralino1.Array_Decays[45][3] = 2; ParticleNeutralino1.Array_Comments[45] = "# ~chi_10 -> W- ~chi_2+";
   ParticleNeutralino1.Array_Decays[46][0] = PDGHplus; ParticleNeutralino1.Array_Decays[46][1] = -PDGchargino1; ParticleNeutralino1.Array_Decays[46][2] = neutralino1amplitudeHpluscharginoW1; ParticleNeutralino1.Array_Decays[46][3] = 2; ParticleNeutralino1.Array_Comments[46] = "# ~chi_10 -> H+ ~chi_1-";
   ParticleNeutralino1.Array_Decays[47][0] = PDGHplus; ParticleNeutralino1.Array_Decays[47][1] = -PDGchargino2; ParticleNeutralino1.Array_Decays[47][2] = neutralino1amplitudeHpluscharginoW2; ParticleNeutralino1.Array_Decays[47][3] = 2; ParticleNeutralino1.Array_Comments[47] = "# ~chi_10 -> H+ ~chi_2-";
   ParticleNeutralino1.Array_Decays[48][0] = -PDGHplus; ParticleNeutralino1.Array_Decays[48][1] = PDGchargino1; ParticleNeutralino1.Array_Decays[48][2] = neutralino1amplitudeHminuscharginoW1; ParticleNeutralino1.Array_Decays[48][3] = 2; ParticleNeutralino1.Array_Comments[48] = "# ~chi_10 -> H- ~chi_1+";
   ParticleNeutralino1.Array_Decays[49][0] = -PDGHplus; ParticleNeutralino1.Array_Decays[49][1] = PDGchargino2; ParticleNeutralino1.Array_Decays[49][2] = neutralino1amplitudeHminuscharginoW2; ParticleNeutralino1.Array_Decays[49][3] = 2; ParticleNeutralino1.Array_Comments[49] = "# ~chi_10 -> H- ~chi_2+";
   ParticleNeutralino1.Array_Decays[50][0] = PDGZboson; ParticleNeutralino1.Array_Decays[50][1] = PDGneutralino2; ParticleNeutralino1.Array_Decays[50][2] = neutralino1amplitudeZbosonneutralino2; ParticleNeutralino1.Array_Decays[50][3] = 2; ParticleNeutralino1.Array_Comments[50] = "# ~chi_10 -> Z ~chi_20";
   ParticleNeutralino1.Array_Decays[51][0] = PDGZboson; ParticleNeutralino1.Array_Decays[51][1] = PDGneutralino3; ParticleNeutralino1.Array_Decays[51][2] = neutralino1amplitudeZbosonneutralino3; ParticleNeutralino1.Array_Decays[51][3] = 2; ParticleNeutralino1.Array_Comments[51] = "# ~chi_10 -> Z ~chi_30";
   ParticleNeutralino1.Array_Decays[52][0] = PDGZboson; ParticleNeutralino1.Array_Decays[52][1] = PDGneutralino4; ParticleNeutralino1.Array_Decays[52][2] = neutralino1amplitudeZbosonneutralino4; ParticleNeutralino1.Array_Decays[52][3] = 2; ParticleNeutralino1.Array_Comments[52] = "# ~chi_10 -> Z ~chi_40";
   ParticleNeutralino1.Array_Decays[53][0] = PDGh0; ParticleNeutralino1.Array_Decays[53][1] = PDGneutralino2; ParticleNeutralino1.Array_Decays[53][2] = neutralino1amplitudehneutralino2; ParticleNeutralino1.Array_Decays[53][3] = 2; ParticleNeutralino1.Array_Comments[53] = "# ~chi_10 -> h ~chi_20";
   ParticleNeutralino1.Array_Decays[54][0] = PDGh0; ParticleNeutralino1.Array_Decays[54][1] = PDGneutralino3; ParticleNeutralino1.Array_Decays[54][2] = neutralino1amplitudehneutralino3;  ParticleNeutralino1.Array_Decays[54][3] = 2; ParticleNeutralino1.Array_Comments[54] = "# ~chi_10 -> h ~chi_30";
   ParticleNeutralino1.Array_Decays[55][0] = PDGh0; ParticleNeutralino1.Array_Decays[55][1] = PDGneutralino4; ParticleNeutralino1.Array_Decays[55][2] = neutralino1amplitudehneutralino4; ParticleNeutralino1.Array_Decays[55][3] = 2; ParticleNeutralino1.Array_Comments[55] = "# ~chi_10 -> h ~chi_40";
   ParticleNeutralino1.Array_Decays[56][0] = PDGH0; ParticleNeutralino1.Array_Decays[56][1] = PDGneutralino2; ParticleNeutralino1.Array_Decays[56][2] = neutralino1amplitudeHneutralino2; ParticleNeutralino1.Array_Decays[56][3] = 2; ParticleNeutralino1.Array_Comments[56] = "# ~chi_10 -> H ~chi_20";
   ParticleNeutralino1.Array_Decays[57][0] = PDGH0; ParticleNeutralino1.Array_Decays[57][1] = PDGneutralino3; ParticleNeutralino1.Array_Decays[57][2] = neutralino1amplitudeHneutralino3; ParticleNeutralino1.Array_Decays[57][3] = 2; ParticleNeutralino1.Array_Comments[57] = "# ~chi_10 -> H ~chi_30";
   ParticleNeutralino1.Array_Decays[58][0] = PDGH0; ParticleNeutralino1.Array_Decays[58][1] = PDGneutralino4; ParticleNeutralino1.Array_Decays[58][2] = neutralino1amplitudeHneutralino4; ParticleNeutralino1.Array_Decays[58][3] = 2; ParticleNeutralino1.Array_Comments[58] = "# ~chi_10 -> H ~chi_40";
   ParticleNeutralino1.Array_Decays[59][0] = PDGA0; ParticleNeutralino1.Array_Decays[59][1] = PDGneutralino2; ParticleNeutralino1.Array_Decays[59][2] = neutralino1amplitudeAneutralino2; ParticleNeutralino1.Array_Decays[59][3] = 2; ParticleNeutralino1.Array_Comments[59] = "# ~chi_10 -> A ~chi_20";
   ParticleNeutralino1.Array_Decays[60][0] = PDGA0; ParticleNeutralino1.Array_Decays[60][1] = PDGneutralino3; ParticleNeutralino1.Array_Decays[60][2] = neutralino1amplitudeAneutralino3; ParticleNeutralino1.Array_Decays[60][3] = 2; ParticleNeutralino1.Array_Comments[60] = "# ~chi_10 -> A ~chi_30";
   ParticleNeutralino1.Array_Decays[61][0] = PDGA0; ParticleNeutralino1.Array_Decays[61][1] = PDGneutralino4; ParticleNeutralino1.Array_Decays[61][2] = neutralino1amplitudeAneutralino4; ParticleNeutralino1.Array_Decays[61][3] = 2; ParticleNeutralino1.Array_Comments[61] = "# ~chi_10 -> A ~chi_40";

   ParticleNeutralino1.Array_Decays[62][0] = PDGphoton; ParticleNeutralino1.Array_Decays[62][1] = PDGgravitino; ParticleNeutralino1.Array_Decays[62][2] = neutralino1amplitudephotongravitino; ParticleNeutralino1.Array_Decays[62][3] = 2; ParticleNeutralino1.Array_Comments[62] = "# ~chi_10 -> gamma ~G";
   ParticleNeutralino1.Array_Decays[63][0] = PDGZboson; ParticleNeutralino1.Array_Decays[63][1] = PDGgravitino; ParticleNeutralino1.Array_Decays[63][2] = neutralino1amplitudeZgravitino; ParticleNeutralino1.Array_Decays[63][3] = 2; ParticleNeutralino1.Array_Comments[63] = "# ~chi_10 -> Z ~G";
   ParticleNeutralino1.Array_Decays[64][0] = PDGh0; ParticleNeutralino1.Array_Decays[64][1] = PDGgravitino; ParticleNeutralino1.Array_Decays[64][2] = neutralino1amplitudehgravitino; ParticleNeutralino1.Array_Decays[64][3] = 2; ParticleNeutralino1.Array_Comments[64] = "# ~chi_10 -> h ~G";
   ParticleNeutralino1.Array_Decays[65][0] = PDGH0; ParticleNeutralino1.Array_Decays[65][1] = PDGgravitino; ParticleNeutralino1.Array_Decays[65][2] = neutralino1amplitudeHgravitino; ParticleNeutralino1.Array_Decays[65][3] = 2; ParticleNeutralino1.Array_Comments[65] = "# ~chi_10 -> H ~G";
   ParticleNeutralino1.Array_Decays[66][0] = PDGA0; ParticleNeutralino1.Array_Decays[66][1] = PDGgravitino; ParticleNeutralino1.Array_Decays[66][2] = neutralino1amplitudeAgravitino; ParticleNeutralino1.Array_Decays[66][3] = 2; ParticleNeutralino1.Array_Comments[66] = "# ~chi_10 -> A ~G";
   
   ParticleNeutralino1.Array_Decays[67][0] = PDGchargino1; ParticleNeutralino1.Array_Decays[67][1] = PDGup; ParticleNeutralino1.Array_Decays[67][4] = -PDGdown; ParticleNeutralino1.Array_Decays[67][2] = neutralino1amplitudechargino1udbar; ParticleNeutralino1.Array_Decays[67][3] = 3; ParticleNeutralino1.Array_Comments[67] = "# ~chi_10 -> chi_1- u db";
   ParticleNeutralino1.Array_Decays[68][0] = PDGchargino1; ParticleNeutralino1.Array_Decays[68][1] = PDGcharm; ParticleNeutralino1.Array_Decays[68][4] = -PDGstrange; ParticleNeutralino1.Array_Decays[68][2] = neutralino1amplitudechargino1csbar; ParticleNeutralino1.Array_Decays[68][3] = 3; ParticleNeutralino1.Array_Comments[68] = "# ~chi_10 -> chi_1- c sb";
   ParticleNeutralino1.Array_Decays[69][0] = PDGchargino1; ParticleNeutralino1.Array_Decays[69][1] = PDGnuelectron; ParticleNeutralino1.Array_Decays[69][4] = -PDGelectron; ParticleNeutralino1.Array_Decays[69][2] = neutralino1amplitudechargino1enuebar; ParticleNeutralino1.Array_Decays[69][3] = 3; ParticleNeutralino1.Array_Comments[69] = "# ~chi_10 -> chi_1- nu_e eb";
   ParticleNeutralino1.Array_Decays[70][0] = PDGchargino1; ParticleNeutralino1.Array_Decays[70][1] = PDGnumuon; ParticleNeutralino1.Array_Decays[70][4] = -PDGmuon; ParticleNeutralino1.Array_Decays[70][2] = neutralino1amplitudechargino1munumubar; ParticleNeutralino1.Array_Decays[70][3] = 3; ParticleNeutralino1.Array_Comments[70] = "# ~chi_10 -> chi_1- nu_mu mub";
   ParticleNeutralino1.Array_Decays[71][0] = PDGchargino1; ParticleNeutralino1.Array_Decays[71][1] = PDGnutau; ParticleNeutralino1.Array_Decays[71][4] = -PDGtau; ParticleNeutralino1.Array_Decays[71][2] = neutralino1amplitudechargino1taunutaubar; ParticleNeutralino1.Array_Decays[71][3] = 3; ParticleNeutralino1.Array_Comments[71] = "# ~chi_10 -> chi_1- nu_tau taub";
   ParticleNeutralino1.Array_Decays[72][0] = PDGchargino2; ParticleNeutralino1.Array_Decays[72][1] = PDGup; ParticleNeutralino1.Array_Decays[72][4] = -PDGdown; ParticleNeutralino1.Array_Decays[72][2] = neutralino1amplitudechargino2udbar; ParticleNeutralino1.Array_Decays[72][3] = 3; ParticleNeutralino1.Array_Comments[72] = "# ~chi_10 -> chi_2- u dbar";
   ParticleNeutralino1.Array_Decays[73][0] = PDGchargino2; ParticleNeutralino1.Array_Decays[73][1] = PDGcharm; ParticleNeutralino1.Array_Decays[73][4] = -PDGstrange; ParticleNeutralino1.Array_Decays[73][2] = neutralino1amplitudechargino2csbar; ParticleNeutralino1.Array_Decays[73][3] = 3; ParticleNeutralino1.Array_Comments[73] = "# ~chi_10 -> chi_2- c sbar";
   ParticleNeutralino1.Array_Decays[74][0] = PDGchargino2; ParticleNeutralino1.Array_Decays[74][1] = PDGnuelectron; ParticleNeutralino1.Array_Decays[74][4] = -PDGelectron; ParticleNeutralino1.Array_Decays[74][2] = neutralino1amplitudechargino2enuebar; ParticleNeutralino1.Array_Decays[74][3] = 3; ParticleNeutralino1.Array_Comments[74] = "# ~chi_10 -> chi_2- nu_e eb";
   ParticleNeutralino1.Array_Decays[75][0] = PDGchargino2; ParticleNeutralino1.Array_Decays[75][1] = PDGnumuon; ParticleNeutralino1.Array_Decays[75][4] = -PDGmuon; ParticleNeutralino1.Array_Decays[75][2] = neutralino1amplitudechargino2munumubar; ParticleNeutralino1.Array_Decays[75][3] = 3; ParticleNeutralino1.Array_Comments[75] = "# ~chi_10 -> chi_2- nu_mu mub";
   ParticleNeutralino1.Array_Decays[76][0] = PDGchargino2; ParticleNeutralino1.Array_Decays[76][1] = PDGnutau; ParticleNeutralino1.Array_Decays[67][4] = -PDGtau; ParticleNeutralino1.Array_Decays[76][2] = neutralino1amplitudechargino2taunutaubar; ParticleNeutralino1.Array_Decays[76][3] = 3; ParticleNeutralino1.Array_Comments[76] = "# ~chi_10 -> chi_2- nu_tau taubar";
   
   double Neut1_No_1to2_Decays = 0;
   
   Neut1_No_1to2_Decays = ParticleNeutralino1.No_1to2_Decays + ParticleNeutralino1.No_grav_Decays;
   
   for (int j = 0; j<Neut1_No_1to2_Decays; j++) {
     ParticleNeutralino1.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Neut1_No_1to2_Decays; j++) {
     ParticleNeutralino1.two_width = ParticleNeutralino1.two_width + ParticleNeutralino1.Array_Decays[j][2];
   }
   for (int j=Neut1_No_1to2_Decays; j<ParticleNeutralino1.No_of_Decays; j++) {
     ParticleNeutralino1.three_width = ParticleNeutralino1.three_width + ParticleNeutralino1.Array_Decays[j][2];
   }
   
   if ( ParticleNeutralino1.three_width != ParticleNeutralino1.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for neutralino 1 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleNeutralino1.No_of_Decays = Neut1_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleNeutralino1.total_width = ParticleNeutralino1.two_width;
     }
   else {
     ParticleNeutralino1.total_width = ParticleNeutralino1.two_width + ParticleNeutralino1.three_width;
   }

   if ( ParticleNeutralino1.total_width != ParticleNeutralino1.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleNeutralino1.No_of_Decays; i++) {
       //   fout << i << " " << ParticleNeutralino1.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in Neutralino1 total width \n");
     }
   
   for (int i =0; i<ParticleNeutralino1.No_of_Decays; i++) {
     ParticleNeutralino1.Array_Decays[i][5]= ParticleNeutralino1.Array_Decays[i][2]/ParticleNeutralino1.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleNeutralino1, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleNeutralino1, BRTol);}
   
 }

///Neutralino2 Decays
 
 double neutralino2amplitudeuLubar=0, neutralino2amplitudeuRubar=0, neutralino2amplitudeuLbaru=0, neutralino2amplitudeuRbaru=0, neutralino2amplitudedLdbar=0, neutralino2amplitudedRdbar=0, neutralino2amplitudedLbard=0, neutralino2amplitudedRbard=0, neutralino2amplitudecLcbar=0, neutralino2amplitudecRcbar=0, neutralino2amplitudecLbarc=0, neutralino2amplitudecRbarc=0, neutralino2amplitudesLsbar=0, neutralino2amplitudesRsbar=0, neutralino2amplitudesLbars=0, neutralino2amplitudesRbars=0, neutralino2amplitudeeLebar=0, neutralino2amplitudeeRebar=0, neutralino2amplitudeeLbare=0, neutralino2amplitudeeRbare=0, neutralino2amplitudemuLmubar=0, neutralino2amplitudemuRmubar=0, neutralino2amplitudemuLbarmu=0, neutralino2amplitudemuRbarmu=0, neutralino2amplitudesnuenuebar=0, neutralino2amplitudesnuebarnue=0, neutralino2amplitudesnumunumubar=0, neutralino2amplitudesnumubarnumu=0, neutralino2amplitudetopstop1bar=0, neutralino2amplitudetopstop2bar=0, neutralino2amplitudetopbarstop1=0, neutralino2amplitudetopbarstop2=0, neutralino2amplitudebottomsbottom1bar=0, neutralino2amplitudebottomsbottom2bar=0, neutralino2amplitudebottombarsbottom1=0, neutralino2amplitudebottombarsbottom2=0, neutralino2amplitudetaustau1bar=0, neutralino2amplitudetaustau2bar=0, neutralino2amplitudetaubarstau1=0, neutralino2amplitudetaubarstau2=0, neutralino2amplitudenutausnutaubar=0, neutralino2amplitudenutaubarsnutau=0, neutralino2amplitudeWbosonpluscharginoW1=0, neutralino2amplitudeWbosonpluscharginoW2=0, neutralino2amplitudeWbosonminuscharginoW1=0, neutralino2amplitudeWbosonminuscharginoW2=0, neutralino2amplitudeHpluscharginoW1=0, neutralino2amplitudeHpluscharginoW2=0, neutralino2amplitudeHminuscharginoW1=0, neutralino2amplitudeHminuscharginoW2=0, neutralino2amplitudeZbosonneutralino1=0, neutralino2amplitudeZbosonneutralino3=0, neutralino2amplitudeZbosonneutralino4=0, neutralino2amplitudehneutralino1=0, neutralino2amplitudehneutralino3=0, neutralino2amplitudehneutralino4=0, neutralino2amplitudeHneutralino1=0, neutralino2amplitudeHneutralino3=0, neutralino2amplitudeHneutralino4=0, neutralino2amplitudeAneutralino1=0, neutralino2amplitudeAneutralino3=0, neutralino2amplitudeAneutralino4=0, neutralino2amplitudephotongravitino=0, neutralino2amplitudeZgravitino=0, neutralino2amplitudehgravitino=0, neutralino2amplitudeHgravitino=0, neutralino2amplitudeAgravitino=0;

 double neutralino2amplitudeneut1uubar=0, neutralino2amplitudeneut1ddbar=0, neutralino2amplitudeneut1ccbar=0, neutralino2amplitudeneut1ssbar=0, neutralino2amplitudeneut1ttbar=0, neutralino2amplitudeneut1bbbar=0, neutralino2amplitudeneut1eebar=0, neutralino2amplitudeneut1mumubar=0, neutralino2amplitudeneut1tautaubar=0, neutralino2amplitudeneut1nuenuebar=0, neutralino2amplitudeneut1numunumubar=0, neutralino2amplitudeneut1nutaunutaubar=0, neutralino2amplitudechargino1udbar=0, neutralino2amplitudechargino1csbar=0, neutralino2amplitudechargino1enuebar=0, neutralino2amplitudechargino1munumubar=0, neutralino2amplitudechargino1taunutaubar=0, neutralino2amplitudechargino2udbar=0, neutralino2amplitudechargino2csbar=0, neutralino2amplitudechargino2enuebar=0, neutralino2amplitudechargino2munumubar=0, neutralino2amplitudechargino2taunutaubar=0;

 double neutralino2amplitudeH3neutralino1 = 0, neutralino2amplitudeA2neutralino1 = 0;

 if (flagneut2 == 1) {
   if (nmssmIsIt == false) {
     neutralino2amplitudeuLubar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 2);
     neutralino2amplitudeuRubar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 2);
     neutralino2amplitudeuLbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 2); 
     neutralino2amplitudeuRbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 2);
     neutralino2amplitudedLdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 2);
     neutralino2amplitudedRdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 2);
     neutralino2amplitudedLbard = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 2);
     neutralino2amplitudedRbard = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 2);
     neutralino2amplitudecLcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 2);
     neutralino2amplitudecRcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 2);
     neutralino2amplitudecLbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 2);
     neutralino2amplitudecRbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(2), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 2);
     neutralino2amplitudesLsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), ms, md(1,2), g, gp, mixNeut, 2, 'L', 2);
     neutralino2amplitudesRsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(2), ms, md(2,2), g, gp, mixNeut, 2, 'R', 2);
     neutralino2amplitudesLbars = neutralinoamplitudedecayquarksquarkLorR (mneut(2), ms, md(1,2), g, gp, mixNeut, 2, 'L', 2);
     neutralino2amplitudesRbars = neutralinoamplitudedecayquarksquarkLorR (mneut(2), ms, md(2,2), g, gp, mixNeut, 2, 'R', 2);
     neutralino2amplitudeeLebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mel, me(1,1), g, gp, mixNeut, 'L', 2);
     neutralino2amplitudeeRebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mel, me(2,1), g, gp, mixNeut, 'R', 2);
     neutralino2amplitudeeLbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mel, me(1,1), g, gp, mixNeut, 'L', 2);
     neutralino2amplitudeeRbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mel, me(2,1), g, gp, mixNeut, 'R', 2);
     neutralino2amplitudemuLmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mmu, me(1,2), g, gp, mixNeut, 'L', 2);
     neutralino2amplitudemuRmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mmu, me(2,2), g, gp, mixNeut, 'R', 2);
     neutralino2amplitudemuLbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mmu, me(1,2), g, gp, mixNeut, 'L', 2);
     neutralino2amplitudemuRbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(2), mmu, me(2,2), g, gp, mixNeut, 'R', 2);
     neutralino2amplitudesnuenuebar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(2), 0, msnu(1), g, gp, mixNeut, 2);
     neutralino2amplitudesnuebarnue = neutralinoamplitudedecayneutrinosneutrinoL (mneut(2), 0, msnu(1), g, gp, mixNeut, 2);
     neutralino2amplitudesnumunumubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(2), 0, msnu(2), g, gp, mixNeut, 2);
     neutralino2amplitudesnumubarnumu = neutralinoamplitudedecayneutrinosneutrinoL (mneut(2), 0, msnu(2), g, gp, mixNeut, 2);
     neutralino2amplitudetopstop1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 2);
     neutralino2amplitudetopstop2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 2);
     neutralino2amplitudetopbarstop1 = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 2);
     neutralino2amplitudetopbarstop2 = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 2);
     neutralino2amplitudebottomsbottom1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 2);
     neutralino2amplitudebottomsbottom2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 2);
     neutralino2amplitudebottombarsbottom1 = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 2);
     neutralino2amplitudebottombarsbottom2 = neutralinoamplitudedecaysquark3quarkmix (mneut(2), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 2);
     neutralino2amplitudetaustau1bar = neutralinoamplitudedecaystautau (mneut(2), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 2);
     neutralino2amplitudetaustau2bar = neutralinoamplitudedecaystautau (mneut(2), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 2);
     neutralino2amplitudetaubarstau1 = neutralinoamplitudedecaystautau (mneut(2), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 2);
     neutralino2amplitudetaubarstau2 = neutralinoamplitudedecaystautau (mneut(2), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 2);
     neutralino2amplitudenutausnutaubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(2), 0, msnu(3), g, gp, mixNeut, 2);
     neutralino2amplitudenutaubarsnutau = neutralinoamplitudedecayneutrinosneutrinoL (mneut(2), 0, msnu(3), g, gp, mixNeut, 2);
     neutralino2amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(2), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 2, 1);
     neutralino2amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(2), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 2, 2);
     neutralino2amplitudeWbosonminuscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(2), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 2, 1);
     neutralino2amplitudeWbosonminuscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(2), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 2, 2);
     neutralino2amplitudeHpluscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(2), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 2, 1);
     neutralino2amplitudeHpluscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(2), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 2, 2);
     neutralino2amplitudeHminuscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(2), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 2, 1);
     neutralino2amplitudeHminuscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(2), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 2, 2);
     
     neutralino2amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZboson (mneut(2), polemz, mneut(1), g, gp, mixNeut, 2, 1);
     
     neutralino2amplitudehneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(2), mh0(1), mneut(1), g, gp, mixNeut, alpha, 2, 1, 'h');
     
     neutralino2amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(2), mh0(2), mneut(1), g, gp, mixNeut, alpha, 2, 1, 'H');
     neutralino2amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(2), mA0(1), mneut(1), g, gp, mixNeut, beta, 2, 1, 'A');
     
     neutralino2amplitudephotongravitino = neutralinoamplitudedecayphotongravitino(mneut(2), mgravitino, MPlreduced, mixNeut, g, gp, 2, gravonoff, neutNLSP);
     neutralino2amplitudeZgravitino = neutralinoamplitudedecayZgravitino(mneut(2), polemz, mgravitino, MPlreduced, mixNeut, g, gp, beta, 2, gravonoff, neutNLSP);
     neutralino2amplitudehgravitino = neutralinoamplitudedecayphigravitino(mneut(2), mh0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 2, gravonoff, 'h', neutNLSP);
     neutralino2amplitudeHgravitino = neutralinoamplitudedecayphigravitino(mneut(2), mh0(2), mgravitino, MPlreduced, mixNeut, alpha, beta, 2, gravonoff, 'H', neutNLSP);
     neutralino2amplitudeAgravitino = neutralinoamplitudedecayphigravitino(mneut(2), mA0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 2, gravonoff, 'A', neutNLSP);
     
     neutralino2amplitudeneut1uubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), mu(1,1), mu(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mup, alphas, 0, runmw, g, gp, alpha, beta, runmu, mixNeut, 2, 1, onetothree, 'u');
     neutralino2amplitudeneut1ddbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), md(1,1), md(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mdo, alphas, 0, runmw, g, gp, alpha, beta, runmd, mixNeut, 2, 1, onetothree, 'd');
     neutralino2amplitudeneut1ccbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), mu(1,2), mu(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mc, alphas, 0, runmw, g, gp, alpha, beta, runmc, mixNeut, 2, 1, onetothree, 'u');
     neutralino2amplitudeneut1ssbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), md(1,2), md(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), ms, alphas, 0, runmw, g, gp, alpha, beta, runms, mixNeut, 2, 1, onetothree, 'd');
     neutralino2amplitudeneut1ttbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), mu(1,3), mu(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mt, alphas, thetat, runmw, g, gp, alpha, beta, runmt, mixNeut, 2, 1, onetothree, 'u');
     neutralino2amplitudeneut1bbbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), md(1,3), md(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mb, alphas, thetab, runmw, g, gp, alpha, beta, runmb, mixNeut, 2, 1, onetothree, 'd');
     neutralino2amplitudeneut1eebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), me(1,1), me(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mel, alphas, 0, runmw, g, gp, alpha, beta, runmel, mixNeut, 2, 1, onetothree, 'l');
     neutralino2amplitudeneut1mumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), me(1,2), me(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mmu, alphas, 0, runmw, g, gp, alpha, beta, runmmu, mixNeut, 2, 1, onetothree, 'l');
     neutralino2amplitudeneut1tautaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), me(1,3), me(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mtau, alphas, thetatau-PI/2, runmw, g, gp, alpha, beta, runmtau, mixNeut, 2, 1, onetothree, 'l');
     neutralino2amplitudeneut1nuenuebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), msnu(1), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 2, 1, onetothree, 'n');
     neutralino2amplitudeneut1numunumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), msnu(2), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 2, 1, onetothree, 'n');
     neutralino2amplitudeneut1nutaunutaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(2), msnu(3), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 2, 1, onetothree, 'n'); ///Note set msf(2) very large as there is no msnuR so need this intermediate to decouple and not be present
     
     neutralino2amplitudechargino1udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(1), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 2, 1, onetothree, 'q', 'n');
     neutralino2amplitudechargino1csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(1), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 2, 1, onetothree, 'q', 'n');
     neutralino2amplitudechargino1enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(1), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 2, 1, onetothree, 'l', 'n');
     neutralino2amplitudechargino1munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(1), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 2, 1, onetothree, 'l', 'n');
     neutralino2amplitudechargino1taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(1), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 2, 1, onetothree, 'l', 'n');
     neutralino2amplitudechargino2udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(2), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 2, 2, onetothree, 'q', 'n');
     neutralino2amplitudechargino2csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(2), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 2, 2, onetothree, 'q', 'n');
     neutralino2amplitudechargino2enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(2), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 2, 2, onetothree, 'l', 'n');
     neutralino2amplitudechargino2munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(2), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 2, 2, onetothree, 'l', 'n');
     neutralino2amplitudechargino2taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(2), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(2), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 2, 2, onetothree, 'l', 'n');
   }
   
   else if (nmssmIsIt == true){
     neutralino2amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWNMSSM (mneut(2), MCH1, polemw, g, thetaL2, thetaR2, mixNeut, 2, 1);
     neutralino2amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWNMSSM (mneut(2), MCH2, polemw, g, thetaL2, thetaR2, mixNeut, 2, 2);
     neutralino2amplitudeWbosonminuscharginoW1 = neutralino2amplitudeWbosonpluscharginoW1;
     neutralino2amplitudeWbosonminuscharginoW2 = neutralino2amplitudeWbosonpluscharginoW2;
     neutralino2amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(2), mneut(1), polemz, g, gp, mixNeut, 2, 1);
     
     neutralino2amplitudeHpluscharginoW1 = neutralinoamplitudecharginoHpmNMSSM (mneut(2), MCH1, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 2, 1);
     neutralino2amplitudeHpluscharginoW2 = neutralinoamplitudecharginoHpmNMSSM (mneut(2), MCH2, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 2, 2);
     neutralino2amplitudeHminuscharginoW1 = neutralino2amplitudeHpluscharginoW1;
     neutralino2amplitudeHminuscharginoW2 = neutralino2amplitudeHpluscharginoW2;
     
     neutralino2amplitudehneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(2), mneut(1), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 2, 1, 1);
     neutralino2amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(2), mneut(1), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 2, 1, 2);
     neutralino2amplitudeH3neutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(2), mneut(1), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 2, 1, 3);
     
     neutralino2amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(2), mneut(1), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 2, 1, 1);
     neutralino2amplitudeA2neutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(2), mneut(1), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 2, 1, 2);
     
     neutralino2amplitudeuLubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), mu(1,1), mup, g, gp, mixNeut, 2, 'u', 'L');
     neutralino2amplitudeuRubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), mu(2,1), mup, g, gp, mixNeut, 2, 'u', 'R');
     neutralino2amplitudeuLbaru = neutralino2amplitudeuLubar;
     neutralino2amplitudeuRbaru = neutralino2amplitudeuRubar;
     neutralino2amplitudedLdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), md(1,1), mdo, g, gp, mixNeut, 2, 'd', 'L');
     neutralino2amplitudedRdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), md(2,1), mdo, g, gp, mixNeut, 2, 'd', 'R');
     neutralino2amplitudedLbard = neutralino2amplitudedLdbar;
     neutralino2amplitudedRbard = neutralino2amplitudedRdbar;
     neutralino2amplitudecLcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), mu(1,2), mc, g, gp, mixNeut, 2, 'u', 'L');
     neutralino2amplitudecRcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), mu(2,2), mc, g, gp, mixNeut, 2, 'u', 'R');
     neutralino2amplitudecLbarc = neutralino2amplitudecLcbar;
     neutralino2amplitudecRbarc = neutralino2amplitudecRcbar;
     neutralino2amplitudesLsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), md(1,2), ms, g, gp, mixNeut, 2, 'd', 'L');
     neutralino2amplitudesRsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), md(2,2), ms, g, gp, mixNeut, 2, 'd', 'R');
     neutralino2amplitudesLbars = neutralino2amplitudesLsbar;
     neutralino2amplitudesRbars = neutralino2amplitudesRsbar;
     neutralino2amplitudeeLebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), me(1,1), mel, g, gp, mixNeut, 2, 'l', 'L');
     neutralino2amplitudeeRebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), me(2,1), mel, g, gp, mixNeut, 2, 'l', 'R');
     neutralino2amplitudeeLbare = neutralino2amplitudeeLebar;
     neutralino2amplitudeeRbare = neutralino2amplitudeeRebar;
     neutralino2amplitudemuLmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), me(1,2), mmu, g, gp, mixNeut, 2, 'l', 'L');
     neutralino2amplitudemuRmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(2), me(2,2), mmu, g, gp, mixNeut, 2, 'l', 'R');
     neutralino2amplitudemuLbarmu = neutralino2amplitudemuLmubar;
     neutralino2amplitudemuRbarmu = neutralino2amplitudemuRmubar;
     
     neutralino2amplitudetopstop1bar = neutralinoamplitudestoptopNMSSM (mneut(2), mu(1,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 2, 1);
     neutralino2amplitudetopstop2bar = neutralinoamplitudestoptopNMSSM (mneut(2), mu(2,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 2, 2);
     neutralino2amplitudetopbarstop1 = neutralino2amplitudetopstop1bar;
     neutralino2amplitudetopbarstop2 = neutralino2amplitudetopstop2bar;
     neutralino2amplitudebottomsbottom1bar = neutralinoamplitudesbottombottomNMSSM (mneut(2), md(1,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 2, 1);
     neutralino2amplitudebottomsbottom2bar = neutralinoamplitudesbottombottomNMSSM (mneut(2), md(2,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 2, 2);
     neutralino2amplitudebottombarsbottom1 = neutralino2amplitudebottomsbottom1bar;
     neutralino2amplitudebottombarsbottom2 = neutralino2amplitudebottomsbottom2bar;
     neutralino2amplitudetaustau1bar = neutralinoamplitudestautauNMSSM (mneut(2), me(1,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 2, 1);
     neutralino2amplitudetaustau2bar = neutralinoamplitudestautauNMSSM (mneut(2), me(2,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 2, 2);
     neutralino2amplitudetaubarstau1 = neutralino2amplitudetaustau1bar;
     neutralino2amplitudetaubarstau2 = neutralino2amplitudetaustau2bar;
     
     neutralino2amplitudesnuenuebar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(2), msnu(1), 0, g, gp, mixNeut, 2);
     neutralino2amplitudesnuebarnue = neutralino2amplitudesnuenuebar;
     neutralino2amplitudesnumunumubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(2), msnu(2), 0, g, gp, mixNeut, 2);
     neutralino2amplitudesnumubarnumu = neutralino2amplitudesnumunumubar;
     neutralino2amplitudenutausnutaubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(2), msnu(3), 0, g, gp, mixNeut, 2);
     neutralino2amplitudenutaubarsnutau = neutralino2amplitudenutausnutaubar;
   }
    
   ParticleNeutralino2.Array_Decays[0][0] = -PDGup; ParticleNeutralino2.Array_Decays[0][1] = PDGsupL; ParticleNeutralino2.Array_Decays[0][2] = neutralino2amplitudeuLubar; ParticleNeutralino2.Array_Decays[0][3] = 2; ParticleNeutralino2.Array_Comments[0] = "# ~chi_20 -> ub ~u_L";
   ParticleNeutralino2.Array_Decays[1][0] = -PDGup; ParticleNeutralino2.Array_Decays[1][1] = PDGsupR; ParticleNeutralino2.Array_Decays[1][2] = neutralino2amplitudeuRubar; ParticleNeutralino2.Array_Decays[1][3] = 2; ParticleNeutralino2.Array_Comments[1] = "# ~chi_20 -> ub ~u_R";
   ParticleNeutralino2.Array_Decays[2][0] = PDGup; ParticleNeutralino2.Array_Decays[2][1] = -PDGsupL; ParticleNeutralino2.Array_Decays[2][2] = neutralino2amplitudeuLbaru; ParticleNeutralino2.Array_Decays[2][3] = 2; ParticleNeutralino2.Array_Comments[2] = "# ~chi_20 -> u ~u_L*";
   ParticleNeutralino2.Array_Decays[3][0] = PDGup; ParticleNeutralino2.Array_Decays[3][1] = -PDGsupR; ParticleNeutralino2.Array_Decays[3][2] = neutralino2amplitudeuRbaru; ParticleNeutralino2.Array_Decays[3][3] = 2; ParticleNeutralino2.Array_Comments[3] = "# ~chi_20 -> u ~u_R*";
   ParticleNeutralino2.Array_Decays[4][0] = -PDGdown; ParticleNeutralino2.Array_Decays[4][1] = PDGsdownL; ParticleNeutralino2.Array_Decays[4][2] = neutralino2amplitudedLdbar; ParticleNeutralino2.Array_Decays[4][3] = 2; ParticleNeutralino2.Array_Comments[4] = "# ~chi_20 -> db ~d_L";
   ParticleNeutralino2.Array_Decays[5][0] = -PDGdown; ParticleNeutralino2.Array_Decays[5][1] = PDGsdownR; ParticleNeutralino2.Array_Decays[5][2] = neutralino2amplitudedRdbar; ParticleNeutralino2.Array_Decays[5][3] = 2; ParticleNeutralino2.Array_Comments[5] = "# ~chi_20 -> db ~d_R";
   ParticleNeutralino2.Array_Decays[6][0] = PDGdown; ParticleNeutralino2.Array_Decays[6][1] = -PDGsdownL; ParticleNeutralino2.Array_Decays[6][2] = neutralino2amplitudedLbard; ParticleNeutralino2.Array_Decays[6][3] = 2; ParticleNeutralino2.Array_Comments[6] = "# ~chi_20 -> d ~d_L*";
   ParticleNeutralino2.Array_Decays[7][0] = PDGdown; ParticleNeutralino2.Array_Decays[7][1] = -PDGsdownR; ParticleNeutralino2.Array_Decays[7][2] = neutralino2amplitudedRbard; ParticleNeutralino2.Array_Decays[7][3] = 2; ParticleNeutralino2.Array_Comments[7] = "# ~chi_20 -> d ~d_R*";
   ParticleNeutralino2.Array_Decays[8][0] = -PDGcharm; ParticleNeutralino2.Array_Decays[8][1] = PDGscharmL; ParticleNeutralino2.Array_Decays[8][2] = neutralino2amplitudecLcbar; ParticleNeutralino2.Array_Decays[8][3] = 2; ParticleNeutralino2.Array_Comments[8] = "# ~chi_20 -> cb ~c_L";
   ParticleNeutralino2.Array_Decays[9][0] = -PDGcharm; ParticleNeutralino2.Array_Decays[9][1] = PDGscharmR; ParticleNeutralino2.Array_Decays[9][2] = neutralino2amplitudecRcbar; ParticleNeutralino2.Array_Decays[9][3] = 2; ParticleNeutralino2.Array_Comments[9] = "# ~chi_20 -> cb ~c_R";
   ParticleNeutralino2.Array_Decays[10][0] = PDGcharm; ParticleNeutralino2.Array_Decays[10][1] = -PDGscharmL; ParticleNeutralino2.Array_Decays[10][2] = neutralino2amplitudecLbarc; ParticleNeutralino2.Array_Decays[10][3] = 2; ParticleNeutralino2.Array_Comments[10] = "# ~chi_20 -> c ~c_L*";
   ParticleNeutralino2.Array_Decays[11][0] = PDGcharm; ParticleNeutralino2.Array_Decays[11][1] = -PDGscharmR; ParticleNeutralino2.Array_Decays[11][2] = neutralino2amplitudecRbarc; ParticleNeutralino2.Array_Decays[11][3] = 2; ParticleNeutralino2.Array_Comments[11] = "# ~chi_20 -> c ~c_R*";
   ParticleNeutralino2.Array_Decays[12][0] = -PDGstrange; ParticleNeutralino2.Array_Decays[12][1] = PDGsstrangeL; ParticleNeutralino2.Array_Decays[12][2] = neutralino2amplitudesLsbar; ParticleNeutralino2.Array_Decays[12][3] = 2; ParticleNeutralino2.Array_Comments[12] = "# ~chi_20 -> sb ~s_L";
   ParticleNeutralino2.Array_Decays[13][0] = -PDGstrange; ParticleNeutralino2.Array_Decays[13][1] = PDGsstrangeR; ParticleNeutralino2.Array_Decays[13][2] = neutralino2amplitudesRsbar; ParticleNeutralino2.Array_Decays[13][3] = 2; ParticleNeutralino2.Array_Comments[13] = "# ~chi_20 -> sb ~s_R";
   ParticleNeutralino2.Array_Decays[14][0] = PDGstrange; ParticleNeutralino2.Array_Decays[14][1] = -PDGsstrangeL; ParticleNeutralino2.Array_Decays[14][2] = neutralino2amplitudesLbars; ParticleNeutralino2.Array_Decays[14][3] = 2; ParticleNeutralino2.Array_Comments[14] = "# ~chi_20 -> s ~s_L*";
   ParticleNeutralino2.Array_Decays[15][0] = PDGstrange; ParticleNeutralino2.Array_Decays[15][1] = -PDGsstrangeR; ParticleNeutralino2.Array_Decays[15][2] = neutralino2amplitudesRbars; ParticleNeutralino2.Array_Decays[15][3] = 2; ParticleNeutralino2.Array_Comments[15] = "# ~chi_20 -> s ~s_R*";
   ParticleNeutralino2.Array_Decays[16][0] = -PDGelectron; ParticleNeutralino2.Array_Decays[16][1] = PDGselectronL; ParticleNeutralino2.Array_Decays[16][2] = neutralino2amplitudeeLebar; ParticleNeutralino2.Array_Decays[16][3] = 2; ParticleNeutralino2.Array_Comments[16] = "# ~chi_20 -> e+ ~e_L-";
   ParticleNeutralino2.Array_Decays[17][0] = -PDGelectron; ParticleNeutralino2.Array_Decays[17][1] = PDGselectronR; ParticleNeutralino2.Array_Decays[17][2] = neutralino2amplitudeeRebar; ParticleNeutralino2.Array_Decays[17][3] = 2; ParticleNeutralino2.Array_Comments[17] = "# ~chi_20 -> e+ ~e_R-";
   ParticleNeutralino2.Array_Decays[18][0] = PDGelectron; ParticleNeutralino2.Array_Decays[18][1] = -PDGselectronL; ParticleNeutralino2.Array_Decays[18][2] = neutralino2amplitudeeLbare; ParticleNeutralino2.Array_Decays[18][3] = 2; ParticleNeutralino2.Array_Comments[18] = "# ~chi_20 -> e- ~e_L+";
   ParticleNeutralino2.Array_Decays[19][0] = PDGelectron; ParticleNeutralino2.Array_Decays[19][1] = -PDGselectronR; ParticleNeutralino2.Array_Decays[19][2] = neutralino2amplitudeeRbare; ParticleNeutralino2.Array_Decays[19][3] = 2; ParticleNeutralino2.Array_Comments[19] = "# ~chi_20 -> e- ~e_R+";   
   ParticleNeutralino2.Array_Decays[20][0] = -PDGmuon; ParticleNeutralino2.Array_Decays[20][1] = PDGsmuonL; ParticleNeutralino2.Array_Decays[20][2] = neutralino2amplitudemuLmubar; ParticleNeutralino2.Array_Decays[20][3] = 2; ParticleNeutralino2.Array_Comments[20] = "# ~chi_20 -> mu+ ~mu_L-";
   ParticleNeutralino2.Array_Decays[21][0] = -PDGmuon; ParticleNeutralino2.Array_Decays[21][1] = PDGsmuonR; ParticleNeutralino2.Array_Decays[21][2] = neutralino2amplitudemuRmubar; ParticleNeutralino2.Array_Decays[21][3] = 2; ParticleNeutralino2.Array_Comments[21] = "# ~chi_20 -> mu+ ~mu_R-";
   ParticleNeutralino2.Array_Decays[22][0] = PDGmuon; ParticleNeutralino2.Array_Decays[22][1] = -PDGsmuonL; ParticleNeutralino2.Array_Decays[22][2] = neutralino2amplitudemuLbarmu; ParticleNeutralino2.Array_Decays[22][3] = 2; ParticleNeutralino2.Array_Comments[22] = "# ~chi_20 -> mu- ~mu_L+";
   ParticleNeutralino2.Array_Decays[23][0] = PDGmuon; ParticleNeutralino2.Array_Decays[23][1] = -PDGsmuonR; ParticleNeutralino2.Array_Decays[23][2] = neutralino2amplitudemuRbarmu; ParticleNeutralino2.Array_Decays[23][3] = 2; ParticleNeutralino2.Array_Comments[23] = "# ~chi_20 -> mu- ~mu_R+";
   ParticleNeutralino2.Array_Decays[24][0] = PDGnuelectron; ParticleNeutralino2.Array_Decays[24][1] = -PDGnuselectronL; ParticleNeutralino2.Array_Decays[24][2] = neutralino2amplitudesnuebarnue; ParticleNeutralino2.Array_Decays[24][3] = 2; ParticleNeutralino2.Array_Comments[24] = "# ~chi_20 -> nu_e ~nu_eL*";
   ParticleNeutralino2.Array_Decays[25][0] = -PDGnuelectron; ParticleNeutralino2.Array_Decays[25][1] = PDGnuselectronL; ParticleNeutralino2.Array_Decays[25][2] = neutralino2amplitudesnuenuebar; ParticleNeutralino2.Array_Decays[25][3] = 2; ParticleNeutralino2.Array_Comments[25] = "# ~chi_20 -> nu_eb ~nu_eL";
   ParticleNeutralino2.Array_Decays[26][0] = PDGnumuon; ParticleNeutralino2.Array_Decays[26][1] = -PDGnusmuonL; ParticleNeutralino2.Array_Decays[26][2] = neutralino2amplitudesnumubarnumu; ParticleNeutralino2.Array_Decays[26][3] = 2; ParticleNeutralino2.Array_Comments[26] = "# ~chi_20 -> nu_mu ~nu_muL*";
   ParticleNeutralino2.Array_Decays[27][0] = -PDGnumuon; ParticleNeutralino2.Array_Decays[27][1] = PDGnusmuonL; ParticleNeutralino2.Array_Decays[27][2] = neutralino2amplitudesnumunumubar; ParticleNeutralino2.Array_Decays[27][3] = 2; ParticleNeutralino2.Array_Comments[27] = "# ~chi_20 -> nu_mub ~nu_muL";
   ParticleNeutralino2.Array_Decays[28][0] = PDGtop; ParticleNeutralino2.Array_Decays[28][1] = -PDGstop1; ParticleNeutralino2.Array_Decays[28][2] = neutralino2amplitudetopstop1bar; ParticleNeutralino2.Array_Decays[28][3] = 2; ParticleNeutralino2.Array_Comments[28] = "# ~chi_20 -> t ~t_1*";
   ParticleNeutralino2.Array_Decays[29][0] = PDGtop; ParticleNeutralino2.Array_Decays[29][1] = -PDGstop2; ParticleNeutralino2.Array_Decays[29][2] = neutralino2amplitudetopstop2bar; ParticleNeutralino2.Array_Decays[29][3] = 2; ParticleNeutralino2.Array_Comments[29] = "# ~chi_20 -> t ~t_2*";
   ParticleNeutralino2.Array_Decays[30][0] = -PDGtop; ParticleNeutralino2.Array_Decays[30][1] = PDGstop1; ParticleNeutralino2.Array_Decays[30][2] = neutralino2amplitudetopbarstop1; ParticleNeutralino2.Array_Decays[30][3] = 2; ParticleNeutralino2.Array_Comments[30] = "# ~chi_20 -> tb ~t_1";
   ParticleNeutralino2.Array_Decays[31][0] = -PDGtop; ParticleNeutralino2.Array_Decays[31][1] = PDGstop2; ParticleNeutralino2.Array_Decays[31][2] = neutralino2amplitudetopbarstop2; ParticleNeutralino2.Array_Decays[31][3] = 2; ParticleNeutralino2.Array_Comments[31] = "# ~chi_20 -> tb ~t_2";
   ParticleNeutralino2.Array_Decays[32][0] = PDGbottom; ParticleNeutralino2.Array_Decays[32][1] = -PDGsbottom1; ParticleNeutralino2.Array_Decays[32][2] = neutralino2amplitudebottomsbottom1bar; ParticleNeutralino2.Array_Decays[32][3] = 2; ParticleNeutralino2.Array_Comments[32] = "# ~chi_20 -> b ~b_1*";
   ParticleNeutralino2.Array_Decays[33][0] = PDGbottom; ParticleNeutralino2.Array_Decays[33][1] = -PDGsbottom2; ParticleNeutralino2.Array_Decays[33][2] = neutralino2amplitudebottomsbottom2bar; ParticleNeutralino2.Array_Decays[33][3] = 2; ParticleNeutralino2.Array_Comments[33] = "# ~chi_20 -> b ~b_2*";
   ParticleNeutralino2.Array_Decays[34][0] = -PDGbottom; ParticleNeutralino2.Array_Decays[34][1] = PDGsbottom1; ParticleNeutralino2.Array_Decays[34][2] = neutralino2amplitudebottombarsbottom1; ParticleNeutralino2.Array_Decays[34][3] = 2; ParticleNeutralino2.Array_Comments[34] = "# ~chi_20 -> bb ~b_1";
   ParticleNeutralino2.Array_Decays[35][0] = -PDGbottom; ParticleNeutralino2.Array_Decays[35][1] = PDGsbottom2; ParticleNeutralino2.Array_Decays[35][2] = neutralino2amplitudebottombarsbottom2; ParticleNeutralino2.Array_Decays[35][3] = 2; ParticleNeutralino2.Array_Comments[35] = "# ~chi_20 -> bb ~b_2";
   ParticleNeutralino2.Array_Decays[36][0] = -PDGstau1; ParticleNeutralino2.Array_Decays[36][1] = PDGtau; ParticleNeutralino2.Array_Decays[36][2] = neutralino2amplitudetaustau1bar; ParticleNeutralino2.Array_Decays[36][3] = 2; ParticleNeutralino2.Array_Comments[36] = "# ~chi_20 -> tau- ~tau_1+";
   ParticleNeutralino2.Array_Decays[37][0] = -PDGstau2; ParticleNeutralino2.Array_Decays[37][1] = PDGtau; ParticleNeutralino2.Array_Decays[37][2] = neutralino2amplitudetaustau2bar; ParticleNeutralino2.Array_Decays[37][3] = 2; ParticleNeutralino2.Array_Comments[37] = "# ~chi_20 -> tau- ~tau_2+";
   ParticleNeutralino2.Array_Decays[38][0] = PDGstau1; ParticleNeutralino2.Array_Decays[38][1] = -PDGtau; ParticleNeutralino2.Array_Decays[38][2] = neutralino2amplitudetaubarstau1; ParticleNeutralino2.Array_Decays[38][3] = 2; ParticleNeutralino2.Array_Comments[38] = "# ~chi_20 -> tau+ ~tau_1-";
   ParticleNeutralino2.Array_Decays[39][0] = PDGstau2; ParticleNeutralino2.Array_Decays[39][1] = -PDGtau; ParticleNeutralino2.Array_Decays[39][2] = neutralino2amplitudetaubarstau2; ParticleNeutralino2.Array_Decays[39][3] = 2; ParticleNeutralino2.Array_Comments[39] = "# ~chi_20 -> tau+ ~tau_2-";
   ParticleNeutralino2.Array_Decays[40][0] = PDGnutau; ParticleNeutralino2.Array_Decays[40][1] = -PDGnustauL; ParticleNeutralino2.Array_Decays[40][2] = neutralino2amplitudenutausnutaubar; ParticleNeutralino2.Array_Decays[40][3] = 2; ParticleNeutralino2.Array_Comments[40] = "# ~chi_20 -> nu_tau ~nu_tauL*";
   ParticleNeutralino2.Array_Decays[41][0] = -PDGnutau; ParticleNeutralino2.Array_Decays[41][1] = PDGnustauL; ParticleNeutralino2.Array_Decays[41][2] = neutralino2amplitudenutaubarsnutau; ParticleNeutralino2.Array_Decays[41][3] = 2; ParticleNeutralino2.Array_Comments[41] = "# ~chi_20 -> nu_taub ~nu_tauL";
   ParticleNeutralino2.Array_Decays[42][0] = PDGWplus; ParticleNeutralino2.Array_Decays[42][1] = -PDGchargino1; ParticleNeutralino2.Array_Decays[42][2] = neutralino2amplitudeWbosonpluscharginoW1; ParticleNeutralino2.Array_Decays[42][3] = 2; ParticleNeutralino2.Array_Comments[42] = "# ~chi_20 -> W+ ~chi_1-";
   ParticleNeutralino2.Array_Decays[43][0] = PDGWplus; ParticleNeutralino2.Array_Decays[43][1] = -PDGchargino2; ParticleNeutralino2.Array_Decays[43][2] = neutralino2amplitudeWbosonpluscharginoW2; ParticleNeutralino2.Array_Decays[43][3] = 2; ParticleNeutralino2.Array_Comments[43] = "# ~chi_20 -> W+ ~chi_2-";
   ParticleNeutralino2.Array_Decays[44][0] = -PDGWplus; ParticleNeutralino2.Array_Decays[44][1] = PDGchargino1; ParticleNeutralino2.Array_Decays[44][2] = neutralino2amplitudeWbosonminuscharginoW1; ParticleNeutralino2.Array_Decays[44][3] = 2; ParticleNeutralino2.Array_Comments[44] = "# ~chi_20 -> W- ~chi_1+";
   ParticleNeutralino2.Array_Decays[45][0] = -PDGWplus; ParticleNeutralino2.Array_Decays[45][1] = PDGchargino2; ParticleNeutralino2.Array_Decays[45][2] = neutralino2amplitudeWbosonminuscharginoW2; ParticleNeutralino2.Array_Decays[45][3] = 2; ParticleNeutralino2.Array_Comments[45] = "# ~chi_20 -> W- ~chi_2+";
   ParticleNeutralino2.Array_Decays[46][0] = PDGHplus; ParticleNeutralino2.Array_Decays[46][1] = -PDGchargino1; ParticleNeutralino2.Array_Decays[46][2] = neutralino2amplitudeHpluscharginoW1; ParticleNeutralino2.Array_Decays[46][3] = 2; ParticleNeutralino2.Array_Comments[46] = "# ~chi_20 -> H+ ~chi_1-";
   ParticleNeutralino2.Array_Decays[47][0] = PDGHplus; ParticleNeutralino2.Array_Decays[47][1] = -PDGchargino2; ParticleNeutralino2.Array_Decays[47][2] = neutralino2amplitudeHpluscharginoW2; ParticleNeutralino2.Array_Decays[47][3] = 2; ParticleNeutralino2.Array_Comments[47] = "# ~chi_20 -> H+ ~chi_2-";
   ParticleNeutralino2.Array_Decays[48][0] = -PDGHplus; ParticleNeutralino2.Array_Decays[48][1] = PDGchargino1; ParticleNeutralino2.Array_Decays[48][2] = neutralino2amplitudeHminuscharginoW1; ParticleNeutralino2.Array_Decays[48][3] = 2; ParticleNeutralino2.Array_Comments[48] = "# ~chi_20 -> H- ~chi1+";
   ParticleNeutralino2.Array_Decays[49][0] = -PDGHplus; ParticleNeutralino2.Array_Decays[49][1] = PDGchargino2; ParticleNeutralino2.Array_Decays[49][2] = neutralino2amplitudeHminuscharginoW2; ParticleNeutralino2.Array_Decays[49][3] = 2; ParticleNeutralino2.Array_Comments[49] = "# ~chi_20 -> H- ~chi_2+";
   ParticleNeutralino2.Array_Decays[50][0] = PDGZboson; ParticleNeutralino2.Array_Decays[50][1] = PDGneutralino1; ParticleNeutralino2.Array_Decays[50][2] = neutralino2amplitudeZbosonneutralino1; ParticleNeutralino2.Array_Decays[50][3] = 2; ParticleNeutralino2.Array_Comments[50] = "# ~chi_20 -> Z ~chi_10";
   ParticleNeutralino2.Array_Decays[51][0] = PDGZboson; ParticleNeutralino2.Array_Decays[51][1] = PDGneutralino3; ParticleNeutralino2.Array_Decays[51][2] = neutralino2amplitudeZbosonneutralino3; ParticleNeutralino2.Array_Decays[51][3] = 2; ParticleNeutralino2.Array_Comments[51] = "# ~chi_20 -> Z ~chi_30";
   ParticleNeutralino2.Array_Decays[52][0] = PDGZboson; ParticleNeutralino2.Array_Decays[52][1] = PDGneutralino4; ParticleNeutralino2.Array_Decays[52][2] = neutralino2amplitudeZbosonneutralino4; ParticleNeutralino2.Array_Decays[52][3] = 2; ParticleNeutralino2.Array_Comments[52] = "# ~chi_20 -> Z ~chi_40";
   ParticleNeutralino2.Array_Decays[53][0] = PDGh0; ParticleNeutralino2.Array_Decays[53][1] = PDGneutralino1; ParticleNeutralino2.Array_Decays[53][2] = neutralino2amplitudehneutralino1; ParticleNeutralino2.Array_Decays[53][3] = 2; ParticleNeutralino2.Array_Comments[53] = "# ~chi_20 -> h ~chi_10";
   ParticleNeutralino2.Array_Decays[54][0] = PDGh0; ParticleNeutralino2.Array_Decays[54][1] = PDGneutralino3; ParticleNeutralino2.Array_Decays[54][2] = neutralino2amplitudehneutralino3; ParticleNeutralino2.Array_Decays[54][3] = 2; ParticleNeutralino2.Array_Comments[54] = "# ~chi_20 -> h ~chi_30";
   ParticleNeutralino2.Array_Decays[55][0] = PDGh0; ParticleNeutralino2.Array_Decays[55][1] = PDGneutralino4; ParticleNeutralino2.Array_Decays[55][2] = neutralino2amplitudehneutralino4; ParticleNeutralino2.Array_Decays[55][3] = 2; ParticleNeutralino2.Array_Comments[55] = "# ~chi_20 -> h ~chi_40";
   ParticleNeutralino2.Array_Decays[56][0] = PDGH0; ParticleNeutralino2.Array_Decays[56][1] = PDGneutralino1; ParticleNeutralino2.Array_Decays[56][2] = neutralino2amplitudeHneutralino1; ParticleNeutralino2.Array_Decays[56][3] = 2; ParticleNeutralino2.Array_Comments[56] = "# ~chi_20 -> H ~chi_10";
   ParticleNeutralino2.Array_Decays[57][0] = PDGH0; ParticleNeutralino2.Array_Decays[57][1] = PDGneutralino3; ParticleNeutralino2.Array_Decays[57][2] = neutralino2amplitudeHneutralino3; ParticleNeutralino2.Array_Decays[57][3] = 2; ParticleNeutralino2.Array_Comments[57] = "# ~chi_20 -> H ~chi_30";
   ParticleNeutralino2.Array_Decays[58][0] = PDGH0; ParticleNeutralino2.Array_Decays[58][1] = PDGneutralino4; ParticleNeutralino2.Array_Decays[58][2] = neutralino2amplitudeHneutralino4; ParticleNeutralino2.Array_Decays[58][3] = 2; ParticleNeutralino2.Array_Comments[58] = "# ~chi_20 -> H ~chi_40";
   ParticleNeutralino2.Array_Decays[59][0] = PDGA0; ParticleNeutralino2.Array_Decays[59][1] = PDGneutralino1; ParticleNeutralino2.Array_Decays[59][2] = neutralino2amplitudeAneutralino1; ParticleNeutralino2.Array_Decays[59][3] = 2; ParticleNeutralino2.Array_Comments[59] = "# ~chi_20 -> A ~chi_10";
   ParticleNeutralino2.Array_Decays[60][0] = PDGA0; ParticleNeutralino2.Array_Decays[60][1] = PDGneutralino3; ParticleNeutralino2.Array_Decays[60][2] = neutralino2amplitudeAneutralino3; ParticleNeutralino2.Array_Decays[60][3] = 2; ParticleNeutralino2.Array_Comments[60] = "# ~chi_20 -> A ~chi_30";
   ParticleNeutralino2.Array_Decays[61][0] = PDGA0; ParticleNeutralino2.Array_Decays[61][1] = PDGneutralino4; ParticleNeutralino2.Array_Decays[61][2] = neutralino2amplitudeAneutralino4; ParticleNeutralino2.Array_Decays[61][3] = 2; ParticleNeutralino2.Array_Comments[61] = "# ~chi_20 -> A ~chi_40";
   
   ParticleNeutralino2.Array_Decays[62][0] = PDGH3; ParticleNeutralino2.Array_Decays[62][1] = PDGneutralino1; ParticleNeutralino2.Array_Decays[62][2] = neutralino2amplitudeH3neutralino1; ParticleNeutralino2.Array_Decays[62][3] = 2; ParticleNeutralino2.Array_Comments[62] = "# ~chi_20 -> H3 ~chi_10";
   ParticleNeutralino2.Array_Decays[63][0] = PDGA2; ParticleNeutralino2.Array_Decays[63][1] = PDGneutralino1; ParticleNeutralino2.Array_Decays[63][2] = neutralino2amplitudeA2neutralino1; ParticleNeutralino2.Array_Decays[63][3] = 2; ParticleNeutralino2.Array_Comments[63] = "# ~chi_20 -> A2 ~chi_10";
   
   ParticleNeutralino2.Array_Decays[64][0] = PDGphoton; ParticleNeutralino2.Array_Decays[64][1] = PDGgravitino; ParticleNeutralino2.Array_Decays[64][2] = neutralino2amplitudephotongravitino; ParticleNeutralino2.Array_Decays[64][3] = 2; ParticleNeutralino2.Array_Decays[64][4]=0; ParticleNeutralino2.Array_Comments[64] = "# ~chi_20 -> gamma ~G";
   ParticleNeutralino2.Array_Decays[65][0] = PDGZboson; ParticleNeutralino2.Array_Decays[65][1] = PDGgravitino; ParticleNeutralino2.Array_Decays[65][2] = neutralino2amplitudeZgravitino; ParticleNeutralino2.Array_Decays[65][3] = 2; ParticleNeutralino2.Array_Decays[65][4]=0; ParticleNeutralino2.Array_Comments[65] = "# ~chi_20 -> Z ~G";
   ParticleNeutralino2.Array_Decays[66][0] = PDGh0; ParticleNeutralino2.Array_Decays[66][1] = PDGgravitino; ParticleNeutralino2.Array_Decays[66][2] = neutralino2amplitudehgravitino; ParticleNeutralino2.Array_Decays[66][3] = 2; ParticleNeutralino2.Array_Decays[66][4] = 0; ParticleNeutralino2.Array_Comments[66] = "# ~chi_20 -> h ~G";
   ParticleNeutralino2.Array_Decays[67][0] = PDGH0; ParticleNeutralino2.Array_Decays[67][1] = PDGgravitino; ParticleNeutralino2.Array_Decays[67][2] = neutralino2amplitudeHgravitino; ParticleNeutralino2.Array_Decays[67][3] = 2; ParticleNeutralino2.Array_Decays[67][4] = 0; ParticleNeutralino2.Array_Comments[67] = "# ~chi_20 -> H ~G";
   ParticleNeutralino2.Array_Decays[68][0] = PDGA0; ParticleNeutralino2.Array_Decays[68][1] = PDGgravitino; ParticleNeutralino2.Array_Decays[68][2] = neutralino2amplitudeAgravitino; ParticleNeutralino2.Array_Decays[68][3] = 2; ParticleNeutralino2.Array_Decays[68][4] = 0; ParticleNeutralino2.Array_Comments[68] = "# ~chi_20 -> A ~G";
   
   ParticleNeutralino2.Array_Decays[69][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[69][1] = PDGup; ParticleNeutralino2.Array_Decays[69][4] = -PDGup; ParticleNeutralino2.Array_Decays[69][2] = neutralino2amplitudeneut1uubar; ParticleNeutralino2.Array_Decays[69][3] = 3; ParticleNeutralino2.Array_Comments[69] = "# ~chi_20 -> ~chi_10 u ubar";
   ParticleNeutralino2.Array_Decays[70][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[70][1] = PDGdown; ParticleNeutralino2.Array_Decays[70][4] = -PDGdown; ParticleNeutralino2.Array_Decays[70][2] = neutralino2amplitudeneut1ddbar; ParticleNeutralino2.Array_Decays[70][3] = 3; ParticleNeutralino2.Array_Comments[70] = "# ~chi_20 -> ~chi_10 d dbar";
   ParticleNeutralino2.Array_Decays[71][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[71][1] = PDGcharm; ParticleNeutralino2.Array_Decays[71][4] = -PDGcharm; ParticleNeutralino2.Array_Decays[71][2] = neutralino2amplitudeneut1ccbar; ParticleNeutralino2.Array_Decays[71][3] = 3; ParticleNeutralino2.Array_Comments[71] = "# ~chi_20 -> ~chi_10 c cbar";
   ParticleNeutralino2.Array_Decays[72][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[72][1] = PDGstrange; ParticleNeutralino2.Array_Decays[72][4] = -PDGstrange; ParticleNeutralino2.Array_Decays[72][2] = neutralino2amplitudeneut1ssbar; ParticleNeutralino2.Array_Decays[72][3] = 3; ParticleNeutralino2.Array_Comments[72] = "# ~chi_20 -> ~chi_10 s sbar";
   ParticleNeutralino2.Array_Decays[73][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[73][1] = PDGtop; ParticleNeutralino2.Array_Decays[73][4] = -PDGtop; ParticleNeutralino2.Array_Decays[73][2] = neutralino2amplitudeneut1ttbar; ParticleNeutralino2.Array_Decays[73][3] = 3; ParticleNeutralino2.Array_Comments[73] = "# ~chi_20 -> ~chi_10 t tbar";
   ParticleNeutralino2.Array_Decays[74][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[74][1] = PDGbottom; ParticleNeutralino2.Array_Decays[74][4] = -PDGbottom; ParticleNeutralino2.Array_Decays[74][2] = neutralino2amplitudeneut1bbbar; ParticleNeutralino2.Array_Decays[74][3] = 3; ParticleNeutralino2.Array_Comments[74] = "# ~chi_20 -> ~chi_10 b bbar";
   ParticleNeutralino2.Array_Decays[75][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[75][1] = PDGelectron; ParticleNeutralino2.Array_Decays[75][4] = -PDGelectron; ParticleNeutralino2.Array_Decays[75][2] = neutralino2amplitudeneut1eebar; ParticleNeutralino2.Array_Decays[75][3] = 3; ParticleNeutralino2.Array_Comments[75] = "# ~chi_20 -> ~chi_10 e- e+";
   ParticleNeutralino2.Array_Decays[76][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[76][1] = PDGmuon; ParticleNeutralino2.Array_Decays[76][4] = -PDGmuon; ParticleNeutralino2.Array_Decays[76][2] = neutralino2amplitudeneut1mumubar; ParticleNeutralino2.Array_Decays[76][3] = 3; ParticleNeutralino2.Array_Comments[76] = "# ~chi_20 -> ~chi_10 mu- mu+";
   ParticleNeutralino2.Array_Decays[77][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[77][1] = PDGtau; ParticleNeutralino2.Array_Decays[77][4] = -PDGtau; ParticleNeutralino2.Array_Decays[77][2] = neutralino2amplitudeneut1tautaubar; ParticleNeutralino2.Array_Decays[77][3] = 3; ParticleNeutralino2.Array_Comments[77] = "# ~chi_20 -> ~chi_10 tau- tau+";
   ParticleNeutralino2.Array_Decays[78][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[78][1] = PDGnuelectron; ParticleNeutralino2.Array_Decays[78][4] = -PDGnuelectron; ParticleNeutralino2.Array_Decays[78][2] = neutralino2amplitudeneut1nuenuebar; ParticleNeutralino2.Array_Decays[78][3] = 3; ParticleNeutralino2.Array_Comments[78] = "# ~chi_20 -> ~chi_10 nue nuebar";
   ParticleNeutralino2.Array_Decays[79][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[79][1] = PDGnumuon; ParticleNeutralino2.Array_Decays[79][4] = -PDGnumuon; ParticleNeutralino2.Array_Decays[79][2] = neutralino2amplitudeneut1numunumubar; ParticleNeutralino2.Array_Decays[79][3] = 3; ParticleNeutralino2.Array_Comments[79] = "# ~chi_20 -> ~chi_10 numu numubar";
   ParticleNeutralino2.Array_Decays[80][0] = PDGneutralino1; ParticleNeutralino2.Array_Decays[80][1] = PDGnutau; ParticleNeutralino2.Array_Decays[80][4] = -PDGnutau; ParticleNeutralino2.Array_Decays[80][2] = neutralino2amplitudeneut1nutaunutaubar; ParticleNeutralino2.Array_Decays[80][3] = 3; ParticleNeutralino2.Array_Comments[80] = "# ~chi_20 -> ~chi_10 nutau nutaubar";
   
   ParticleNeutralino2.Array_Decays[81][0] = PDGchargino1; ParticleNeutralino2.Array_Decays[81][1] = PDGup; ParticleNeutralino2.Array_Decays[81][4] = -PDGdown; ParticleNeutralino2.Array_Decays[81][2] = neutralino2amplitudechargino1udbar; ParticleNeutralino2.Array_Decays[81][3] = 3; ParticleNeutralino2.Array_Comments[81] = "# ~chi_20 -> chi_1- u db";
   ParticleNeutralino2.Array_Decays[82][0] = PDGchargino1; ParticleNeutralino2.Array_Decays[82][1] = PDGcharm; ParticleNeutralino2.Array_Decays[82][4] = -PDGstrange; ParticleNeutralino2.Array_Decays[82][2] = neutralino2amplitudechargino1csbar; ParticleNeutralino2.Array_Decays[82][3] = 3; ParticleNeutralino2.Array_Comments[82] = "# ~chi_20 -> chi_1- c sb";
   ParticleNeutralino2.Array_Decays[83][0] = PDGchargino1; ParticleNeutralino2.Array_Decays[83][1] = PDGnuelectron; ParticleNeutralino2.Array_Decays[83][4] = -PDGelectron; ParticleNeutralino2.Array_Decays[83][2] = neutralino2amplitudechargino1enuebar; ParticleNeutralino2.Array_Decays[83][3] = 3; ParticleNeutralino2.Array_Comments[83] = "# ~chi_20 -> chi_1- nu_e eb";
   ParticleNeutralino2.Array_Decays[84][0] = PDGchargino1; ParticleNeutralino2.Array_Decays[84][1] = PDGnumuon; ParticleNeutralino2.Array_Decays[84][4] = -PDGmuon; ParticleNeutralino2.Array_Decays[84][2] = neutralino2amplitudechargino1munumubar; ParticleNeutralino2.Array_Decays[84][3] = 3; ParticleNeutralino2.Array_Comments[84] = "# ~chi_20 -> chi_1- nu_mu mub";
   ParticleNeutralino2.Array_Decays[85][0] = PDGchargino1; ParticleNeutralino2.Array_Decays[85][1] = PDGnutau; ParticleNeutralino2.Array_Decays[85][4] = -PDGtau; ParticleNeutralino2.Array_Decays[85][2] = neutralino2amplitudechargino1taunutaubar; ParticleNeutralino2.Array_Decays[85][3] = 3; ParticleNeutralino2.Array_Comments[85] = "# ~chi_20 -> chi_1- nu_tau taub";
   ParticleNeutralino2.Array_Decays[86][0] = PDGchargino2; ParticleNeutralino2.Array_Decays[86][1] = PDGup; ParticleNeutralino2.Array_Decays[86][4] = -PDGdown; ParticleNeutralino2.Array_Decays[86][2] = neutralino2amplitudechargino2udbar; ParticleNeutralino2.Array_Decays[86][3] = 3; ParticleNeutralino2.Array_Comments[86] = "# ~chi_20 -> chi_2- u dbar";
   ParticleNeutralino2.Array_Decays[87][0] = PDGchargino2; ParticleNeutralino2.Array_Decays[87][1] = PDGcharm; ParticleNeutralino2.Array_Decays[87][4] = -PDGstrange; ParticleNeutralino2.Array_Decays[87][2] = neutralino2amplitudechargino2csbar; ParticleNeutralino2.Array_Decays[87][3] = 3; ParticleNeutralino2.Array_Comments[87] = "# ~chi_20 -> chi_2- c sbar";
   ParticleNeutralino2.Array_Decays[88][0] = PDGchargino2; ParticleNeutralino2.Array_Decays[88][1] = PDGnuelectron; ParticleNeutralino2.Array_Decays[88][4] = -PDGelectron; ParticleNeutralino2.Array_Decays[88][2] = neutralino2amplitudechargino2enuebar; ParticleNeutralino2.Array_Decays[88][3] = 3; ParticleNeutralino2.Array_Comments[88] = "# ~chi_20 -> chi_2- nu_e eb";
   ParticleNeutralino2.Array_Decays[89][0] = PDGchargino2; ParticleNeutralino2.Array_Decays[89][1] = PDGnumuon; ParticleNeutralino2.Array_Decays[89][4] = -PDGmuon; ParticleNeutralino2.Array_Decays[89][2] = neutralino2amplitudechargino2munumubar; ParticleNeutralino2.Array_Decays[89][3] = 3; ParticleNeutralino2.Array_Comments[89] = "# ~chi_20 -> chi_2- nu_mu mub";
   ParticleNeutralino2.Array_Decays[90][0] = PDGchargino2; ParticleNeutralino2.Array_Decays[90][1] = PDGnutau; ParticleNeutralino2.Array_Decays[90][4] = -PDGtau; ParticleNeutralino2.Array_Decays[90][2] = neutralino2amplitudechargino2taunutaubar; ParticleNeutralino2.Array_Decays[90][3] = 3; ParticleNeutralino2.Array_Comments[90] = "# ~chi_20 -> chi_2- nu_tau taubar";
   
   double Neut2_No_1to2_Decays = 0;
   
   Neut2_No_1to2_Decays = ParticleNeutralino2.No_1to2_Decays + ParticleNeutralino2.No_grav_Decays + ParticleNeutralino2.No_NMSSM_Decays;
   
   for (int j = 0; j<Neut2_No_1to2_Decays; j++) {
     ParticleNeutralino2.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Neut2_No_1to2_Decays; j++) {
     ParticleNeutralino2.two_width = ParticleNeutralino2.two_width + ParticleNeutralino2.Array_Decays[j][2];
   }
   for (int j=Neut2_No_1to2_Decays; j<ParticleNeutralino2.No_of_Decays; j++) {
     ParticleNeutralino2.three_width = ParticleNeutralino2.three_width + ParticleNeutralino2.Array_Decays[j][2];
   }
   
   if ( ParticleNeutralino2.three_width != ParticleNeutralino2.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for neutralino 2 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleNeutralino2.No_of_Decays = Neut2_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleNeutralino2.total_width = ParticleNeutralino2.two_width;
     }
   else {
     ParticleNeutralino2.total_width = ParticleNeutralino2.two_width + ParticleNeutralino2.three_width;
   }
   
   if ( ParticleNeutralino2.total_width != ParticleNeutralino2.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleNeutralino2.No_of_Decays; i++) {
       //   fout << i << " " << ParticleNeutralino2.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in Neutralino2 total width \n");
     }
   
     for (int i =0; i<ParticleNeutralino2.No_of_Decays; i++) {
       ParticleNeutralino2.Array_Decays[i][5]= ParticleNeutralino2.Array_Decays[i][2]/ParticleNeutralino2.total_width;
     }
     
     if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleNeutralino2, BRTol);}
     else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleNeutralino2, BRTol);}
 }

///Neutralino3 Decays
 
 double neutralino3amplitudeuLubar=0, neutralino3amplitudeuRubar=0, neutralino3amplitudeuLbaru=0, neutralino3amplitudeuRbaru=0, neutralino3amplitudedLdbar=0, neutralino3amplitudedRdbar=0, neutralino3amplitudedLbard=0, neutralino3amplitudedRbard=0, neutralino3amplitudecLcbar=0, neutralino3amplitudecRcbar=0, neutralino3amplitudecLbarc=0, neutralino3amplitudecRbarc=0, neutralino3amplitudesLsbar=0, neutralino3amplitudesRsbar=0, neutralino3amplitudesLbars=0, neutralino3amplitudesRbars=0, neutralino3amplitudeeLebar=0, neutralino3amplitudeeRebar=0, neutralino3amplitudeeLbare=0, neutralino3amplitudeeRbare=0, neutralino3amplitudemuLmubar=0, neutralino3amplitudemuRmubar=0, neutralino3amplitudemuLbarmu=0, neutralino3amplitudemuRbarmu=0, neutralino3amplitudesnuenuebar=0, neutralino3amplitudesnuebarnue=0, neutralino3amplitudesnumunumubar=0, neutralino3amplitudesnumubarnumu=0, neutralino3amplitudetopstop1bar=0, neutralino3amplitudetopstop2bar=0, neutralino3amplitudetopbarstop1=0, neutralino3amplitudetopbarstop2=0, neutralino3amplitudebottomsbottom1bar=0, neutralino3amplitudebottomsbottom2bar=0, neutralino3amplitudebottombarsbottom1=0, neutralino3amplitudebottombarsbottom2=0, neutralino3amplitudetaustau1bar=0, neutralino3amplitudetaustau2bar=0, neutralino3amplitudetaubarstau1=0, neutralino3amplitudetaubarstau2=0, neutralino3amplitudenutausnutaubar=0, neutralino3amplitudenutaubarsnutau=0, neutralino3amplitudeWbosonpluscharginoW1=0, neutralino3amplitudeWbosonpluscharginoW2=0, neutralino3amplitudeWbosonminuscharginoW1=0, neutralino3amplitudeWbosonminuscharginoW2=0, neutralino3amplitudeHpluscharginoW1=0, neutralino3amplitudeHpluscharginoW2=0, neutralino3amplitudeHminuscharginoW1=0, neutralino3amplitudeHminuscharginoW2=0, neutralino3amplitudeZbosonneutralino1=0, neutralino3amplitudeZbosonneutralino2=0, neutralino3amplitudeZbosonneutralino4=0, neutralino3amplitudehneutralino1=0, neutralino3amplitudehneutralino2=0, neutralino3amplitudehneutralino4=0, neutralino3amplitudeHneutralino1=0, neutralino3amplitudeHneutralino2=0, neutralino3amplitudeHneutralino4=0, neutralino3amplitudeAneutralino1=0, neutralino3amplitudeAneutralino2=0, neutralino3amplitudeAneutralino4=0, neutralino3amplitudephotongravitino=0, neutralino3amplitudeZgravitino=0, neutralino3amplitudehgravitino=0, neutralino3amplitudeHgravitino=0, neutralino3amplitudeAgravitino=0;

 double neutralino3amplitudeneut1uubar=0, neutralino3amplitudeneut1ddbar=0, neutralino3amplitudeneut1ccbar=0, neutralino3amplitudeneut1ssbar=0, neutralino3amplitudeneut1ttbar=0, neutralino3amplitudeneut1bbbar=0, neutralino3amplitudeneut1eebar=0, neutralino3amplitudeneut1mumubar=0, neutralino3amplitudeneut1tautaubar=0, neutralino3amplitudeneut1nuenuebar=0, neutralino3amplitudeneut1numunumubar=0, neutralino3amplitudeneut1nutaunutaubar=0, neutralino3amplitudeneut2uubar=0, neutralino3amplitudeneut2ddbar=0, neutralino3amplitudeneut2ccbar=0, neutralino3amplitudeneut2ssbar=0, neutralino3amplitudeneut2ttbar=0, neutralino3amplitudeneut2bbbar=0, neutralino3amplitudeneut2eebar=0, neutralino3amplitudeneut2mumubar=0, neutralino3amplitudeneut2tautaubar=0, neutralino3amplitudeneut2nuenuebar=0, neutralino3amplitudeneut2numunumubar=0, neutralino3amplitudeneut2nutaunutaubar=0, neutralino3amplitudechargino1udbar=0, neutralino3amplitudechargino1csbar=0, neutralino3amplitudechargino1enuebar=0, neutralino3amplitudechargino1munumubar=0, neutralino3amplitudechargino1taunutaubar=0, neutralino3amplitudechargino2udbar=0, neutralino3amplitudechargino2csbar=0, neutralino3amplitudechargino2enuebar=0, neutralino3amplitudechargino2munumubar=0, neutralino3amplitudechargino2taunutaubar=0;

 double neutralino3amplitudeH3neutralino1 = 0, neutralino3amplitudeH3neutralino2 = 0, neutralino3amplitudeA2neutralino1 = 0, neutralino3amplitudeA2neutralino2 = 0;

 if (flagneut3 == 1) {
   if (nmssmIsIt == false) {
     neutralino3amplitudeuLubar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 3);
     neutralino3amplitudeuRubar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 3);
     neutralino3amplitudeuLbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 3); 
     neutralino3amplitudeuRbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 3);
     neutralino3amplitudedLdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 3);
     neutralino3amplitudedRdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 3);
     neutralino3amplitudedLbard = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 3);
     neutralino3amplitudedRbard = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 3);
     neutralino3amplitudecLcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 3);
     neutralino3amplitudecRcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 3);
     neutralino3amplitudecLbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 3);
     neutralino3amplitudecRbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(3), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 3);
     neutralino3amplitudesLsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), ms, md(1,2), g, gp, mixNeut, 2, 'L', 3);
     neutralino3amplitudesRsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(3), ms, md(2,2), g, gp, mixNeut, 2, 'R', 3);
     neutralino3amplitudesLbars = neutralinoamplitudedecayquarksquarkLorR (mneut(3), ms, md(1,2), g, gp, mixNeut, 2, 'L', 3);
     neutralino3amplitudesRbars = neutralinoamplitudedecayquarksquarkLorR (mneut(3), ms, md(2,2), g, gp, mixNeut, 2, 'R', 3);
     neutralino3amplitudeeLebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mel, me(1,1), g, gp, mixNeut, 'L', 3);
     neutralino3amplitudeeRebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mel, me(2,1), g, gp, mixNeut, 'R', 3);
     neutralino3amplitudeeLbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mel, me(1,1), g, gp, mixNeut, 'L', 3);
     neutralino3amplitudeeRbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mel, me(2,1), g, gp, mixNeut, 'R', 3);
     neutralino3amplitudemuLmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mmu, me(1,2), g, gp, mixNeut, 'L', 3);
     neutralino3amplitudemuRmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mmu, me(2,2), g, gp, mixNeut, 'R', 3);
     neutralino3amplitudemuLbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mmu, me(1,2), g, gp, mixNeut, 'L', 3);
     neutralino3amplitudemuRbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(3), mmu, me(2,2), g, gp, mixNeut, 'R', 3);
     neutralino3amplitudesnuenuebar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(3), 0, msnu(1), g, gp, mixNeut, 3);
     neutralino3amplitudesnuebarnue = neutralinoamplitudedecayneutrinosneutrinoL (mneut(3), 0, msnu(1), g, gp, mixNeut, 3);
     neutralino3amplitudesnumunumubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(3), 0, msnu(2), g, gp, mixNeut, 3);
     neutralino3amplitudesnumubarnumu = neutralinoamplitudedecayneutrinosneutrinoL (mneut(3), 0, msnu(2), g, gp, mixNeut, 3);
     neutralino3amplitudetopstop1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 3);
     neutralino3amplitudetopstop2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 3);
     neutralino3amplitudetopbarstop1 = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 3);
     neutralino3amplitudetopbarstop2 = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 3);
     neutralino3amplitudebottomsbottom1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 3);
     neutralino3amplitudebottomsbottom2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 3);
     neutralino3amplitudebottombarsbottom1 = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 3);
     neutralino3amplitudebottombarsbottom2 = neutralinoamplitudedecaysquark3quarkmix (mneut(3), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 3);
     neutralino3amplitudetaustau1bar = neutralinoamplitudedecaystautau (mneut(3), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 3);
     neutralino3amplitudetaustau2bar = neutralinoamplitudedecaystautau (mneut(3), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 3);
     neutralino3amplitudetaubarstau1 = neutralinoamplitudedecaystautau (mneut(3), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 3);
     neutralino3amplitudetaubarstau2 = neutralinoamplitudedecaystautau (mneut(3), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 3);
     neutralino3amplitudenutausnutaubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(3), 0, msnu(3), g, gp, mixNeut, 3);
     neutralino3amplitudenutaubarsnutau = neutralinoamplitudedecayneutrinosneutrinoL (mneut(3), 0, msnu(3), g, gp, mixNeut, 3);
     neutralino3amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(3), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 3, 1);
     neutralino3amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(3), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 3, 2);
     neutralino3amplitudeWbosonminuscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(3), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 3, 1);
     neutralino3amplitudeWbosonminuscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(3), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 3, 2);
     neutralino3amplitudeHpluscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(3), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 3, 1);
     neutralino3amplitudeHpluscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(3), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 3, 2);
     neutralino3amplitudeHminuscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(3), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 3, 1);
     neutralino3amplitudeHminuscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(3), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 3, 2);

     neutralino3amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZboson (mneut(3), polemz, mneut(1), g, gp, mixNeut, 3, 1);
     neutralino3amplitudeZbosonneutralino2 = neutralinoamplitudedecayneutralinoZboson (mneut(3), polemz, mneut(2), g, gp, mixNeut, 3, 2);
     neutralino3amplitudehneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(3), mh0(1), mneut(1), g, gp, mixNeut, alpha, 3, 1, 'h');
     neutralino3amplitudehneutralino2 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(3), mh0(1), mneut(2), g, gp, mixNeut, alpha, 3, 2, 'h');
     neutralino3amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(3), mh0(2), mneut(1), g, gp, mixNeut, alpha, 3, 1, 'H');
     neutralino3amplitudeHneutralino2 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(3), mh0(2), mneut(2), g, gp, mixNeut, alpha, 3, 2, 'H');
     neutralino3amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(3), mA0(1), mneut(1), g, gp, mixNeut, beta, 3, 1, 'A');
     neutralino3amplitudeAneutralino2 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(3), mA0(1), mneut(2), g, gp, mixNeut, beta, 3, 2, 'A');
     
     neutralino3amplitudephotongravitino = neutralinoamplitudedecayphotongravitino(mneut(3), mgravitino, MPlreduced, mixNeut, g, gp, 3, gravonoff, neutNLSP);
     neutralino3amplitudeZgravitino = neutralinoamplitudedecayZgravitino(mneut(3), polemz, mgravitino, MPlreduced, mixNeut, g, gp, beta, 3, gravonoff, neutNLSP);
     neutralino3amplitudehgravitino = neutralinoamplitudedecayphigravitino(mneut(3), mh0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 3, gravonoff, 'h', neutNLSP);
     neutralino3amplitudeHgravitino = neutralinoamplitudedecayphigravitino(mneut(3), mh0(2), mgravitino, MPlreduced, mixNeut, alpha, beta, 3, gravonoff, 'H', neutNLSP);
     neutralino3amplitudeAgravitino = neutralinoamplitudedecayphigravitino(mneut(3), mA0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 3, gravonoff, 'A', neutNLSP);
     
     neutralino3amplitudeneut1uubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), mu(1,1), mu(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mup, alphas, 0, runmw, g, gp, alpha, beta, runmu, mixNeut, 3, 1, onetothree, 'u');
     neutralino3amplitudeneut1ddbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), md(1,1), md(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mdo, alphas, 0, runmw, g, gp, alpha, beta, runmd, mixNeut, 3, 1, onetothree, 'd');
     neutralino3amplitudeneut1ccbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), mu(1,2), mu(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mc, alphas, 0, runmw, g, gp, alpha, beta, runmc, mixNeut, 3, 1, onetothree, 'u');
     neutralino3amplitudeneut1ssbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), md(1,2), md(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), ms, alphas, 0, runmw, g, gp, alpha, beta, runms, mixNeut, 3, 1, onetothree, 'd');
     neutralino3amplitudeneut1ttbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), mu(1,3), mu(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mt, alphas, thetat, runmw, g, gp, alpha, beta, runmt, mixNeut, 3, 1, onetothree, 'u');
     neutralino3amplitudeneut1bbbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), md(1,3), md(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mb, alphas, thetab, runmw, g, gp, alpha, beta, runmb, mixNeut, 3, 1, onetothree, 'd');
     neutralino3amplitudeneut1eebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), me(1,1), me(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mel, alphas, 0, runmw, g, gp, alpha, beta, runmel, mixNeut, 3, 1, onetothree, 'l');
     neutralino3amplitudeneut1mumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), me(1,2), me(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mmu, alphas, 0, runmw, g, gp, alpha, beta, runmmu, mixNeut, 3, 1, onetothree, 'l');
     neutralino3amplitudeneut1tautaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), me(1,3), me(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mtau, alphas, thetatau-PI/2, runmw, g, gp, alpha, beta, runmtau, mixNeut, 3, 1, onetothree, 'l');
     neutralino3amplitudeneut1nuenuebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), msnu(1), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 3, 1, onetothree, 'n');
     neutralino3amplitudeneut1numunumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), msnu(2), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 3, 1, onetothree, 'n');
     neutralino3amplitudeneut1nutaunutaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), msnu(3), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 3, 1, onetothree, 'n');
     neutralino3amplitudeneut2uubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), mu(1,1), mu(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mup, alphas, 0, runmw, g, gp, alpha, beta, runmu, mixNeut, 3, 2, onetothree, 'u');
     neutralino3amplitudeneut2ddbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), md(1,1), md(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mdo, alphas, 0, runmw, g, gp, alpha, beta, runmd, mixNeut, 3, 2, onetothree, 'd');
     neutralino3amplitudeneut2ccbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), mu(1,2), mu(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mc, alphas, 0, runmw, g, gp, alpha, beta, runmc, mixNeut, 3, 2, onetothree, 'u');
     neutralino3amplitudeneut2ssbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), md(1,2), md(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(2), ms, alphas, 0, runmw, g, gp, alpha, beta, runms, mixNeut, 3, 2, onetothree, 'd');
     neutralino3amplitudeneut2ttbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), mu(1,3), mu(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mt, alphas, thetat, runmw, g, gp, alpha, beta, runmt, mixNeut, 3, 2, onetothree, 'u');
     neutralino3amplitudeneut2bbbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), md(1,3), md(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mb, alphas, thetab, runmw, g, gp, alpha, beta, runmb, mixNeut, 3, 2, onetothree, 'd');
     neutralino3amplitudeneut2eebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), me(1,1), me(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mel, alphas, 0, runmw, g, gp, alpha, beta, runmel, mixNeut, 3, 2, onetothree, 'l');
     neutralino3amplitudeneut2mumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), me(1,2), me(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mmu, alphas, 0, runmw, g, gp, alpha, beta, runmmu, mixNeut, 3, 2, onetothree, 'l');
     neutralino3amplitudeneut2tautaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), me(1,3), me(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mtau, alphas, thetatau-PI/2, runmw, g, gp, alpha, beta, runmtau, mixNeut, 3, 2, onetothree, 'l');
     neutralino3amplitudeneut2nuenuebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), msnu(1), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(2), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 3, 2, onetothree, 'n');
     neutralino3amplitudeneut2numunumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), msnu(2), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(2), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 3, 2, onetothree, 'n');
     neutralino3amplitudeneut2nutaunutaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(3), msnu(3), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(2), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 3, 2, onetothree, 'n');
     
     neutralino3amplitudechargino1udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(1), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 3, 1, onetothree, 'q', 'n');
     neutralino3amplitudechargino1csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(1), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 3, 1, onetothree, 'q', 'n');
     neutralino3amplitudechargino1enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(1), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 3, 1, onetothree, 'l', 'n');
     neutralino3amplitudechargino1munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(1), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 3, 1, onetothree, 'l', 'n');
     neutralino3amplitudechargino1taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(1), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 3, 1, onetothree, 'l', 'n');
     neutralino3amplitudechargino2udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(2), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 3, 2, onetothree, 'q', 'n');
     neutralino3amplitudechargino2csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(2), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 3, 2, onetothree, 'q', 'n');
     neutralino3amplitudechargino2enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(2), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 3, 2, onetothree, 'l', 'n');
     neutralino3amplitudechargino2munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(2), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 3, 2, onetothree, 'l', 'n');
     neutralino3amplitudechargino2taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(3), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(2), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 3, 2, onetothree, 'l', 'n');
     
   }
   else if (nmssmIsIt == true){
     neutralino3amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWNMSSM (mneut(3), MCH1, polemw, g, thetaL2, thetaR2, mixNeut, 3, 1);
     neutralino3amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWNMSSM (mneut(3), MCH2, polemw, g, thetaL2, thetaR2, mixNeut, 3, 2);
     neutralino3amplitudeWbosonminuscharginoW1 = neutralino3amplitudeWbosonpluscharginoW1;
     neutralino3amplitudeWbosonminuscharginoW2 = neutralino3amplitudeWbosonpluscharginoW2;
     neutralino3amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(3), mneut(1), polemz, g, gp, mixNeut, 3, 1);
     neutralino3amplitudeZbosonneutralino2 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(3), mneut(2), polemz, g, gp, mixNeut, 3, 2);
     
     neutralino3amplitudeHpluscharginoW1 = neutralinoamplitudecharginoHpmNMSSM (mneut(3), MCH1, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 3, 1);
     neutralino3amplitudeHpluscharginoW2 = neutralinoamplitudecharginoHpmNMSSM (mneut(3), MCH2, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 3, 2);
     neutralino3amplitudeHminuscharginoW1 = neutralino3amplitudeHpluscharginoW1;
     neutralino3amplitudeHminuscharginoW2 = neutralino3amplitudeHpluscharginoW2;
     
     neutralino3amplitudehneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(3), mneut(1), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 3, 1, 1);
     neutralino3amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(3), mneut(1), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 3, 1, 2);
     neutralino3amplitudeH3neutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(3), mneut(1), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 3, 1, 3);
     neutralino3amplitudehneutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(3), mneut(2), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 3, 2, 1);
     neutralino3amplitudeHneutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(3), mneut(2), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 3, 2, 2);
     neutralino3amplitudeH3neutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(3), mneut(2), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 3, 2, 3);
     
     neutralino3amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(3), mneut(1), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 3, 1, 1);
     neutralino3amplitudeA2neutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(3), mneut(1), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 3, 1, 2);
     neutralino3amplitudeAneutralino2 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(3), mneut(2), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 3, 2, 1);
     neutralino3amplitudeA2neutralino2 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(3), mneut(2), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 3, 2, 2);
     
     neutralino3amplitudeuLubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), mu(1,1), mup, g, gp, mixNeut, 3, 'u', 'L');
     neutralino3amplitudeuRubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), mu(2,1), mup, g, gp, mixNeut, 3, 'u', 'R');
     neutralino3amplitudeuLbaru = neutralino3amplitudeuLubar;
     neutralino3amplitudeuRbaru = neutralino3amplitudeuRubar;
     neutralino3amplitudedLdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), md(1,1), mdo, g, gp, mixNeut, 3, 'd', 'L');
     neutralino3amplitudedRdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), md(2,1), mdo, g, gp, mixNeut, 3, 'd', 'R');
     neutralino3amplitudedLbard = neutralino3amplitudedLdbar;
     neutralino3amplitudedRbard = neutralino3amplitudedRdbar;
     neutralino3amplitudecLcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), mu(1,2), mc, g, gp, mixNeut, 3, 'u', 'L');
     neutralino3amplitudecRcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), mu(2,2), mc, g, gp, mixNeut, 3, 'u', 'R');
     neutralino3amplitudecLbarc = neutralino3amplitudecLcbar;
     neutralino3amplitudecRbarc = neutralino3amplitudecRcbar;
     neutralino3amplitudesLsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), md(1,2), ms, g, gp, mixNeut, 3, 'd', 'L');
     neutralino3amplitudesRsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), md(2,2), ms, g, gp, mixNeut, 3, 'd', 'R');
     neutralino3amplitudesLbars = neutralino3amplitudesLsbar;
     neutralino3amplitudesRbars = neutralino3amplitudesRsbar;
     neutralino3amplitudeeLebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), me(1,1), mel, g, gp, mixNeut, 3, 'l', 'L');
     neutralino3amplitudeeRebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), me(2,1), mel, g, gp, mixNeut, 3, 'l', 'R');
     neutralino3amplitudeeLbare = neutralino3amplitudeeLebar;
     neutralino3amplitudeeRbare = neutralino3amplitudeeRebar;
     neutralino3amplitudemuLmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), me(1,2), mmu, g, gp, mixNeut, 3, 'l', 'L');
     neutralino3amplitudemuRmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(3), me(2,2), mmu, g, gp, mixNeut, 3, 'l', 'R');
     neutralino3amplitudemuLbarmu = neutralino3amplitudemuLmubar;
     neutralino3amplitudemuRbarmu = neutralino3amplitudemuRmubar;
     
     neutralino3amplitudetopstop1bar = neutralinoamplitudestoptopNMSSM (mneut(3), mu(1,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 3, 1);
     neutralino3amplitudetopstop2bar = neutralinoamplitudestoptopNMSSM (mneut(3), mu(2,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 3, 2);
     neutralino3amplitudetopbarstop1 = neutralino3amplitudetopstop1bar;
     neutralino3amplitudetopbarstop2 = neutralino3amplitudetopstop2bar;
     neutralino3amplitudebottomsbottom1bar = neutralinoamplitudesbottombottomNMSSM (mneut(3), md(1,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 3, 1);
     neutralino3amplitudebottomsbottom2bar = neutralinoamplitudesbottombottomNMSSM (mneut(3), md(2,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 3, 2);
     neutralino3amplitudebottombarsbottom1 = neutralino3amplitudebottomsbottom1bar;
     neutralino3amplitudebottombarsbottom2 = neutralino3amplitudebottomsbottom2bar;
     
     neutralino3amplitudetaustau1bar = neutralinoamplitudestautauNMSSM (mneut(3), me(1,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 3, 1);
     neutralino3amplitudetaustau2bar = neutralinoamplitudestautauNMSSM (mneut(3), me(2,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 3, 2);
     neutralino3amplitudetaubarstau1 = neutralino3amplitudetaustau1bar;
     neutralino3amplitudetaubarstau2 = neutralino3amplitudetaustau2bar;
     
     neutralino3amplitudesnuenuebar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(3), msnu(1), 0, g, gp, mixNeut, 3);
     neutralino3amplitudesnuebarnue = neutralino3amplitudesnuenuebar;
     neutralino3amplitudesnumunumubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(3), msnu(2), 0, g, gp, mixNeut, 3);
     neutralino3amplitudesnumubarnumu = neutralino3amplitudesnumunumubar;
     neutralino3amplitudenutausnutaubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(3), msnu(3), 0, g, gp, mixNeut, 3);
     neutralino3amplitudenutaubarsnutau = neutralino3amplitudenutausnutaubar;
   }
   
   ParticleNeutralino3.Array_Decays[0][0] = -PDGup; ParticleNeutralino3.Array_Decays[0][1] = PDGsupL; ParticleNeutralino3.Array_Decays[0][2] = neutralino3amplitudeuLubar; ParticleNeutralino3.Array_Decays[0][3] = 2; ParticleNeutralino3.Array_Comments[0] = "# ~chi_30 -> ub ~u_L";
   ParticleNeutralino3.Array_Decays[1][0] = -PDGup; ParticleNeutralino3.Array_Decays[1][1] = PDGsupR; ParticleNeutralino3.Array_Decays[1][2] = neutralino3amplitudeuRubar; ParticleNeutralino3.Array_Decays[1][3] = 2; ParticleNeutralino3.Array_Comments[1] = "# ~chi_30 -> ub ~u_R";
   ParticleNeutralino3.Array_Decays[2][0] = PDGup; ParticleNeutralino3.Array_Decays[2][1] = -PDGsupL; ParticleNeutralino3.Array_Decays[2][2] = neutralino3amplitudeuLbaru; ParticleNeutralino3.Array_Decays[2][3] = 2; ParticleNeutralino3.Array_Comments[2] = "# ~chi_30 -> u ~u_L*";
   ParticleNeutralino3.Array_Decays[3][0] = PDGup; ParticleNeutralino3.Array_Decays[3][1] = -PDGsupR; ParticleNeutralino3.Array_Decays[3][2] = neutralino3amplitudeuRbaru; ParticleNeutralino3.Array_Decays[3][3] = 2; ParticleNeutralino3.Array_Comments[3] = "# ~chi_30 -> u ~u_R*";
   ParticleNeutralino3.Array_Decays[4][0] = -PDGdown; ParticleNeutralino3.Array_Decays[4][1] = PDGsdownL; ParticleNeutralino3.Array_Decays[4][2] = neutralino3amplitudedLdbar; ParticleNeutralino3.Array_Decays[4][3] = 2; ParticleNeutralino3.Array_Comments[4] = "# ~chi_30 -> db ~d_L";
   ParticleNeutralino3.Array_Decays[5][0] = -PDGdown; ParticleNeutralino3.Array_Decays[5][1] = PDGsdownR; ParticleNeutralino3.Array_Decays[5][2] = neutralino3amplitudedRdbar; ParticleNeutralino3.Array_Decays[5][3] = 2; ParticleNeutralino3.Array_Comments[5] = "# ~chi_30 -> db ~d_R";
   ParticleNeutralino3.Array_Decays[6][0] = PDGdown; ParticleNeutralino3.Array_Decays[6][1] = -PDGsdownL; ParticleNeutralino3.Array_Decays[6][2] = neutralino3amplitudedLbard; ParticleNeutralino3.Array_Decays[6][3] = 2; ParticleNeutralino3.Array_Comments[6] = "# ~chi_30 -> d ~d_L*";
   ParticleNeutralino3.Array_Decays[7][0] = PDGdown; ParticleNeutralino3.Array_Decays[7][1] = -PDGsdownR; ParticleNeutralino3.Array_Decays[7][2] = neutralino3amplitudedRbard; ParticleNeutralino3.Array_Decays[7][3] = 2; ParticleNeutralino3.Array_Comments[7] = "# ~chi_30 -> d ~d_R*";
   ParticleNeutralino3.Array_Decays[8][0] = -PDGcharm; ParticleNeutralino3.Array_Decays[8][1] = PDGscharmL; ParticleNeutralino3.Array_Decays[8][2] = neutralino3amplitudecLcbar; ParticleNeutralino3.Array_Decays[8][3] = 2; ParticleNeutralino3.Array_Comments[8] = "# ~chi_30 -> cb ~c_L";
   ParticleNeutralino3.Array_Decays[9][0] = -PDGcharm; ParticleNeutralino3.Array_Decays[9][1] = PDGscharmR; ParticleNeutralino3.Array_Decays[9][2] = neutralino3amplitudecRcbar; ParticleNeutralino3.Array_Decays[9][3] = 2; ParticleNeutralino3.Array_Comments[9] = "# ~chi_30 -> cb ~c_R";
   ParticleNeutralino3.Array_Decays[10][0] = PDGcharm; ParticleNeutralino3.Array_Decays[10][1] = -PDGscharmL; ParticleNeutralino3.Array_Decays[10][2] = neutralino3amplitudecLbarc; ParticleNeutralino3.Array_Decays[10][3] = 2; ParticleNeutralino3.Array_Comments[10] = "# ~chi_30 -> c ~c_L*"; 
   ParticleNeutralino3.Array_Decays[11][0] = PDGcharm; ParticleNeutralino3.Array_Decays[11][1] = -PDGscharmR; ParticleNeutralino3.Array_Decays[11][2] = neutralino3amplitudecRbarc; ParticleNeutralino3.Array_Decays[11][3] = 2; ParticleNeutralino3.Array_Comments[11] = "# ~chi_30 -> c ~c_R*";
   ParticleNeutralino3.Array_Decays[12][0] = -PDGstrange; ParticleNeutralino3.Array_Decays[12][1] = PDGsstrangeL; ParticleNeutralino3.Array_Decays[12][2] = neutralino3amplitudesLsbar; ParticleNeutralino3.Array_Decays[12][3] = 2; ParticleNeutralino3.Array_Comments[12] = "# ~chi_30 -> sb ~s_L";
   ParticleNeutralino3.Array_Decays[13][0] = -PDGstrange; ParticleNeutralino3.Array_Decays[13][1] = PDGsstrangeR; ParticleNeutralino3.Array_Decays[13][2] = neutralino3amplitudesRsbar; ParticleNeutralino3.Array_Decays[13][3] = 2; ParticleNeutralino3.Array_Comments[13] = "# ~chi_30 -> sb ~s_R";
   ParticleNeutralino3.Array_Decays[14][0] = PDGstrange; ParticleNeutralino3.Array_Decays[14][1] = -PDGsstrangeL; ParticleNeutralino3.Array_Decays[14][2] = neutralino3amplitudesLbars; ParticleNeutralino3.Array_Decays[14][3] = 2; ParticleNeutralino3.Array_Comments[14] = "# ~chi_30 -> s ~s_L*";
   ParticleNeutralino3.Array_Decays[15][0] = PDGstrange; ParticleNeutralino3.Array_Decays[15][1] = -PDGsstrangeR; ParticleNeutralino3.Array_Decays[15][2] = neutralino3amplitudesRbars; ParticleNeutralino3.Array_Decays[15][3] = 2; ParticleNeutralino3.Array_Comments[15] = "# ~chi_30 -> s ~s_R*";
   ParticleNeutralino3.Array_Decays[16][0] = -PDGelectron; ParticleNeutralino3.Array_Decays[16][1] = PDGselectronL; ParticleNeutralino3.Array_Decays[16][2] = neutralino3amplitudeeLebar; ParticleNeutralino3.Array_Decays[16][3] = 2; ParticleNeutralino3.Array_Comments[16] = "# ~chi_30 -> e+ ~e_L-";
   ParticleNeutralino3.Array_Decays[17][0] = -PDGelectron; ParticleNeutralino3.Array_Decays[17][1] = PDGselectronR; ParticleNeutralino3.Array_Decays[17][2] = neutralino3amplitudeeRebar; ParticleNeutralino3.Array_Decays[17][3] = 2; ParticleNeutralino3.Array_Comments[17] = "# ~chi_30 -> e+ ~e_R-";
   ParticleNeutralino3.Array_Decays[18][0] = PDGelectron; ParticleNeutralino3.Array_Decays[18][1] = -PDGselectronL; ParticleNeutralino3.Array_Decays[18][2] = neutralino3amplitudeeLbare; ParticleNeutralino3.Array_Decays[18][3] = 2; ParticleNeutralino3.Array_Comments[18] = "# ~chi_30 -> e- ~e_L+";
   ParticleNeutralino3.Array_Decays[19][0] = PDGelectron; ParticleNeutralino3.Array_Decays[19][1] = -PDGselectronR; ParticleNeutralino3.Array_Decays[19][2] = neutralino3amplitudeeRbare; ParticleNeutralino3.Array_Decays[19][3] = 2; ParticleNeutralino3.Array_Comments[19] = "# ~chi_30 -> e- ~e_R+";   
   ParticleNeutralino3.Array_Decays[20][0] = -PDGmuon; ParticleNeutralino3.Array_Decays[20][1] = PDGsmuonL; ParticleNeutralino3.Array_Decays[20][2] = neutralino3amplitudemuLmubar; ParticleNeutralino3.Array_Decays[20][3] = 2; ParticleNeutralino3.Array_Comments[20] = "# ~chi_30 -> mu+ ~mu_L-";
   ParticleNeutralino3.Array_Decays[21][0] = -PDGmuon; ParticleNeutralino3.Array_Decays[21][1] = PDGsmuonR; ParticleNeutralino3.Array_Decays[21][2] = neutralino3amplitudemuRmubar; ParticleNeutralino3.Array_Decays[21][3] = 2; ParticleNeutralino3.Array_Comments[21] = "# ~chi_30 -> mu+ ~mu_R-";
   ParticleNeutralino3.Array_Decays[22][0] = PDGmuon; ParticleNeutralino3.Array_Decays[22][1] = -PDGsmuonL; ParticleNeutralino3.Array_Decays[22][2] = neutralino3amplitudemuLbarmu; ParticleNeutralino3.Array_Decays[22][3] = 2; ParticleNeutralino3.Array_Comments[22] = "# ~chi_30 -> mu- ~mu_L+";
   ParticleNeutralino3.Array_Decays[23][0] = PDGmuon; ParticleNeutralino3.Array_Decays[23][1] = -PDGsmuonR; ParticleNeutralino3.Array_Decays[23][2] = neutralino3amplitudemuRbarmu; ParticleNeutralino3.Array_Decays[23][3] = 2; ParticleNeutralino3.Array_Comments[23] = "# ~chi_30 -> mu- ~mu_R+";
   ParticleNeutralino3.Array_Decays[24][0] = PDGnuelectron; ParticleNeutralino3.Array_Decays[24][1] = -PDGnuselectronL; ParticleNeutralino3.Array_Decays[24][2] = neutralino3amplitudesnuebarnue; ParticleNeutralino3.Array_Decays[24][3] = 2; ParticleNeutralino3.Array_Comments[24] = "# ~chi_30 -> nu_e ~nu_eL*";
   ParticleNeutralino3.Array_Decays[25][0] = -PDGnuelectron; ParticleNeutralino3.Array_Decays[25][1] = PDGnuselectronL; ParticleNeutralino3.Array_Decays[25][2] = neutralino3amplitudesnuenuebar; ParticleNeutralino3.Array_Decays[25][3] = 2; ParticleNeutralino3.Array_Comments[25] = "# ~chi_30 -> nu_eb ~nu_eL";
   ParticleNeutralino3.Array_Decays[26][0] = PDGnumuon; ParticleNeutralino3.Array_Decays[26][1] = -PDGnusmuonL; ParticleNeutralino3.Array_Decays[26][2] = neutralino3amplitudesnumubarnumu; ParticleNeutralino3.Array_Decays[26][3] = 2; ParticleNeutralino3.Array_Comments[26] = "# ~chi_30 -> nu_mu ~nu_muL*";
   ParticleNeutralino3.Array_Decays[27][0] = -PDGnumuon; ParticleNeutralino3.Array_Decays[27][1] = PDGnusmuonL; ParticleNeutralino3.Array_Decays[27][2] = neutralino3amplitudesnumunumubar; ParticleNeutralino3.Array_Decays[27][3] = 2; ParticleNeutralino3.Array_Comments[27] = "# ~chi_30 -> nu_mub ~nu_muL";
   ParticleNeutralino3.Array_Decays[28][0] = PDGtop; ParticleNeutralino3.Array_Decays[28][1] = -PDGstop1; ParticleNeutralino3.Array_Decays[28][2] = neutralino3amplitudetopstop1bar; ParticleNeutralino3.Array_Decays[28][3] = 2; ParticleNeutralino3.Array_Comments[28] = "# ~chi_30 -> t ~t_1*";
   ParticleNeutralino3.Array_Decays[29][0] = PDGtop; ParticleNeutralino3.Array_Decays[29][1] = -PDGstop2; ParticleNeutralino3.Array_Decays[29][2] = neutralino3amplitudetopstop2bar; ParticleNeutralino3.Array_Decays[29][3] = 2; ParticleNeutralino3.Array_Comments[29] = "# ~chi_30 -> t ~t_2*";
   ParticleNeutralino3.Array_Decays[30][0] = -PDGtop; ParticleNeutralino3.Array_Decays[30][1] = PDGstop1; ParticleNeutralino3.Array_Decays[30][2] = neutralino3amplitudetopbarstop1; ParticleNeutralino3.Array_Decays[30][3] = 2; ParticleNeutralino3.Array_Comments[30] = "# ~chi_30 -> tb ~t_1";
   ParticleNeutralino3.Array_Decays[31][0] = -PDGtop; ParticleNeutralino3.Array_Decays[31][1] = PDGstop2; ParticleNeutralino3.Array_Decays[31][2] = neutralino3amplitudetopbarstop2; ParticleNeutralino3.Array_Decays[31][3] = 2; ParticleNeutralino3.Array_Comments[31] = "# ~chi_30 -> tb ~t_2";
   ParticleNeutralino3.Array_Decays[32][0] = PDGbottom; ParticleNeutralino3.Array_Decays[32][1] = -PDGsbottom1; ParticleNeutralino3.Array_Decays[32][2] = neutralino3amplitudebottomsbottom1bar; ParticleNeutralino3.Array_Decays[32][3] = 2; ParticleNeutralino3.Array_Comments[32] = "# ~chi_30 -> b ~b_1*";
   ParticleNeutralino3.Array_Decays[33][0] = PDGbottom; ParticleNeutralino3.Array_Decays[33][1] = -PDGsbottom2; ParticleNeutralino3.Array_Decays[33][2] = neutralino3amplitudebottomsbottom2bar; ParticleNeutralino3.Array_Decays[33][3] = 2; ParticleNeutralino3.Array_Comments[33] = "# ~chi_30 -> b ~b_2*";
   ParticleNeutralino3.Array_Decays[34][0] = -PDGbottom; ParticleNeutralino3.Array_Decays[34][1] = PDGsbottom1; ParticleNeutralino3.Array_Decays[34][2] = neutralino3amplitudebottombarsbottom1; ParticleNeutralino3.Array_Decays[34][3] = 2; ParticleNeutralino3.Array_Comments[34] = "# ~chi_30 -> bb ~b_1";
   ParticleNeutralino3.Array_Decays[35][0] = -PDGbottom; ParticleNeutralino3.Array_Decays[35][1] = PDGsbottom2; ParticleNeutralino3.Array_Decays[35][2] = neutralino3amplitudebottombarsbottom2; ParticleNeutralino3.Array_Decays[35][3] = 2; ParticleNeutralino3.Array_Comments[35] = "# ~chi_30 -> bb ~b_2";
   ParticleNeutralino3.Array_Decays[36][0] = -PDGstau1; ParticleNeutralino3.Array_Decays[36][1] = PDGtau; ParticleNeutralino3.Array_Decays[36][2] = neutralino3amplitudetaustau1bar; ParticleNeutralino3.Array_Decays[36][3] = 2; ParticleNeutralino3.Array_Comments[36] = "# ~chi_30 -> tau- ~tau_1+";
   ParticleNeutralino3.Array_Decays[37][0] = -PDGstau2; ParticleNeutralino3.Array_Decays[37][1] = PDGtau; ParticleNeutralino3.Array_Decays[37][2] = neutralino3amplitudetaustau2bar; ParticleNeutralino3.Array_Decays[37][3] = 2; ParticleNeutralino3.Array_Comments[37] = "# ~chi_30 -> tau- ~tau_2+";
   ParticleNeutralino3.Array_Decays[38][0] = PDGstau1; ParticleNeutralino3.Array_Decays[38][1] = -PDGtau; ParticleNeutralino3.Array_Decays[38][2] = neutralino3amplitudetaubarstau1; ParticleNeutralino3.Array_Decays[38][3] = 2; ParticleNeutralino3.Array_Comments[38] = "# ~chi_30 -> tau+ ~tau_1-";
   ParticleNeutralino3.Array_Decays[39][0] = PDGstau2; ParticleNeutralino3.Array_Decays[39][1] = -PDGtau; ParticleNeutralino3.Array_Decays[39][2] = neutralino3amplitudetaubarstau2; ParticleNeutralino3.Array_Decays[39][3] = 2; ParticleNeutralino3.Array_Comments[39] = "# ~chi_30 -> tau+ ~tau_2-"; 
   ParticleNeutralino3.Array_Decays[40][0] = PDGnutau; ParticleNeutralino3.Array_Decays[40][1] = -PDGnustauL; ParticleNeutralino3.Array_Decays[40][2] = neutralino3amplitudenutausnutaubar; ParticleNeutralino3.Array_Decays[40][3] = 2; ParticleNeutralino3.Array_Comments[40] = "# ~chi_30 -> nu_tau ~nu_tauL*";
   ParticleNeutralino3.Array_Decays[41][0] = -PDGnutau; ParticleNeutralino3.Array_Decays[41][1] = PDGnustauL; ParticleNeutralino3.Array_Decays[41][2] = neutralino3amplitudenutaubarsnutau; ParticleNeutralino3.Array_Decays[41][3] = 2; ParticleNeutralino3.Array_Comments[41] = "# ~chi_30 -> nu_taub ~nu_tauL";
   ParticleNeutralino3.Array_Decays[42][0] = PDGWplus; ParticleNeutralino3.Array_Decays[42][1] = -PDGchargino1; ParticleNeutralino3.Array_Decays[42][2] = neutralino3amplitudeWbosonpluscharginoW1; ParticleNeutralino3.Array_Decays[42][3] = 2; ParticleNeutralino3.Array_Comments[42] = "# ~chi_30 -> W+ ~chi_1-";
   ParticleNeutralino3.Array_Decays[43][0] = PDGWplus; ParticleNeutralino3.Array_Decays[43][1] = -PDGchargino2; ParticleNeutralino3.Array_Decays[43][2] = neutralino3amplitudeWbosonpluscharginoW2; ParticleNeutralino3.Array_Decays[43][3] = 2; ParticleNeutralino3.Array_Comments[43] = "# ~chi_30 -> W+ ~chi_2-";
   ParticleNeutralino3.Array_Decays[44][0] = -PDGWplus; ParticleNeutralino3.Array_Decays[44][1] = PDGchargino1; ParticleNeutralino3.Array_Decays[44][2] = neutralino3amplitudeWbosonminuscharginoW1; ParticleNeutralino3.Array_Decays[44][3] = 2; ParticleNeutralino3.Array_Comments[44] = "# ~chi_30 -> W- ~chi_1+";
   ParticleNeutralino3.Array_Decays[45][0] = -PDGWplus; ParticleNeutralino3.Array_Decays[45][1] = PDGchargino2; ParticleNeutralino3.Array_Decays[45][2] = neutralino3amplitudeWbosonminuscharginoW2; ParticleNeutralino3.Array_Decays[45][3] = 2; ParticleNeutralino3.Array_Comments[45] = "# ~chi_30 -> W- ~chi_2+";
   ParticleNeutralino3.Array_Decays[46][0] = PDGHplus; ParticleNeutralino3.Array_Decays[46][1] = -PDGchargino1; ParticleNeutralino3.Array_Decays[46][2] = neutralino3amplitudeHpluscharginoW1; ParticleNeutralino3.Array_Decays[46][3] = 2; ParticleNeutralino3.Array_Comments[46] = "# ~chi_30 -> H+ ~chi_1-";
   ParticleNeutralino3.Array_Decays[47][0] = PDGHplus; ParticleNeutralino3.Array_Decays[47][1] = -PDGchargino2; ParticleNeutralino3.Array_Decays[47][2] = neutralino3amplitudeHpluscharginoW2; ParticleNeutralino3.Array_Decays[47][3] = 2; ParticleNeutralino3.Array_Comments[47] = "# ~chi_30 -> H+ ~chi_2-";
   ParticleNeutralino3.Array_Decays[48][0] = -PDGHplus; ParticleNeutralino3.Array_Decays[48][1] = PDGchargino1; ParticleNeutralino3.Array_Decays[48][2] = neutralino3amplitudeHminuscharginoW1; ParticleNeutralino3.Array_Decays[48][3] = 2; ParticleNeutralino3.Array_Comments[48] = "# ~chi_30 -> H- ~chi_1+";
   ParticleNeutralino3.Array_Decays[49][0] = -PDGHplus; ParticleNeutralino3.Array_Decays[49][1] = PDGchargino2; ParticleNeutralino3.Array_Decays[49][2] = neutralino3amplitudeHminuscharginoW2; ParticleNeutralino3.Array_Decays[49][3] = 2; ParticleNeutralino3.Array_Comments[49] = "# ~chi_30 -> H- ~chi_2+";
   ParticleNeutralino3.Array_Decays[50][0] = PDGZboson; ParticleNeutralino3.Array_Decays[50][1] = PDGneutralino1; ParticleNeutralino3.Array_Decays[50][2] = neutralino3amplitudeZbosonneutralino1; ParticleNeutralino3.Array_Decays[50][3] = 2; ParticleNeutralino3.Array_Comments[50] = "# ~chi_30 -> Z ~chi_10";
   ParticleNeutralino3.Array_Decays[51][0] = PDGZboson; ParticleNeutralino3.Array_Decays[51][1] = PDGneutralino2; ParticleNeutralino3.Array_Decays[51][2] = neutralino3amplitudeZbosonneutralino2; ParticleNeutralino3.Array_Decays[51][3] = 2; ParticleNeutralino3.Array_Comments[51] = "# ~chi_30 -> Z ~chi_20";
   ParticleNeutralino3.Array_Decays[52][0] = PDGZboson; ParticleNeutralino3.Array_Decays[52][1] = PDGneutralino4; ParticleNeutralino3.Array_Decays[52][2] = neutralino3amplitudeZbosonneutralino4; ParticleNeutralino3.Array_Decays[52][3] = 2; ParticleNeutralino3.Array_Comments[52] = "# ~chi_30 -> Z ~chi_40";
   ParticleNeutralino3.Array_Decays[53][0] = PDGh0; ParticleNeutralino3.Array_Decays[53][1] = PDGneutralino1; ParticleNeutralino3.Array_Decays[53][2] = neutralino3amplitudehneutralino1; ParticleNeutralino3.Array_Decays[53][3] = 2; ParticleNeutralino3.Array_Comments[53] = "# ~chi_30 -> h ~chi_10";
   ParticleNeutralino3.Array_Decays[54][0] = PDGh0; ParticleNeutralino3.Array_Decays[54][1] = PDGneutralino2; ParticleNeutralino3.Array_Decays[54][2] = neutralino3amplitudehneutralino2; ParticleNeutralino3.Array_Decays[54][3] = 2; ParticleNeutralino3.Array_Comments[54] = "# ~chi_30 -> h ~chi_20";
   ParticleNeutralino3.Array_Decays[55][0] = PDGh0; ParticleNeutralino3.Array_Decays[55][1] = PDGneutralino4; ParticleNeutralino3.Array_Decays[55][2] = neutralino3amplitudehneutralino4; ParticleNeutralino3.Array_Decays[55][3] = 2; ParticleNeutralino3.Array_Comments[55] = "# ~chi_30 -> h ~chi_40";
   ParticleNeutralino3.Array_Decays[56][0] = PDGH0; ParticleNeutralino3.Array_Decays[56][1] = PDGneutralino1; ParticleNeutralino3.Array_Decays[56][2] = neutralino3amplitudeHneutralino1; ParticleNeutralino3.Array_Decays[56][3] = 2; ParticleNeutralino3.Array_Comments[56] = "# ~chi_30 -> H ~chi_10";
   ParticleNeutralino3.Array_Decays[57][0] = PDGH0; ParticleNeutralino3.Array_Decays[57][1] = PDGneutralino2; ParticleNeutralino3.Array_Decays[57][2] = neutralino3amplitudeHneutralino2; ParticleNeutralino3.Array_Decays[57][3] = 2; ParticleNeutralino3.Array_Comments[57] = "# ~chi_30 -> H ~chi_20";
   ParticleNeutralino3.Array_Decays[58][0] = PDGH0; ParticleNeutralino3.Array_Decays[58][1] = PDGneutralino4; ParticleNeutralino3.Array_Decays[58][2] = neutralino3amplitudeHneutralino4; ParticleNeutralino3.Array_Decays[58][3] = 2; ParticleNeutralino3.Array_Comments[58] = "# ~chi_30 -> H ~chi_40";
   ParticleNeutralino3.Array_Decays[59][0] = PDGA0; ParticleNeutralino3.Array_Decays[59][1] = PDGneutralino1; ParticleNeutralino3.Array_Decays[59][2] = neutralino3amplitudeAneutralino1; ParticleNeutralino3.Array_Decays[59][3] = 2; ParticleNeutralino3.Array_Comments[59] = "# ~chi_30 -> A ~chi_10";
   ParticleNeutralino3.Array_Decays[60][0] = PDGA0; ParticleNeutralino3.Array_Decays[60][1] = PDGneutralino2; ParticleNeutralino3.Array_Decays[60][2] = neutralino3amplitudeAneutralino2; ParticleNeutralino3.Array_Decays[60][3] = 2; ParticleNeutralino3.Array_Comments[60] = "# ~chi_30 -> A ~chi_20";
   ParticleNeutralino3.Array_Decays[61][0] = PDGA0; ParticleNeutralino3.Array_Decays[61][1] = PDGneutralino4; ParticleNeutralino3.Array_Decays[61][2] = neutralino3amplitudeAneutralino4; ParticleNeutralino3.Array_Decays[61][3] = 2; ParticleNeutralino3.Array_Comments[61] = "# ~chi_30 -> A ~chi_40";
   
   ParticleNeutralino3.Array_Decays[62][0] = PDGH3; ParticleNeutralino3.Array_Decays[62][1] = PDGneutralino1; ParticleNeutralino3.Array_Decays[62][2] = neutralino3amplitudeH3neutralino1; ParticleNeutralino3.Array_Decays[62][3] = 2; ParticleNeutralino3.Array_Comments[62] = "# ~chi_30 -> H3 ~chi_10";
   ParticleNeutralino3.Array_Decays[63][0] = PDGH3; ParticleNeutralino3.Array_Decays[63][1] = PDGneutralino2; ParticleNeutralino3.Array_Decays[63][2] = neutralino3amplitudeH3neutralino2; ParticleNeutralino3.Array_Decays[63][3] = 2; ParticleNeutralino3.Array_Comments[63] = "# ~chi_30 -> H3 ~chi_20";
   ParticleNeutralino3.Array_Decays[64][0] = PDGA2; ParticleNeutralino3.Array_Decays[64][1] = PDGneutralino1; ParticleNeutralino3.Array_Decays[64][2] = neutralino3amplitudeA2neutralino1; ParticleNeutralino3.Array_Decays[64][3] = 2; ParticleNeutralino3.Array_Comments[64] = "# ~chi_30 -> A2 ~chi_10";
   ParticleNeutralino3.Array_Decays[65][0] = PDGA2; ParticleNeutralino3.Array_Decays[65][1] = PDGneutralino2; ParticleNeutralino3.Array_Decays[65][2] = neutralino3amplitudeA2neutralino2; ParticleNeutralino3.Array_Decays[65][3] = 2; ParticleNeutralino3.Array_Comments[65] = "# ~chi_30 -> A2 ~chi_20";
   
   ParticleNeutralino3.Array_Decays[66][0] = PDGphoton; ParticleNeutralino3.Array_Decays[66][1] = PDGgravitino; ParticleNeutralino3.Array_Decays[66][2] = neutralino3amplitudephotongravitino; ParticleNeutralino3.Array_Decays[66][3] = 2; ParticleNeutralino3.Array_Comments[66] = "# ~chi_30 -> gamma ~G";
   ParticleNeutralino3.Array_Decays[67][0] = PDGZboson; ParticleNeutralino3.Array_Decays[67][1] = PDGgravitino; ParticleNeutralino3.Array_Decays[67][2] = neutralino3amplitudeZgravitino; ParticleNeutralino3.Array_Decays[67][3] = 2; ParticleNeutralino3.Array_Comments[67] = "# ~chi_30 -> Z ~G";
   ParticleNeutralino3.Array_Decays[68][0] = PDGh0; ParticleNeutralino3.Array_Decays[68][1] = PDGgravitino; ParticleNeutralino3.Array_Decays[68][2] = neutralino3amplitudehgravitino; ParticleNeutralino3.Array_Decays[68][3] = 2; ParticleNeutralino3.Array_Comments[68] = "# ~chi_30 -> h ~G";
   ParticleNeutralino3.Array_Decays[69][0] = PDGH0; ParticleNeutralino3.Array_Decays[69][1] = PDGgravitino; ParticleNeutralino3.Array_Decays[69][2] = neutralino3amplitudeHgravitino; ParticleNeutralino3.Array_Decays[69][3] = 2; ParticleNeutralino3.Array_Comments[69] = "# ~chi_30 -> H ~G";
   ParticleNeutralino3.Array_Decays[70][0] = PDGA0; ParticleNeutralino3.Array_Decays[70][1] = PDGgravitino; ParticleNeutralino3.Array_Decays[70][2] = neutralino3amplitudeAgravitino; ParticleNeutralino1.Array_Decays[70][3] = 2; ParticleNeutralino3.Array_Comments[70] = "# ~chi_30 -> A ~G";
   
   ParticleNeutralino3.Array_Decays[71][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[71][1] = PDGup; ParticleNeutralino3.Array_Decays[71][4] = -PDGup; ParticleNeutralino3.Array_Decays[71][2] = neutralino3amplitudeneut1uubar; ParticleNeutralino3.Array_Decays[71][3] = 3; ParticleNeutralino3.Array_Comments[71] = "# ~chi_30 -> ~chi_10 u ubar";
   ParticleNeutralino3.Array_Decays[72][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[72][1] = PDGdown; ParticleNeutralino3.Array_Decays[72][4] = -PDGdown; ParticleNeutralino3.Array_Decays[72][2] = neutralino3amplitudeneut1ddbar; ParticleNeutralino3.Array_Decays[72][3] = 3; ParticleNeutralino3.Array_Comments[72] = "# ~chi_30 -> ~chi_10 d dbar";
   ParticleNeutralino3.Array_Decays[73][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[73][1] = PDGcharm; ParticleNeutralino3.Array_Decays[73][4] = -PDGcharm; ParticleNeutralino3.Array_Decays[73][2] = neutralino3amplitudeneut1ccbar; ParticleNeutralino3.Array_Decays[73][3] = 3; ParticleNeutralino3.Array_Comments[73] = "# ~chi_30 -> ~chi_10 c cbar";
   ParticleNeutralino3.Array_Decays[74][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[74][1] = PDGstrange; ParticleNeutralino3.Array_Decays[74][4] = -PDGstrange; ParticleNeutralino3.Array_Decays[74][2] = neutralino3amplitudeneut1ssbar; ParticleNeutralino3.Array_Decays[74][3] = 3; ParticleNeutralino3.Array_Comments[74] = "# ~chi_30 -> ~chi_10 s sbar";
   ParticleNeutralino3.Array_Decays[75][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[75][1] = PDGtop; ParticleNeutralino3.Array_Decays[75][4] = -PDGtop; ParticleNeutralino3.Array_Decays[75][2] = neutralino3amplitudeneut1ttbar; ParticleNeutralino3.Array_Decays[75][3] = 3; ParticleNeutralino3.Array_Comments[75] = "# ~chi_30 -> ~chi_10 t tbar";
   ParticleNeutralino3.Array_Decays[76][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[76][1] = PDGbottom; ParticleNeutralino3.Array_Decays[76][4] = -PDGbottom; ParticleNeutralino3.Array_Decays[76][2] = neutralino3amplitudeneut1bbbar; ParticleNeutralino3.Array_Decays[76][3] = 3; ParticleNeutralino3.Array_Comments[76] = "# ~chi_30 -> ~chi_10 b bbar";
   ParticleNeutralino3.Array_Decays[77][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[77][1] = PDGelectron; ParticleNeutralino3.Array_Decays[77][4] = -PDGelectron; ParticleNeutralino3.Array_Decays[77][2] = neutralino3amplitudeneut1eebar; ParticleNeutralino3.Array_Decays[77][3] = 3; ParticleNeutralino3.Array_Comments[77] = "# ~chi_30 -> ~chi_10 e- e+";
   ParticleNeutralino3.Array_Decays[78][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[78][1] = PDGmuon; ParticleNeutralino3.Array_Decays[78][4] = -PDGmuon; ParticleNeutralino3.Array_Decays[78][2] = neutralino3amplitudeneut1mumubar; ParticleNeutralino3.Array_Decays[78][3] = 3; ParticleNeutralino3.Array_Comments[78] = "# ~chi_30 -> ~chi_10 mu- mu+";
   ParticleNeutralino3.Array_Decays[79][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[79][1] = PDGtau; ParticleNeutralino3.Array_Decays[79][4] = -PDGtau; ParticleNeutralino3.Array_Decays[79][2] = neutralino3amplitudeneut1tautaubar; ParticleNeutralino3.Array_Decays[79][3] = 3; ParticleNeutralino3.Array_Comments[79] = "# ~chi_30 -> ~chi_10 tau- tau+";
   ParticleNeutralino3.Array_Decays[80][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[80][1] = PDGnuelectron; ParticleNeutralino3.Array_Decays[80][4] = -PDGnuelectron; ParticleNeutralino3.Array_Decays[80][2] = neutralino3amplitudeneut1nuenuebar; ParticleNeutralino3.Array_Decays[80][3] = 3; ParticleNeutralino3.Array_Comments[80] = "# ~chi_30 -> ~chi_10 nue nuebar";
   ParticleNeutralino3.Array_Decays[81][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[81][1] = PDGnumuon; ParticleNeutralino3.Array_Decays[81][4] = -PDGnumuon; ParticleNeutralino3.Array_Decays[81][2] = neutralino3amplitudeneut1numunumubar; ParticleNeutralino3.Array_Decays[81][3] = 3; ParticleNeutralino3.Array_Comments[81] = "# ~chi_30 -> ~chi_10 numu numubar";
   ParticleNeutralino3.Array_Decays[82][0] = PDGneutralino1; ParticleNeutralino3.Array_Decays[82][1] = PDGnutau; ParticleNeutralino3.Array_Decays[82][4] = -PDGnutau; ParticleNeutralino3.Array_Decays[82][2] = neutralino3amplitudeneut1nutaunutaubar; ParticleNeutralino3.Array_Decays[82][3] = 3; ParticleNeutralino3.Array_Comments[82] = "# ~chi_30 -> ~chi_10 nutau nutaubar";
   ParticleNeutralino3.Array_Decays[83][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[83][1] = PDGup; ParticleNeutralino3.Array_Decays[83][4] = -PDGup; ParticleNeutralino3.Array_Decays[83][2] = neutralino3amplitudeneut2uubar; ParticleNeutralino3.Array_Decays[83][3] = 3; ParticleNeutralino3.Array_Comments[83] = "# ~chi_30 -> ~chi_20 u ubar";
   ParticleNeutralino3.Array_Decays[84][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[84][1] = PDGdown; ParticleNeutralino3.Array_Decays[84][4] = -PDGdown; ParticleNeutralino3.Array_Decays[84][2] = neutralino3amplitudeneut2ddbar; ParticleNeutralino3.Array_Decays[84][3] = 3; ParticleNeutralino3.Array_Comments[84] = "# ~chi_30 -> ~chi_20 d dbar";
   ParticleNeutralino3.Array_Decays[85][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[85][1] = PDGcharm; ParticleNeutralino3.Array_Decays[85][4] = -PDGcharm; ParticleNeutralino3.Array_Decays[85][2] = neutralino3amplitudeneut2ccbar; ParticleNeutralino3.Array_Decays[85][3] = 3; ParticleNeutralino3.Array_Comments[85] = "# ~chi_30 -> ~chi_20 c cbar";
   ParticleNeutralino3.Array_Decays[86][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[86][1] = PDGstrange; ParticleNeutralino3.Array_Decays[86][4] = -PDGstrange; ParticleNeutralino3.Array_Decays[86][2] = neutralino3amplitudeneut2ssbar; ParticleNeutralino3.Array_Decays[86][3] = 3; ParticleNeutralino3.Array_Comments[86] = "# ~chi_30 -> ~chi_20 s sbar";
   ParticleNeutralino3.Array_Decays[87][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[87][1] = PDGtop; ParticleNeutralino3.Array_Decays[87][4] = -PDGtop; ParticleNeutralino3.Array_Decays[87][2] = neutralino3amplitudeneut2ttbar; ParticleNeutralino3.Array_Decays[87][3] = 3; ParticleNeutralino3.Array_Comments[87] = "# ~chi_30 -> ~chi_20 t tbar";
   ParticleNeutralino3.Array_Decays[88][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[88][1] = PDGbottom; ParticleNeutralino3.Array_Decays[88][4] = -PDGbottom; ParticleNeutralino3.Array_Decays[88][2] = neutralino3amplitudeneut2bbbar; ParticleNeutralino3.Array_Decays[88][3] = 3; ParticleNeutralino3.Array_Comments[88] = "# ~chi_30 -> ~chi_20 b bbar";
   ParticleNeutralino3.Array_Decays[89][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[89][1] = PDGelectron; ParticleNeutralino3.Array_Decays[89][4] = -PDGelectron; ParticleNeutralino3.Array_Decays[89][2] = neutralino3amplitudeneut2eebar; ParticleNeutralino3.Array_Decays[89][3] = 3; ParticleNeutralino3.Array_Comments[89] = "# ~chi_30 -> ~chi_20 e- e+";
   ParticleNeutralino3.Array_Decays[90][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[90][1] = PDGmuon; ParticleNeutralino3.Array_Decays[90][4] = -PDGmuon; ParticleNeutralino3.Array_Decays[90][2] = neutralino3amplitudeneut2mumubar; ParticleNeutralino3.Array_Decays[90][3] = 3; ParticleNeutralino3.Array_Comments[90] = "# ~chi_30 -> ~chi_20 mu- mu+";
   ParticleNeutralino3.Array_Decays[91][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[91][1] = PDGtau; ParticleNeutralino3.Array_Decays[91][4] = -PDGtau; ParticleNeutralino3.Array_Decays[91][2] = neutralino3amplitudeneut2tautaubar; ParticleNeutralino3.Array_Decays[91][3] = 3; ParticleNeutralino3.Array_Comments[91] = "# ~chi_30 -> ~chi_20 tau- tau+";
   ParticleNeutralino3.Array_Decays[92][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[92][1] = PDGnuelectron; ParticleNeutralino3.Array_Decays[92][4] = -PDGnuelectron; ParticleNeutralino3.Array_Decays[92][2] = neutralino3amplitudeneut2nuenuebar; ParticleNeutralino3.Array_Decays[92][3] = 3; ParticleNeutralino3.Array_Comments[92] = "# ~chi_30 -> ~chi_20 nue nuebar";
   ParticleNeutralino3.Array_Decays[93][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[93][1] = PDGnumuon; ParticleNeutralino3.Array_Decays[93][4] = -PDGnumuon; ParticleNeutralino3.Array_Decays[93][2] = neutralino3amplitudeneut2numunumubar; ParticleNeutralino3.Array_Decays[93][3] = 3; ParticleNeutralino3.Array_Comments[93] = "# ~chi_30 -> ~chi_20 numu numubar";
   ParticleNeutralino3.Array_Decays[94][0] = PDGneutralino2; ParticleNeutralino3.Array_Decays[94][1] = PDGnutau; ParticleNeutralino3.Array_Decays[94][4] = -PDGnutau; ParticleNeutralino3.Array_Decays[94][2] = neutralino3amplitudeneut2nutaunutaubar; ParticleNeutralino3.Array_Decays[94][3] = 3; ParticleNeutralino3.Array_Comments[94] = "# ~chi_30 -> ~chi_20 nutau nutaubar";
   
   ParticleNeutralino3.Array_Decays[95][0] = PDGchargino1; ParticleNeutralino3.Array_Decays[95][1] = PDGup; ParticleNeutralino3.Array_Decays[95][4] = -PDGdown; ParticleNeutralino3.Array_Decays[95][2] = neutralino3amplitudechargino1udbar; ParticleNeutralino3.Array_Decays[95][3] = 3; ParticleNeutralino3.Array_Comments[95] = "# ~chi_30 -> chi_1- u db";
   ParticleNeutralino3.Array_Decays[96][0] = PDGchargino1; ParticleNeutralino3.Array_Decays[96][1] = PDGcharm; ParticleNeutralino3.Array_Decays[96][4] = -PDGstrange; ParticleNeutralino3.Array_Decays[96][2] = neutralino3amplitudechargino1csbar; ParticleNeutralino3.Array_Decays[96][3] = 3; ParticleNeutralino3.Array_Comments[96] = "# ~chi_30 -> chi_1- c sb";
   ParticleNeutralino3.Array_Decays[97][0] = PDGchargino1; ParticleNeutralino3.Array_Decays[97][1] = PDGnuelectron; ParticleNeutralino3.Array_Decays[97][4] = -PDGelectron; ParticleNeutralino3.Array_Decays[97][2] = neutralino3amplitudechargino1enuebar; ParticleNeutralino3.Array_Decays[97][3] = 3; ParticleNeutralino3.Array_Comments[97] = "# ~chi_30 -> chi_1- nu_e eb";
   ParticleNeutralino3.Array_Decays[98][0] = PDGchargino1; ParticleNeutralino3.Array_Decays[98][1] = PDGnumuon; ParticleNeutralino3.Array_Decays[98][4] = -PDGmuon; ParticleNeutralino3.Array_Decays[98][2] = neutralino3amplitudechargino1munumubar; ParticleNeutralino3.Array_Decays[98][3] = 3; ParticleNeutralino3.Array_Comments[98] = "# ~chi_30 -> chi_1- nu_mu mub";
   ParticleNeutralino3.Array_Decays[99][0] = PDGchargino1; ParticleNeutralino3.Array_Decays[99][1] = PDGnutau; ParticleNeutralino3.Array_Decays[99][4] = -PDGtau; ParticleNeutralino3.Array_Decays[99][2] = neutralino3amplitudechargino1taunutaubar; ParticleNeutralino3.Array_Decays[99][3] = 3; ParticleNeutralino3.Array_Comments[99] = "# ~chi_30 -> chi_1- nu_tau taub";
   ParticleNeutralino3.Array_Decays[100][0] = PDGchargino2; ParticleNeutralino3.Array_Decays[100][1] = PDGup; ParticleNeutralino3.Array_Decays[100][4] = -PDGdown; ParticleNeutralino3.Array_Decays[100][2] = neutralino3amplitudechargino2udbar; ParticleNeutralino3.Array_Decays[100][3] = 3; ParticleNeutralino3.Array_Comments[100] = "# ~chi_30 -> chi_2- u dbar";
   ParticleNeutralino3.Array_Decays[101][0] = PDGchargino2; ParticleNeutralino3.Array_Decays[101][1] = PDGcharm; ParticleNeutralino3.Array_Decays[101][4] = -PDGstrange; ParticleNeutralino3.Array_Decays[101][2] = neutralino3amplitudechargino2csbar; ParticleNeutralino3.Array_Decays[101][3] = 3; ParticleNeutralino3.Array_Comments[101] = "# ~chi_30 -> chi_2- c sbar";
   ParticleNeutralino3.Array_Decays[102][0] = PDGchargino2; ParticleNeutralino3.Array_Decays[102][1] = PDGnuelectron; ParticleNeutralino3.Array_Decays[102][4] = -PDGelectron; ParticleNeutralino3.Array_Decays[102][2] = neutralino3amplitudechargino2enuebar; ParticleNeutralino3.Array_Decays[102][3] = 3; ParticleNeutralino3.Array_Comments[102] = "# ~chi_30 -> chi_2- nu_e eb";
   ParticleNeutralino3.Array_Decays[103][0] = PDGchargino2; ParticleNeutralino3.Array_Decays[103][1] = PDGnumuon; ParticleNeutralino3.Array_Decays[103][4] = -PDGmuon; ParticleNeutralino3.Array_Decays[103][2] = neutralino3amplitudechargino2munumubar; ParticleNeutralino3.Array_Decays[103][3] = 3; ParticleNeutralino3.Array_Comments[103] = "# ~chi_30 -> chi_2- nu_mu mub";
   ParticleNeutralino3.Array_Decays[104][0] = PDGchargino2; ParticleNeutralino3.Array_Decays[104][1] = PDGnutau; ParticleNeutralino3.Array_Decays[104][4] = -PDGtau; ParticleNeutralino3.Array_Decays[104][2] = neutralino3amplitudechargino2taunutaubar; ParticleNeutralino3.Array_Decays[104][3] = 3; ParticleNeutralino3.Array_Comments[104] = "# ~chi_30 -> chi_2- nu_tau taubar";
   
   double Neut3_No_1to2_Decays = 0;
   
   Neut3_No_1to2_Decays = ParticleNeutralino3.No_1to2_Decays + ParticleNeutralino3.No_grav_Decays + ParticleNeutralino3.No_NMSSM_Decays;
   
   for (int j = 0; j<Neut3_No_1to2_Decays; j++) {
     ParticleNeutralino3.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Neut3_No_1to2_Decays; j++) {
     ParticleNeutralino3.two_width = ParticleNeutralino3.two_width + ParticleNeutralino3.Array_Decays[j][2];
   }
   for (int j=Neut3_No_1to2_Decays; j<ParticleNeutralino3.No_of_Decays; j++) {
     ParticleNeutralino3.three_width = ParticleNeutralino3.three_width + ParticleNeutralino3.Array_Decays[j][2];
   }
   
   if ( ParticleNeutralino3.three_width != ParticleNeutralino3.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for neutralino 3 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleNeutralino3.No_of_Decays = Neut3_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleNeutralino3.total_width = ParticleNeutralino3.two_width;
     }
   else {
     ParticleNeutralino3.total_width = ParticleNeutralino3.two_width + ParticleNeutralino3.three_width;
   }
   
   if ( ParticleNeutralino3.total_width != ParticleNeutralino3.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleNeutralino3.No_of_Decays; i++) {
       //   fout << i << " " << ParticleNeutralino3.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in Neutralino3 total width \n");
     }
   
   for (int i =0; i<ParticleNeutralino3.No_of_Decays; i++) {
     ParticleNeutralino3.Array_Decays[i][5]= ParticleNeutralino3.Array_Decays[i][2]/ParticleNeutralino3.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleNeutralino3, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleNeutralino3, BRTol);}
   
 }
 
 
 ///Neutralino4 Decays
 
 double neutralino4amplitudeuLubar=0, neutralino4amplitudeuRubar=0, neutralino4amplitudeuLbaru=0, neutralino4amplitudeuRbaru=0, neutralino4amplitudedLdbar=0, neutralino4amplitudedRdbar=0, neutralino4amplitudedLbard=0, neutralino4amplitudedRbard=0, neutralino4amplitudecLcbar=0, neutralino4amplitudecRcbar=0, neutralino4amplitudecLbarc=0, neutralino4amplitudecRbarc=0, neutralino4amplitudesLsbar=0, neutralino4amplitudesRsbar=0, neutralino4amplitudesLbars=0, neutralino4amplitudesRbars=0, neutralino4amplitudeeLebar=0, neutralino4amplitudeeRebar=0, neutralino4amplitudeeLbare=0, neutralino4amplitudeeRbare=0, neutralino4amplitudemuLmubar=0, neutralino4amplitudemuRmubar=0, neutralino4amplitudemuLbarmu=0, neutralino4amplitudemuRbarmu=0,neutralino4amplitudesnuenuebar=0, neutralino4amplitudesnuebarnue=0, neutralino4amplitudesnumunumubar=0, neutralino4amplitudesnumubarnumu=0, neutralino4amplitudetopstop1bar=0, neutralino4amplitudetopstop2bar=0, neutralino4amplitudetopbarstop1=0, neutralino4amplitudetopbarstop2=0, neutralino4amplitudebottomsbottom1bar=0, neutralino4amplitudebottomsbottom2bar=0, neutralino4amplitudebottombarsbottom1=0, neutralino4amplitudebottombarsbottom2=0, neutralino4amplitudetaustau1bar=0, neutralino4amplitudetaustau2bar=0, neutralino4amplitudetaubarstau1=0, neutralino4amplitudetaubarstau2=0, neutralino4amplitudenutausnutaubar=0, neutralino4amplitudenutaubarsnutau=0, neutralino4amplitudeWbosonpluscharginoW1=0, neutralino4amplitudeWbosonpluscharginoW2=0, neutralino4amplitudeWbosonminuscharginoW1=0, neutralino4amplitudeWbosonminuscharginoW2=0, neutralino4amplitudeHpluscharginoW1=0, neutralino4amplitudeHpluscharginoW2=0, neutralino4amplitudeHminuscharginoW1=0, neutralino4amplitudeHminuscharginoW2=0, neutralino4amplitudeZbosonneutralino1=0, neutralino4amplitudeZbosonneutralino2=0, neutralino4amplitudeZbosonneutralino3=0, neutralino4amplitudehneutralino1=0, neutralino4amplitudehneutralino2=0, neutralino4amplitudehneutralino3=0, neutralino4amplitudeHneutralino1=0, neutralino4amplitudeHneutralino2=0, neutralino4amplitudeHneutralino3=0, neutralino4amplitudeAneutralino1=0, neutralino4amplitudeAneutralino2=0, neutralino4amplitudeAneutralino3=0, neutralino4amplitudephotongravitino=0, neutralino4amplitudeZgravitino=0, neutralino4amplitudehgravitino=0, neutralino4amplitudeHgravitino=0, neutralino4amplitudeAgravitino=0;
 
 double neutralino4amplitudeneut1uubar=0, neutralino4amplitudeneut1ddbar=0, neutralino4amplitudeneut1ccbar=0, neutralino4amplitudeneut1ssbar=0, neutralino4amplitudeneut1ttbar=0, neutralino4amplitudeneut1bbbar=0, neutralino4amplitudeneut1eebar=0, neutralino4amplitudeneut1mumubar=0, neutralino4amplitudeneut1tautaubar=0, neutralino4amplitudeneut1nuenuebar=0, neutralino4amplitudeneut1numunumubar=0, neutralino4amplitudeneut1nutaunutaubar=0, neutralino4amplitudeneut2uubar=0, neutralino4amplitudeneut2ddbar=0, neutralino4amplitudeneut2ccbar=0, neutralino4amplitudeneut2ssbar=0, neutralino4amplitudeneut2ttbar=0, neutralino4amplitudeneut2bbbar=0, neutralino4amplitudeneut2eebar=0, neutralino4amplitudeneut2mumubar=0, neutralino4amplitudeneut2tautaubar=0, neutralino4amplitudeneut2nuenuebar=0, neutralino4amplitudeneut2numunumubar=0, neutralino4amplitudeneut2nutaunutaubar=0, neutralino4amplitudeneut3uubar=0, neutralino4amplitudeneut3ddbar=0, neutralino4amplitudeneut3ccbar=0, neutralino4amplitudeneut3ssbar=0, neutralino4amplitudeneut3ttbar=0, neutralino4amplitudeneut3bbbar=0, neutralino4amplitudeneut3eebar=0, neutralino4amplitudeneut3mumubar=0, neutralino4amplitudeneut3tautaubar=0, neutralino4amplitudeneut3nuenuebar=0, neutralino4amplitudeneut3numunumubar=0, neutralino4amplitudeneut3nutaunutaubar=0, neutralino4amplitudechargino1udbar=0, neutralino4amplitudechargino1csbar=0, neutralino4amplitudechargino1enuebar=0, neutralino4amplitudechargino1munumubar=0, neutralino4amplitudechargino1taunutaubar=0, neutralino4amplitudechargino2udbar=0, neutralino4amplitudechargino2csbar=0, neutralino4amplitudechargino2enuebar=0, neutralino4amplitudechargino2munumubar=0, neutralino4amplitudechargino2taunutaubar=0;
 
 double neutralino4amplitudeH3neutralino1 = 0, neutralino4amplitudeH3neutralino2 = 0, neutralino4amplitudeH3neutralino3 = 0, neutralino4amplitudeA2neutralino1 = 0, neutralino4amplitudeA2neutralino2 = 0, neutralino4amplitudeA2neutralino3 = 0;
 
 if (flagneut4 == 1) {
   if (nmssmIsIt == false) {
     neutralino4amplitudeuLubar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 4);
     neutralino4amplitudeuRubar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 4);
     neutralino4amplitudeuLbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mup, mu(1,1), g, gp, mixNeut, 1, 'L', 4); 
     neutralino4amplitudeuRbaru = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mup, mu(2,1), g, gp, mixNeut, 1, 'R', 4);
     neutralino4amplitudedLdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 4);
     neutralino4amplitudedRdbar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 4);
     neutralino4amplitudedLbard = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mdo, md(1,1), g, gp, mixNeut, 2, 'L', 4);
     neutralino4amplitudedRbard = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mdo, md(2,1), g, gp, mixNeut, 2, 'R', 4);
     neutralino4amplitudecLcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 4);
     neutralino4amplitudecRcbar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 4);
     neutralino4amplitudecLbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mc, mu(1,2), g, gp, mixNeut, 1, 'L', 4);
     neutralino4amplitudecRbarc = neutralinoamplitudedecayquarksquarkLorR (mneut(4), mc, mu(2,2), g, gp, mixNeut, 1, 'R', 4);
     neutralino4amplitudesLsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), ms, md(1,2), g, gp, mixNeut, 2, 'L', 4);
     neutralino4amplitudesRsbar = neutralinoamplitudedecayquarksquarkLorR (mneut(4), ms, md(2,2), g, gp, mixNeut, 2, 'R', 4);
     neutralino4amplitudesLbars = neutralinoamplitudedecayquarksquarkLorR (mneut(4), ms, md(1,2), g, gp, mixNeut, 2, 'L', 4);
     neutralino4amplitudesRbars = neutralinoamplitudedecayquarksquarkLorR (mneut(4), ms, md(2,2), g, gp, mixNeut, 2, 'R', 4);
     neutralino4amplitudeeLebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mel, me(1,1), g, gp, mixNeut, 'L', 4);
     neutralino4amplitudeeRebar = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mel, me(2,1), g, gp, mixNeut, 'R', 4);
     neutralino4amplitudeeLbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mel, me(1,1), g, gp, mixNeut, 'L', 4);
     neutralino4amplitudeeRbare = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mel, me(2,1), g, gp, mixNeut, 'R', 4);
     neutralino4amplitudemuLmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mmu, me(1,2), g, gp, mixNeut, 'L', 4);
     neutralino4amplitudemuRmubar = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mmu, me(2,2), g, gp, mixNeut, 'R', 4);
     neutralino4amplitudemuLbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mmu, me(1,2), g, gp, mixNeut, 'L', 4);
     neutralino4amplitudemuRbarmu = neutralinoamplitudedecayleptonsleptonLorR (mneut(4), mmu, me(2,2), g, gp, mixNeut, 'R', 4);
     neutralino4amplitudesnuenuebar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(4), 0, msnu(1), g, gp, mixNeut, 4);
     neutralino4amplitudesnuebarnue = neutralinoamplitudedecayneutrinosneutrinoL (mneut(4), 0, msnu(1), g, gp, mixNeut, 4);
     neutralino4amplitudesnumunumubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(4), 0, msnu(2), g, gp, mixNeut, 4);
     neutralino4amplitudesnumubarnumu = neutralinoamplitudedecayneutrinosneutrinoL (mneut(4), 0, msnu(2), g, gp, mixNeut, 4);
     neutralino4amplitudetopstop1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 4);
     neutralino4amplitudetopstop2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 4);
     neutralino4amplitudetopbarstop1 = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mt, mu(1,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 1, 4);
     neutralino4amplitudetopbarstop2 = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mt, mu(2,3), runmw, thetat, beta, mixNeut, g, gp, runmt, 1, 2, 4);
     neutralino4amplitudebottomsbottom1bar = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 4);
     neutralino4amplitudebottomsbottom2bar = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 4);
     neutralino4amplitudebottombarsbottom1 = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mb, md(1,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 1, 4);
     neutralino4amplitudebottombarsbottom2 = neutralinoamplitudedecaysquark3quarkmix (mneut(4), mb, md(2,3), runmw, thetab, beta, mixNeut, g, gp, runmb, 2, 2, 4);
     neutralino4amplitudetaustau1bar = neutralinoamplitudedecaystautau (mneut(4), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 4);
     neutralino4amplitudetaustau2bar = neutralinoamplitudedecaystautau (mneut(4), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 4);
     neutralino4amplitudetaubarstau1 = neutralinoamplitudedecaystautau (mneut(4), mtau, me(1,3), runmw, thetatau, beta, mixNeut, g, gp, 1, 4);
     neutralino4amplitudetaubarstau2 = neutralinoamplitudedecaystautau (mneut(4), mtau, me(2,3), runmw, thetatau, beta, mixNeut, g, gp, 2, 4);
     neutralino4amplitudenutausnutaubar = neutralinoamplitudedecayneutrinosneutrinoL (mneut(4), 0, msnu(3), g, gp, mixNeut, 4);
     neutralino4amplitudenutaubarsnutau = neutralinoamplitudedecayneutrinosneutrinoL (mneut(4), 0, msnu(3), g, gp, mixNeut, 4);
     neutralino4amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(4), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 4, 1);
     neutralino4amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(4), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 4, 2);
     neutralino4amplitudeWbosonminuscharginoW1 = neutralinoamplitudedecaycharginoWboson (mneut(4), polemw, MCH1, g, thetaL2, thetaR2, mixNeut, 4, 1);
     neutralino4amplitudeWbosonminuscharginoW2 = neutralinoamplitudedecaycharginoWboson (mneut(4), polemw, MCH2, g, thetaL2, thetaR2, mixNeut, 4, 2);
     neutralino4amplitudeHpluscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(4), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 4, 1);
     neutralino4amplitudeHpluscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(4), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 4, 2);
     neutralino4amplitudeHminuscharginoW1 = neutralinoamplitudedecaycharginoHplus (mneut(4), mHpm, MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 4, 1);
     neutralino4amplitudeHminuscharginoW2 = neutralinoamplitudedecaycharginoHplus (mneut(4), mHpm, MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 4, 2);
     neutralino4amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZboson (mneut(4), polemz, mneut(1), g, gp, mixNeut, 4, 1);
     neutralino4amplitudeZbosonneutralino2 = neutralinoamplitudedecayneutralinoZboson (mneut(4), polemz, mneut(2), g, gp, mixNeut, 4, 2);
     neutralino4amplitudeZbosonneutralino3 = neutralinoamplitudedecayneutralinoZboson (mneut(4), polemz, mneut(3), g, gp, mixNeut, 4, 3);
     neutralino4amplitudehneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mh0(1), mneut(1), g, gp, mixNeut, alpha, 4, 1, 'h');
     neutralino4amplitudehneutralino2 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mh0(1), mneut(2), g, gp, mixNeut, alpha, 4, 2, 'h');
     neutralino4amplitudehneutralino3 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mh0(1), mneut(3), g, gp, mixNeut, alpha, 4, 3, 'h');
     neutralino4amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mh0(2), mneut(1), g, gp, mixNeut, alpha, 4, 1, 'H');
     neutralino4amplitudeHneutralino2 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mh0(2), mneut(2), g, gp, mixNeut, alpha, 4, 2, 'H');
     neutralino4amplitudeHneutralino3 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mh0(2), mneut(3), g, gp, mixNeut, alpha, 4, 3, 'H');
     neutralino4amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mA0(1), mneut(1), g, gp, mixNeut, beta, 4, 1, 'A');
     neutralino4amplitudeAneutralino2 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mA0(1), mneut(2), g, gp, mixNeut, beta, 4, 2, 'A');
     neutralino4amplitudeAneutralino3 = neutralinoamplitudedecayneutralinoneutHiggs (mneut(4), mA0(1), mneut(3), g, gp, mixNeut, beta, 4, 3, 'A');
          
     neutralino4amplitudephotongravitino = neutralinoamplitudedecayphotongravitino (mneut(4), mgravitino, MPlreduced, mixNeut, g, gp, 4, gravonoff, neutNLSP);
     neutralino4amplitudeZgravitino = neutralinoamplitudedecayZgravitino(mneut(4), polemz, mgravitino, MPlreduced, mixNeut, g, gp, beta, 4, gravonoff, neutNLSP);
     neutralino4amplitudehgravitino = neutralinoamplitudedecayphigravitino(mneut(4), mh0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 4, gravonoff, 'h', neutNLSP);
     neutralino4amplitudeHgravitino = neutralinoamplitudedecayphigravitino(mneut(4), mh0(2), mgravitino, MPlreduced, mixNeut, alpha, beta, 4, gravonoff, 'H', neutNLSP);
     neutralino4amplitudeAgravitino = neutralinoamplitudedecayphigravitino(mneut(4), mA0(1), mgravitino, MPlreduced, mixNeut, alpha, beta, 4, gravonoff, 'A', neutNLSP);
     
     neutralino4amplitudeneut1uubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,1), mu(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mup, alphas, 0, runmw, g, gp, alpha, beta, runmu, mixNeut, 4, 1, onetothree, 'u');
     neutralino4amplitudeneut1ddbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,1), md(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mdo, alphas, 0, runmw, g, gp, alpha, beta, runmd, mixNeut, 4, 1, onetothree, 'd');
     neutralino4amplitudeneut1ccbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,2), mu(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mc, alphas, 0, runmw, g, gp, alpha, beta, runmc, mixNeut, 4, 1, onetothree, 'u');
     neutralino4amplitudeneut1ssbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,2), md(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), ms, alphas, 0, runmw, g, gp, alpha, beta, runms, mixNeut, 4, 1, onetothree, 'd');
     neutralino4amplitudeneut1ttbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,3), mu(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mt, alphas, thetat, runmw, g, gp, alpha, beta, runmt, mixNeut, 4, 1, onetothree, 'u');
     neutralino4amplitudeneut1bbbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,3), md(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mb, alphas, thetab, runmw, g, gp, alpha, beta, runmb, mixNeut, 4, 1, onetothree, 'd');
     neutralino4amplitudeneut1eebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,1), me(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mel, alphas, 0, runmw, g, gp, alpha, beta, runmel, mixNeut, 4, 1, onetothree, 'l');
     neutralino4amplitudeneut1mumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,2), me(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mmu, alphas, 0, runmw, g, gp, alpha, beta, runmmu, mixNeut, 4, 1, onetothree, 'l');
     neutralino4amplitudeneut1tautaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,3), me(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(1), mtau, alphas, thetatau-PI/2, runmw, g, gp, alpha, beta, runmtau, mixNeut, 4, 1, onetothree, 'l');
     neutralino4amplitudeneut1nuenuebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(1), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 1, onetothree, 'n');
     neutralino4amplitudeneut1numunumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(2), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 1, onetothree, 'n');
     neutralino4amplitudeneut1nutaunutaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(3), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(1), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 1, onetothree, 'n');
     neutralino4amplitudeneut2uubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,1), mu(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mup, alphas, 0, runmw, g, gp, alpha, beta, runmu, mixNeut, 4, 2, onetothree, 'u');
     neutralino4amplitudeneut2ddbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,1), md(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mdo, alphas, 0, runmw, g, gp, alpha, beta, runmd, mixNeut, 4, 2, onetothree, 'd');
     neutralino4amplitudeneut2ccbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,2), mu(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mc, alphas, 0, runmw, g, gp, alpha, beta, runmc, mixNeut, 4, 2, onetothree, 'u');
     neutralino4amplitudeneut2ssbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,2), md(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(2), ms, alphas, 0, runmw, g, gp, alpha, beta, runms, mixNeut, 4, 2, onetothree, 'd');
     neutralino4amplitudeneut2ttbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,3), mu(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mt, alphas, thetat, runmw, g, gp, alpha, beta, runmt, mixNeut, 4, 2, onetothree, 'u');
     neutralino4amplitudeneut2bbbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,3), md(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mb, alphas, thetab, runmw, g, gp, alpha, beta, runmb, mixNeut, 4, 2, onetothree, 'd');
     neutralino4amplitudeneut2eebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,1), me(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mel, alphas, 0, runmw, g, gp, alpha, beta, runmel, mixNeut, 4, 2, onetothree, 'l');
     neutralino4amplitudeneut2mumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,2), me(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mmu, alphas, 0, runmw, g, gp, alpha, beta, runmmu, mixNeut, 4, 2, onetothree, 'l');
     neutralino4amplitudeneut2tautaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,3), me(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(2), mtau, alphas, thetatau-PI/2, runmw, g, gp, alpha, beta, runmtau, mixNeut, 4, 2, onetothree, 'l');
     neutralino4amplitudeneut2nuenuebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(1), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(2), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 2, onetothree, 'n');
     neutralino4amplitudeneut2numunumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(2), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(2), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 2, onetothree, 'n');
     neutralino4amplitudeneut2nutaunutaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(3), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(2), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 2, onetothree, 'n');
     neutralino4amplitudeneut3uubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,1), mu(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mup, alphas, 0, runmw, g, gp, alpha, beta, runmu, mixNeut, 4, 3, onetothree, 'u');
     neutralino4amplitudeneut3ddbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,1), md(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mdo, alphas, 0, runmw, g, gp, alpha, beta, runmd, mixNeut, 4, 3, onetothree, 'd');
     neutralino4amplitudeneut3ccbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,2), mu(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mc, alphas, 0, runmw, g, gp, alpha, beta, runmc, mixNeut, 4, 3, onetothree, 'u');
     neutralino4amplitudeneut3ssbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,2), md(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(3), ms, alphas, 0, runmw, g, gp, alpha, beta, runms, mixNeut, 4, 3, onetothree, 'd');
     neutralino4amplitudeneut3ttbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), mu(1,3), mu(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mt, alphas, thetat, runmw, g, gp, alpha, beta, runmt, mixNeut, 4, 3, onetothree, 'u');
     neutralino4amplitudeneut3bbbar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), md(1,3), md(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mb, alphas, thetab, runmw, g, gp, alpha, beta, runmb, mixNeut, 4, 3, onetothree, 'd');
     neutralino4amplitudeneut3eebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,1), me(2,1), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mel, alphas, 0, runmw, g, gp, alpha, beta, runmel, mixNeut, 4, 3, onetothree, 'l');
     neutralino4amplitudeneut3mumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,2), me(2,2), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mmu, alphas, 0, runmw, g, gp, alpha, beta, runmmu, mixNeut, 4, 3, onetothree, 'l');
     neutralino4amplitudeneut3tautaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), me(1,3), me(2,3), runmz, mh0(1), mh0(2), mA0(1), mneut(3), mtau, alphas, thetatau-PI/2, runmw, g, gp, alpha, beta, runmtau, mixNeut, 4, 3, onetothree, 'l');
     neutralino4amplitudeneut3nuenuebar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(1), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(3), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 3, onetothree, 'n');
     neutralino4amplitudeneut3numunumubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(2), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(3), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 3, onetothree, 'n');
     neutralino4amplitudeneut3nutaunutaubar = neutralinoamplitudedecaydgaussneutralinoffbar (mneut(4), msnu(3), 100000000000, runmz, mh0(1), mh0(2), mA0(1), mneut(3), 0, alphas, 0, runmw, g, gp, alpha, beta, 0, mixNeut, 4, 3, onetothree, 'n');
     
     neutralino4amplitudechargino1udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(1), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 4, 1, onetothree, 'q', 'n');
     neutralino4amplitudechargino1csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(1), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 4, 1, onetothree, 'q', 'n');
     neutralino4amplitudechargino1enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(1), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 4, 1, onetothree, 'l', 'n');
     neutralino4amplitudechargino1munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(1), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 4, 1, onetothree, 'l', 'n');
     neutralino4amplitudechargino1taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(1), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 4, 1, onetothree, 'l', 'n');
     neutralino4amplitudechargino2udbar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), mu(1,1), mu(2,1), md(1,1), md(2,1), polemw, mHpm, mch(2), mup, mdo, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmu, runmd, mixNeut, 4, 2, onetothree, 'q', 'n');
     neutralino4amplitudechargino2csbar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), mu(1,2), mu(2,2), md(1,2), md(2,2), polemw, mHpm, mch(2), mc, ms, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, runmc, runms, mixNeut, 4, 2, onetothree, 'q', 'n');
     neutralino4amplitudechargino2enuebar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), me(1,1), me(2,1), msnu(1), 100000000000, polemw, mHpm, mch(2), 0, mel, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmel, mixNeut, 4, 2, onetothree, 'l', 'n');
     neutralino4amplitudechargino2munumubar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), me(1,2), me(2,2), msnu(2), 100000000000, polemw, mHpm, mch(2), 0, mmu, 0, 0, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmmu, mixNeut, 4, 2, onetothree, 'l', 'n');
     neutralino4amplitudechargino2taunutaubar = neutralinoamplitudedecaycharginoffprimebar (mneut(4), me(1,3), me(2,3), msnu(3), 100000000000, polemw, mHpm, mch(2), 0, mtau, 0, thetatau-PI/2, g, gp, alphas, beta, thetaL2, thetaR2, 0, runmtau, mixNeut, 4, 2, onetothree, 'l', 'n');
   }
   else if (nmssmIsIt == true){
     neutralino4amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWNMSSM (mneut(4), MCH1, polemw, g, thetaL2, thetaR2, mixNeut, 4, 1);
     neutralino4amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWNMSSM (mneut(4), MCH2, polemw, g, thetaL2, thetaR2, mixNeut, 4, 2);
     neutralino4amplitudeWbosonminuscharginoW1 = neutralino4amplitudeWbosonpluscharginoW1;
     neutralino4amplitudeWbosonminuscharginoW2 = neutralino4amplitudeWbosonpluscharginoW2;
     neutralino4amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(4), mneut(1), polemz, g, gp, mixNeut, 4, 1);
     neutralino4amplitudeZbosonneutralino2 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(4), mneut(2), polemz, g, gp, mixNeut, 4, 2);
     neutralino4amplitudeZbosonneutralino3 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(4), mneut(3), polemz, g, gp, mixNeut, 4, 3);
     
     neutralino4amplitudeHpluscharginoW1 = neutralinoamplitudecharginoHpmNMSSM (mneut(4), MCH1, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 4, 1);
     neutralino4amplitudeHpluscharginoW2 = neutralinoamplitudecharginoHpmNMSSM (mneut(4), MCH2, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 4, 2);
     neutralino4amplitudeHminuscharginoW1 = neutralino4amplitudeHpluscharginoW1;
     neutralino4amplitudeHminuscharginoW2 = neutralino4amplitudeHpluscharginoW2;
     
     neutralino4amplitudehneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(1), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 4, 1, 1);
     neutralino4amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(1), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 4, 1, 2);
     neutralino4amplitudeH3neutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(1), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 4, 1, 3);
     neutralino4amplitudehneutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(2), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 4, 2, 1);
     neutralino4amplitudeHneutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(2), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 4, 2, 2);
     neutralino4amplitudeH3neutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(2), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 4, 2, 3);
     neutralino4amplitudehneutralino3 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(3), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 4, 3, 1);
     neutralino4amplitudeHneutralino3 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(3), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 4, 3, 2);
     neutralino4amplitudeH3neutralino3 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(4), mneut(3), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 4, 3, 3);
     
     neutralino4amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(4), mneut(1), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 4, 1, 1);
     neutralino4amplitudeA2neutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(4), mneut(1), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 4, 1, 2);
     neutralino4amplitudeAneutralino2 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(4), mneut(2), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 4, 2, 1);
     neutralino4amplitudeA2neutralino2 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(4), mneut(2), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 4, 2, 2);
     neutralino4amplitudeAneutralino3 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(4), mneut(3), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 4, 3, 1);
     neutralino4amplitudeA2neutralino3 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(4), mneut(3), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 4, 3, 2);
     
     neutralino4amplitudeuLubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), mu(1,1), mup, g, gp, mixNeut, 4, 'u', 'L');
     neutralino4amplitudeuRubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), mu(2,1), mup, g, gp, mixNeut, 4, 'u', 'R');
     neutralino4amplitudeuLbaru = neutralino4amplitudeuLubar;
     neutralino4amplitudeuRbaru = neutralino4amplitudeuRubar;
     neutralino4amplitudedLdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), md(1,1), mdo, g, gp, mixNeut, 4, 'd', 'L');
     neutralino4amplitudedRdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), md(2,1), mdo, g, gp, mixNeut, 4, 'd', 'R');
     neutralino4amplitudedLbard = neutralino4amplitudedLdbar;
     neutralino4amplitudedRbard = neutralino4amplitudedRdbar;
     neutralino4amplitudecLcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), mu(1,2), mc, g, gp, mixNeut, 4, 'u', 'L');
     neutralino4amplitudecRcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), mu(2,2), mc, g, gp, mixNeut, 4, 'u', 'R');
     neutralino4amplitudecLbarc = neutralino4amplitudecLcbar;
     neutralino4amplitudecRbarc = neutralino4amplitudecRcbar;
     neutralino4amplitudesLsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), md(1,2), ms, g, gp, mixNeut, 4, 'd', 'L');
     neutralino4amplitudesRsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), md(2,2), ms, g, gp, mixNeut, 4, 'd', 'R');
     neutralino4amplitudesLbars = neutralino4amplitudesLsbar;
     neutralino4amplitudesRbars = neutralino4amplitudesRsbar;
     neutralino4amplitudeeLebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), me(1,1), mel, g, gp, mixNeut, 4, 'l', 'L');
     neutralino4amplitudeeRebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), me(2,1), mel, g, gp, mixNeut, 4, 'l', 'R');
     neutralino4amplitudeeLbare = neutralino4amplitudeeLebar;
     neutralino4amplitudeeRbare = neutralino4amplitudeeRebar;
     neutralino4amplitudemuLmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), me(1,2), mmu, g, gp, mixNeut, 4, 'l', 'L');
     neutralino4amplitudemuRmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(4), me(2,2), mmu, g, gp, mixNeut, 4, 'l', 'R');
     neutralino4amplitudemuLbarmu = neutralino4amplitudemuLmubar;
     neutralino4amplitudemuRbarmu = neutralino4amplitudemuRmubar;
     
     neutralino4amplitudetopstop1bar = neutralinoamplitudestoptopNMSSM (mneut(4), mu(1,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 4, 1);
     neutralino4amplitudetopstop2bar = neutralinoamplitudestoptopNMSSM (mneut(4), mu(2,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 4, 2);
     neutralino4amplitudetopbarstop1 = neutralino4amplitudetopstop1bar;
     neutralino4amplitudetopbarstop2 = neutralino4amplitudetopstop2bar;
     neutralino4amplitudebottomsbottom1bar = neutralinoamplitudesbottombottomNMSSM (mneut(4), md(1,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 4, 1);
     neutralino4amplitudebottomsbottom2bar = neutralinoamplitudesbottombottomNMSSM (mneut(4), md(2,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 4, 2);
     neutralino4amplitudebottombarsbottom1 = neutralino4amplitudebottomsbottom1bar;
     neutralino4amplitudebottombarsbottom2 = neutralino4amplitudebottomsbottom2bar;
     
     neutralino4amplitudetaustau1bar = neutralinoamplitudestautauNMSSM (mneut(4), me(1,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 4, 1);
     neutralino4amplitudetaustau2bar = neutralinoamplitudestautauNMSSM (mneut(4), me(2,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 4, 2);
     neutralino4amplitudetaubarstau1 = neutralino4amplitudetaustau1bar;
     neutralino4amplitudetaubarstau2 = neutralino4amplitudetaustau2bar;
     
     neutralino4amplitudesnuenuebar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(4), msnu(1), 0, g, gp, mixNeut, 4);
     neutralino4amplitudesnuebarnue = neutralino4amplitudesnuenuebar;
     neutralino4amplitudesnumunumubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(4), msnu(2), 0, g, gp, mixNeut, 4);
     neutralino4amplitudesnumubarnumu = neutralino4amplitudesnumunumubar;
     neutralino4amplitudenutausnutaubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(4), msnu(3), 0, g, gp, mixNeut, 4);
     neutralino4amplitudenutaubarsnutau = neutralino4amplitudenutausnutaubar;
   }
   
   ParticleNeutralino4.Array_Decays[0][0] = -PDGup; ParticleNeutralino4.Array_Decays[0][1] = PDGsupL; ParticleNeutralino4.Array_Decays[0][2] = neutralino4amplitudeuLubar; ParticleNeutralino4.Array_Decays[0][3] = 2; ParticleNeutralino4.Array_Comments[0] = "# ~chi_40 -> ub ~u_L";
   ParticleNeutralino4.Array_Decays[1][0] = -PDGup; ParticleNeutralino4.Array_Decays[1][1] = PDGsupR; ParticleNeutralino4.Array_Decays[1][2] = neutralino4amplitudeuRubar; ParticleNeutralino4.Array_Decays[1][3] = 2; ParticleNeutralino4.Array_Comments[1] = "# ~chi_40 -> ub ~u_R";
   ParticleNeutralino4.Array_Decays[2][0] = PDGup; ParticleNeutralino4.Array_Decays[2][1] = -PDGsupL; ParticleNeutralino4.Array_Decays[2][2] = neutralino4amplitudeuLbaru; ParticleNeutralino4.Array_Decays[2][3] = 2; ParticleNeutralino4.Array_Comments[2] = "# ~chi_40 -> u ~u_L*";
   ParticleNeutralino4.Array_Decays[3][0] = PDGup; ParticleNeutralino4.Array_Decays[3][1] = -PDGsupR; ParticleNeutralino4.Array_Decays[3][2] = neutralino4amplitudeuRbaru; ParticleNeutralino4.Array_Decays[3][3] = 2; ParticleNeutralino4.Array_Comments[3] = "# ~chi_40 -> u ~u_R*";
   ParticleNeutralino4.Array_Decays[4][0] = -PDGdown; ParticleNeutralino4.Array_Decays[4][1] = PDGsdownL; ParticleNeutralino4.Array_Decays[4][2] = neutralino4amplitudedLdbar;ParticleNeutralino4.Array_Decays[4][3] = 2;  ParticleNeutralino4.Array_Comments[4] = "# ~chi_40 -> db ~d_L";
   ParticleNeutralino4.Array_Decays[5][0] = -PDGdown; ParticleNeutralino4.Array_Decays[5][1] = PDGsdownR; ParticleNeutralino4.Array_Decays[5][2] = neutralino4amplitudedRdbar; ParticleNeutralino4.Array_Decays[5][3] = 2; ParticleNeutralino4.Array_Comments[5] = "# ~chi_40 -> db ~d_R";
   ParticleNeutralino4.Array_Decays[6][0] = PDGdown; ParticleNeutralino4.Array_Decays[6][1] = -PDGsdownL; ParticleNeutralino4.Array_Decays[6][2] = neutralino4amplitudedLbard; ParticleNeutralino4.Array_Decays[6][3] = 2; ParticleNeutralino4.Array_Comments[6] = "# ~chi_40 -> d ~d_L*";
   ParticleNeutralino4.Array_Decays[7][0] = PDGdown; ParticleNeutralino4.Array_Decays[7][1] = -PDGsdownR; ParticleNeutralino4.Array_Decays[7][2] = neutralino4amplitudedRbard; ParticleNeutralino4.Array_Decays[7][3] = 2; ParticleNeutralino4.Array_Comments[7] = "# ~chi_40 -> d ~d_R*";
   ParticleNeutralino4.Array_Decays[8][0] = -PDGcharm; ParticleNeutralino4.Array_Decays[8][1] = PDGscharmL; ParticleNeutralino4.Array_Decays[8][2] = neutralino4amplitudecLcbar; ParticleNeutralino4.Array_Decays[8][3] = 2; ParticleNeutralino4.Array_Comments[8] = "# ~chi_40 -> cb ~c_L";
   ParticleNeutralino4.Array_Decays[9][0] = -PDGcharm; ParticleNeutralino4.Array_Decays[9][1] = PDGscharmR; ParticleNeutralino4.Array_Decays[9][2] = neutralino4amplitudecRcbar; ParticleNeutralino4.Array_Decays[9][3] = 2; ParticleNeutralino4.Array_Comments[9] = "# ~chi_40 -> cb ~c_R";
   ParticleNeutralino4.Array_Decays[10][0] = PDGcharm; ParticleNeutralino4.Array_Decays[10][1] = -PDGscharmL; ParticleNeutralino4.Array_Decays[10][2] = neutralino4amplitudecLbarc; ParticleNeutralino4.Array_Decays[10][3] = 2; ParticleNeutralino4.Array_Comments[10] = "# ~chi_40 -> c ~c_L*";
   ParticleNeutralino4.Array_Decays[11][0] = PDGcharm; ParticleNeutralino4.Array_Decays[11][1] = -PDGscharmR; ParticleNeutralino4.Array_Decays[11][2] = neutralino4amplitudecRbarc; ParticleNeutralino4.Array_Decays[11][3] = 2; ParticleNeutralino4.Array_Comments[11] = "# ~chi_40 -> c ~c_R*";
   ParticleNeutralino4.Array_Decays[12][0] = -PDGstrange; ParticleNeutralino4.Array_Decays[12][1] = PDGsstrangeL; ParticleNeutralino4.Array_Decays[12][2] = neutralino4amplitudesLsbar; ParticleNeutralino4.Array_Decays[12][3] = 2; ParticleNeutralino4.Array_Comments[12] = "# ~chi_40 -> sb ~s_L"; 
   ParticleNeutralino4.Array_Decays[13][0] = -PDGstrange; ParticleNeutralino4.Array_Decays[13][1] = PDGsstrangeR; ParticleNeutralino4.Array_Decays[13][2] = neutralino4amplitudesRsbar; ParticleNeutralino4.Array_Decays[13][3] = 2; ParticleNeutralino4.Array_Comments[13] = "# ~chi_40 -> sb ~s_R";
   ParticleNeutralino4.Array_Decays[14][0] = PDGstrange; ParticleNeutralino4.Array_Decays[14][1] = -PDGsstrangeL; ParticleNeutralino4.Array_Decays[14][2] = neutralino4amplitudesLbars; ParticleNeutralino4.Array_Decays[14][3] = 2; ParticleNeutralino4.Array_Comments[14] = "# ~chi_40 -> s ~s_L*";
   ParticleNeutralino4.Array_Decays[15][0] = PDGstrange; ParticleNeutralino4.Array_Decays[15][1] = -PDGsstrangeR; ParticleNeutralino4.Array_Decays[15][2] = neutralino4amplitudesRbars; ParticleNeutralino4.Array_Decays[15][3] = 2; ParticleNeutralino4.Array_Comments[15] = "# ~chi_40 -> s ~s_R*";
   ParticleNeutralino4.Array_Decays[16][0] = -PDGelectron; ParticleNeutralino4.Array_Decays[16][1] = PDGselectronL; ParticleNeutralino4.Array_Decays[16][2] = neutralino4amplitudeeLebar; ParticleNeutralino4.Array_Decays[16][3] = 2; ParticleNeutralino4.Array_Comments[16] = "# ~chi_40 -> e+ ~e_L-";
   ParticleNeutralino4.Array_Decays[17][0] = -PDGelectron; ParticleNeutralino4.Array_Decays[17][1] = PDGselectronR; ParticleNeutralino4.Array_Decays[17][2] = neutralino4amplitudeeRebar; ParticleNeutralino4.Array_Decays[17][3] = 2; ParticleNeutralino4.Array_Comments[17] = "# ~chi_40 -> e+ ~e_R-";
   ParticleNeutralino4.Array_Decays[18][0] = PDGelectron; ParticleNeutralino4.Array_Decays[18][1] = -PDGselectronL; ParticleNeutralino4.Array_Decays[18][2] = neutralino4amplitudeeLbare; ParticleNeutralino4.Array_Decays[18][3] = 2; ParticleNeutralino4.Array_Comments[18] = "# ~chi_40 -> e ~e_L+";
   ParticleNeutralino4.Array_Decays[19][0] = PDGelectron; ParticleNeutralino4.Array_Decays[19][1] = -PDGselectronR; ParticleNeutralino4.Array_Decays[19][2] = neutralino4amplitudeeRbare; ParticleNeutralino4.Array_Decays[19][3] = 2; ParticleNeutralino4.Array_Comments[19] = "# ~chi_40 -> e ~e_R+";   
   ParticleNeutralino4.Array_Decays[20][0] = -PDGmuon; ParticleNeutralino4.Array_Decays[20][1] = PDGsmuonL; ParticleNeutralino4.Array_Decays[20][2] = neutralino4amplitudemuLmubar; ParticleNeutralino4.Array_Decays[20][3] = 2; ParticleNeutralino4.Array_Comments[20] = "# ~chi_40 -> mu+ ~mu_L-";
   ParticleNeutralino4.Array_Decays[21][0] = -PDGmuon; ParticleNeutralino4.Array_Decays[21][1] = PDGsmuonR; ParticleNeutralino4.Array_Decays[21][2] = neutralino4amplitudemuRmubar; ParticleNeutralino4.Array_Decays[21][3] = 2; ParticleNeutralino4.Array_Comments[21] = "# ~chi_40 -> mu+ ~mu_R-";
   ParticleNeutralino4.Array_Decays[22][0] = PDGmuon; ParticleNeutralino4.Array_Decays[22][1] = -PDGsmuonL; ParticleNeutralino4.Array_Decays[22][2] = neutralino4amplitudemuLbarmu; ParticleNeutralino4.Array_Decays[22][3] = 2; ParticleNeutralino4.Array_Comments[22] = "# ~chi_40 -> mu- ~mu_L+";
   ParticleNeutralino4.Array_Decays[23][0] = PDGmuon; ParticleNeutralino4.Array_Decays[23][1] = -PDGsmuonR; ParticleNeutralino4.Array_Decays[23][2] = neutralino4amplitudemuRbarmu; ParticleNeutralino4.Array_Decays[23][3] = 2; ParticleNeutralino4.Array_Comments[23] = "# ~chi_40 -> mu- ~mu_R+";
   ParticleNeutralino4.Array_Decays[24][0] = PDGnuelectron; ParticleNeutralino4.Array_Decays[24][1] = -PDGnuselectronL; ParticleNeutralino4.Array_Decays[24][2] = neutralino4amplitudesnuebarnue; ParticleNeutralino4.Array_Decays[24][3] = 2; ParticleNeutralino4.Array_Comments[24] = "# ~chi_40 -> nu_e ~nu_eL*";
   ParticleNeutralino4.Array_Decays[25][0] = -PDGnuelectron; ParticleNeutralino4.Array_Decays[25][1] = PDGnuselectronL; ParticleNeutralino4.Array_Decays[25][2] = neutralino4amplitudesnuenuebar; ParticleNeutralino4.Array_Decays[25][3] = 2; ParticleNeutralino4.Array_Comments[25] = "# ~chi_40 -> nu_eb ~nu_eL";
   ParticleNeutralino4.Array_Decays[26][0] = PDGnumuon; ParticleNeutralino4.Array_Decays[26][1] = -PDGnusmuonL; ParticleNeutralino4.Array_Decays[26][2] = neutralino4amplitudesnumubarnumu; ParticleNeutralino4.Array_Decays[26][3] = 2; ParticleNeutralino4.Array_Comments[26] = "# ~chi_40 -> numu ~nu_muL*";
   ParticleNeutralino4.Array_Decays[27][0] = -PDGnumuon; ParticleNeutralino4.Array_Decays[27][1] = PDGnusmuonL; ParticleNeutralino4.Array_Decays[27][2] = neutralino4amplitudesnumunumubar; ParticleNeutralino4.Array_Decays[27][3] = 2; ParticleNeutralino4.Array_Comments[27] = "# ~chi_40 -> nu_mub ~nu_muL";
   ParticleNeutralino4.Array_Decays[28][0] = PDGtop; ParticleNeutralino4.Array_Decays[28][1] = -PDGstop1; ParticleNeutralino4.Array_Decays[28][2] = neutralino4amplitudetopstop1bar; ParticleNeutralino4.Array_Decays[28][3] = 2; ParticleNeutralino4.Array_Comments[28] = "# ~chi_40 -> t ~t_1*";
   ParticleNeutralino4.Array_Decays[29][0] = PDGtop; ParticleNeutralino4.Array_Decays[29][1] = -PDGstop2; ParticleNeutralino4.Array_Decays[29][2] = neutralino4amplitudetopstop2bar; ParticleNeutralino4.Array_Decays[29][3] = 2; ParticleNeutralino4.Array_Comments[29] = "# ~chi_40 -> t ~t_2*";
   ParticleNeutralino4.Array_Decays[30][0] = -PDGtop; ParticleNeutralino4.Array_Decays[30][1] = PDGstop1; ParticleNeutralino4.Array_Decays[30][2] = neutralino4amplitudetopbarstop1; ParticleNeutralino4.Array_Decays[30][3] = 2; ParticleNeutralino4.Array_Comments[30] = "# ~chi_40 -> tb ~t_1";
   ParticleNeutralino4.Array_Decays[31][0] = -PDGtop; ParticleNeutralino4.Array_Decays[31][1] = PDGstop2; ParticleNeutralino4.Array_Decays[31][2] = neutralino4amplitudetopbarstop2; ParticleNeutralino4.Array_Decays[31][3] = 2; ParticleNeutralino4.Array_Comments[31] = "# ~chi_40 -> tb ~t_2";
   ParticleNeutralino4.Array_Decays[32][0] = PDGbottom; ParticleNeutralino4.Array_Decays[32][1] = -PDGsbottom1; ParticleNeutralino4.Array_Decays[32][2] = neutralino4amplitudebottomsbottom1bar; ParticleNeutralino4.Array_Decays[32][3] = 2; ParticleNeutralino4.Array_Comments[32] = "# ~chi_40 -> b ~b_1*";
   ParticleNeutralino4.Array_Decays[33][0] = PDGbottom; ParticleNeutralino4.Array_Decays[33][1] = -PDGsbottom2; ParticleNeutralino4.Array_Decays[33][2] = neutralino4amplitudebottomsbottom2bar; ParticleNeutralino4.Array_Decays[33][3] = 2; ParticleNeutralino4.Array_Comments[33] = "# ~chi_40 -> b ~b_2*";
   ParticleNeutralino4.Array_Decays[34][0] = -PDGbottom; ParticleNeutralino4.Array_Decays[34][1] = PDGsbottom1; ParticleNeutralino4.Array_Decays[34][2] = neutralino4amplitudebottombarsbottom1; ParticleNeutralino4.Array_Decays[34][3] = 2; ParticleNeutralino4.Array_Comments[34] = "# ~chi_40 -> bb ~b_1";
   ParticleNeutralino4.Array_Decays[35][0] = -PDGbottom; ParticleNeutralino4.Array_Decays[35][1] = PDGsbottom2; ParticleNeutralino4.Array_Decays[35][2] = neutralino4amplitudebottombarsbottom2; ParticleNeutralino4.Array_Decays[35][3] = 2; ParticleNeutralino4.Array_Comments[35] = "# ~chi_40 -> bb ~b_2";
   ParticleNeutralino4.Array_Decays[36][0] = -PDGstau1; ParticleNeutralino4.Array_Decays[36][1] = PDGtau; ParticleNeutralino4.Array_Decays[36][2] = neutralino4amplitudetaustau1bar; ParticleNeutralino4.Array_Decays[36][3] = 2; ParticleNeutralino4.Array_Comments[36] = "# ~chi_40 -> tau- ~tau_1+";
   ParticleNeutralino4.Array_Decays[37][0] = -PDGstau2; ParticleNeutralino4.Array_Decays[37][1] = PDGtau; ParticleNeutralino4.Array_Decays[37][2] = neutralino4amplitudetaustau2bar; ParticleNeutralino4.Array_Decays[37][3] = 2; ParticleNeutralino4.Array_Comments[37] = "# ~chi_40 -> tau- ~tau_2+";
   ParticleNeutralino4.Array_Decays[38][0] = PDGstau1; ParticleNeutralino4.Array_Decays[38][1] = -PDGtau; ParticleNeutralino4.Array_Decays[38][2] = neutralino4amplitudetaubarstau1; ParticleNeutralino4.Array_Decays[38][3] = 2; ParticleNeutralino4.Array_Comments[38] = "# ~chi_40 -> tau+ ~tau_1-";
   ParticleNeutralino4.Array_Decays[39][0] = PDGstau2; ParticleNeutralino4.Array_Decays[39][1] = -PDGtau; ParticleNeutralino4.Array_Decays[39][2] = neutralino4amplitudetaubarstau2; ParticleNeutralino4.Array_Decays[39][3] = 2; ParticleNeutralino4.Array_Comments[39] = "# ~chi_40 -> tau+ ~tau_2-";
   ParticleNeutralino4.Array_Decays[40][0] = PDGnutau; ParticleNeutralino4.Array_Decays[40][1] = -PDGnustauL; ParticleNeutralino4.Array_Decays[40][2] = neutralino4amplitudenutausnutaubar; ParticleNeutralino4.Array_Decays[40][3] = 2; ParticleNeutralino4.Array_Comments[40] = "# ~chi_40 -> nu_tau ~nu_tauL*";
   ParticleNeutralino4.Array_Decays[41][0] = -PDGnutau; ParticleNeutralino4.Array_Decays[41][1] = PDGnustauL; ParticleNeutralino4.Array_Decays[41][2] = neutralino4amplitudenutaubarsnutau; ParticleNeutralino4.Array_Decays[41][3] = 2; ParticleNeutralino4.Array_Comments[41] = "# ~chi_40 -> nu_taub ~nu_tauL";
   ParticleNeutralino4.Array_Decays[42][0] = PDGWplus; ParticleNeutralino4.Array_Decays[42][1] = -PDGchargino1; ParticleNeutralino4.Array_Decays[42][2] = neutralino4amplitudeWbosonpluscharginoW1; ParticleNeutralino4.Array_Decays[42][3] = 2; ParticleNeutralino4.Array_Comments[42] = "# ~chi_40 -> W+ ~chi_1-";
   ParticleNeutralino4.Array_Decays[43][0] = PDGWplus; ParticleNeutralino4.Array_Decays[43][1] = -PDGchargino2; ParticleNeutralino4.Array_Decays[43][2] = neutralino4amplitudeWbosonpluscharginoW2; ParticleNeutralino4.Array_Decays[43][3] = 2; ParticleNeutralino4.Array_Comments[43] = "# ~chi_40 -> W+ ~chi_2-";
   ParticleNeutralino4.Array_Decays[44][0] = -PDGWplus; ParticleNeutralino4.Array_Decays[44][1] = PDGchargino1; ParticleNeutralino4.Array_Decays[44][2] = neutralino4amplitudeWbosonminuscharginoW1; ParticleNeutralino4.Array_Decays[44][3] = 2; ParticleNeutralino4.Array_Comments[44] = "# ~chi_40 -> W- ~chi_1+";
   ParticleNeutralino4.Array_Decays[45][0] = -PDGWplus; ParticleNeutralino4.Array_Decays[45][1] = PDGchargino2; ParticleNeutralino4.Array_Decays[45][2] = neutralino4amplitudeWbosonminuscharginoW2; ParticleNeutralino4.Array_Decays[45][3] = 2; ParticleNeutralino4.Array_Comments[45] = "# ~chi_40 -> W- ~chi_2+";
   ParticleNeutralino4.Array_Decays[46][0] = PDGHplus; ParticleNeutralino4.Array_Decays[46][1] = -PDGchargino1; ParticleNeutralino4.Array_Decays[46][2] = neutralino4amplitudeHpluscharginoW1; ParticleNeutralino4.Array_Decays[46][3] = 2; ParticleNeutralino4.Array_Comments[46] = "# ~chi_40 -> H+ ~chi_1-";
   ParticleNeutralino4.Array_Decays[47][0] = PDGHplus; ParticleNeutralino4.Array_Decays[47][1] = -PDGchargino2; ParticleNeutralino4.Array_Decays[47][2] = neutralino4amplitudeHpluscharginoW2; ParticleNeutralino4.Array_Decays[47][3] = 2; ParticleNeutralino4.Array_Comments[47] = "# ~chi_40 -> H+ ~chi_2-";
   ParticleNeutralino4.Array_Decays[48][0] = -PDGHplus; ParticleNeutralino4.Array_Decays[48][1] = PDGchargino1; ParticleNeutralino4.Array_Decays[48][2] = neutralino4amplitudeHminuscharginoW1; ParticleNeutralino4.Array_Decays[48][3] = 2; ParticleNeutralino4.Array_Comments[48] = "# ~chi_40 -> H- ~chi_1+";
   ParticleNeutralino4.Array_Decays[49][0] = -PDGHplus; ParticleNeutralino4.Array_Decays[49][1] = PDGchargino2; ParticleNeutralino4.Array_Decays[49][2] = neutralino4amplitudeHminuscharginoW2; ParticleNeutralino4.Array_Decays[49][3] = 2; ParticleNeutralino4.Array_Comments[49] = "# ~chi_40 -> H- ~chi_2+";
   ParticleNeutralino4.Array_Decays[50][0] = PDGZboson; ParticleNeutralino4.Array_Decays[50][1] = PDGneutralino1; ParticleNeutralino4.Array_Decays[50][2] = neutralino4amplitudeZbosonneutralino1; ParticleNeutralino4.Array_Decays[50][3] = 2; ParticleNeutralino4.Array_Comments[50] = "# ~chi_40 -> Z ~chi_10";
   ParticleNeutralino4.Array_Decays[51][0] = PDGZboson; ParticleNeutralino4.Array_Decays[51][1] = PDGneutralino2; ParticleNeutralino4.Array_Decays[51][2] = neutralino4amplitudeZbosonneutralino2; ParticleNeutralino4.Array_Decays[51][3] = 2; ParticleNeutralino4.Array_Comments[51] = "# ~chi_40 -> Z ~chi_20";
   ParticleNeutralino4.Array_Decays[52][0] = PDGZboson; ParticleNeutralino4.Array_Decays[52][1] = PDGneutralino3; ParticleNeutralino4.Array_Decays[52][2] = neutralino4amplitudeZbosonneutralino3; ParticleNeutralino4.Array_Decays[52][3] = 2; ParticleNeutralino4.Array_Comments[52] = "# ~chi_40 -> Z ~chi_30";
   ParticleNeutralino4.Array_Decays[53][0] = PDGh0; ParticleNeutralino4.Array_Decays[53][1] = PDGneutralino1; ParticleNeutralino4.Array_Decays[53][2] = neutralino4amplitudehneutralino1; ParticleNeutralino4.Array_Decays[53][3] = 2; ParticleNeutralino4.Array_Comments[53] = "# ~chi_40 -> h ~chi_10";
   ParticleNeutralino4.Array_Decays[54][0] = PDGh0; ParticleNeutralino4.Array_Decays[54][1] = PDGneutralino2; ParticleNeutralino4.Array_Decays[54][2] = neutralino4amplitudehneutralino2; ParticleNeutralino4.Array_Decays[54][3] = 2; ParticleNeutralino4.Array_Comments[54] = "# ~chi_40 -> h ~chi_20"; 
   ParticleNeutralino4.Array_Decays[55][0] = PDGh0; ParticleNeutralino4.Array_Decays[55][1] = PDGneutralino3; ParticleNeutralino4.Array_Decays[55][2] = neutralino4amplitudehneutralino3; ParticleNeutralino4.Array_Decays[55][3] = 2; ParticleNeutralino4.Array_Comments[55] = "# ~chi_40 -> h ~chi_30";
   ParticleNeutralino4.Array_Decays[56][0] = PDGH0; ParticleNeutralino4.Array_Decays[56][1] = PDGneutralino1; ParticleNeutralino4.Array_Decays[56][2] = neutralino4amplitudeHneutralino1; ParticleNeutralino4.Array_Decays[56][3] = 2; ParticleNeutralino4.Array_Comments[56] = "# ~chi_40 -> H ~chi_10";
   ParticleNeutralino4.Array_Decays[57][0] = PDGH0; ParticleNeutralino4.Array_Decays[57][1] = PDGneutralino2; ParticleNeutralino4.Array_Decays[57][2] = neutralino4amplitudeHneutralino2; ParticleNeutralino4.Array_Decays[57][3] = 2; ParticleNeutralino4.Array_Comments[57] = "# ~chi_40 -> H ~chi_20";
   ParticleNeutralino4.Array_Decays[58][0] = PDGH0; ParticleNeutralino4.Array_Decays[58][1] = PDGneutralino3; ParticleNeutralino4.Array_Decays[58][2] = neutralino4amplitudeHneutralino3; ParticleNeutralino4.Array_Decays[58][3] = 2; ParticleNeutralino4.Array_Comments[58] = "# ~chi_40 -> H ~chi_30";
   ParticleNeutralino4.Array_Decays[59][0] = PDGA0; ParticleNeutralino4.Array_Decays[59][1] = PDGneutralino1; ParticleNeutralino4.Array_Decays[59][2] = neutralino4amplitudeAneutralino1; ParticleNeutralino4.Array_Decays[59][3] = 2; ParticleNeutralino4.Array_Comments[59] = "# ~chi_40 -> A ~chi_10";
   ParticleNeutralino4.Array_Decays[60][0] = PDGA0; ParticleNeutralino4.Array_Decays[60][1] = PDGneutralino2; ParticleNeutralino4.Array_Decays[60][2] = neutralino4amplitudeAneutralino2; ParticleNeutralino4.Array_Decays[60][3] = 2; ParticleNeutralino4.Array_Comments[60] = "# ~chi_40 -> A ~chi_20";
   ParticleNeutralino4.Array_Decays[61][0] = PDGA0; ParticleNeutralino4.Array_Decays[61][1] = PDGneutralino3; ParticleNeutralino4.Array_Decays[61][2] = neutralino4amplitudeAneutralino3; ParticleNeutralino4.Array_Decays[61][3] = 2; ParticleNeutralino4.Array_Comments[61] = "# ~chi_40 -> A ~chi_30";
   
   ParticleNeutralino4.Array_Decays[62][0] = PDGH3; ParticleNeutralino4.Array_Decays[62][1] = PDGneutralino1; ParticleNeutralino4.Array_Decays[62][2] = neutralino4amplitudeH3neutralino1; ParticleNeutralino4.Array_Decays[62][3] = 2; ParticleNeutralino4.Array_Comments[62] = "# ~chi_40 -> H3 ~chi_10";
   ParticleNeutralino4.Array_Decays[63][0] = PDGH3; ParticleNeutralino4.Array_Decays[63][1] = PDGneutralino2; ParticleNeutralino4.Array_Decays[63][2] = neutralino4amplitudeH3neutralino2; ParticleNeutralino4.Array_Decays[63][3] = 2; ParticleNeutralino4.Array_Comments[63] = "# ~chi_40 -> H3 ~chi_20";
   ParticleNeutralino4.Array_Decays[64][0] = PDGH3; ParticleNeutralino4.Array_Decays[64][1] = PDGneutralino3; ParticleNeutralino4.Array_Decays[64][2] = neutralino4amplitudeH3neutralino3; ParticleNeutralino4.Array_Decays[64][3] = 2; ParticleNeutralino4.Array_Comments[64] = "# ~chi_40 -> H3 ~chi_30";
   ParticleNeutralino4.Array_Decays[65][0] = PDGA2; ParticleNeutralino4.Array_Decays[65][1] = PDGneutralino1; ParticleNeutralino4.Array_Decays[65][2] = neutralino4amplitudeA2neutralino1; ParticleNeutralino4.Array_Decays[65][3] = 2; ParticleNeutralino4.Array_Comments[65] = "# ~chi_40 -> A2 ~chi_10";
   ParticleNeutralino4.Array_Decays[66][0] = PDGA2; ParticleNeutralino4.Array_Decays[66][1] = PDGneutralino2; ParticleNeutralino4.Array_Decays[66][2] = neutralino4amplitudeA2neutralino2; ParticleNeutralino4.Array_Decays[66][3] = 2; ParticleNeutralino4.Array_Comments[66] = "# ~chi_40 -> A2 ~chi_20";
   ParticleNeutralino4.Array_Decays[67][0] = PDGA0; ParticleNeutralino4.Array_Decays[67][1] = PDGneutralino3; ParticleNeutralino4.Array_Decays[67][2] = neutralino4amplitudeA2neutralino3; ParticleNeutralino4.Array_Decays[67][3] = 2; ParticleNeutralino4.Array_Comments[67] = "# ~chi_40 -> A2 ~chi_30";
   
   
   ParticleNeutralino4.Array_Decays[68][0] = PDGphoton; ParticleNeutralino4.Array_Decays[68][1] = PDGgravitino; ParticleNeutralino4.Array_Decays[68][2] = neutralino4amplitudephotongravitino; ParticleNeutralino4.Array_Decays[68][3] = 2; ParticleNeutralino4.Array_Comments[68] = "# ~chi_40 -> gamma ~G";
   ParticleNeutralino4.Array_Decays[69][0] = PDGZboson; ParticleNeutralino4.Array_Decays[69][1] = PDGgravitino; ParticleNeutralino4.Array_Decays[69][2] = neutralino4amplitudeZgravitino; ParticleNeutralino4.Array_Decays[69][3] = 2; ParticleNeutralino4.Array_Comments[69] = "# ~chi_40 -> Z ~G";
   ParticleNeutralino4.Array_Decays[70][0] = PDGh0; ParticleNeutralino4.Array_Decays[70][1] = PDGgravitino; ParticleNeutralino4.Array_Decays[70][2] = neutralino4amplitudehgravitino; ParticleNeutralino4.Array_Decays[70][3] = 2; ParticleNeutralino4.Array_Comments[70] = "# ~chi_40 -> h ~G";
   ParticleNeutralino4.Array_Decays[71][0] = PDGH0; ParticleNeutralino4.Array_Decays[71][1] = PDGgravitino; ParticleNeutralino4.Array_Decays[71][2] = neutralino4amplitudeHgravitino; ParticleNeutralino4.Array_Decays[71][3] = 2; ParticleNeutralino4.Array_Comments[71] = "# ~chi_40 -> H ~G";
   ParticleNeutralino4.Array_Decays[72][0] = PDGA0; ParticleNeutralino4.Array_Decays[72][1] = PDGgravitino; ParticleNeutralino4.Array_Decays[72][2] = neutralino4amplitudeAgravitino; ParticleNeutralino4.Array_Decays[72][3] = 2; ParticleNeutralino4.Array_Comments[72] = "# ~chi_40 -> A ~G";
   
   ParticleNeutralino4.Array_Decays[73][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[73][1] = PDGup; ParticleNeutralino4.Array_Decays[73][4] = -PDGup; ParticleNeutralino4.Array_Decays[73][2] = neutralino4amplitudeneut1uubar; ParticleNeutralino4.Array_Decays[73][3] = 3; ParticleNeutralino4.Array_Comments[73] = "# ~chi_40 -> ~chi_10 u ubar";
   ParticleNeutralino4.Array_Decays[74][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[74][1] = PDGdown; ParticleNeutralino4.Array_Decays[74][4] = -PDGdown; ParticleNeutralino4.Array_Decays[74][2] = neutralino4amplitudeneut1ddbar; ParticleNeutralino4.Array_Decays[74][3] = 3; ParticleNeutralino4.Array_Comments[69] = "# ~chi_40 -> ~chi_10 d dbar";
   ParticleNeutralino4.Array_Decays[75][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[75][1] = PDGcharm; ParticleNeutralino4.Array_Decays[75][4] = -PDGcharm; ParticleNeutralino4.Array_Decays[75][2] = neutralino4amplitudeneut1ccbar; ParticleNeutralino4.Array_Decays[75][3] = 3; ParticleNeutralino4.Array_Comments[75] = "# ~chi_40 -> ~chi_10 c cbar";
   ParticleNeutralino4.Array_Decays[76][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[76][1] = PDGstrange; ParticleNeutralino4.Array_Decays[76][4] = -PDGstrange; ParticleNeutralino4.Array_Decays[76][2] = neutralino4amplitudeneut1ssbar; ParticleNeutralino4.Array_Decays[76][3] = 3; ParticleNeutralino4.Array_Comments[76] = "# ~chi_40 -> ~chi_10 s sbar";
   ParticleNeutralino4.Array_Decays[77][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[77][1] = PDGtop; ParticleNeutralino4.Array_Decays[77][4] = -PDGtop; ParticleNeutralino4.Array_Decays[77][2] = neutralino4amplitudeneut1ttbar; ParticleNeutralino4.Array_Decays[77][3] = 3; ParticleNeutralino4.Array_Comments[77] = "# ~chi_40 -> ~chi_10 t tbar";
   ParticleNeutralino4.Array_Decays[78][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[78][1] = PDGbottom; ParticleNeutralino4.Array_Decays[78][4] = -PDGbottom; ParticleNeutralino4.Array_Decays[78][2] = neutralino4amplitudeneut1bbbar; ParticleNeutralino4.Array_Decays[78][3] = 3; ParticleNeutralino4.Array_Comments[78] = "# ~chi_40 -> ~chi_10 b bbar";
   ParticleNeutralino4.Array_Decays[79][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[79][1] = PDGelectron; ParticleNeutralino4.Array_Decays[79][4] = -PDGelectron; ParticleNeutralino4.Array_Decays[79][2] = neutralino4amplitudeneut1eebar; ParticleNeutralino4.Array_Decays[79][3] = 3; ParticleNeutralino4.Array_Comments[79] = "# ~chi_40 -> ~chi_10 e- e+";
   ParticleNeutralino4.Array_Decays[80][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[80][1] = PDGmuon; ParticleNeutralino4.Array_Decays[80][4] = -PDGmuon; ParticleNeutralino4.Array_Decays[80][2] = neutralino4amplitudeneut1mumubar; ParticleNeutralino4.Array_Decays[80][3] = 3; ParticleNeutralino4.Array_Comments[80] = "# ~chi_40 -> ~chi_10 mu- mu+";
   ParticleNeutralino4.Array_Decays[81][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[81][1] = PDGtau; ParticleNeutralino4.Array_Decays[81][4] = -PDGtau; ParticleNeutralino4.Array_Decays[81][2] = neutralino4amplitudeneut1tautaubar; ParticleNeutralino4.Array_Decays[81][3] = 3; ParticleNeutralino4.Array_Comments[81] = "# ~chi_40 -> ~chi_10 tau- tau+";
   ParticleNeutralino4.Array_Decays[82][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[82][1] = PDGnuelectron; ParticleNeutralino4.Array_Decays[82][4] = -PDGnuelectron; ParticleNeutralino4.Array_Decays[82][2] = neutralino4amplitudeneut1nuenuebar; ParticleNeutralino4.Array_Decays[82][3] = 3; ParticleNeutralino4.Array_Comments[82] = "# ~chi_40 -> ~chi_10 nue nuebar";
   ParticleNeutralino4.Array_Decays[83][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[83][1] = PDGnumuon; ParticleNeutralino4.Array_Decays[83][4] = -PDGnumuon; ParticleNeutralino4.Array_Decays[83][2] = neutralino4amplitudeneut1numunumubar; ParticleNeutralino4.Array_Decays[83][3] = 3; ParticleNeutralino4.Array_Comments[83] = "# ~chi_40 -> ~chi_10 numu numubar";
   ParticleNeutralino4.Array_Decays[84][0] = PDGneutralino1; ParticleNeutralino4.Array_Decays[84][1] = PDGnutau; ParticleNeutralino4.Array_Decays[84][4] = -PDGnutau; ParticleNeutralino4.Array_Decays[84][2] = neutralino4amplitudeneut1nutaunutaubar; ParticleNeutralino4.Array_Decays[84][3] = 3; ParticleNeutralino4.Array_Comments[84] = "# ~chi_40 -> ~chi_10 nutau nutaubar";
   ParticleNeutralino4.Array_Decays[85][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[85][1] = PDGup; ParticleNeutralino4.Array_Decays[85][4] = -PDGup; ParticleNeutralino4.Array_Decays[85][2] = neutralino4amplitudeneut2uubar; ParticleNeutralino4.Array_Decays[85][3] = 3; ParticleNeutralino4.Array_Comments[85] = "# ~chi_40 -> ~chi_20 u ubar";
   ParticleNeutralino4.Array_Decays[86][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[86][1] = PDGdown; ParticleNeutralino4.Array_Decays[86][4] = -PDGdown; ParticleNeutralino4.Array_Decays[86][2] = neutralino4amplitudeneut2ddbar; ParticleNeutralino4.Array_Decays[86][3] = 3; ParticleNeutralino4.Array_Comments[86] = "# ~chi_40 -> ~chi_20 d dbar";
   ParticleNeutralino4.Array_Decays[87][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[87][1] = PDGcharm; ParticleNeutralino4.Array_Decays[87][4] = -PDGcharm; ParticleNeutralino4.Array_Decays[87][2] = neutralino4amplitudeneut2ccbar; ParticleNeutralino4.Array_Decays[87][3] = 3; ParticleNeutralino4.Array_Comments[87] = "# ~chi_40 -> ~chi_20 c cbar";
   ParticleNeutralino4.Array_Decays[88][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[88][1] = PDGstrange; ParticleNeutralino4.Array_Decays[88][4] = -PDGstrange; ParticleNeutralino4.Array_Decays[88][2] = neutralino4amplitudeneut2ssbar; ParticleNeutralino4.Array_Decays[88][3] = 3; ParticleNeutralino4.Array_Comments[88] = "# ~chi_40 -> ~chi_20 s sbar";
   ParticleNeutralino4.Array_Decays[89][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[89][1] = PDGtop; ParticleNeutralino4.Array_Decays[89][4] = -PDGtop; ParticleNeutralino4.Array_Decays[89][2] = neutralino4amplitudeneut2ttbar; ParticleNeutralino4.Array_Decays[89][3] = 3; ParticleNeutralino4.Array_Comments[89] = "# ~chi_40 -> ~chi_20 t tbar";
   ParticleNeutralino4.Array_Decays[90][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[90][1] = PDGbottom; ParticleNeutralino4.Array_Decays[90][4] = -PDGbottom; ParticleNeutralino4.Array_Decays[90][2] = neutralino4amplitudeneut2bbbar; ParticleNeutralino4.Array_Decays[90][3] = 3; ParticleNeutralino4.Array_Comments[90] = "# ~chi_40 -> ~chi_20 b bbar";
   ParticleNeutralino4.Array_Decays[91][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[91][1] = PDGelectron; ParticleNeutralino4.Array_Decays[91][4] = -PDGelectron; ParticleNeutralino4.Array_Decays[91][2] = neutralino4amplitudeneut2eebar; ParticleNeutralino4.Array_Decays[91][3] = 3; ParticleNeutralino4.Array_Comments[91] = "# ~chi_40 -> ~chi_20 e- e+";
   ParticleNeutralino4.Array_Decays[92][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[92][1] = PDGmuon; ParticleNeutralino4.Array_Decays[92][4] = -PDGmuon; ParticleNeutralino4.Array_Decays[92][2] = neutralino4amplitudeneut2mumubar; ParticleNeutralino4.Array_Decays[92][3] = 3; ParticleNeutralino4.Array_Comments[92] = "# ~chi_40 -> ~chi_20 mu- mu+";
   ParticleNeutralino4.Array_Decays[93][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[93][1] = PDGtau; ParticleNeutralino4.Array_Decays[93][4] = -PDGtau; ParticleNeutralino4.Array_Decays[93][2] = neutralino4amplitudeneut2tautaubar; ParticleNeutralino4.Array_Decays[93][3] = 3; ParticleNeutralino4.Array_Comments[93] = "# ~chi_40 -> ~chi_20 tau- tau+";
   ParticleNeutralino4.Array_Decays[94][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[94][1] = PDGnuelectron; ParticleNeutralino4.Array_Decays[94][4] = -PDGnuelectron; ParticleNeutralino4.Array_Decays[94][2] = neutralino4amplitudeneut2nuenuebar; ParticleNeutralino4.Array_Decays[94][3] = 3; ParticleNeutralino4.Array_Comments[94] = "# ~chi_40 -> ~chi_20 nue nuebar";
   ParticleNeutralino4.Array_Decays[95][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[95][1] = PDGnumuon; ParticleNeutralino4.Array_Decays[95][4] = -PDGnumuon; ParticleNeutralino4.Array_Decays[95][2] = neutralino4amplitudeneut2numunumubar; ParticleNeutralino4.Array_Decays[95][3] = 3; ParticleNeutralino4.Array_Comments[95] = "# ~chi_40 -> ~chi_20 numu numubar";
   ParticleNeutralino4.Array_Decays[96][0] = PDGneutralino2; ParticleNeutralino4.Array_Decays[96][1] = PDGnutau; ParticleNeutralino4.Array_Decays[96][4] = -PDGnutau; ParticleNeutralino4.Array_Decays[96][2] = neutralino4amplitudeneut2nutaunutaubar; ParticleNeutralino4.Array_Decays[96][3] = 3; ParticleNeutralino4.Array_Comments[96] = "# ~chi_40 -> ~chi_20 nutau nutaubar";
   ParticleNeutralino4.Array_Decays[97][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[97][1] = PDGup; ParticleNeutralino4.Array_Decays[97][4] = -PDGup; ParticleNeutralino4.Array_Decays[97][2] = neutralino4amplitudeneut3uubar; ParticleNeutralino4.Array_Decays[97][3] = 3; ParticleNeutralino4.Array_Comments[97] = "# ~chi_40 -> ~chi_30 u ubar";
   ParticleNeutralino4.Array_Decays[98][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[98][1] = PDGdown; ParticleNeutralino4.Array_Decays[98][4] = -PDGdown; ParticleNeutralino4.Array_Decays[98][2] = neutralino4amplitudeneut3ddbar; ParticleNeutralino4.Array_Decays[98][3] = 3; ParticleNeutralino4.Array_Comments[98] = "# ~chi_40 -> ~chi_30 d dbar";
   ParticleNeutralino4.Array_Decays[99][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[99][1] = PDGcharm; ParticleNeutralino4.Array_Decays[99][4] = -PDGcharm; ParticleNeutralino4.Array_Decays[99][2] = neutralino4amplitudeneut3ccbar; ParticleNeutralino4.Array_Decays[99][3] = 3; ParticleNeutralino4.Array_Comments[99] = "# ~chi_40 -> ~chi_30 c cbar";
   ParticleNeutralino4.Array_Decays[100][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[100][1] = PDGstrange; ParticleNeutralino4.Array_Decays[100][4] = -PDGstrange; ParticleNeutralino4.Array_Decays[100][2] = neutralino4amplitudeneut3ssbar; ParticleNeutralino4.Array_Decays[100][3] = 3; ParticleNeutralino4.Array_Comments[100] = "# ~chi_40 -> ~chi_30 s sbar";
   ParticleNeutralino4.Array_Decays[101][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[101][1] = PDGtop; ParticleNeutralino4.Array_Decays[101][4] = -PDGtop; ParticleNeutralino4.Array_Decays[101][2] = neutralino4amplitudeneut3ttbar; ParticleNeutralino4.Array_Decays[101][3] = 3; ParticleNeutralino4.Array_Comments[101] = "# ~chi_40 -> ~chi_30 t tbar";
   ParticleNeutralino4.Array_Decays[102][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[102][1] = PDGbottom; ParticleNeutralino4.Array_Decays[102][4] = -PDGbottom; ParticleNeutralino4.Array_Decays[102][2] = neutralino4amplitudeneut3bbbar; ParticleNeutralino4.Array_Decays[102][3] = 3; ParticleNeutralino4.Array_Comments[102] = "# ~chi_40 -> ~chi_30 b bbar";
   ParticleNeutralino4.Array_Decays[103][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[103][1] = PDGelectron; ParticleNeutralino4.Array_Decays[103][4] = -PDGelectron; ParticleNeutralino4.Array_Decays[103][2] = neutralino4amplitudeneut3eebar; ParticleNeutralino4.Array_Decays[103][3] = 3; ParticleNeutralino4.Array_Comments[103] = "# ~chi_40 -> ~chi_30 e- e+";
   ParticleNeutralino4.Array_Decays[104][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[104][1] = PDGmuon; ParticleNeutralino4.Array_Decays[104][4] = -PDGmuon; ParticleNeutralino4.Array_Decays[104][2] = neutralino4amplitudeneut3mumubar; ParticleNeutralino4.Array_Decays[104][3] = 3; ParticleNeutralino4.Array_Comments[104] = "# ~chi_40 -> ~chi_30 mu- mu+";
   ParticleNeutralino4.Array_Decays[105][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[105][1] = PDGtau; ParticleNeutralino4.Array_Decays[105][4] = -PDGtau; ParticleNeutralino4.Array_Decays[105][2] = neutralino4amplitudeneut3tautaubar; ParticleNeutralino4.Array_Decays[105][3] = 3; ParticleNeutralino4.Array_Comments[105] = "# ~chi_40 -> ~chi_30 tau- tau+";
   ParticleNeutralino4.Array_Decays[106][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[106][1] = PDGnuelectron; ParticleNeutralino4.Array_Decays[106][4] = -PDGnuelectron; ParticleNeutralino4.Array_Decays[106][2] = neutralino4amplitudeneut3nuenuebar; ParticleNeutralino4.Array_Decays[106][3] = 3; ParticleNeutralino4.Array_Comments[106] = "# ~chi_40 -> ~chi_30 nue nuebar";
   ParticleNeutralino4.Array_Decays[107][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[107][1] = PDGnumuon; ParticleNeutralino4.Array_Decays[107][4] = -PDGnumuon; ParticleNeutralino4.Array_Decays[107][2] = neutralino4amplitudeneut3numunumubar; ParticleNeutralino4.Array_Decays[107][3] = 3; ParticleNeutralino4.Array_Comments[107] = "# ~chi_40 -> ~chi_30 numu numubar";
   ParticleNeutralino4.Array_Decays[108][0] = PDGneutralino3; ParticleNeutralino4.Array_Decays[108][1] = PDGnutau; ParticleNeutralino4.Array_Decays[108][4] = -PDGnutau; ParticleNeutralino4.Array_Decays[108][2] = neutralino4amplitudeneut3nutaunutaubar; ParticleNeutralino4.Array_Decays[108][3] = 3; ParticleNeutralino4.Array_Comments[108] = "# ~chi_40 -> ~chi_30 nutau nutaubar";
   
   ParticleNeutralino4.Array_Decays[109][0] = PDGchargino1; ParticleNeutralino4.Array_Decays[109][1] = PDGup; ParticleNeutralino4.Array_Decays[109][4] = -PDGdown; ParticleNeutralino4.Array_Decays[109][2] = neutralino4amplitudechargino1udbar; ParticleNeutralino4.Array_Decays[109][3] = 3; ParticleNeutralino4.Array_Comments[109] = "# ~chi_40 -> chi_1- u db";
   ParticleNeutralino4.Array_Decays[110][0] = PDGchargino1; ParticleNeutralino4.Array_Decays[110][1] = PDGcharm; ParticleNeutralino4.Array_Decays[110][4] = -PDGstrange; ParticleNeutralino4.Array_Decays[110][2] = neutralino4amplitudechargino1csbar; ParticleNeutralino4.Array_Decays[110][3] = 3; ParticleNeutralino4.Array_Comments[110] = "# ~chi_40 -> chi_1- c sb";
   ParticleNeutralino4.Array_Decays[111][0] = PDGchargino1; ParticleNeutralino4.Array_Decays[111][1] = PDGnuelectron; ParticleNeutralino4.Array_Decays[111][4] = -PDGelectron; ParticleNeutralino4.Array_Decays[111][2] = neutralino4amplitudechargino1enuebar; ParticleNeutralino4.Array_Decays[111][3] = 3; ParticleNeutralino4.Array_Comments[111] = "# ~chi_40 -> chi_1- nu_e eb";
   ParticleNeutralino4.Array_Decays[112][0] = PDGchargino1; ParticleNeutralino4.Array_Decays[112][1] = PDGnumuon; ParticleNeutralino4.Array_Decays[112][4] = -PDGmuon; ParticleNeutralino4.Array_Decays[112][2] = neutralino4amplitudechargino1munumubar; ParticleNeutralino4.Array_Decays[112][3] = 3; ParticleNeutralino4.Array_Comments[112] = "# ~chi_40 -> chi_1- nu_mu mub";
   ParticleNeutralino4.Array_Decays[113][0] = PDGchargino1; ParticleNeutralino4.Array_Decays[113][1] = PDGnutau; ParticleNeutralino4.Array_Decays[113][4] = -PDGtau; ParticleNeutralino4.Array_Decays[113][2] = neutralino4amplitudechargino1taunutaubar; ParticleNeutralino4.Array_Decays[113][3] = 3; ParticleNeutralino4.Array_Comments[113] = "# ~chi_40 -> chi_1- nu_tau taub";
   ParticleNeutralino4.Array_Decays[114][0] = PDGchargino2; ParticleNeutralino4.Array_Decays[114][1] = PDGup; ParticleNeutralino4.Array_Decays[114][4] = -PDGdown; ParticleNeutralino4.Array_Decays[114][2] = neutralino4amplitudechargino2udbar; ParticleNeutralino4.Array_Decays[114][3] = 3; ParticleNeutralino4.Array_Comments[114] = "# ~chi_40 -> chi_2- u dbar";
   ParticleNeutralino4.Array_Decays[115][0] = PDGchargino2; ParticleNeutralino4.Array_Decays[115][1] = PDGcharm; ParticleNeutralino4.Array_Decays[115][4] = -PDGstrange; ParticleNeutralino4.Array_Decays[115][2] = neutralino4amplitudechargino2csbar; ParticleNeutralino4.Array_Decays[115][3] = 3; ParticleNeutralino4.Array_Comments[115] = "# ~chi_40 -> chi_2- c sbar";
   ParticleNeutralino4.Array_Decays[116][0] = PDGchargino2; ParticleNeutralino4.Array_Decays[116][1] = PDGnuelectron; ParticleNeutralino4.Array_Decays[116][4] = -PDGelectron; ParticleNeutralino4.Array_Decays[116][2] = neutralino4amplitudechargino2enuebar; ParticleNeutralino4.Array_Decays[116][3] = 3; ParticleNeutralino4.Array_Comments[116] = "# ~chi_40 -> chi_2- nu_e eb";
   ParticleNeutralino4.Array_Decays[117][0] = PDGchargino2; ParticleNeutralino4.Array_Decays[117][1] = PDGnumuon; ParticleNeutralino4.Array_Decays[117][4] = -PDGmuon; ParticleNeutralino4.Array_Decays[117][2] = neutralino4amplitudechargino2munumubar; ParticleNeutralino4.Array_Decays[117][3] = 3; ParticleNeutralino4.Array_Comments[117] = "# ~chi_40 -> chi_2- nu_mu mub";
   ParticleNeutralino4.Array_Decays[118][0] = PDGchargino2; ParticleNeutralino4.Array_Decays[118][1] = PDGnutau; ParticleNeutralino4.Array_Decays[118][4] = -PDGtau; ParticleNeutralino4.Array_Decays[118][2] = neutralino4amplitudechargino2taunutaubar; ParticleNeutralino4.Array_Decays[118][3] = 3; ParticleNeutralino4.Array_Comments[118] = "# ~chi_40 -> chi_2- nu_tau taubar";
   
   double Neut4_No_1to2_Decays = 0;
   
   Neut4_No_1to2_Decays = ParticleNeutralino4.No_1to2_Decays + ParticleNeutralino4.No_grav_Decays  + ParticleNeutralino4.No_NMSSM_Decays;
   
   for (int j = 0; j<Neut4_No_1to2_Decays; j++) {
     ParticleNeutralino4.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Neut4_No_1to2_Decays; j++) {
     ParticleNeutralino4.two_width = ParticleNeutralino4.two_width + ParticleNeutralino4.Array_Decays[j][2];
   }
   for (int j=Neut4_No_1to2_Decays; j<ParticleNeutralino4.No_of_Decays; j++) {
     ParticleNeutralino4.three_width = ParticleNeutralino4.three_width + ParticleNeutralino4.Array_Decays[j][2];
   }
   
   if ( ParticleNeutralino4.three_width != ParticleNeutralino4.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for neutralino 4 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleNeutralino4.No_of_Decays = Neut4_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleNeutralino4.total_width = ParticleNeutralino4.two_width;
     }
   else {
     ParticleNeutralino4.total_width = ParticleNeutralino4.two_width + ParticleNeutralino4.three_width;
   }
   
   if ( ParticleNeutralino4.total_width != ParticleNeutralino4.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleNeutralino4.No_of_Decays; i++) {
       //   fout << i << " " << ParticleNeutralino4.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in Neutralino4 total width \n");
     }
      
   for (int i =0; i<ParticleNeutralino4.No_of_Decays; i++) {
     ParticleNeutralino4.Array_Decays[i][5]= ParticleNeutralino4.Array_Decays[i][2]/ParticleNeutralino4.total_width;
   }
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleNeutralino4, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleNeutralino4, BRTol);}
   
 }
 
 if (nmssmIsIt == true) {
   ///Neutralino5 Decays
   
   double neutralino5amplitudeuLubar=0, neutralino5amplitudeuRubar=0, neutralino5amplitudeuLbaru=0, neutralino5amplitudeuRbaru=0, neutralino5amplitudedLdbar=0, neutralino5amplitudedRdbar=0, neutralino5amplitudedLbard=0, neutralino5amplitudedRbard=0, neutralino5amplitudecLcbar=0, neutralino5amplitudecRcbar=0, neutralino5amplitudecLbarc=0, neutralino5amplitudecRbarc=0, neutralino5amplitudesLsbar=0, neutralino5amplitudesRsbar=0, neutralino5amplitudesLbars=0, neutralino5amplitudesRbars=0, neutralino5amplitudeeLebar=0, neutralino5amplitudeeRebar=0, neutralino5amplitudeeLbare=0, neutralino5amplitudeeRbare=0, neutralino5amplitudemuLmubar=0, neutralino5amplitudemuRmubar=0, neutralino5amplitudemuLbarmu=0, neutralino5amplitudemuRbarmu=0,neutralino5amplitudesnuenuebar=0, neutralino5amplitudesnuebarnue=0, neutralino5amplitudesnumunumubar=0, neutralino5amplitudesnumubarnumu=0, neutralino5amplitudetopstop1bar=0, neutralino5amplitudetopstop2bar=0, neutralino5amplitudetopbarstop1=0, neutralino5amplitudetopbarstop2=0, neutralino5amplitudebottomsbottom1bar=0, neutralino5amplitudebottomsbottom2bar=0, neutralino5amplitudebottombarsbottom1=0, neutralino5amplitudebottombarsbottom2=0, neutralino5amplitudetaustau1bar=0, neutralino5amplitudetaustau2bar=0, neutralino5amplitudetaubarstau1=0, neutralino5amplitudetaubarstau2=0, neutralino5amplitudenutausnutaubar=0, neutralino5amplitudenutaubarsnutau=0, neutralino5amplitudeWbosonpluscharginoW1=0, neutralino5amplitudeWbosonpluscharginoW2=0, neutralino5amplitudeWbosonminuscharginoW1=0, neutralino5amplitudeWbosonminuscharginoW2=0, neutralino5amplitudeHpluscharginoW1=0, neutralino5amplitudeHpluscharginoW2=0, neutralino5amplitudeHminuscharginoW1=0, neutralino5amplitudeHminuscharginoW2=0, neutralino5amplitudeZbosonneutralino1=0, neutralino5amplitudeZbosonneutralino2=0, neutralino5amplitudeZbosonneutralino3=0, neutralino5amplitudeZbosonneutralino4=0, neutralino5amplitudehneutralino1=0, neutralino5amplitudehneutralino2=0, neutralino5amplitudehneutralino3=0, neutralino5amplitudehneutralino4=0, neutralino5amplitudeHneutralino1=0, neutralino5amplitudeHneutralino2=0, neutralino5amplitudeHneutralino3=0, neutralino5amplitudeHneutralino4=0, neutralino5amplitudeAneutralino1=0, neutralino5amplitudeAneutralino2=0, neutralino5amplitudeAneutralino3=0, neutralino5amplitudeAneutralino4=0, neutralino5amplitudeH3neutralino1 = 0, neutralino5amplitudeH3neutralino2 = 0, neutralino5amplitudeH3neutralino3 = 0, neutralino5amplitudeH3neutralino4 = 0, neutralino5amplitudeA2neutralino1=0, neutralino5amplitudeA2neutralino2=0, neutralino5amplitudeA2neutralino3=0, neutralino5amplitudeA2neutralino4=0;
   
   if (flagneut5 == 1) {
     neutralino5amplitudeWbosonpluscharginoW1 = neutralinoamplitudedecaycharginoWNMSSM (mneut(5), MCH1, polemw, g, thetaL2, thetaR2, mixNeut, 5, 1);
     neutralino5amplitudeWbosonpluscharginoW2 = neutralinoamplitudedecaycharginoWNMSSM (mneut(5), MCH2, polemw, g, thetaL2, thetaR2, mixNeut, 5, 2);
     neutralino5amplitudeWbosonminuscharginoW1 = neutralino5amplitudeWbosonpluscharginoW1;
     neutralino5amplitudeWbosonminuscharginoW2 = neutralino5amplitudeWbosonpluscharginoW2;
     neutralino5amplitudeZbosonneutralino1 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(5), mneut(1), polemz, g, gp, mixNeut, 5, 1);
     neutralino5amplitudeZbosonneutralino2 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(5), mneut(2), polemz, g, gp, mixNeut, 5, 2);
     neutralino5amplitudeZbosonneutralino3 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(5), mneut(3), polemz, g, gp, mixNeut, 5, 3);
     neutralino5amplitudeZbosonneutralino4 = neutralinoamplitudedecayneutralinoZNMSSM (mneut(5), mneut(4), polemz, g, gp, mixNeut, 5, 4);
     
     neutralino5amplitudeHpluscharginoW1 = neutralinoamplitudecharginoHpmNMSSM (mneut(5), MCH1, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 5, 1);
     neutralino5amplitudeHpluscharginoW2 = neutralinoamplitudecharginoHpmNMSSM (mneut(5), MCH2, mHpm, g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 5, 2);
     neutralino5amplitudeHminuscharginoW1 = neutralino5amplitudeHpluscharginoW1;
     neutralino5amplitudeHminuscharginoW2 = neutralino5amplitudeHpluscharginoW2;
     
     neutralino5amplitudehneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(1), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 5, 1, 1);
     neutralino5amplitudeHneutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(1), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 5, 1, 2);
     neutralino5amplitudeH3neutralino1 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(1), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 5, 1, 3);
     neutralino5amplitudehneutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(2), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 5, 2, 1);
     neutralino5amplitudeHneutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(2), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 5, 2, 2);
     neutralino5amplitudeH3neutralino2 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(2), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 5, 2, 3);
     neutralino5amplitudehneutralino3 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(3), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 5, 3, 1);
     neutralino5amplitudeHneutralino3 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(3), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 5, 3, 2);
     neutralino5amplitudeH3neutralino3 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(3), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 5, 3, 3);
     neutralino5amplitudehneutralino4 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(4), mh0(1), g, gp, lam, kappa, mixNeut, CPEMix, 5, 4, 1);
     neutralino5amplitudeHneutralino4 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(4), mh0(2), g, gp, lam, kappa, mixNeut, CPEMix, 5, 4, 2);
     neutralino5amplitudeH3neutralino4 = neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (mneut(5), mneut(4), mh0(3), g, gp, lam, kappa, mixNeut, CPEMix, 5, 4, 3);
     
     neutralino5amplitudeAneutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(1), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 5, 1, 1);
     neutralino5amplitudeA2neutralino1 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(1), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 5, 1, 2);
     neutralino5amplitudeAneutralino2 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(2), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 5, 2, 1);
     neutralino5amplitudeA2neutralino2 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(2), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 5, 2, 2);
     neutralino5amplitudeAneutralino3 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(3), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 5, 3, 1);
     neutralino5amplitudeA2neutralino3 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(3), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 5, 3, 2);
     neutralino5amplitudeAneutralino4 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(4), mA0(1), g, gp, lam, kappa, mixNeut, CPOMix, 5, 4, 1);
     neutralino5amplitudeA2neutralino4 = neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (mneut(5), mneut(4), mA0(2), g, gp, lam, kappa, mixNeut, CPOMix, 5, 4, 2);
     
     neutralino5amplitudeuLubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), mu(1,1), mup, g, gp, mixNeut, 5, 'u', 'L');
     neutralino5amplitudeuRubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), mu(2,1), mup, g, gp, mixNeut, 5, 'u', 'R');
     neutralino5amplitudeuLbaru = neutralino5amplitudeuLubar;
     neutralino5amplitudeuRbaru = neutralino5amplitudeuRubar;
     neutralino5amplitudedLdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), md(1,1), mdo, g, gp, mixNeut, 5, 'd', 'L');
     neutralino5amplitudedRdbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), md(2,1), mdo, g, gp, mixNeut, 5, 'd', 'R');
     neutralino5amplitudedLbard = neutralino5amplitudedLdbar;
     neutralino5amplitudedRbard = neutralino5amplitudedRdbar;
     neutralino5amplitudecLcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), mu(1,2), mc, g, gp, mixNeut, 5, 'u', 'L');
     neutralino5amplitudecRcbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), mu(2,2), mc, g, gp, mixNeut, 5, 'u', 'R');
     neutralino5amplitudecLbarc = neutralino5amplitudecLcbar;
     neutralino5amplitudecRbarc = neutralino5amplitudecRcbar;
     neutralino5amplitudesLsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), md(1,2), ms, g, gp, mixNeut, 5, 'd', 'L');
     neutralino5amplitudesRsbar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), md(2,2), ms, g, gp, mixNeut, 5, 'd', 'R');
     neutralino5amplitudesLbars = neutralino5amplitudesLsbar;
     neutralino5amplitudesRbars = neutralino5amplitudesRsbar;
     neutralino5amplitudeeLebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), me(1,1), mel, g, gp, mixNeut, 5, 'l', 'L');
     neutralino5amplitudeeRebar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), me(2,1), mel, g, gp, mixNeut, 5, 'l', 'R');
     neutralino5amplitudeeLbare = neutralino5amplitudeeLebar;
     neutralino5amplitudeeRbare = neutralino5amplitudeeRebar;
     neutralino5amplitudemuLmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), me(1,2), mmu, g, gp, mixNeut, 5, 'l', 'L');
     neutralino5amplitudemuRmubar = neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (mneut(5), me(2,2), mmu, g, gp, mixNeut, 5, 'l', 'R');
     neutralino5amplitudemuLbarmu = neutralino5amplitudemuLmubar;
     neutralino5amplitudemuRbarmu = neutralino5amplitudemuRmubar;
     
     neutralino5amplitudetopstop1bar = neutralinoamplitudestoptopNMSSM (mneut(5), mu(1,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 5, 1);
     neutralino5amplitudetopstop2bar = neutralinoamplitudestoptopNMSSM (mneut(5), mu(2,3), mt, g, gp, thetat, beta, runmw, mixNeut, runmt, 5, 2);
     neutralino5amplitudetopbarstop1 = neutralino5amplitudetopstop1bar;
     neutralino5amplitudetopbarstop2 = neutralino5amplitudetopstop2bar;
     neutralino5amplitudebottomsbottom1bar = neutralinoamplitudesbottombottomNMSSM (mneut(5), md(1,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 5, 1);
     neutralino5amplitudebottomsbottom2bar = neutralinoamplitudesbottombottomNMSSM (mneut(5), md(2,3), mb, g, gp, thetab, beta, runmw, mixNeut, runmb, 5, 2);
     neutralino5amplitudebottombarsbottom1 = neutralino5amplitudebottomsbottom1bar;
     neutralino5amplitudebottombarsbottom2 = neutralino5amplitudebottomsbottom2bar;
     
     neutralino5amplitudetaustau1bar = neutralinoamplitudestautauNMSSM (mneut(5), me(1,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 5, 1);
     neutralino5amplitudetaustau2bar = neutralinoamplitudestautauNMSSM (mneut(5), me(2,3), mtau, g, gp, thetatau, beta, runmw, mixNeut, runmtau, 5, 2);
     neutralino5amplitudetaubarstau1 = neutralino5amplitudetaustau1bar;
     neutralino5amplitudetaubarstau2 = neutralino5amplitudetaustau2bar;
     
     neutralino5amplitudesnuenuebar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(5), msnu(1), 0, g, gp, mixNeut, 5);
     neutralino5amplitudesnuebarnue = neutralino5amplitudesnuenuebar;
     neutralino5amplitudesnumunumubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(5), msnu(2), 0, g, gp, mixNeut, 5);
     neutralino5amplitudesnumubarnumu = neutralino5amplitudesnumunumubar;
     neutralino5amplitudenutausnutaubar = neutralinoamplitudestauneutrinotauneutrinoNMSSM (mneut(5), msnu(3), 0, g, gp, mixNeut, 5);
     neutralino5amplitudenutaubarsnutau = neutralino5amplitudenutausnutaubar;
     
     ParticleNeutralino5.Array_Decays[0][0] = -PDGup; ParticleNeutralino5.Array_Decays[0][1] = PDGsupL; ParticleNeutralino5.Array_Decays[0][2] = neutralino5amplitudeuLubar; ParticleNeutralino5.Array_Decays[0][3] = 2; ParticleNeutralino5.Array_Comments[0] = "# ~chi_50 -> ub ~u_L";
     ParticleNeutralino5.Array_Decays[1][0] = -PDGup; ParticleNeutralino5.Array_Decays[1][1] = PDGsupR; ParticleNeutralino5.Array_Decays[1][2] = neutralino5amplitudeuRubar; ParticleNeutralino5.Array_Decays[1][3] = 2; ParticleNeutralino5.Array_Comments[1] = "# ~chi_50 -> ub ~u_R";
     ParticleNeutralino5.Array_Decays[2][0] = PDGup; ParticleNeutralino5.Array_Decays[2][1] = -PDGsupL; ParticleNeutralino5.Array_Decays[2][2] = neutralino5amplitudeuLbaru; ParticleNeutralino5.Array_Decays[2][3] = 2; ParticleNeutralino5.Array_Comments[2] = "# ~chi_50 -> u ~u_L*";
     ParticleNeutralino5.Array_Decays[3][0] = PDGup; ParticleNeutralino5.Array_Decays[3][1] = -PDGsupR; ParticleNeutralino5.Array_Decays[3][2] = neutralino5amplitudeuRbaru; ParticleNeutralino5.Array_Decays[3][3] = 2; ParticleNeutralino5.Array_Comments[3] = "# ~chi_50 -> u ~u_R*";
     ParticleNeutralino5.Array_Decays[4][0] = -PDGdown; ParticleNeutralino5.Array_Decays[4][1] = PDGsdownL; ParticleNeutralino5.Array_Decays[4][2] = neutralino5amplitudedLdbar;ParticleNeutralino5.Array_Decays[4][3] = 2;  ParticleNeutralino5.Array_Comments[4] = "# ~chi_50 -> db ~d_L";
     ParticleNeutralino5.Array_Decays[5][0] = -PDGdown; ParticleNeutralino5.Array_Decays[5][1] = PDGsdownR; ParticleNeutralino5.Array_Decays[5][2] = neutralino5amplitudedRdbar; ParticleNeutralino5.Array_Decays[5][3] = 2; ParticleNeutralino5.Array_Comments[5] = "# ~chi_50 -> db ~d_R";
     ParticleNeutralino5.Array_Decays[6][0] = PDGdown; ParticleNeutralino5.Array_Decays[6][1] = -PDGsdownL; ParticleNeutralino5.Array_Decays[6][2] = neutralino5amplitudedLbard; ParticleNeutralino5.Array_Decays[6][3] = 2; ParticleNeutralino5.Array_Comments[6] = "# ~chi_50 -> d ~d_L*";
     ParticleNeutralino5.Array_Decays[7][0] = PDGdown; ParticleNeutralino5.Array_Decays[7][1] = -PDGsdownR; ParticleNeutralino5.Array_Decays[7][2] = neutralino5amplitudedRbard; ParticleNeutralino5.Array_Decays[7][3] = 2; ParticleNeutralino5.Array_Comments[7] = "# ~chi_50 -> d ~d_R*";
     ParticleNeutralino5.Array_Decays[8][0] = -PDGcharm; ParticleNeutralino5.Array_Decays[8][1] = PDGscharmL; ParticleNeutralino5.Array_Decays[8][2] = neutralino5amplitudecLcbar; ParticleNeutralino5.Array_Decays[8][3] = 2; ParticleNeutralino5.Array_Comments[8] = "# ~chi_50 -> cb ~c_L";
     ParticleNeutralino5.Array_Decays[9][0] = -PDGcharm; ParticleNeutralino5.Array_Decays[9][1] = PDGscharmR; ParticleNeutralino5.Array_Decays[9][2] = neutralino5amplitudecRcbar; ParticleNeutralino5.Array_Decays[9][3] = 2; ParticleNeutralino5.Array_Comments[9] = "# ~chi_50 -> cb ~c_R";
     ParticleNeutralino5.Array_Decays[10][0] = PDGcharm; ParticleNeutralino5.Array_Decays[10][1] = -PDGscharmL; ParticleNeutralino5.Array_Decays[10][2] = neutralino5amplitudecLbarc; ParticleNeutralino5.Array_Decays[10][3] = 2; ParticleNeutralino5.Array_Comments[10] = "# ~chi_50 -> c ~c_L*";
     ParticleNeutralino5.Array_Decays[11][0] = PDGcharm; ParticleNeutralino5.Array_Decays[11][1] = -PDGscharmR; ParticleNeutralino5.Array_Decays[11][2] = neutralino5amplitudecRbarc; ParticleNeutralino5.Array_Decays[11][3] = 2; ParticleNeutralino5.Array_Comments[11] = "# ~chi_50 -> c ~c_R*";
     ParticleNeutralino5.Array_Decays[12][0] = -PDGstrange; ParticleNeutralino5.Array_Decays[12][1] = PDGsstrangeL; ParticleNeutralino5.Array_Decays[12][2] = neutralino5amplitudesLsbar; ParticleNeutralino5.Array_Decays[12][3] = 2; ParticleNeutralino5.Array_Comments[12] = "# ~chi_50 -> sb ~s_L"; 
     ParticleNeutralino5.Array_Decays[13][0] = -PDGstrange; ParticleNeutralino5.Array_Decays[13][1] = PDGsstrangeR; ParticleNeutralino5.Array_Decays[13][2] = neutralino5amplitudesRsbar; ParticleNeutralino5.Array_Decays[13][3] = 2; ParticleNeutralino5.Array_Comments[13] = "# ~chi_50 -> sb ~s_R";
     ParticleNeutralino5.Array_Decays[14][0] = PDGstrange; ParticleNeutralino5.Array_Decays[14][1] = -PDGsstrangeL; ParticleNeutralino5.Array_Decays[14][2] = neutralino5amplitudesLbars; ParticleNeutralino5.Array_Decays[14][3] = 2; ParticleNeutralino5.Array_Comments[14] = "# ~chi_50 -> s ~s_L*";
     ParticleNeutralino5.Array_Decays[15][0] = PDGstrange; ParticleNeutralino5.Array_Decays[15][1] = -PDGsstrangeR; ParticleNeutralino5.Array_Decays[15][2] = neutralino5amplitudesRbars; ParticleNeutralino5.Array_Decays[15][3] = 2; ParticleNeutralino5.Array_Comments[15] = "# ~chi_50 -> s ~s_R*";
     ParticleNeutralino5.Array_Decays[16][0] = -PDGelectron; ParticleNeutralino5.Array_Decays[16][1] = PDGselectronL; ParticleNeutralino5.Array_Decays[16][2] = neutralino5amplitudeeLebar; ParticleNeutralino5.Array_Decays[16][3] = 2; ParticleNeutralino5.Array_Comments[16] = "# ~chi_50 -> e+ ~e_L-";
     ParticleNeutralino5.Array_Decays[17][0] = -PDGelectron; ParticleNeutralino5.Array_Decays[17][1] = PDGselectronR; ParticleNeutralino5.Array_Decays[17][2] = neutralino5amplitudeeRebar; ParticleNeutralino5.Array_Decays[17][3] = 2; ParticleNeutralino5.Array_Comments[17] = "# ~chi_50 -> e+ ~e_R-";
     ParticleNeutralino5.Array_Decays[18][0] = PDGelectron; ParticleNeutralino5.Array_Decays[18][1] = -PDGselectronL; ParticleNeutralino5.Array_Decays[18][2] = neutralino5amplitudeeLbare; ParticleNeutralino5.Array_Decays[18][3] = 2; ParticleNeutralino5.Array_Comments[18] = "# ~chi_50 -> e ~e_L+";
     ParticleNeutralino5.Array_Decays[19][0] = PDGelectron; ParticleNeutralino5.Array_Decays[19][1] = -PDGselectronR; ParticleNeutralino5.Array_Decays[19][2] = neutralino5amplitudeeRbare; ParticleNeutralino5.Array_Decays[19][3] = 2; ParticleNeutralino5.Array_Comments[19] = "# ~chi_50 -> e ~e_R+";   
     ParticleNeutralino5.Array_Decays[20][0] = -PDGmuon; ParticleNeutralino5.Array_Decays[20][1] = PDGsmuonL; ParticleNeutralino5.Array_Decays[20][2] = neutralino5amplitudemuLmubar; ParticleNeutralino5.Array_Decays[20][3] = 2; ParticleNeutralino5.Array_Comments[20] = "# ~chi_50 -> mu+ ~mu_L-";
     ParticleNeutralino5.Array_Decays[21][0] = -PDGmuon; ParticleNeutralino5.Array_Decays[21][1] = PDGsmuonR; ParticleNeutralino5.Array_Decays[21][2] = neutralino5amplitudemuRmubar; ParticleNeutralino5.Array_Decays[21][3] = 2; ParticleNeutralino5.Array_Comments[21] = "# ~chi_50 -> mu+ ~mu_R-";
     ParticleNeutralino5.Array_Decays[22][0] = PDGmuon; ParticleNeutralino5.Array_Decays[22][1] = -PDGsmuonL; ParticleNeutralino5.Array_Decays[22][2] = neutralino5amplitudemuLbarmu; ParticleNeutralino5.Array_Decays[22][3] = 2; ParticleNeutralino5.Array_Comments[22] = "# ~chi_50 -> mu- ~mu_L+";
     ParticleNeutralino5.Array_Decays[23][0] = PDGmuon; ParticleNeutralino5.Array_Decays[23][1] = -PDGsmuonR; ParticleNeutralino5.Array_Decays[23][2] = neutralino5amplitudemuRbarmu; ParticleNeutralino5.Array_Decays[23][3] = 2; ParticleNeutralino5.Array_Comments[23] = "# ~chi_50 -> mu- ~mu_R+";
     ParticleNeutralino5.Array_Decays[24][0] = PDGnuelectron; ParticleNeutralino5.Array_Decays[24][1] = -PDGnuselectronL; ParticleNeutralino5.Array_Decays[24][2] = neutralino5amplitudesnuebarnue; ParticleNeutralino5.Array_Decays[24][3] = 2; ParticleNeutralino5.Array_Comments[24] = "# ~chi_50 -> nu_e ~nu_eL*";
     ParticleNeutralino5.Array_Decays[25][0] = -PDGnuelectron; ParticleNeutralino5.Array_Decays[25][1] = PDGnuselectronL; ParticleNeutralino5.Array_Decays[25][2] = neutralino5amplitudesnuenuebar; ParticleNeutralino5.Array_Decays[25][3] = 2; ParticleNeutralino5.Array_Comments[25] = "# ~chi_50 -> nu_eb ~nu_eL";
     ParticleNeutralino5.Array_Decays[26][0] = PDGnumuon; ParticleNeutralino5.Array_Decays[26][1] = -PDGnusmuonL; ParticleNeutralino5.Array_Decays[26][2] = neutralino5amplitudesnumubarnumu; ParticleNeutralino5.Array_Decays[26][3] = 2; ParticleNeutralino5.Array_Comments[26] = "# ~chi_50 -> numu ~nu_muL*";
     ParticleNeutralino5.Array_Decays[27][0] = -PDGnumuon; ParticleNeutralino5.Array_Decays[27][1] = PDGnusmuonL; ParticleNeutralino5.Array_Decays[27][2] = neutralino5amplitudesnumunumubar; ParticleNeutralino5.Array_Decays[27][3] = 2; ParticleNeutralino5.Array_Comments[27] = "# ~chi_50 -> nu_mub ~nu_muL";
     ParticleNeutralino5.Array_Decays[28][0] = PDGtop; ParticleNeutralino5.Array_Decays[28][1] = -PDGstop1; ParticleNeutralino5.Array_Decays[28][2] = neutralino5amplitudetopstop1bar; ParticleNeutralino5.Array_Decays[28][3] = 2; ParticleNeutralino5.Array_Comments[28] = "# ~chi_50 -> t ~t_1*";
     ParticleNeutralino5.Array_Decays[29][0] = PDGtop; ParticleNeutralino5.Array_Decays[29][1] = -PDGstop2; ParticleNeutralino5.Array_Decays[29][2] = neutralino5amplitudetopstop2bar; ParticleNeutralino5.Array_Decays[29][3] = 2; ParticleNeutralino5.Array_Comments[29] = "# ~chi_50 -> t ~t_2*";
     ParticleNeutralino5.Array_Decays[30][0] = -PDGtop; ParticleNeutralino5.Array_Decays[30][1] = PDGstop1; ParticleNeutralino5.Array_Decays[30][2] = neutralino5amplitudetopbarstop1; ParticleNeutralino5.Array_Decays[30][3] = 2; ParticleNeutralino5.Array_Comments[30] = "# ~chi_50 -> tb ~t_1";
     ParticleNeutralino5.Array_Decays[31][0] = -PDGtop; ParticleNeutralino5.Array_Decays[31][1] = PDGstop2; ParticleNeutralino5.Array_Decays[31][2] = neutralino5amplitudetopbarstop2; ParticleNeutralino5.Array_Decays[31][3] = 2; ParticleNeutralino5.Array_Comments[31] = "# ~chi_50 -> tb ~t_2";
     ParticleNeutralino5.Array_Decays[32][0] = PDGbottom; ParticleNeutralino5.Array_Decays[32][1] = -PDGsbottom1; ParticleNeutralino5.Array_Decays[32][2] = neutralino5amplitudebottomsbottom1bar; ParticleNeutralino5.Array_Decays[32][3] = 2; ParticleNeutralino5.Array_Comments[32] = "# ~chi_50 -> b ~b_1*";
     ParticleNeutralino5.Array_Decays[33][0] = PDGbottom; ParticleNeutralino5.Array_Decays[33][1] = -PDGsbottom2; ParticleNeutralino5.Array_Decays[33][2] = neutralino5amplitudebottomsbottom2bar; ParticleNeutralino5.Array_Decays[33][3] = 2; ParticleNeutralino5.Array_Comments[33] = "# ~chi_50 -> b ~b_2*";
     ParticleNeutralino5.Array_Decays[34][0] = -PDGbottom; ParticleNeutralino5.Array_Decays[34][1] = PDGsbottom1; ParticleNeutralino5.Array_Decays[34][2] = neutralino5amplitudebottombarsbottom1; ParticleNeutralino5.Array_Decays[34][3] = 2; ParticleNeutralino5.Array_Comments[34] = "# ~chi_50 -> bb ~b_1";
     ParticleNeutralino5.Array_Decays[35][0] = -PDGbottom; ParticleNeutralino5.Array_Decays[35][1] = PDGsbottom2; ParticleNeutralino5.Array_Decays[35][2] = neutralino5amplitudebottombarsbottom2; ParticleNeutralino5.Array_Decays[35][3] = 2; ParticleNeutralino5.Array_Comments[35] = "# ~chi_50 -> bb ~b_2";
     ParticleNeutralino5.Array_Decays[36][0] = -PDGstau1; ParticleNeutralino5.Array_Decays[36][1] = PDGtau; ParticleNeutralino5.Array_Decays[36][2] = neutralino5amplitudetaustau1bar; ParticleNeutralino5.Array_Decays[36][3] = 2; ParticleNeutralino5.Array_Comments[36] = "# ~chi_50 -> tau- ~tau_1+";
     ParticleNeutralino5.Array_Decays[37][0] = -PDGstau2; ParticleNeutralino5.Array_Decays[37][1] = PDGtau; ParticleNeutralino5.Array_Decays[37][2] = neutralino5amplitudetaustau2bar; ParticleNeutralino5.Array_Decays[37][3] = 2; ParticleNeutralino5.Array_Comments[37] = "# ~chi_50 -> tau- ~tau_2+";
     ParticleNeutralino5.Array_Decays[38][0] = PDGstau1; ParticleNeutralino5.Array_Decays[38][1] = -PDGtau; ParticleNeutralino5.Array_Decays[38][2] = neutralino5amplitudetaubarstau1; ParticleNeutralino5.Array_Decays[38][3] = 2; ParticleNeutralino5.Array_Comments[38] = "# ~chi_50 -> tau+ ~tau_1-";
     ParticleNeutralino5.Array_Decays[39][0] = PDGstau2; ParticleNeutralino5.Array_Decays[39][1] = -PDGtau; ParticleNeutralino5.Array_Decays[39][2] = neutralino5amplitudetaubarstau2; ParticleNeutralino5.Array_Decays[39][3] = 2; ParticleNeutralino5.Array_Comments[39] = "# ~chi_50 -> tau+ ~tau_2-";
     ParticleNeutralino5.Array_Decays[40][0] = PDGnutau; ParticleNeutralino5.Array_Decays[40][1] = -PDGnustauL; ParticleNeutralino5.Array_Decays[40][2] = neutralino5amplitudenutausnutaubar; ParticleNeutralino5.Array_Decays[40][3] = 2; ParticleNeutralino5.Array_Comments[40] = "# ~chi_50 -> nu_tau ~nu_tauL*";
     ParticleNeutralino5.Array_Decays[41][0] = -PDGnutau; ParticleNeutralino5.Array_Decays[41][1] = PDGnustauL; ParticleNeutralino5.Array_Decays[41][2] = neutralino5amplitudenutaubarsnutau; ParticleNeutralino5.Array_Decays[41][3] = 2; ParticleNeutralino5.Array_Comments[41] = "# ~chi_50 -> nu_taub ~nu_tauL";
     ParticleNeutralino5.Array_Decays[42][0] = PDGWplus; ParticleNeutralino5.Array_Decays[42][1] = -PDGchargino1; ParticleNeutralino5.Array_Decays[42][2] = neutralino5amplitudeWbosonpluscharginoW1; ParticleNeutralino5.Array_Decays[42][3] = 2; ParticleNeutralino5.Array_Comments[42] = "# ~chi_50 -> W+ ~chi_1-";
     ParticleNeutralino5.Array_Decays[43][0] = PDGWplus; ParticleNeutralino5.Array_Decays[43][1] = -PDGchargino2; ParticleNeutralino5.Array_Decays[43][2] = neutralino5amplitudeWbosonpluscharginoW2; ParticleNeutralino5.Array_Decays[43][3] = 2; ParticleNeutralino5.Array_Comments[43] = "# ~chi_50 -> W+ ~chi_2-";
     ParticleNeutralino5.Array_Decays[44][0] = -PDGWplus; ParticleNeutralino5.Array_Decays[44][1] = PDGchargino1; ParticleNeutralino5.Array_Decays[44][2] = neutralino5amplitudeWbosonminuscharginoW1; ParticleNeutralino5.Array_Decays[44][3] = 2; ParticleNeutralino5.Array_Comments[44] = "# ~chi_50 -> W- ~chi_1+";
     ParticleNeutralino5.Array_Decays[45][0] = -PDGWplus; ParticleNeutralino5.Array_Decays[45][1] = PDGchargino2; ParticleNeutralino5.Array_Decays[45][2] = neutralino5amplitudeWbosonminuscharginoW2; ParticleNeutralino5.Array_Decays[45][3] = 2; ParticleNeutralino5.Array_Comments[45] = "# ~chi_50 -> W- ~chi_2+";
     ParticleNeutralino5.Array_Decays[46][0] = PDGHplus; ParticleNeutralino5.Array_Decays[46][1] = -PDGchargino1; ParticleNeutralino5.Array_Decays[46][2] = neutralino5amplitudeHpluscharginoW1; ParticleNeutralino5.Array_Decays[46][3] = 2; ParticleNeutralino5.Array_Comments[46] = "# ~chi_50 -> H+ ~chi_1-";
     ParticleNeutralino5.Array_Decays[47][0] = PDGHplus; ParticleNeutralino5.Array_Decays[47][1] = -PDGchargino2; ParticleNeutralino5.Array_Decays[47][2] = neutralino5amplitudeHpluscharginoW2; ParticleNeutralino5.Array_Decays[47][3] = 2; ParticleNeutralino5.Array_Comments[47] = "# ~chi_50 -> H+ ~chi_2-";
     ParticleNeutralino5.Array_Decays[48][0] = -PDGHplus; ParticleNeutralino5.Array_Decays[48][1] = PDGchargino1; ParticleNeutralino5.Array_Decays[48][2] = neutralino5amplitudeHminuscharginoW1; ParticleNeutralino5.Array_Decays[48][3] = 2; ParticleNeutralino5.Array_Comments[48] = "# ~chi_50 -> H- ~chi_1+";
     ParticleNeutralino5.Array_Decays[49][0] = -PDGHplus; ParticleNeutralino5.Array_Decays[49][1] = PDGchargino2; ParticleNeutralino5.Array_Decays[49][2] = neutralino5amplitudeHminuscharginoW2; ParticleNeutralino5.Array_Decays[49][3] = 2; ParticleNeutralino5.Array_Comments[49] = "# ~chi_50 -> H- ~chi_2+";
     ParticleNeutralino5.Array_Decays[50][0] = PDGZboson; ParticleNeutralino5.Array_Decays[50][1] = PDGneutralino1; ParticleNeutralino5.Array_Decays[50][2] = neutralino5amplitudeZbosonneutralino1; ParticleNeutralino5.Array_Decays[50][3] = 2; ParticleNeutralino5.Array_Comments[50] = "# ~chi_50 -> Z ~chi_10";
     ParticleNeutralino5.Array_Decays[51][0] = PDGZboson; ParticleNeutralino5.Array_Decays[51][1] = PDGneutralino2; ParticleNeutralino5.Array_Decays[51][2] = neutralino5amplitudeZbosonneutralino2; ParticleNeutralino5.Array_Decays[51][3] = 2; ParticleNeutralino5.Array_Comments[51] = "# ~chi_50 -> Z ~chi_20";
     ParticleNeutralino5.Array_Decays[52][0] = PDGZboson; ParticleNeutralino5.Array_Decays[52][1] = PDGneutralino3; ParticleNeutralino5.Array_Decays[52][2] = neutralino5amplitudeZbosonneutralino3; ParticleNeutralino5.Array_Decays[52][3] = 2; ParticleNeutralino5.Array_Comments[52] = "# ~chi_50 -> Z ~chi_30";
     ParticleNeutralino5.Array_Decays[53][0] = PDGZboson; ParticleNeutralino5.Array_Decays[53][1] = PDGneutralino4; ParticleNeutralino5.Array_Decays[53][2] = neutralino5amplitudeZbosonneutralino4; ParticleNeutralino5.Array_Decays[53][3] = 2; ParticleNeutralino5.Array_Comments[53] = "# ~chi_50 -> Z ~chi_40";
     ParticleNeutralino5.Array_Decays[54][0] = PDGh0; ParticleNeutralino5.Array_Decays[54][1] = PDGneutralino1; ParticleNeutralino5.Array_Decays[54][2] = neutralino5amplitudehneutralino1; ParticleNeutralino5.Array_Decays[54][3] = 2; ParticleNeutralino5.Array_Comments[54] = "# ~chi_50 -> h ~chi_10";
     ParticleNeutralino5.Array_Decays[55][0] = PDGh0; ParticleNeutralino5.Array_Decays[55][1] = PDGneutralino2; ParticleNeutralino5.Array_Decays[55][2] = neutralino5amplitudehneutralino2; ParticleNeutralino5.Array_Decays[55][3] = 2; ParticleNeutralino5.Array_Comments[55] = "# ~chi_50 -> h ~chi_20"; 
     ParticleNeutralino5.Array_Decays[56][0] = PDGh0; ParticleNeutralino5.Array_Decays[56][1] = PDGneutralino3; ParticleNeutralino5.Array_Decays[56][2] = neutralino5amplitudehneutralino3; ParticleNeutralino5.Array_Decays[56][3] = 2; ParticleNeutralino5.Array_Comments[56] = "# ~chi_50 -> h ~chi_30";
     ParticleNeutralino5.Array_Decays[57][0] = PDGh0; ParticleNeutralino5.Array_Decays[57][1] = PDGneutralino4; ParticleNeutralino5.Array_Decays[57][2] = neutralino5amplitudehneutralino4; ParticleNeutralino5.Array_Decays[57][3] = 2; ParticleNeutralino5.Array_Comments[57] = "# ~chi_50 -> h ~chi_40";
     ParticleNeutralino5.Array_Decays[58][0] = PDGH0; ParticleNeutralino5.Array_Decays[58][1] = PDGneutralino1; ParticleNeutralino5.Array_Decays[58][2] = neutralino5amplitudeHneutralino1; ParticleNeutralino5.Array_Decays[58][3] = 2; ParticleNeutralino5.Array_Comments[58] = "# ~chi_50 -> H ~chi_10";
     ParticleNeutralino5.Array_Decays[59][0] = PDGH0; ParticleNeutralino5.Array_Decays[59][1] = PDGneutralino2; ParticleNeutralino5.Array_Decays[59][2] = neutralino5amplitudeHneutralino2; ParticleNeutralino5.Array_Decays[59][3] = 2; ParticleNeutralino5.Array_Comments[59] = "# ~chi_50 -> H ~chi_20";
     ParticleNeutralino5.Array_Decays[60][0] = PDGH0; ParticleNeutralino5.Array_Decays[60][1] = PDGneutralino3; ParticleNeutralino5.Array_Decays[60][2] = neutralino5amplitudeHneutralino3; ParticleNeutralino5.Array_Decays[60][3] = 2; ParticleNeutralino5.Array_Comments[60] = "# ~chi_50 -> H ~chi_30";
     ParticleNeutralino5.Array_Decays[61][0] = PDGH0; ParticleNeutralino5.Array_Decays[61][1] = PDGneutralino4; ParticleNeutralino5.Array_Decays[61][2] = neutralino5amplitudeHneutralino4; ParticleNeutralino5.Array_Decays[61][3] = 2; ParticleNeutralino5.Array_Comments[61] = "# ~chi_50 -> H ~chi_40";
     ParticleNeutralino5.Array_Decays[62][0] = PDGA0; ParticleNeutralino5.Array_Decays[62][1] = PDGneutralino1; ParticleNeutralino5.Array_Decays[62][2] = neutralino5amplitudeAneutralino1; ParticleNeutralino5.Array_Decays[62][3] = 2; ParticleNeutralino5.Array_Comments[62] = "# ~chi_50 -> A ~chi_10";
     ParticleNeutralino5.Array_Decays[63][0] = PDGA0; ParticleNeutralino5.Array_Decays[63][1] = PDGneutralino2; ParticleNeutralino5.Array_Decays[63][2] = neutralino5amplitudeAneutralino2; ParticleNeutralino5.Array_Decays[63][3] = 2; ParticleNeutralino5.Array_Comments[63] = "# ~chi_50 -> A ~chi_20";
     ParticleNeutralino5.Array_Decays[64][0] = PDGA0; ParticleNeutralino5.Array_Decays[64][1] = PDGneutralino3; ParticleNeutralino5.Array_Decays[64][2] = neutralino5amplitudeAneutralino3; ParticleNeutralino5.Array_Decays[64][3] = 2; ParticleNeutralino5.Array_Comments[64] = "# ~chi_50 -> A ~chi_30";
     ParticleNeutralino5.Array_Decays[65][0] = PDGA0; ParticleNeutralino5.Array_Decays[65][1] = PDGneutralino4; ParticleNeutralino5.Array_Decays[65][2] = neutralino5amplitudeAneutralino4; ParticleNeutralino5.Array_Decays[65][3] = 2; ParticleNeutralino5.Array_Comments[65] = "# ~chi_50 -> A ~chi_40";
     ParticleNeutralino5.Array_Decays[66][0] = PDGH3; ParticleNeutralino5.Array_Decays[66][1] = PDGneutralino1; ParticleNeutralino5.Array_Decays[66][2] = neutralino5amplitudeH3neutralino1; ParticleNeutralino5.Array_Decays[66][3] = 2; ParticleNeutralino5.Array_Comments[66] = "# ~chi_50 -> H3 ~chi_10";
     ParticleNeutralino5.Array_Decays[67][0] = PDGH3; ParticleNeutralino5.Array_Decays[67][1] = PDGneutralino2; ParticleNeutralino5.Array_Decays[67][2] = neutralino5amplitudeH3neutralino2; ParticleNeutralino5.Array_Decays[67][3] = 2; ParticleNeutralino5.Array_Comments[67] = "# ~chi_50 -> H3 ~chi_20";
     ParticleNeutralino5.Array_Decays[68][0] = PDGH3; ParticleNeutralino5.Array_Decays[68][1] = PDGneutralino3; ParticleNeutralino5.Array_Decays[68][2] = neutralino5amplitudeH3neutralino3; ParticleNeutralino5.Array_Decays[68][3] = 2; ParticleNeutralino5.Array_Comments[68] = "# ~chi_50 -> H3 ~chi_30";
     ParticleNeutralino5.Array_Decays[69][0] = PDGH3; ParticleNeutralino5.Array_Decays[69][1] = PDGneutralino4; ParticleNeutralino5.Array_Decays[69][2] = neutralino5amplitudeH3neutralino4; ParticleNeutralino5.Array_Decays[69][3] = 2; ParticleNeutralino5.Array_Comments[69] = "# ~chi_50 -> H3 ~chi_40";
     ParticleNeutralino5.Array_Decays[70][0] = PDGA2; ParticleNeutralino5.Array_Decays[70][1] = PDGneutralino1; ParticleNeutralino5.Array_Decays[70][2] = neutralino5amplitudeA2neutralino1; ParticleNeutralino5.Array_Decays[70][3] = 2; ParticleNeutralino5.Array_Comments[70] = "# ~chi_50 -> A2 ~chi_10";
     ParticleNeutralino5.Array_Decays[71][0] = PDGA2; ParticleNeutralino5.Array_Decays[71][1] = PDGneutralino2; ParticleNeutralino5.Array_Decays[71][2] = neutralino5amplitudeA2neutralino2; ParticleNeutralino5.Array_Decays[71][3] = 2; ParticleNeutralino5.Array_Comments[71] = "# ~chi_50 -> A2 ~chi_20";
     ParticleNeutralino5.Array_Decays[72][0] = PDGA2; ParticleNeutralino5.Array_Decays[72][1] = PDGneutralino3; ParticleNeutralino5.Array_Decays[72][2] = neutralino5amplitudeA2neutralino3; ParticleNeutralino5.Array_Decays[72][3] = 2; ParticleNeutralino5.Array_Comments[72] = "# ~chi_50 -> A2 ~chi_30";
     ParticleNeutralino5.Array_Decays[73][0] = PDGA2; ParticleNeutralino5.Array_Decays[73][1] = PDGneutralino4; ParticleNeutralino5.Array_Decays[73][2] = neutralino5amplitudeA2neutralino4; ParticleNeutralino5.Array_Decays[73][3] = 2; ParticleNeutralino5.Array_Comments[73] = "# ~chi_50 -> A2 ~chi_40";
     
     double Neut5_No_1to2_Decays = 0;
     
     Neut5_No_1to2_Decays = ParticleNeutralino5.No_1to2_Decays + ParticleNeutralino5.No_grav_Decays + ParticleNeutralino5.No_NMSSM_Decays;     
     for (int j = 0; j<Neut5_No_1to2_Decays; j++) {
       ParticleNeutralino5.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
     }
     
     for (int j=0; j<Neut5_No_1to2_Decays; j++) {
       ParticleNeutralino5.two_width = ParticleNeutralino5.two_width + ParticleNeutralino5.Array_Decays[j][2];
     }
     for (int j=Neut5_No_1to2_Decays; j<ParticleNeutralino5.No_of_Decays; j++) {
       ParticleNeutralino5.three_width = ParticleNeutralino5.three_width + ParticleNeutralino5.Array_Decays[j][2]; ///0 as no 1->3 decays included yet in NMSSM
     }
     
     if ( ParticleNeutralino5.three_width != ParticleNeutralino5.three_width) /// Tests for a nan as only nans aren't equal to themselves
       {
	 fout << "# Three body decays give nan for neutralino 5 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
	 errorflag = -1;
	 ParticleNeutralino5.No_of_Decays = Neut5_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
	 ParticleNeutralino5.total_width = ParticleNeutralino5.two_width;
       }
     else {
       ParticleNeutralino5.total_width = ParticleNeutralino5.two_width + ParticleNeutralino5.three_width;
     }
     
     if ( ParticleNeutralino5.total_width != ParticleNeutralino5.total_width) /// Tests for a nan as only nans aren't equal to themselves
       {
	 errorflag = -1;
	 // for (int i = 0; i<ParticleNeutralino5.No_of_Decays; i++) {
	 //   fout << i << " " << ParticleNeutralino5.Array_Decays[i][2] << endl;
	 // }	  
	 throw( "nan in Neutralino5 total width \n");
       }
     
     for (int i =0; i<ParticleNeutralino5.No_of_Decays; i++) {
       ParticleNeutralino5.Array_Decays[i][5]= ParticleNeutralino5.Array_Decays[i][2]/ParticleNeutralino5.total_width;
     }
     
     if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleNeutralino5, BRTol);}
     else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleNeutralino5, BRTol);}
   }

 }

///Higgs decays
///higgsl decays

 double h0amplitudeuantiu=0, h0amplitudedantid=0, h0amplitudesantis=0, h0amplitudecantic=0, h0amplitudebantib=0, h0amplitudeeantie=0, h0amplitudemuantimu=0, h0amplitudetauantitau=0, h0amplitudeneutZ1neutZ1=0, h0amplitudeneutZ1neutZ2=0, h0amplitudeneutZ1neutZ3=0, h0amplitudeneutZ1neutZ4=0, h0amplitudeneutZ2neutZ2=0, h0amplitudeneutZ2neutZ3=0, h0amplitudeneutZ2neutZ4=0, h0amplitudeneutZ3neutZ3=0, h0amplitudeneutZ3neutZ4=0, h0amplitudeneutZ4neutZ4=0, h0amplitudecharW1charW1=0, h0amplitudecharW1charW2=0, h0amplitudecharW2charW2=0, h0amplitudehiggsAhiggsA=0, h0amplitudehiggsAZboson=0, h0amplitudesupLantisupL=0, h0amplitudesupLantisupR=0, h0amplitudesupRantisupL=0, h0amplitudesupRantisupR=0, h0amplitudesdownLantisdownL=0, h0amplitudesdownLantisdownR=0, h0amplitudesdownRantisdownL=0, h0amplitudesdownRantisdownR=0, h0amplitudescharmLantischarmL=0, h0amplitudescharmLantischarmR=0, h0amplitudescharmRantischarmL=0, h0amplitudescharmRantischarmR=0, h0amplitudesstrangeLantisstrangeL=0, h0amplitudesstrangeLantisstrangeR=0, h0amplitudesstrangeRantisstrangeL=0, h0amplitudesstrangeRantisstrangeR=0, h0amplitudesnueLantisnueL=0, h0amplitudeselectronLantiselectronL=0, h0amplitudeselectronRantiselectronR=0, h0amplitudeselectronLantiselectronR=0, h0amplitudeselectronRantiselectronL=0, h0amplitudesnumuLantisnumuL=0, h0amplitudesnutauLantisnutauL=0, h0amplitudesmuonLantismuonL=0, h0amplitudesmuonRantismuonR=0, h0amplitudesmuonLantismuonR=0, h0amplitudesmuonRantismuonL=0, h0amplitudestau1antistau1=0, h0amplitudestau2antistau2=0, h0amplitudestau1antistau2=0, h0amplitudestau2antistau1=0, h0amplitudestop1antistop1=0, h0amplitudestop1antistop2=0, h0amplitudestop2antistop1=0, h0amplitudestop2antistop2=0, h0amplitudesbottom1antisbottom1=0, h0amplitudesbottom1antisbottom2=0, h0amplitudesbottom2antisbottom1=0, h0amplitudesbottom2antisbottom2=0, h0amplitudegluongluon=0, h0amplitudegammagamma=0, h0amplitudeWW=0, h0amplitudeZZ=0, h0amplitudeZgamma=0,h0amplitudehiggsAhiggsA2=0, h0amplitudehiggsA2higgsA2=0, h0amplitudehiggsA2Zboson=0, h0amplitudeHpmHpm = 0, h0amplitudeWHpm = 0;
 
 double h0amplitudeneutZ1neutZ5 = 0, h0amplitudeneutZ2neutZ5 = 0, h0amplitudeneutZ3neutZ5 = 0, h0amplitudeneutZ4neutZ5 = 0, h0amplitudeneutZ5neutZ5 = 0;

 // mh0(1) = 125.09;

 if (flagh1 == 1) {
   ///If QCDcorr off use these below -> running masses used to approximate some of QCD corrections at tree-level
   if (QCDcorr == false) {
     ///No decays to u or d as PWs to u and d are tiny as proportional to yukawas squared
     ///Use running masses here to try to approximate some of the correction (which aren't included)
     h0amplitudecantic = higgslorHamplitudedecayquarkantiquark (mh0(1), runmc, g, alpha, beta, runmw, 1, 'l', CPEMix, nmssmIsIt, QCDcorr, alphasAtMh);
     h0amplitudesantis = higgslorHamplitudedecayquarkantiquark (mh0(1), runms, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, QCDcorr, alphasAtMh);
     h0amplitudebantib = higgslorHamplitudedecayquarkantiquark (mh0(1), runmb, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, QCDcorr, alphasAtMh); 
     ///No decay to two tops as kinematically forbidden
   }
   ///With QCDcorr on then use actual pole masses for quarks as corrections being accounted for
   else {
       h0amplitudecantic = higgslorHamplitudedecayquarkantiquark (mh0(1), mcpole, g, alpha, beta, runmw, 1, 'l', CPEMix, nmssmIsIt, QCDcorr, alphasAtMh);
       h0amplitudesantis = higgslorHamplitudedecayquarkantiquark (mh0(1), mspole, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, QCDcorr, alphasAtMh);
     ///mcpole and mspole set in decays.h, this values used are those appropriate for the scheme used for the h -> qq QCD corrections, as in hdecay
       h0amplitudebantib = higgslorHamplitudedecayquarkantiquark (mh0(1), mbPole, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, QCDcorr, alphasAtMh); 
     ///No decay to two tops as kinematically forbidden



   }


   h0amplitudeeantie = higgslorHamplitudedecayquarkantiquark (mh0(1), runmel, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, false, alphasAtMh)/3; ///0 as leptons are like down-type quarks, divided by three as Nc is three for quarks but 1 for leptons
   h0amplitudemuantimu = higgslorHamplitudedecayquarkantiquark (mh0(1), runmmu, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, false, alphasAtMh)/3;
   h0amplitudetauantitau = higgslorHamplitudedecayquarkantiquark (mh0(1), runmtau, g, alpha, beta, runmw, 0, 'l', CPEMix, nmssmIsIt, false, alphasAtMh)/3;
   
   if (nmssmIsIt == false) {
     h0amplitudesupLantisupL = higgshamplitudedecay2squarksamehand (mh0(1), mu(1,1), mu(1,1), g, gp, alpha, beta, runmw, runmu, runmd, 1);
     h0amplitudesupRantisupR = higgshamplitudedecay2squarksamehand (mh0(1), mu(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, runmd, 3);
     h0amplitudesdownLantisdownL = higgshamplitudedecay2squarksamehand (mh0(1), md(1,1), md(1,1), g, gp, alpha, beta, runmw, runmu, runmd, 2);
     h0amplitudesdownRantisdownR = higgshamplitudedecay2squarksamehand (mh0(1), md(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, runmd, 4);
     h0amplitudescharmLantischarmL = higgshamplitudedecay2squarksamehand (mh0(1), mu(1,2), mu(1,2), g, gp, alpha, beta, runmw, runmc, runms, 1);
     h0amplitudescharmRantischarmR = higgshamplitudedecay2squarksamehand (mh0(1), mu(2,2), mu(2,2), g, gp, alpha, beta, runmw, runmc, runms, 3);
     h0amplitudesstrangeLantisstrangeL = higgshamplitudedecay2squarksamehand (mh0(1), md(2,1), md(2,1), g, gp, alpha, beta, runmw, runmc, runms, 2);
     h0amplitudesstrangeRantisstrangeR = higgshamplitudedecay2squarksamehand (mh0(1), md(2,2), md(2,2), g, gp, alpha, beta, runmw, runmc, runms, 4);
     h0amplitudesnueLantisnueL = higgshamplitudedecay2sleptonsamehand (mh0(1), msnu(1), msnu(1), g, gp, alpha, beta, runmw, runmel, 1);
     h0amplitudeselectronLantiselectronL = higgshamplitudedecay2sleptonsamehand (mh0(1), me(1,1), me(1,1), g, gp, alpha, beta, runmw, runmel, 2);
     h0amplitudeselectronRantiselectronR = higgshamplitudedecay2sleptonsamehand (mh0(1), me(2,1), me(2,1), g, gp, alpha, beta, runmw, runmel, 3);
     h0amplitudesnumuLantisnumuL = higgshamplitudedecay2sleptonsamehand (mh0(1), msnu(2), msnu(2), g, gp, alpha, beta, runmw, runmmu, 1);
     h0amplitudesmuonLantismuonL = higgshamplitudedecay2sleptonsamehand (mh0(1), me(1,2), me(1,2), g, gp, alpha, beta, runmw, runmmu, 2);
     h0amplitudesmuonRantismuonR = higgshamplitudedecay2sleptonsamehand (mh0(1), me(2,2), me(2,2), g, gp, alpha, beta, runmw, runmmu, 3);
     h0amplitudesnutauLantisnutauL = higgshamplitudedecay2sleptonsamehand (mh0(1), msnu(3), msnu(3), g, gp, alpha, beta, runmw, runmtau, 1);
     h0amplitudesupLantisupR = higgshamplitudedecay2squarkdiffhand (mh0(1), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 1);
     h0amplitudesupRantisupL = higgshamplitudedecay2squarkdiffhand (mh0(1), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 1);
     h0amplitudesdownLantisdownR = higgshamplitudedecay2squarkdiffhand (mh0(1), md(1,1), md(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 2);
     h0amplitudesdownRantisdownL = higgshamplitudedecay2squarkdiffhand (mh0(1), md(1,1), md(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 2);
     h0amplitudescharmLantischarmR = higgshamplitudedecay2squarkdiffhand (mh0(1), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 1);
     h0amplitudescharmRantischarmL = higgshamplitudedecay2squarkdiffhand (mh0(1), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 1);
     h0amplitudesstrangeLantisstrangeR = higgshamplitudedecay2squarkdiffhand (mh0(1), md(2,1), md(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 2);
     h0amplitudesstrangeRantisstrangeL = higgshamplitudedecay2squarkdiffhand (mh0(1), md(2,1), md(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 2);
     h0amplitudeselectronLantiselectronR = higgshamplitudedecay2sleptondiffhand (mh0(1), me(1,1), me(2,1), g, alpha, beta, runmw, runmel, greekmu, Ae, 1);
     h0amplitudeselectronRantiselectronL = higgshamplitudedecay2sleptondiffhand (mh0(1), me(2,1), me(1,1), g, alpha, beta, runmw, runmel, greekmu, Ae, 1);
     h0amplitudesmuonLantismuonR = higgshamplitudedecay2sleptondiffhand (mh0(1), me(1,2), me(2,2), g, alpha, beta, runmw, mmu, greekmu, Amu, 1);
     h0amplitudesmuonRantismuonL = higgshamplitudedecay2sleptondiffhand (mh0(1), me(2,2), me(2,1), g, alpha, beta, runmw, mmu, greekmu, Amu, 1);
     h0amplitudestop1antistop1 = higgshamplitudedecaystop1stop1 (mh0(1), mu(1,3), mu(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudestop2antistop2 = higgshamplitudedecaystop2stop2 (mh0(1), mu(2,3), mu(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudestop1antistop2 = higgshamplitudedecaystop1stop2 (mh0(1), mu(1,3), mu(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudestop2antistop1 = higgshamplitudedecaystop1stop2 (mh0(1), mu(2,3), mu(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudesbottom1antisbottom1 = higgshamplitudedecaysbottom1sbottom1(mh0(1), md(1,3), md(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudesbottom2antisbottom2 = higgshamplitudedecaysbottom2sbottom2(mh0(1), md(2,3), md(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudesbottom1antisbottom2 = higgshamplitudedecaysbottom1sbottom2 (mh0(1), md(1,3), md(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudesbottom2antisbottom1 = higgshamplitudedecaysbottom1sbottom2 (mh0(1), md(2,3), md(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     h0amplitudestau1antistau1 = higgshamplitudedecaystau1stau1 (mh0(1), me(1,3), me(1,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     h0amplitudestau2antistau2 = higgshamplitudedecaystau2stau2 (mh0(1), me(2,3), me(2,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     h0amplitudestau1antistau2 = higgshamplitudedecaystau1stau2 (mh0(1), me(1,3), me(2,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     h0amplitudestau2antistau1 = higgshamplitudedecaystau1stau2 (mh0(1), me(2,3), me(1,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     
     h0amplitudecharW1charW1 = higgsphiamplitudedecaysamechargino (mh0(1), mch(1), g, thetaL2, thetaR2, alpha, beta, 1, 'h');
     h0amplitudecharW2charW2 = higgsphiamplitudedecaysamechargino (mh0(1), mch(2), g, thetaL2, thetaR2, alpha, beta, 2, 'h');
     h0amplitudecharW1charW2 = higgsphiamplitudedecaydifchargino (mh0(1), mch(1), mch(2), g, thetaL2, thetaR2, alpha, beta, 'h');

     h0amplitudegammagamma = higgsesamplitudedecaygammagammatotal(mh0(1), g, gp, alphaAtMh, runmw, polemw, alpha, beta, mtAtMh, mbAtMh, mcAtMh, runmtau, mHpm, mu(1,3), mu(2,3), md(1,3), md(2,3), me(1,3), me(2,3), mch(1), mch(2), thetaL, thetaR, thetat, thetab, thetatau, greekmu, At, Ab, Atau, 'h'); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     h0amplitudegluongluon = higgsesamplitudedecaygluongluontotal(mh0(1), g, g3atmh0, gp, runmw, alpha, beta, mtPole, mbPole, mcpole, mu(1,3), mu(2,3), md(1,3), md(2,3), thetat, thetab, greekmu, At, Ab, ms, mu(1,2), mu(2,2), md(1,2), md(2,2), Ac, As, mup, mdo, mu(1,1), mu(2,1), md(1,1), md(2,1), Au, Ad, 'h', QCDcorr); ///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     h0amplitudeZgamma = higgsesamplitudedecayZbosonphotontotal(mh0(1), polemz, g, gp, alphaAtMh, polemw, runmw, alpha, beta, mtAtMh, mbAtMh, mcAtMh, msAtMh, mu(1,3), mu(2,3), md(1,3), md(2,3), mHpm, thetat, thetab, greekmu, At, Ab, 'h'); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW


     h0amplitudeneutZ1neutZ1 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(1), mneut(1), g, tanthetaW, alpha, mixNeut, 1, 1, 'h');
     h0amplitudeneutZ1neutZ2 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(1), mneut(2), g, tanthetaW, alpha, mixNeut, 1, 2, 'h');
     h0amplitudeneutZ1neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(1), mneut(3), g, tanthetaW, alpha, mixNeut, 1, 3, 'h');
     h0amplitudeneutZ1neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(1), mneut(4), g, tanthetaW, alpha, mixNeut, 1, 4, 'h');
     h0amplitudeneutZ2neutZ2 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(2), mneut(2), g, tanthetaW, alpha, mixNeut, 2, 2, 'h');
     h0amplitudeneutZ2neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(2), mneut(3), g, tanthetaW, alpha, mixNeut, 2, 3, 'h');
     h0amplitudeneutZ2neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(2), mneut(4), g, tanthetaW, alpha, mixNeut, 2, 4, 'h');
     h0amplitudeneutZ3neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(3), mneut(3), g, tanthetaW, alpha, mixNeut, 3, 3, 'h');
     h0amplitudeneutZ3neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(3), mneut(4), g, tanthetaW, alpha, mixNeut, 3, 4, 'h');
     h0amplitudeneutZ4neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(1), mneut(4), mneut(4), g, tanthetaW, alpha, mixNeut, 4, 4, 'h');
     
     h0amplitudehiggsAhiggsA = higgshamplitudedecayAA (mh0(1), mA0(1), g, gp, alpha, beta, runmw);
     h0amplitudehiggsAZboson = higgshamplitudedecayhiggsAZboson (mh0(1), polemz, mA0(1), g, gp, alpha, beta);
 

   
   }
   
   else if (nmssmIsIt == true) {
     h0amplitudesupLantisupL = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), mu(1,1), mu(1,1), g, gp, alpha, beta, runmw, runmu, CPEMix, 1);
     h0amplitudesupRantisupR = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), mu(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, CPEMix, 3);
     h0amplitudesdownLantisdownL = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), md(1,1), md(1,1), g, gp, alpha, beta, runmw, runmd, CPEMix, 2);
     h0amplitudesdownRantisdownR = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), md(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmd, CPEMix, 4);
     h0amplitudescharmLantischarmL = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), mu(1,2), mu(1,2), g, gp, alpha, beta, runmw, runmc, CPEMix, 1);
     h0amplitudescharmRantischarmR = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), mu(2,2), mu(2,2), g, gp, alpha, beta, runmw, runmc, CPEMix, 3);
     h0amplitudesstrangeLantisstrangeL = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), md(2,1), md(2,1), g, gp, alpha, beta, runmw, runms, CPEMix, 2);
     h0amplitudesstrangeRantisstrangeR = higgshamplitudedecay2squarksamehandNMSSM (mh0(1), md(2,2), md(2,2), g, gp, alpha, beta, runmw, runms, CPEMix, 4);
     h0amplitudesnueLantisnueL = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), msnu(1), msnu(1), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     h0amplitudeselectronLantiselectronL = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), me(1,1), me(1,1), g, gp, alpha, beta, runmw, runmel, CPEMix, 2);
     h0amplitudeselectronRantiselectronR = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), me(2,1), me(2,1), g, gp, alpha, beta, runmw, runmel, CPEMix, 3);
     h0amplitudesnumuLantisnumuL = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), msnu(2), msnu(2), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     h0amplitudesmuonLantismuonL = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), me(1,2), me(1,2), g, gp, alpha, beta, runmw, runmmu, CPEMix, 2);
     h0amplitudesmuonRantismuonR = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), me(2,2), me(2,2), g, gp, alpha, beta, runmw, runmmu, CPEMix, 3);
     h0amplitudesnutauLantisnutauL = higgshamplitudedecay2sleptonsamehandNMSSM (mh0(1), msnu(3), msnu(3), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     
     h0amplitudesupLantisupR = higgshamplitudedecay2squarkdiffhandNMSSM(mh0(1), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, Au, mueff, lam, CPEMix, 1, 1);
     h0amplitudesupRantisupL = higgshamplitudedecay2squarkdiffhandNMSSM(mh0(1), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, Au, mueff, lam, CPEMix, 1, 1);
     h0amplitudesdownLantisdownR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), md(1,1), md(2,1), g, alpha, beta, runmw, runmd, Ad, mueff, lam, CPEMix, 2, 1);
     h0amplitudesdownRantisdownL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), md(1,1), md(2,1), g, alpha, beta, runmw, runmd, Ad, mueff, lam, CPEMix, 2, 1);
     h0amplitudescharmLantischarmR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, Ac, mueff, lam, CPEMix, 1, 1);
     h0amplitudescharmRantischarmL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, Ac, mueff, lam, CPEMix, 1, 1);
     h0amplitudesstrangeLantisstrangeR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), md(2,1), md(2,2), g, alpha, beta, runmw, runms, As, mueff, lam, CPEMix, 2, 1);
     h0amplitudesstrangeRantisstrangeL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), md(2,1), md(2,2), g, alpha, beta, runmw, runms, As, mueff, lam, CPEMix, 2, 1);
     h0amplitudeselectronLantiselectronR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), me(1,1), me(2,1), g, alpha, beta, runmw, runmel, Ae, mueff, lam, CPEMix, 2, 1)/3;
     h0amplitudeselectronRantiselectronL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), me(2,1), me(1,1), g, alpha, beta, runmw, runmel, Ae, mueff, lam, CPEMix, 2, 1)/3;
     h0amplitudesmuonLantismuonR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), me(1,2), me(2,2), g, alpha, beta, runmw, runmmu, Amu, mueff, lam, CPEMix, 2, 1)/3;
     h0amplitudesmuonRantismuonL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(1), me(2,2), me(2,1), g, alpha, beta, runmw, runmmu, Amu, mueff, lam, CPEMix, 2, 1)/3;
     
     h0amplitudestop1antistop1 = higgsCPevenamplitudedecaystopistopiNMSSM (mh0(1), mu(1,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 1, 1);
     h0amplitudestop2antistop2 = higgsCPevenamplitudedecaystopistopiNMSSM (mh0(1), mu(2,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 2, 1) ;
     h0amplitudestop1antistop2 = higgsCPevenamplitudedecaystopistopjNMSSM (mh0(1), mu(1,3), mu(2,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 1); 
     h0amplitudestop2antistop1 = h0amplitudestop1antistop2;
     h0amplitudesbottom1antisbottom1 = higgsCPevenamplitudedecaysbottomisbottomiNMSSM (mh0(1), md(1,3), thetab, runmb, g, gp, runmw, beta,  CPEMix, Ab, mueff, lam, 1, 1);
     h0amplitudesbottom2antisbottom2 = higgsCPevenamplitudedecaysbottomisbottomiNMSSM (mh0(1), md(2,3), thetab, runmb, g, gp, runmw, beta,  CPEMix, Ab, mueff, lam, 2, 1);
     h0amplitudesbottom1antisbottom2 = higgsCPevenamplitudedecaysbottomisbottomjNMSSM (mh0(1), md(1,3), md(2,3), thetab, runmb, g, gp, runmw, beta, CPEMix, Ab, mueff, lam, 1);
     h0amplitudesbottom2antisbottom1 = h0amplitudesbottom1antisbottom2;
     h0amplitudestau1antistau1 = higgsCPevenamplitudedecaystauistauiNMSSM (mh0(1), me(1,3), thetatau - PI/2, runmtau, g, gp, runmw, beta,  CPEMix, Atau, mueff, lam, 1, 1); 
     h0amplitudestau2antistau2 = higgsCPevenamplitudedecaystauistauiNMSSM (mh0(1), me(2,3), thetatau - PI/2, runmtau, g, gp, runmw, beta,  CPEMix, Atau, mueff, lam, 2, 1);
     h0amplitudestau1antistau2 = higgsCPevenamplitudedecaystauistaujNMSSM (mh0(1), me(1,3), me(2,3), thetatau - PI/2, runmtau, g, gp, runmw, beta, CPEMix, Atau, mueff, lam, 1);
     h0amplitudestau2antistau1 = h0amplitudestau1antistau2;
     
     h0amplitudecharW1charW1 = higgsphiamplitudedecaysamecharginoNMSSM (mh0(1), mch(1), g, thetaL2, thetaR2, lam, CPEMix, 1, 1);
     h0amplitudecharW2charW2 = higgsphiamplitudedecaysamecharginoNMSSM (mh0(1), mch(2), g, thetaL2, thetaR2, lam, CPEMix, 2, 1);
     h0amplitudecharW1charW2 = higgsphiamplitudedecaydiffcharginoNMSSM (mh0(1), mch(1), mch(2), g, thetaL2, thetaR2, lam, CPEMix, 1);
     h0amplitudegammagamma = higgsCPevenamplitudedecaygammagammaNMSSM(mh0(1), mtAtMh, mbAtMh, mcAtMh, runmtau, runmw, mHpm, mch(1), mch(2), mu(1,2), mu(2,2), mu(1,3), mu(2,3), md(1,2), md(2,2), md(1,3), md(2,3), me(1,2), me(2,2), me(1,3), me(2,3), CPEMix, beta, g, gp, alphaAtMh,thetat, thetab, thetatau-PI/2, thetaL2, thetaR2, At, Ab, Atau, greekmu, mueff, lam, kappa, Alambda, 1); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     h0amplitudegluongluon = higgsCPevenamplitudedecaygluongluonNMSSM(mh0(1), mtPole, mbPole, mcpole, runmw, mu(1,2), mu(2,2), mu(1,3), mu(2,3), md(1,2), md(2,2), md(1,3), md(2,3), mu(1,1), mu(2,1), md(1,1), md(2,1), mtPole, mbPole, CPEMix, beta, g, gp, gs, alphasAtMh, thetat, thetab, thetaL2, thetaR2, At, Ab, greekmu, mueff, lam, kappa, Alambda, 1, QCDcorr); ///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     h0amplitudeZgamma = higgshamplitudedecayZgammaNMSSM (mh0(1), g, gp, alphaAtMh, runmw, polemz, mHpm, CPEMix, beta, mtAtMh, mbAtMh, mcAtMh, mch(1), mch(2), thetaL2, thetaR2, lam, kappa, Alambda, greekmu, mueff, 1); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     
     h0amplitudeneutZ1neutZ1 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(1), mneut(1), g, gp, CPEMix, mixNeut, lam, kappa, 1, 1, 1);
     h0amplitudeneutZ1neutZ2 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(1), mneut(2), g, gp, CPEMix, mixNeut, lam, kappa, 1, 2, 1);
     h0amplitudeneutZ1neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(1), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 1, 3, 1);
     h0amplitudeneutZ1neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(1), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 1, 4, 1);
     h0amplitudeneutZ1neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(1), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 1, 5, 1);
     h0amplitudeneutZ2neutZ2 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(2), mneut(2), g, gp, CPEMix, mixNeut, lam, kappa, 2, 2, 1);
     h0amplitudeneutZ2neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(2), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 2, 3, 1);
     h0amplitudeneutZ2neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(2), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 2, 4, 1);
     h0amplitudeneutZ2neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(2), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 2, 5, 1);
     h0amplitudeneutZ3neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(3), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 3, 3, 1);
     h0amplitudeneutZ3neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(3), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 3, 4, 1);
     h0amplitudeneutZ3neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(3), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 3, 5, 1);
     h0amplitudeneutZ4neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(4), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 4, 4, 1);
     h0amplitudeneutZ4neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(4), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 4, 5, 1);
     h0amplitudeneutZ5neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(1), mneut(5), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 5, 5, 1);
     
     h0amplitudehiggsAhiggsA = higgsCPevenamplitudedecayAANMSSM(mh0(1), mA0(1), mA0(1), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 1, 1, 1);
     h0amplitudehiggsAhiggsA2 = 2*higgsCPevenamplitudedecayAANMSSM(mh0(1), mA0(1), mA0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 1, 1, 2);
     h0amplitudehiggsA2higgsA2 = higgsCPevenamplitudedecayAANMSSM(mh0(1), mA0(2), mA0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 1, 2, 2);
     h0amplitudehiggsAZboson = higgsCPevenamplitudedecaypseudoscalarZNMSSM(mh0(1), mA0(1), polemz, g, gp, beta, CPEMix, CPOMix, 1, 1);
     h0amplitudehiggsA2Zboson = higgsCPevenamplitudedecaypseudoscalarZNMSSM(mh0(1), mA0(2), polemz, g, gp, beta, CPEMix, CPOMix, 1, 2);
     h0amplitudeHpmHpm = higgsCPevenamplitudedecayHpHmNMSSM (mh0(1), mHpm, runmw, g, gp, runmt, runmb, beta, lam, mueff, kappa, Alambda, CPEMix, 1); ///Note not included for MSSM as h0 is always lighter than Hpm in that case
     h0amplitudeWHpm = higgsCPevenamplitudedecayWHpmNMSSM (mh0(1), polemw, mHpm, beta, g, CPEMix, 1)*2; ///*2 as W+H- or W-H+
   }
   
   h0amplitudeWW = higgshamplitudedecayVV(mh0(1), polemw, polemz, g, gp, alpha, beta, 'W', CPEMix, nmssmIsIt)(1);
   h0amplitudeZZ = higgshamplitudedecayVV(mh0(1), polemw, polemz, g, gp, alpha, beta, 'Z', CPEMix, nmssmIsIt)(1);
   


   int h0WWcommentcode, h0ZZcommentcode, h0WWNDA=0, h0ZZNDA=0;
   h0WWcommentcode = higgshamplitudedecayVV(mh0(1), polemw, polemz, g, gp, alpha, beta, 'W', CPEMix, nmssmIsIt)(2);
   string h0WWcomment, h0ZZcomment;
   if (h0WWcommentcode == 1) {
     h0WWcomment = "# h -> WW* -> W f f'bar";
     h0WWNDA = 2; ///So read into other programs, e.g. PYTHIA, correctly
   }
   else if(h0WWcommentcode == 2) {
     h0WWcomment = "# h -> W+ W-";
     h0WWNDA = 2;
   }
   h0ZZcommentcode = higgshamplitudedecayVV(mh0(1), polemw, polemz, g, gp, alpha, beta, 'Z', CPEMix, nmssmIsIt)(2);
   if (h0ZZcommentcode == 1) {
     h0ZZcomment = "# h -> ZZ* -> Z f f'bar";
     h0ZZNDA = 2; ///So read into other programs, e.g. PYTHIA, correctly
   }
   else if(h0ZZcommentcode == 2) {
     h0ZZcomment = "# h -> Z Z";
     h0ZZNDA = 2;
   }
   
   Particlehiggsl.Array_Decays[0][0] = PDGup; Particlehiggsl.Array_Decays[0][1] = -PDGup; Particlehiggsl.Array_Decays[0][2] = h0amplitudeuantiu; Particlehiggsl.Array_Decays[0][3] = 2; Particlehiggsl.Array_Comments[0] = "# h -> u ub";
   Particlehiggsl.Array_Decays[1][0] = PDGdown; Particlehiggsl.Array_Decays[1][1] = -PDGdown; Particlehiggsl.Array_Decays[1][2] = h0amplitudedantid; Particlehiggsl.Array_Decays[1][3] = 2; Particlehiggsl.Array_Comments[1] = "# h -> d db";
   Particlehiggsl.Array_Decays[2][0] = PDGcharm; Particlehiggsl.Array_Decays[2][1] = -PDGcharm; Particlehiggsl.Array_Decays[2][2] = h0amplitudecantic; Particlehiggsl.Array_Decays[2][3] = 2; Particlehiggsl.Array_Comments[2] = "# h -> c cb";
   Particlehiggsl.Array_Decays[3][0] = PDGstrange; Particlehiggsl.Array_Decays[3][1] = -PDGstrange; Particlehiggsl.Array_Decays[3][2] = h0amplitudesantis; Particlehiggsl.Array_Decays[3][3] = 2; Particlehiggsl.Array_Comments[3] = "# h -> s sb";
   Particlehiggsl.Array_Decays[4][0] = PDGbottom; Particlehiggsl.Array_Decays[4][1] = -PDGbottom; Particlehiggsl.Array_Decays[4][2] = h0amplitudebantib; Particlehiggsl.Array_Decays[4][3] = 2; Particlehiggsl.Array_Comments[4] = "# h -> b bb";
   Particlehiggsl.Array_Decays[5][0] = PDGelectron; Particlehiggsl.Array_Decays[5][1] = -PDGelectron; Particlehiggsl.Array_Decays[5][2] = h0amplitudeeantie; Particlehiggsl.Array_Decays[5][3] = 2; Particlehiggsl.Array_Comments[5] = "# h -> e- e+";
   Particlehiggsl.Array_Decays[6][0] = PDGmuon; Particlehiggsl.Array_Decays[6][1] = -PDGmuon; Particlehiggsl.Array_Decays[6][2] = h0amplitudemuantimu; Particlehiggsl.Array_Decays[6][3] = 2; Particlehiggsl.Array_Comments[6] = "# h -> mu- mu+";
   Particlehiggsl.Array_Decays[7][0] = PDGtau; Particlehiggsl.Array_Decays[7][1] = -PDGtau; Particlehiggsl.Array_Decays[7][2] = h0amplitudetauantitau; Particlehiggsl.Array_Decays[7][3] = 2; Particlehiggsl.Array_Comments[7] = "# h-> tau- tau+";
   Particlehiggsl.Array_Decays[8][0] = PDGneutralino1; Particlehiggsl.Array_Decays[8][1] = PDGneutralino1; Particlehiggsl.Array_Decays[8][2] = h0amplitudeneutZ1neutZ1; Particlehiggsl.Array_Decays[8][3] = 2; Particlehiggsl.Array_Comments[8] = "# h -> ~chi_10 ~chi_10";
   Particlehiggsl.Array_Decays[9][0] = PDGneutralino1; Particlehiggsl.Array_Decays[9][1] = PDGneutralino2; Particlehiggsl.Array_Decays[9][2] = h0amplitudeneutZ1neutZ2; Particlehiggsl.Array_Decays[9][3] = 2; Particlehiggsl.Array_Comments[9] = "# h -> ~chi_10 ~chi_20";
   Particlehiggsl.Array_Decays[10][0] = PDGneutralino1; Particlehiggsl.Array_Decays[10][1] = PDGneutralino3; Particlehiggsl.Array_Decays[10][2] = h0amplitudeneutZ1neutZ3; Particlehiggsl.Array_Decays[10][3] = 2; Particlehiggsl.Array_Comments[10] = "# h -> ~chi_10 ~chi_30";
   Particlehiggsl.Array_Decays[11][0] = PDGneutralino1; Particlehiggsl.Array_Decays[11][1] = PDGneutralino4; Particlehiggsl.Array_Decays[11][2] = h0amplitudeneutZ1neutZ4; Particlehiggsl.Array_Decays[11][3] = 2; Particlehiggsl.Array_Comments[11] = "# h -> ~chi_10 ~chi_40";
   Particlehiggsl.Array_Decays[12][0] = PDGneutralino2; Particlehiggsl.Array_Decays[12][1] = PDGneutralino2; Particlehiggsl.Array_Decays[12][2] = h0amplitudeneutZ2neutZ2; Particlehiggsl.Array_Decays[12][3] = 2; Particlehiggsl.Array_Comments[12] = "# h -> ~chi_20 ~chi_20";
   Particlehiggsl.Array_Decays[13][0] = PDGneutralino2; Particlehiggsl.Array_Decays[13][1] = PDGneutralino3; Particlehiggsl.Array_Decays[13][2] = h0amplitudeneutZ2neutZ3; Particlehiggsl.Array_Decays[13][3] = 2; Particlehiggsl.Array_Comments[13] = "# h -> ~chi_20 ~chi_30";
   Particlehiggsl.Array_Decays[14][0] = PDGneutralino2; Particlehiggsl.Array_Decays[14][1] = PDGneutralino4; Particlehiggsl.Array_Decays[14][2] = h0amplitudeneutZ2neutZ4; Particlehiggsl.Array_Decays[14][3] = 2; Particlehiggsl.Array_Comments[14] = "# h -> ~chi_20 ~chi_40";
   Particlehiggsl.Array_Decays[15][0] = PDGneutralino3; Particlehiggsl.Array_Decays[15][1] = PDGneutralino3; Particlehiggsl.Array_Decays[15][2] = h0amplitudeneutZ3neutZ3; Particlehiggsl.Array_Decays[15][3] = 2; Particlehiggsl.Array_Comments[15] = "# h -> ~chi_30 ~chi_30";
   Particlehiggsl.Array_Decays[16][0] = PDGneutralino3; Particlehiggsl.Array_Decays[16][1] = PDGneutralino4; Particlehiggsl.Array_Decays[16][2] = h0amplitudeneutZ3neutZ4; Particlehiggsl.Array_Decays[16][3] = 2; Particlehiggsl.Array_Comments[16] = "# h -> ~chi_30 ~chi_40";
   Particlehiggsl.Array_Decays[17][0] = PDGneutralino4; Particlehiggsl.Array_Decays[17][1] = PDGneutralino4; Particlehiggsl.Array_Decays[17][2] = h0amplitudeneutZ4neutZ4; Particlehiggsl.Array_Decays[17][3] = 2; Particlehiggsl.Array_Comments[17] = "# h -> ~chi_40 ~chi_40";
   Particlehiggsl.Array_Decays[18][0] = PDGchargino1; Particlehiggsl.Array_Decays[18][1] = -PDGchargino1; Particlehiggsl.Array_Decays[18][2] = h0amplitudecharW1charW1; Particlehiggsl.Array_Decays[18][3] = 2; Particlehiggsl.Array_Comments[18] = "# h -> ~chi_1+ ~chi_1-";
   Particlehiggsl.Array_Decays[19][0] = PDGchargino2; Particlehiggsl.Array_Decays[19][1] = -PDGchargino2; Particlehiggsl.Array_Decays[19][2] = h0amplitudecharW2charW2; Particlehiggsl.Array_Decays[19][3] = 2; Particlehiggsl.Array_Comments[19] = "# h -> ~chi_2+ ~chi_2-";
   Particlehiggsl.Array_Decays[20][0] = PDGchargino1; Particlehiggsl.Array_Decays[20][1] = -PDGchargino2; Particlehiggsl.Array_Decays[20][2] = h0amplitudecharW1charW2; Particlehiggsl.Array_Decays[20][3] = 2; Particlehiggsl.Array_Comments[20] = "# h -> ~chi_1+ ~chi_2-";
   Particlehiggsl.Array_Decays[21][0] = PDGchargino2; Particlehiggsl.Array_Decays[21][1] = -PDGchargino1; Particlehiggsl.Array_Decays[21][2] = h0amplitudecharW1charW2; Particlehiggsl.Array_Decays[21][3] = 2; Particlehiggsl.Array_Comments[21] = "# h -> ~chi_2+ ~chi_1-"; ///amplitude same as decay to ~chi1+ and ~chi2- by CP invariance
   Particlehiggsl.Array_Decays[22][0] = PDGA0; Particlehiggsl.Array_Decays[22][1] = PDGA0; Particlehiggsl.Array_Decays[22][2] = h0amplitudehiggsAhiggsA; Particlehiggsl.Array_Decays[22][3] = 2; Particlehiggsl.Array_Comments[22] = "# h -> A A";
   Particlehiggsl.Array_Decays[23][0] = PDGZboson; Particlehiggsl.Array_Decays[23][1] = PDGA0; Particlehiggsl.Array_Decays[23][2] = h0amplitudehiggsAZboson; Particlehiggsl.Array_Decays[23][3] = 2; Particlehiggsl.Array_Comments[23] = "# h -> A Z";
   Particlehiggsl.Array_Decays[24][0] = PDGsupL; Particlehiggsl.Array_Decays[24][1] = -PDGsupL; Particlehiggsl.Array_Decays[24][2] = h0amplitudesupLantisupL; Particlehiggsl.Array_Decays[24][3] = 2; Particlehiggsl.Array_Comments[24] = "# h -> ~u_L ~u_L*";
   Particlehiggsl.Array_Decays[25][0] = PDGsupR; Particlehiggsl.Array_Decays[25][1] = -PDGsupR; Particlehiggsl.Array_Decays[25][2] = h0amplitudesupRantisupR; Particlehiggsl.Array_Decays[25][3] = 2; Particlehiggsl.Array_Comments[25] = "# h -> ~u_R ~u_R*";
   Particlehiggsl.Array_Decays[26][0] = PDGsupL; Particlehiggsl.Array_Decays[26][1] = -PDGsupR; Particlehiggsl.Array_Decays[26][2] = h0amplitudesupLantisupR; Particlehiggsl.Array_Decays[26][3] = 2; Particlehiggsl.Array_Comments[26] = "# h -> ~u_L ~u_R*";
   Particlehiggsl.Array_Decays[27][0] = PDGsupR; Particlehiggsl.Array_Decays[27][1] = -PDGsupL; Particlehiggsl.Array_Decays[27][2] = h0amplitudesupRantisupL; Particlehiggsl.Array_Decays[27][3] = 2; Particlehiggsl.Array_Comments[27] = "# h -> ~u_R ~u_L*";
   Particlehiggsl.Array_Decays[28][0] = PDGsdownL; Particlehiggsl.Array_Decays[28][1] = -PDGsdownL; Particlehiggsl.Array_Decays[28][2] = h0amplitudesdownLantisdownL; Particlehiggsl.Array_Decays[28][3] = 2; Particlehiggsl.Array_Comments[28] = "# h -> ~d_L ~d_L*";
   Particlehiggsl.Array_Decays[29][0] = PDGsdownR; Particlehiggsl.Array_Decays[29][1] = -PDGsdownR; Particlehiggsl.Array_Decays[29][2] = h0amplitudesdownRantisdownR; Particlehiggsl.Array_Decays[29][3] = 2; Particlehiggsl.Array_Comments[29] = "# h -> ~d_R ~d_R*";
   Particlehiggsl.Array_Decays[30][0] = PDGsdownL; Particlehiggsl.Array_Decays[30][1] = -PDGsdownR; Particlehiggsl.Array_Decays[30][2] = h0amplitudesdownLantisdownR; Particlehiggsl.Array_Decays[30][3] = 2; Particlehiggsl.Array_Comments[30] = "# h -> ~d_L ~d_R*";
   Particlehiggsl.Array_Decays[31][0] = PDGsdownR; Particlehiggsl.Array_Decays[31][1] = -PDGsdownL; Particlehiggsl.Array_Decays[31][2] = h0amplitudesdownRantisdownL; Particlehiggsl.Array_Decays[31][3] = 2; Particlehiggsl.Array_Comments[31] = "# h -> ~d_R ~d_L*";
   Particlehiggsl.Array_Decays[32][0] = PDGscharmL; Particlehiggsl.Array_Decays[32][1] = -PDGscharmL; Particlehiggsl.Array_Decays[32][2] = h0amplitudescharmLantischarmL; Particlehiggsl.Array_Decays[32][3] = 2; Particlehiggsl.Array_Comments[32] = "# h -> ~c_L ~c_L*";
   Particlehiggsl.Array_Decays[33][0] = PDGscharmR; Particlehiggsl.Array_Decays[33][1] = -PDGscharmR; Particlehiggsl.Array_Decays[33][2] = h0amplitudescharmRantischarmR; Particlehiggsl.Array_Decays[33][3] = 2; Particlehiggsl.Array_Comments[33] = "# h -> ~c_R ~c_R*";
   Particlehiggsl.Array_Decays[34][0] = PDGscharmL; Particlehiggsl.Array_Decays[34][1] = -PDGscharmR; Particlehiggsl.Array_Decays[34][2] = h0amplitudescharmLantischarmR; Particlehiggsl.Array_Decays[34][3] = 2; Particlehiggsl.Array_Comments[34] = "# h -> ~c_L ~c_R*";
   Particlehiggsl.Array_Decays[35][0] = PDGscharmR; Particlehiggsl.Array_Decays[35][1] = -PDGscharmL; Particlehiggsl.Array_Decays[35][2] = h0amplitudescharmRantischarmL; Particlehiggsl.Array_Decays[35][3] = 2; Particlehiggsl.Array_Comments[35] = "# h -> ~c_R ~c_L*";
   Particlehiggsl.Array_Decays[36][0] = PDGsstrangeL; Particlehiggsl.Array_Decays[36][1] = -PDGsstrangeL; Particlehiggsl.Array_Decays[36][2] = h0amplitudesstrangeLantisstrangeL; Particlehiggsl.Array_Decays[36][3] = 2; Particlehiggsl.Array_Comments[36] = "# h -> ~s_L ~s_L*";
   Particlehiggsl.Array_Decays[37][0] = PDGsstrangeR; Particlehiggsl.Array_Decays[37][1] = -PDGsstrangeR; Particlehiggsl.Array_Decays[37][2] = h0amplitudesstrangeRantisstrangeR; Particlehiggsl.Array_Decays[37][3] = 2; Particlehiggsl.Array_Comments[37] = "# h -> ~s_R ~s_R*";
   Particlehiggsl.Array_Decays[38][0] = PDGsstrangeL; Particlehiggsl.Array_Decays[38][1] = -PDGsstrangeR; Particlehiggsl.Array_Decays[38][2] = h0amplitudesstrangeLantisstrangeR; Particlehiggsl.Array_Decays[38][3] = 2; Particlehiggsl.Array_Comments[38] = "# h -> ~s_L ~s_R*";
   Particlehiggsl.Array_Decays[39][0] = PDGsstrangeR; Particlehiggsl.Array_Decays[39][1] = -PDGsstrangeL; Particlehiggsl.Array_Decays[39][2] = h0amplitudesstrangeRantisstrangeL; Particlehiggsl.Array_Decays[39][3] = 2; Particlehiggsl.Array_Comments[39] = "# h -> ~s_R ~s_L*";
   Particlehiggsl.Array_Decays[40][0] = PDGnuselectronL; Particlehiggsl.Array_Decays[40][1] = -PDGnuselectronL; Particlehiggsl.Array_Decays[40][2] = h0amplitudesnueLantisnueL; Particlehiggsl.Array_Decays[40][3] = 2; Particlehiggsl.Array_Comments[40] = "# h -> ~nu_eL ~nu_eL*";
   Particlehiggsl.Array_Decays[41][0] = PDGselectronL; Particlehiggsl.Array_Decays[41][1] = -PDGselectronL; Particlehiggsl.Array_Decays[41][2] = h0amplitudeselectronLantiselectronL; Particlehiggsl.Array_Decays[41][3] = 2; Particlehiggsl.Array_Comments[41] = "# h -> ~e_L- ~e_L+";
   Particlehiggsl.Array_Decays[42][0] = PDGselectronR; Particlehiggsl.Array_Decays[42][1] = -PDGselectronR; Particlehiggsl.Array_Decays[42][2] = h0amplitudeselectronRantiselectronR; Particlehiggsl.Array_Decays[42][3] = 2; Particlehiggsl.Array_Comments[42] = "# h -> ~e_R- ~e_R+";
   Particlehiggsl.Array_Decays[43][0] = PDGselectronL; Particlehiggsl.Array_Decays[43][1] = -PDGselectronR; Particlehiggsl.Array_Decays[43][2] = h0amplitudeselectronLantiselectronR; Particlehiggsl.Array_Decays[43][3] = 2; Particlehiggsl.Array_Comments[43] = "# h -> ~e_L- ~e_R+";
   Particlehiggsl.Array_Decays[44][0] = PDGselectronR; Particlehiggsl.Array_Decays[44][1] = -PDGselectronL; Particlehiggsl.Array_Decays[44][2] = h0amplitudeselectronRantiselectronL; Particlehiggsl.Array_Decays[44][3] = 2; Particlehiggsl.Array_Comments[44] = "# h -> ~e_R- ~e_L+";
   Particlehiggsl.Array_Decays[45][0] = PDGnusmuonL; Particlehiggsl.Array_Decays[45][1] = -PDGnusmuonL; Particlehiggsl.Array_Decays[45][2] = h0amplitudesnumuLantisnumuL; Particlehiggsl.Array_Decays[45][3] = 2; Particlehiggsl.Array_Comments[45] = "# h -> ~nu_muL ~nu_muL*";
   Particlehiggsl.Array_Decays[46][0] = PDGsmuonL; Particlehiggsl.Array_Decays[46][1] = -PDGsmuonL; Particlehiggsl.Array_Decays[46][2] = h0amplitudesmuonLantismuonL; Particlehiggsl.Array_Decays[46][3] = 2; Particlehiggsl.Array_Comments[46] = "# h -> ~mu_L- ~mu_L+";
   Particlehiggsl.Array_Decays[47][0] = PDGsmuonR; Particlehiggsl.Array_Decays[47][1] = -PDGsmuonR; Particlehiggsl.Array_Decays[47][2] = h0amplitudesmuonRantismuonR; Particlehiggsl.Array_Decays[47][3] = 2; Particlehiggsl.Array_Comments[47] = "# h -> ~mu_R- ~mu_R+";
   Particlehiggsl.Array_Decays[48][0] = PDGsmuonL; Particlehiggsl.Array_Decays[48][1] = -PDGsmuonR; Particlehiggsl.Array_Decays[48][2] = h0amplitudesmuonLantismuonR; Particlehiggsl.Array_Decays[48][3] = 2; Particlehiggsl.Array_Comments[48] = "# h -> ~mu_L- ~mu_R+";
   Particlehiggsl.Array_Decays[49][0] = PDGsmuonR; Particlehiggsl.Array_Decays[49][1] = -PDGsmuonL; Particlehiggsl.Array_Decays[49][2] = h0amplitudesmuonRantismuonL; Particlehiggsl.Array_Decays[49][3] = 2; Particlehiggsl.Array_Comments[49] = "# h -> ~mu_R- ~mu_L+";	
   Particlehiggsl.Array_Decays[50][0] = PDGnustauL; Particlehiggsl.Array_Decays[50][1] = -PDGnustauL; Particlehiggsl.Array_Decays[50][2] = h0amplitudesnutauLantisnutauL; Particlehiggsl.Array_Decays[50][3] = 2; Particlehiggsl.Array_Comments[50] = "# h -> ~nu_tauL ~nu_tauL*";   Particlehiggsl.Array_Decays[51][0] = PDGstop1; Particlehiggsl.Array_Decays[51][1] = -PDGstop1; Particlehiggsl.Array_Decays[51][2] = h0amplitudestop1antistop1; Particlehiggsl.Array_Decays[51][3] = 2; Particlehiggsl.Array_Comments[51] = "# h -> ~t_1 ~t_1*";	  
   Particlehiggsl.Array_Decays[52][0] = PDGstop2; Particlehiggsl.Array_Decays[52][1] = -PDGstop2; Particlehiggsl.Array_Decays[52][2] = h0amplitudestop2antistop2; Particlehiggsl.Array_Decays[52][3] = 2; Particlehiggsl.Array_Comments[52] = "# h -> ~t_2 ~t_2*";
   Particlehiggsl.Array_Decays[53][0] = PDGstop1; Particlehiggsl.Array_Decays[53][1] = -PDGstop2; Particlehiggsl.Array_Decays[53][2] = h0amplitudestop1antistop2; Particlehiggsl.Array_Decays[53][3] = 2; Particlehiggsl.Array_Comments[53] = "# h -> ~t_1 ~t_2*";	  
   Particlehiggsl.Array_Decays[54][0] = PDGstop2; Particlehiggsl.Array_Decays[54][1] = -PDGstop1; Particlehiggsl.Array_Decays[54][2] = h0amplitudestop2antistop1; Particlehiggsl.Array_Decays[54][3] = 2; Particlehiggsl.Array_Comments[54] = "# h -> ~t_2 ~t_1*";
   Particlehiggsl.Array_Decays[55][0] = PDGsbottom1; Particlehiggsl.Array_Decays[55][1] = -PDGsbottom1; Particlehiggsl.Array_Decays[55][2] = h0amplitudesbottom1antisbottom1; Particlehiggsl.Array_Decays[55][3] = 2; Particlehiggsl.Array_Comments[55] = "# h -> ~b_1 ~b_1*";	  
   Particlehiggsl.Array_Decays[56][0] = PDGsbottom2; Particlehiggsl.Array_Decays[56][1] = -PDGsbottom2; Particlehiggsl.Array_Decays[56][2] = h0amplitudesbottom2antisbottom2; Particlehiggsl.Array_Decays[56][3] = 2; Particlehiggsl.Array_Comments[56] = "# h -> ~b_2 ~b_2*";
   Particlehiggsl.Array_Decays[57][0] = PDGsbottom1; Particlehiggsl.Array_Decays[57][1] = -PDGsbottom2; Particlehiggsl.Array_Decays[57][2] = h0amplitudesbottom1antisbottom2; Particlehiggsl.Array_Decays[57][3] = 2; Particlehiggsl.Array_Comments[57] = "# h -> ~b_1 ~b_2*";	  
   Particlehiggsl.Array_Decays[58][0] = PDGsbottom2; Particlehiggsl.Array_Decays[58][1] = -PDGsbottom1; Particlehiggsl.Array_Decays[58][2] = h0amplitudesbottom2antisbottom1; Particlehiggsl.Array_Decays[58][3] = 2; Particlehiggsl.Array_Comments[58] = "# h -> ~b_2 ~b_1*";
   Particlehiggsl.Array_Decays[59][0] = PDGstau1; Particlehiggsl.Array_Decays[59][1] = -PDGstau1; Particlehiggsl.Array_Decays[59][2] = h0amplitudestau1antistau1; Particlehiggsl.Array_Decays[59][3] = 2; Particlehiggsl.Array_Comments[59] = "# h -> ~tau_1- ~tau_1+";
   Particlehiggsl.Array_Decays[60][0] = PDGstau2; Particlehiggsl.Array_Decays[60][1] = -PDGstau2; Particlehiggsl.Array_Decays[60][2] = h0amplitudestau2antistau2; Particlehiggsl.Array_Decays[60][3] = 2; Particlehiggsl.Array_Comments[60] = "# h -> ~tau_2- ~tau_2+";
   Particlehiggsl.Array_Decays[61][0] = PDGstau1; Particlehiggsl.Array_Decays[61][1] = -PDGstau2; Particlehiggsl.Array_Decays[61][2] = h0amplitudestau1antistau2; Particlehiggsl.Array_Decays[61][3] = 2; Particlehiggsl.Array_Comments[61] = "# h -> ~tau_1- ~tau_2+";
   Particlehiggsl.Array_Decays[62][0] = PDGstau2; Particlehiggsl.Array_Decays[62][1] = -PDGstau1; Particlehiggsl.Array_Decays[62][2] = h0amplitudestau2antistau1; Particlehiggsl.Array_Decays[62][3] = 2; Particlehiggsl.Array_Comments[62] = "# h -> ~tau_2- ~tau_1+";
   Particlehiggsl.Array_Decays[63][0] = PDGphoton; Particlehiggsl.Array_Decays[63][1] = PDGphoton; Particlehiggsl.Array_Decays[63][2] = h0amplitudegammagamma; Particlehiggsl.Array_Decays[63][3] = 2; Particlehiggsl.Array_Comments[63] = "# h -> gamma gamma";
   Particlehiggsl.Array_Decays[64][0] = PDGgluon; Particlehiggsl.Array_Decays[64][1] = PDGgluon; Particlehiggsl.Array_Decays[64][2] = h0amplitudegluongluon; Particlehiggsl.Array_Decays[64][3] = 2; Particlehiggsl.Array_Comments[64] = "# h -> gluon gluon";
   Particlehiggsl.Array_Decays[65][0] = PDGZboson; Particlehiggsl.Array_Decays[65][1] = PDGphoton; Particlehiggsl.Array_Decays[65][2] = h0amplitudeZgamma; Particlehiggsl.Array_Decays[65][3] = 2; Particlehiggsl.Array_Comments[65] = "# h -> Z gamma";
   Particlehiggsl.Array_Decays[66][0] = PDGWplus; Particlehiggsl.Array_Decays[66][1] = -PDGWplus; Particlehiggsl.Array_Decays[66][2] = h0amplitudeWW; Particlehiggsl.Array_Decays[66][3] = h0WWNDA; Particlehiggsl.Array_Comments[66] = h0WWcomment;
   Particlehiggsl.Array_Decays[67][0] = PDGZboson; Particlehiggsl.Array_Decays[67][1] = PDGZboson; Particlehiggsl.Array_Decays[67][2] = h0amplitudeZZ; Particlehiggsl.Array_Decays[67][3] = h0ZZNDA; Particlehiggsl.Array_Comments[67] = h0ZZcomment;
   
   Particlehiggsl.Array_Decays[68][0] = PDGneutralino1; Particlehiggsl.Array_Decays[68][1] = PDGneutralino5; Particlehiggsl.Array_Decays[68][2] = h0amplitudeneutZ1neutZ5; Particlehiggsl.Array_Decays[68][3] = 2; Particlehiggsl.Array_Comments[68] = "# h -> ~chi_10 ~chi_50";
   Particlehiggsl.Array_Decays[69][0] = PDGneutralino1; Particlehiggsl.Array_Decays[69][1] = PDGneutralino5; Particlehiggsl.Array_Decays[69][2] = h0amplitudeneutZ2neutZ5; Particlehiggsl.Array_Decays[69][3] = 2; Particlehiggsl.Array_Comments[69] = "# h -> ~chi_20 ~chi_50";
   Particlehiggsl.Array_Decays[70][0] = PDGneutralino1; Particlehiggsl.Array_Decays[70][1] = PDGneutralino5; Particlehiggsl.Array_Decays[70][2] = h0amplitudeneutZ3neutZ5; Particlehiggsl.Array_Decays[70][3] = 2; Particlehiggsl.Array_Comments[70] = "# h -> ~chi_30 ~chi_50";
   Particlehiggsl.Array_Decays[71][0] = PDGneutralino1; Particlehiggsl.Array_Decays[71][1] = PDGneutralino5; Particlehiggsl.Array_Decays[71][2] = h0amplitudeneutZ4neutZ5; Particlehiggsl.Array_Decays[71][3] = 2; Particlehiggsl.Array_Comments[71] = "# h -> ~chi_40 ~chi_50";
   Particlehiggsl.Array_Decays[72][0] = PDGneutralino1; Particlehiggsl.Array_Decays[72][1] = PDGneutralino5; Particlehiggsl.Array_Decays[72][2] = h0amplitudeneutZ5neutZ5; Particlehiggsl.Array_Decays[72][3] = 2; Particlehiggsl.Array_Comments[72] = "# h -> ~chi_50 ~chi_50";
   Particlehiggsl.Array_Decays[73][0] = PDGA0; Particlehiggsl.Array_Decays[73][1] = PDGA2; Particlehiggsl.Array_Decays[73][2] = h0amplitudehiggsAhiggsA2; Particlehiggsl.Array_Decays[73][3] = 2; Particlehiggsl.Array_Comments[73] = "# h -> A A2";

   Particlehiggsl.Array_Decays[75][0] = PDGA2; Particlehiggsl.Array_Decays[75][1] = PDGA2; Particlehiggsl.Array_Decays[75][2] = h0amplitudehiggsA2higgsA2; Particlehiggsl.Array_Decays[75][3] = 2; Particlehiggsl.Array_Comments[75] = "# h -> A2 A2";
   Particlehiggsl.Array_Decays[76][0] = PDGZboson; Particlehiggsl.Array_Decays[76][1] = PDGA2; Particlehiggsl.Array_Decays[76][2] = h0amplitudehiggsA2Zboson; Particlehiggsl.Array_Decays[76][3] = 2; Particlehiggsl.Array_Comments[76] = "# h -> A2 Z";
   Particlehiggsl.Array_Decays[77][0] = PDGHplus; Particlehiggsl.Array_Decays[77][1] = -PDGHplus; Particlehiggsl.Array_Decays[77][2] = h0amplitudeHpmHpm; Particlehiggsl.Array_Decays[77][3] = 2; Particlehiggsl.Array_Comments[77] = "# h -> H+ H-";
   Particlehiggsl.Array_Decays[78][0] = PDGHplus; Particlehiggsl.Array_Decays[78][1] = -PDGWplus; Particlehiggsl.Array_Decays[78][2] = h0amplitudeWHpm; Particlehiggsl.Array_Decays[78][3] = 2; Particlehiggsl.Array_Comments[78] = "# h -> H+- W-+";
   
   double higgsl_No_1to2_Decays = 0;
   
   higgsl_No_1to2_Decays = Particlehiggsl.No_1to2_Decays + Particlehiggsl.No_NMSSM_Decays; /// No higgs NLSP decays to gravitinos as they are unimportant as would be swamped by
   
   for (int j = 0; j<higgsl_No_1to2_Decays; j++) {
     Particlehiggsl.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<higgsl_No_1to2_Decays; j++) {
     Particlehiggsl.two_width = Particlehiggsl.two_width + Particlehiggsl.Array_Decays[j][2];
   }
   for (int j=higgsl_No_1to2_Decays; j<Particlehiggsl.No_of_Decays; j++) {
     Particlehiggsl.three_width = Particlehiggsl.three_width + Particlehiggsl.Array_Decays[j][2];
   }
   
   for(int j=0; j<Particlehiggsl.No_of_Decays; j++) {
     Particlehiggsl.Array_Decays[j][4] = 0;
   }
   
   ///Could argue no need for test for nans here as the higgs 1 -> 3 decay formulae are all purely analytic algebraic expressions, therefore no numerical integration is involved so we can't get nans. Will check anyway as possibility of -ve sqrts in kinematics or -ve logs, or infs etc
   if ( Particlehiggsl.three_width != Particlehiggsl.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for higgsl - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       Particlehiggsl.No_of_Decays = higgsl_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       Particlehiggsl.total_width = Particlehiggsl.two_width;
     }
   else {
     Particlehiggsl.total_width = Particlehiggsl.two_width + Particlehiggsl.three_width;
   }
   
   if ( Particlehiggsl.total_width != Particlehiggsl.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<Particlehiggsl.No_of_Decays; i++) {
       //   fout << Particlehiggsl.Array_Decays[i][2] << endl;
       // }
       throw( "nan in lightest higgs total width \n");
     }
   
   for (int i =0; i<Particlehiggsl.No_of_Decays; i++) {
     Particlehiggsl.Array_Decays[i][5]= Particlehiggsl.Array_Decays[i][2]/Particlehiggsl.total_width;
   } 
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, Particlehiggsl, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, Particlehiggsl, BRTol);}
   
 }

 ///higgsH decays
 
 double H0amplitudeuantiu=0, H0amplitudedantid=0, H0amplitudesantis=0, H0amplitudecantic=0, H0amplitudebantib=0, H0amplitudetantit=0, H0amplitudeeantie=0, H0amplitudemuantimu=0, H0amplitudetauantitau=0, H0amplitudeneutZ1neutZ1=0, H0amplitudeneutZ1neutZ2=0, H0amplitudeneutZ1neutZ3=0, H0amplitudeneutZ1neutZ4=0, H0amplitudeneutZ2neutZ2=0, H0amplitudeneutZ2neutZ3=0, H0amplitudeneutZ2neutZ4=0, H0amplitudeneutZ3neutZ3=0, H0amplitudeneutZ3neutZ4=0, H0amplitudeneutZ4neutZ4=0, H0amplitudecharW1charW1=0, H0amplitudecharW1charW2=0, H0amplitudecharW2charW2=0, H0amplitudeh0h0=0, H0amplitudehiggsAhiggsA=0, H0amplitudeHplusHminus=0, H0amplitudehiggsAZboson=0, H0amplitudesupLantisupL=0, H0amplitudesupLantisupR=0, H0amplitudesupRantisupL=0, H0amplitudesupRantisupR=0, H0amplitudesdownLantisdownL=0, H0amplitudesdownLantisdownR=0, H0amplitudesdownRantisdownL=0, H0amplitudesdownRantisdownR=0, H0amplitudescharmLantischarmL=0, H0amplitudescharmLantischarmR=0, H0amplitudescharmRantischarmL=0, H0amplitudescharmRantischarmR=0, H0amplitudesstrangeLantisstrangeL=0, H0amplitudesstrangeLantisstrangeR=0, H0amplitudesstrangeRantisstrangeL=0, H0amplitudesstrangeRantisstrangeR=0, H0amplitudesnueLantisnueL=0, H0amplitudeselectronLantiselectronL=0, H0amplitudeselectronRantiselectronR=0, H0amplitudeselectronLantiselectronR=0, H0amplitudeselectronRantiselectronL=0, H0amplitudesnumuLantisnumuL=0, H0amplitudesnutauLantisnutauL=0, H0amplitudesmuonLantismuonL=0, H0amplitudesmuonRantismuonR=0, H0amplitudesmuonLantismuonR=0, H0amplitudesmuonRantismuonL=0, H0amplitudestau1antistau1=0, H0amplitudestau2antistau2=0, H0amplitudestau1antistau2=0, H0amplitudestau2antistau1=0, H0amplitudestop1antistop1=0, H0amplitudestop1antistop2=0, H0amplitudestop2antistop1=0, H0amplitudestop2antistop2=0, H0amplitudesbottom1antisbottom1=0, H0amplitudesbottom1antisbottom2=0, H0amplitudesbottom2antisbottom1=0, H0amplitudesbottom2antisbottom2=0, H0amplitudegluongluon=0, H0amplitudegammagamma=0, H0amplitudeWbosonWboson=0, H0amplitudeZbosonZboson=0, H0amplitudeZgamma=0, H0amplitudehiggsAhiggsA2=0, H0amplitudehiggsA2higgsA2=0, H0amplitudehiggsA2Zboson=0, H0amplitudeWHpm=0;

 double H0amplitudeneutZ1neutZ5 = 0, H0amplitudeneutZ2neutZ5 = 0, H0amplitudeneutZ3neutZ5 = 0, H0amplitudeneutZ4neutZ5 = 0, H0amplitudeneutZ5neutZ5 = 0;

 if (flagH2 == 1) {
   if (QCDcorr == false) {
     ///No decays to u or d as negligible as PW proportional to yukawas squared
     ///Use running masses here to try to approximate some of the correction (which aren't included)
     H0amplitudecantic = higgslorHamplitudedecayquarkantiquark (mh0(2), runmc, g, alpha, beta, runmw, 1, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH);
     H0amplitudesantis = higgslorHamplitudedecayquarkantiquark (mh0(2), runms, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH);
     H0amplitudebantib = higgslorHamplitudedecayquarkantiquark (mh0(2), runmb, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH); ///use runmb here to reduce necessary corrections
     H0amplitudetantit = higgslorHamplitudedecayquarkantiquark (mh0(2), runmt, g, alpha, beta, runmw, 1, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH); ///may rather use mtPole here as closer to answer with corrections than runmt gives
   }
   else {
     H0amplitudecantic = higgslorHamplitudedecayquarkantiquark (mh0(2), mcpole, g, alpha, beta, runmw, 1, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH);
     H0amplitudesantis = higgslorHamplitudedecayquarkantiquark (mh0(2), mspole, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH);
     ///mcpole and mspole set in decays.h, this values used are those appropriate for the scheme used for the h -> qq QCD corrections, as in hdecay
     H0amplitudebantib = higgslorHamplitudedecayquarkantiquark (mh0(2), mbPole, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH); 
     H0amplitudetantit = higgslorHamplitudedecayquarkantiquark (mh0(2), mtPole, g, alpha, beta, runmw, 1, 'H', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH);
   }

   H0amplitudeeantie = higgslorHamplitudedecayquarkantiquark (mh0(2), runmel, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, false, alphasAtMh)/3; ///0 as leptons are like down-type quarks, divide by 3 as No of colours is 1 for leptons cf 3 for quarks
   H0amplitudemuantimu = higgslorHamplitudedecayquarkantiquark (mh0(2), runmmu, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, false, alphasAtMh)/3;
   H0amplitudetauantitau = higgslorHamplitudedecayquarkantiquark (mh0(2), runmtau, g, alpha, beta, runmw, 0, 'H', CPEMix, nmssmIsIt, false, alphasAtMh)/3;
   
   if (nmssmIsIt == false) {
     H0amplitudesupLantisupL = higgsHamplitudedecay2squarksamehand (mh0(2), mu(1,1), mu(1,1), g, gp, alpha, beta, runmw, runmu, runmd, 1);
     H0amplitudesupRantisupR = higgsHamplitudedecay2squarksamehand (mh0(2), mu(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, runmd, 3);
     H0amplitudesdownLantisdownL = higgsHamplitudedecay2squarksamehand (mh0(2), md(1,1), md(1,1), g, gp, alpha, beta, runmw, runmu, runmd, 2);
     H0amplitudesdownRantisdownR = higgsHamplitudedecay2squarksamehand (mh0(2), md(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, runmd, 4);
     H0amplitudescharmLantischarmL = higgsHamplitudedecay2squarksamehand (mh0(2), mu(1,2), mu(1,2), g, gp, alpha, beta, runmw, runmc, runms, 1);
     H0amplitudescharmRantischarmR = higgsHamplitudedecay2squarksamehand (mh0(2), mu(2,2), mu(2,2), g, gp, alpha, beta, runmw, runmc, runms, 3);
     H0amplitudesstrangeLantisstrangeL = higgsHamplitudedecay2squarksamehand (mh0(2), md(2,1), md(2,1), g, gp, alpha, beta, runmw, runmc, runms, 2);
     H0amplitudesstrangeRantisstrangeR = higgsHamplitudedecay2squarksamehand (mh0(2), md(2,2), md(2,2), g, gp, alpha, beta, runmw, runmc, runms, 4);
     H0amplitudesnueLantisnueL = higgsHamplitudedecay2sleptonsamehand (mh0(2), msnu(1), msnu(1), g, gp, alpha, beta, runmw, runmel, 1);
     H0amplitudeselectronLantiselectronL = higgsHamplitudedecay2sleptonsamehand (mh0(2), me(1,1), me(1,1), g, gp, alpha, beta, runmw, runmel, 2);
     H0amplitudeselectronRantiselectronR = higgsHamplitudedecay2sleptonsamehand (mh0(2), me(2,1), me(2,1), g, gp, alpha, beta, runmw, runmel, 3);
     H0amplitudesnumuLantisnumuL = higgsHamplitudedecay2sleptonsamehand (mh0(2), msnu(2), msnu(2), g, gp, alpha, beta, runmw, runmmu, 1);
     H0amplitudesmuonLantismuonL = higgsHamplitudedecay2sleptonsamehand (mh0(2), me(1,2), me(1,2), g, gp, alpha, beta, runmw, runmmu, 2);
     H0amplitudesmuonRantismuonR = higgsHamplitudedecay2sleptonsamehand (mh0(2), me(2,2), me(2,2), g, gp, alpha, beta, runmw, runmmu, 3);
     H0amplitudesnutauLantisnutauL = higgsHamplitudedecay2sleptonsamehand (mh0(2), msnu(3), msnu(3), g, gp, alpha, beta, runmw, runmtau, 1);
     H0amplitudesupLantisupR = higgsHamplitudedecay2squarkdiffhand (mh0(2), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 1);
     H0amplitudesupRantisupL = higgsHamplitudedecay2squarkdiffhand (mh0(2), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 1);
     H0amplitudesdownLantisdownR = higgsHamplitudedecay2squarkdiffhand (mh0(2), md(1,1), md(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 2);
     H0amplitudesdownRantisdownL = higgsHamplitudedecay2squarkdiffhand (mh0(2), md(1,1), md(2,1), g, alpha, beta, runmw, runmu, runmd, greekmu, Au, Ad, 2);
     H0amplitudescharmLantischarmR = higgsHamplitudedecay2squarkdiffhand (mh0(2), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 1);
     H0amplitudescharmRantischarmL = higgsHamplitudedecay2squarkdiffhand (mh0(2), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 1);
     H0amplitudesstrangeLantisstrangeR = higgsHamplitudedecay2squarkdiffhand (mh0(2), md(2,1), md(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 2);
     H0amplitudesstrangeRantisstrangeL = higgsHamplitudedecay2squarkdiffhand (mh0(2), md(2,1), md(2,2), g, alpha, beta, runmw, runmc, runms, greekmu, Ac, As, 2);
     H0amplitudeselectronLantiselectronR = higgsHamplitudedecay2sleptondiffhand (mh0(2), me(1,1), me(2,1), g, alpha, beta, runmw, runmel, greekmu, Ae, 1);
     H0amplitudeselectronRantiselectronL = higgsHamplitudedecay2sleptondiffhand (mh0(2), me(2,1), me(1,1), g, alpha, beta, runmw, runmel, greekmu, Ae, 1);
     H0amplitudesmuonLantismuonR = higgsHamplitudedecay2sleptondiffhand (mh0(2), me(1,2), me(2,2), g, alpha, beta, runmw, runmmu, greekmu, Amu, 1);
     H0amplitudesmuonRantismuonL = higgsHamplitudedecay2sleptondiffhand (mh0(2), me(2,2), me(2,1), g, alpha, beta, runmw, runmmu, greekmu, Amu, 1);
     H0amplitudestop1antistop1 = higgsHamplitudedecaystop1stop1 (mh0(2), mu(1,3), mu(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudestop2antistop2 = higgsHamplitudedecaystop2stop2 (mh0(2), mu(2,3), mu(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudestop1antistop2 = higgsHamplitudedecaystop1stop2 (mh0(2), mu(1,3), mu(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudestop2antistop1 = higgsHamplitudedecaystop1stop2 (mh0(2), mu(2,3), mu(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetat); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudesbottom1antisbottom1 = higgsHamplitudedecaysbottom1sbottom1(mh0(2), md(1,3), md(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudesbottom2antisbottom2 = higgsHamplitudedecaysbottom2sbottom2(mh0(2), md(2,3), md(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudesbottom1antisbottom2 = higgsHamplitudedecaysbottom1sbottom2 (mh0(2), md(1,3), md(2,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudesbottom2antisbottom1 = higgsHamplitudedecaysbottom1sbottom2 (mh0(2), md(2,3), md(1,3), g, gp, alpha, beta, runmw, runmt, runmb, greekmu, At, Ab, thetab); ///use runmt and runmb here as mass used to set yukawa coupling, note however pole masses give greater agreement with susyhit as susyhit uses non-running masses here, similar for other higgs decays to third generation sfermions
     H0amplitudestau1antistau1 = higgsHamplitudedecaystau1stau1 (mh0(2), me(1,3), me(1,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     H0amplitudestau2antistau2 = higgsHamplitudedecaystau2stau2 (mh0(2), me(2,3), me(2,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     H0amplitudestau1antistau2 = higgsHamplitudedecaystau1stau2 (mh0(2), me(1,3), me(2,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     H0amplitudestau2antistau1 = higgsHamplitudedecaystau1stau2 (mh0(2), me(2,3), me(1,3), g, gp, alpha, beta, runmw, runmtau, greekmu, Atau, thetatau);
     
     H0amplitudecharW1charW1 = higgsphiamplitudedecaysamechargino (mh0(2), mch(1), g, thetaL2, thetaR2, alpha, beta, 1, 'H');
     H0amplitudecharW2charW2 = higgsphiamplitudedecaysamechargino (mh0(2), mch(2), g, thetaL2, thetaR2, alpha, beta, 2, 'H');
     H0amplitudecharW1charW2 = higgsphiamplitudedecaydifchargino (mh0(2), mch(1), mch(2), g, thetaL2, thetaR2, alpha, beta, 'H');
     
     H0amplitudegammagamma = higgsesamplitudedecaygammagammatotal(mh0(2), g, gp, alphaAtMH, runmw, polemw, alpha, beta, mtAtMH, mbAtMH, mcAtMH, runmtau, mHpm, mu(1,3), mu(2,3), md(1,3), md(2,3), me(1,3), me(2,3), mch(1), mch(2), thetaL, thetaR, thetat, thetab, thetatau, greekmu, At, Ab, Atau, 'H'); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     H0amplitudegluongluon = higgsesamplitudedecaygluongluontotal(mh0(2), g, g3atmH0, gp, runmw, alpha, beta, mtPole, mbPole, mcpole, mu(1,3), mu(2,3), md(1,3), md(2,3), thetat, thetab, greekmu, At, Ab, mspole, mu(1,2), mu(2,2), md(1,2), md(2,2), Ac, As, runmu, runmd, mu(1,1), mu(2,1), md(1,1), md(2,1), Au, Ad, 'H', QCDcorr); ///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     H0amplitudeZgamma = higgsesamplitudedecayZbosonphotontotal(mh0(2), polemz, g, gp, alphaAtMH, polemw, runmw, alpha, beta, mtAtMH, mbAtMH, mcAtMH, msAtMH, mu(1,3), mu(2,3), md(1,3), md(2,3), mHpm, thetat, thetab, greekmu, At, Ab, 'H'); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW

     H0amplitudeneutZ1neutZ1 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(1), mneut(1), g, tanthetaW, alpha, mixNeut, 1, 1, 'H');
     H0amplitudeneutZ1neutZ2 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(1), mneut(2), g, tanthetaW, alpha, mixNeut, 1, 2, 'H');
     H0amplitudeneutZ1neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(1), mneut(3), g, tanthetaW, alpha, mixNeut, 1, 3, 'H');
     H0amplitudeneutZ1neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(1), mneut(4), g, tanthetaW, alpha, mixNeut, 1, 4, 'H');
     H0amplitudeneutZ2neutZ2 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(2), mneut(2), g, tanthetaW, alpha, mixNeut, 2, 2, 'H');
     H0amplitudeneutZ2neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(2), mneut(3), g, tanthetaW, alpha, mixNeut, 2, 3, 'H');
     H0amplitudeneutZ2neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(2), mneut(4), g, tanthetaW, alpha, mixNeut, 2, 4, 'H');
     H0amplitudeneutZ3neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(3), mneut(3), g, tanthetaW, alpha, mixNeut, 3, 3, 'H');
     H0amplitudeneutZ3neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(3), mneut(4), g, tanthetaW, alpha, mixNeut, 3, 4, 'H');
     H0amplitudeneutZ4neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mh0(2), mneut(4), mneut(4), g, tanthetaW, alpha, mixNeut, 4, 4, 'H');
     
     H0amplitudehiggsAhiggsA = higgsHamplitudedecayAA (mh0(2), mA0(1), g, gp, alpha, beta, runmw);
     H0amplitudehiggsAZboson = higgsHamplitudedecayhiggsAZboson (mh0(2), polemz, mA0(1), g, gp, alpha, beta);
     H0amplitudeHplusHminus = higgsHamplitudedecayHplusHminus (mh0(2), mHpm, g, gp, alpha, beta, runmw);
     H0amplitudeh0h0 = higgsHamplitudedecayhh (mh0(2), mh0(1), g, gp, alpha, beta, runmw);
   }
   else if (nmssmIsIt == true) {
     H0amplitudesupLantisupL = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), mu(1,1), mu(1,1), g, gp, alpha, beta, runmw, runmu, CPEMix, 1);
     H0amplitudesupRantisupR = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), mu(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, CPEMix, 3);
     H0amplitudesdownLantisdownL = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), md(1,1), md(1,1), g, gp, alpha, beta, runmw, runmd, CPEMix, 2);
     H0amplitudesdownRantisdownR = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), md(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmd, CPEMix, 4);
     H0amplitudescharmLantischarmL = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), mu(1,2), mu(1,2), g, gp, alpha, beta, runmw, runmc, CPEMix, 1);
     H0amplitudescharmRantischarmR = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), mu(2,2), mu(2,2), g, gp, alpha, beta, runmw, runmc, CPEMix, 3);
     H0amplitudesstrangeLantisstrangeL = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), md(2,1), md(2,1), g, gp, alpha, beta, runmw, runms, CPEMix, 2);
     H0amplitudesstrangeRantisstrangeR = higgsHamplitudedecay2squarksamehandNMSSM (mh0(2), md(2,2), md(2,2), g, gp, alpha, beta, runmw, runms, CPEMix, 4);
     H0amplitudesnueLantisnueL = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), msnu(1), msnu(1), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     H0amplitudeselectronLantiselectronL = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), me(1,1), me(1,1), g, gp, alpha, beta, runmw, runmel, CPEMix, 2);
     H0amplitudeselectronRantiselectronR = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), me(2,1), me(2,1), g, gp, alpha, beta, runmw, runmel, CPEMix, 3);
     H0amplitudesnumuLantisnumuL = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), msnu(2), msnu(2), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     H0amplitudesmuonLantismuonL = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), me(1,2), me(1,2), g, gp, alpha, beta, runmw, runmmu, CPEMix, 2);
     H0amplitudesmuonRantismuonR = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), me(2,2), me(2,2), g, gp, alpha, beta, runmw, runmmu, CPEMix, 3);
     H0amplitudesnutauLantisnutauL = higgsHamplitudedecay2sleptonsamehandNMSSM (mh0(2), msnu(3), msnu(3), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     
     H0amplitudesupLantisupR = higgshamplitudedecay2squarkdiffhandNMSSM(mh0(2), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, Au, mueff, lam, CPEMix, 1, 2);
     H0amplitudesupRantisupL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, Au, mueff, lam, CPEMix, 1, 2);
     H0amplitudesdownLantisdownR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), md(1,1), md(2,1), g, alpha, beta, runmw, runmd, Ad, mueff, lam, CPEMix, 2, 2);
     H0amplitudesdownRantisdownL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), md(1,1), md(2,1), g, alpha, beta, runmw, runmd, Ad, mueff, lam, CPEMix, 2, 2);
     H0amplitudescharmLantischarmR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, Ac, mueff, lam, CPEMix, 1, 2);
     H0amplitudescharmRantischarmL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, Ac, mueff, lam, CPEMix, 1, 2);
     H0amplitudesstrangeLantisstrangeR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), md(2,1), md(2,2), g, alpha, beta, runmw, runms, As, mueff, lam, CPEMix, 2, 2);
     H0amplitudesstrangeRantisstrangeL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), md(2,1), md(2,2), g, alpha, beta, runmw, runms, As, mueff, lam, CPEMix, 2, 2);
     H0amplitudeselectronLantiselectronR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), me(1,1), me(2,1), g, alpha, beta, runmw, runmel, Ae, mueff, lam, CPEMix, 2, 2)/3;
     H0amplitudeselectronRantiselectronL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), me(2,1), me(1,1), g, alpha, beta, runmw, runmel, Ae, mueff, lam, CPEMix, 2, 2)/3;
     H0amplitudesmuonLantismuonR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), me(1,2), me(2,2), g, alpha, beta, runmw, runmmu, Amu, mueff, lam, CPEMix, 2, 2)/3;
     H0amplitudesmuonRantismuonL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(2), me(2,2), me(2,1), g, alpha, beta, runmw, runmmu, Amu, mueff, lam, CPEMix, 2, 2)/3;
     
     H0amplitudestop1antistop1 = higgsCPevenamplitudedecaystopistopiNMSSM (mh0(2), mu(1,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 1, 2);
     H0amplitudestop2antistop2 = higgsCPevenamplitudedecaystopistopiNMSSM (mh0(2), mu(2,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 2, 2);
     H0amplitudestop1antistop2 = higgsCPevenamplitudedecaystopistopjNMSSM (mh0(2), mu(1,3), mu(2,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 2); 
     H0amplitudestop2antistop1 = h0amplitudestop1antistop2;
     H0amplitudesbottom1antisbottom1 = higgsCPevenamplitudedecaysbottomisbottomiNMSSM (mh0(2), md(1,3), thetab, runmb, g, gp, runmw, beta,  CPEMix, Ab, mueff, lam, 1, 2);
     H0amplitudesbottom2antisbottom2 = higgsCPevenamplitudedecaysbottomisbottomiNMSSM (mh0(2), md(2,3), thetab, runmb, g, gp, runmw, beta,  CPEMix, Ab, mueff, lam, 2, 2);
     H0amplitudesbottom1antisbottom2 = higgsCPevenamplitudedecaysbottomisbottomjNMSSM (mh0(2), md(1,3), md(2,3), thetab, runmb, g, gp, runmw, beta, CPEMix, Ab, mueff, lam, 2);
     H0amplitudesbottom2antisbottom1 = h0amplitudesbottom1antisbottom2;
     H0amplitudestau1antistau1 = higgsCPevenamplitudedecaystauistauiNMSSM (mh0(2), me(1,3), thetatau - PI/2, runmtau, g, gp, runmw, beta,  CPEMix, Atau, mueff, lam, 1, 2); 
     H0amplitudestau2antistau2 = higgsCPevenamplitudedecaystauistauiNMSSM (mh0(2), me(2,3), thetatau - PI/2, runmtau, g, gp, runmw, beta,  CPEMix, Atau, mueff, lam, 2, 2);
     H0amplitudestau1antistau2 = higgsCPevenamplitudedecaystauistaujNMSSM (mh0(2), me(1,3), me(2,3), thetatau - PI/2, runmtau, g, gp, runmw, beta, CPEMix, Atau, mueff, lam, 2);
     H0amplitudestau2antistau1 = h0amplitudestau1antistau2;
     
     H0amplitudecharW1charW1 = higgsphiamplitudedecaysamecharginoNMSSM (mh0(2), mch(1), g, thetaL2, thetaR2, lam, CPEMix, 1, 2);
     H0amplitudecharW2charW2 = higgsphiamplitudedecaysamecharginoNMSSM (mh0(2), mch(2), g, thetaL2, thetaR2, lam, CPEMix, 2, 2);
     H0amplitudecharW1charW2 = higgsphiamplitudedecaydiffcharginoNMSSM (mh0(2), mch(1), mch(2), g, thetaL2, thetaR2, lam, CPEMix, 2);
     H0amplitudegammagamma = higgsCPevenamplitudedecaygammagammaNMSSM(mh0(2), mtAtMH, mbAtMH, mcAtMH, runmtau, runmw, mHpm, mch(1), mch(2), mu(1,2), mu(2,2), mu(1,3), mu(2,3), md(1,2), md(2,2), md(1,3), md(2,3), me(1,2), me(2,2), me(1,3), me(2,3), CPEMix, beta, g, gp, alphaAtMH, thetat, thetab, thetatau-PI/2, thetaL2, thetaR2, At, Ab, Atau, greekmu, mueff, lam, kappa, Alambda, 2); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     H0amplitudegluongluon = higgsCPevenamplitudedecaygluongluonNMSSM(mh0(2), mtPole, mbPole, mcpole, runmw, mu(1,2), mu(2,2), mu(1,3), mu(2,3), md(1,2), md(2,2), md(1,3), md(2,3), mu(1,1), mu(2,1), md(1,1), md(2,1), mtPole, mbPole, CPEMix, beta, g, gp, gs, alphasAtMH, thetat, thetab, thetaL2, thetaR2, At, Ab, greekmu, mueff, lam, kappa, Alambda, 2, QCDcorr);///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     H0amplitudeZgamma = higgshamplitudedecayZgammaNMSSM (mh0(2), g, gp, alphaAtMH, runmw, polemz, mHpm, CPEMix, beta, mtAtMH, mbAtMH, mcAtMH, mch(1), mch(2), thetaL2, thetaR2, lam, kappa, Alambda, greekmu, mueff, 2);///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     
     H0amplitudeneutZ1neutZ1 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(1), mneut(1), g, gp, CPEMix, mixNeut, lam, kappa, 1, 1, 2);
     H0amplitudeneutZ1neutZ2 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(1), mneut(2), g, gp, CPEMix, mixNeut, lam, kappa, 1, 2, 2);
     H0amplitudeneutZ1neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(1), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 1, 3, 2);
     H0amplitudeneutZ1neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(1), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 1, 4, 2);
     H0amplitudeneutZ1neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(1), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 1, 5, 2);
     H0amplitudeneutZ2neutZ2 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(2), mneut(2), g, gp, CPEMix, mixNeut, lam, kappa, 2, 2, 2);
     H0amplitudeneutZ2neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(2), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 2, 3, 2);
     H0amplitudeneutZ2neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(2), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 2, 4, 2);
     H0amplitudeneutZ2neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(2), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 2, 5, 2);
     H0amplitudeneutZ3neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(3), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 3, 3, 2);
     H0amplitudeneutZ3neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(3), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 3, 4, 2);
     H0amplitudeneutZ3neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(3), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 3, 5, 2);
     H0amplitudeneutZ4neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(4), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 4, 4, 2);
     H0amplitudeneutZ4neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(4), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 4, 5, 2);
     H0amplitudeneutZ5neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(2), mneut(5), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 5, 5, 2);
     H0amplitudehiggsAhiggsA = higgsCPevenamplitudedecayAANMSSM(mh0(2), mA0(1), mA0(1), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 2, 1, 1);
     H0amplitudehiggsAhiggsA2 = 2*higgsCPevenamplitudedecayAANMSSM(mh0(2), mA0(1), mA0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 2, 1, 2);
     H0amplitudehiggsA2higgsA2 = higgsCPevenamplitudedecayAANMSSM(mh0(2), mA0(2), mA0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 2, 2, 2);
     H0amplitudehiggsAZboson = higgsCPevenamplitudedecaypseudoscalarZNMSSM(mh0(2), mA0(1), polemz, g, gp, beta, CPEMix, CPOMix, 2, 1);
     H0amplitudehiggsA2Zboson = higgsCPevenamplitudedecaypseudoscalarZNMSSM(mh0(2), mA0(2), polemz, g, gp, beta, CPEMix, CPOMix, 2, 2);
     H0amplitudeHplusHminus = higgsCPevenamplitudedecayHpHmNMSSM (mh0(2), mHpm, runmw, g, gp, runmt, runmb, beta, lam, mueff, kappa, Alambda, CPEMix, 2);
     H0amplitudeh0h0 = higgsCPevenamplitudedecayhhorhHorHHNMSSM(mh0(2), mh0(1), mh0(1), g, gp, runmw, runmt, runmb, beta, lam,  Alambda, kappa, Akappa, mueff, CPEMix, CPOMix, 1, 1, 2);
     H0amplitudeWHpm = higgsCPevenamplitudedecayWHpmNMSSM (mh0(2), polemw, mHpm, beta, g, CPEMix, 2)*2; ///*2 as W+H- or W-H+
   }
   
   H0amplitudeWbosonWboson = higgsHamplitudedecayVV(mh0(2), polemw, polemz, g, gp, alpha, beta, 'W', CPEMix, nmssmIsIt)(1);
   H0amplitudeZbosonZboson = higgsHamplitudedecayVV(mh0(2), polemw, polemz, g, gp, alpha, beta, 'Z', CPEMix, nmssmIsIt)(1);

   
   int H0WWcommentcode, H0ZZcommentcode, H0WWNDA=0, H0ZZNDA=0;
   H0WWcommentcode = higgsHamplitudedecayVV(mh0(2), polemw, polemz, g, gp, alpha, beta, 'W', CPEMix, nmssmIsIt)(2);
   string H0WWcomment, H0ZZcomment;
   if (H0WWcommentcode == 1) {
     H0WWcomment = "# H -> WW* -> W f f'bar";
     H0WWNDA = 2; ///So read into other programs, e.g. PYTHIA, correctly
   }
   else if(H0WWcommentcode == 2) {
     H0WWcomment = "# H -> W+ W-";
     H0WWNDA = 2;
   }
   
   H0ZZcommentcode = higgsHamplitudedecayVV(mh0(2), polemw, polemz, g, gp, alpha, beta, 'Z', CPEMix, nmssmIsIt)(2);
   if (H0ZZcommentcode == 1) {
     H0ZZcomment = "# H -> ZZ* -> Z f f'bar";
     H0ZZNDA = 2; ///So read into other programs, e.g. PYTHIA, correctly
   }
   else if(H0ZZcommentcode == 2) {
     H0ZZcomment = "# H -> Z Z";
     H0ZZNDA = 2;
   }
   
   ParticleHiggsH.Array_Decays[0][0] = PDGup; ParticleHiggsH.Array_Decays[0][1] = -PDGup; ParticleHiggsH.Array_Decays[0][2] = H0amplitudeuantiu; ParticleHiggsH.Array_Decays[0][3] = 2; ParticleHiggsH.Array_Comments[0] = "# H -> u ub";
   ParticleHiggsH.Array_Decays[1][0] = PDGdown; ParticleHiggsH.Array_Decays[1][1] = -PDGdown; ParticleHiggsH.Array_Decays[1][2] = H0amplitudedantid; ParticleHiggsH.Array_Decays[1][3] = 2; ParticleHiggsH.Array_Comments[1] = "# H -> d db";
   ParticleHiggsH.Array_Decays[2][0] = PDGcharm; ParticleHiggsH.Array_Decays[2][1] = -PDGcharm; ParticleHiggsH.Array_Decays[2][2] = H0amplitudecantic; ParticleHiggsH.Array_Decays[2][3] = 2; ParticleHiggsH.Array_Comments[2] = "# H -> c cb";
   ParticleHiggsH.Array_Decays[3][0] = PDGstrange; ParticleHiggsH.Array_Decays[3][1] = -PDGstrange; ParticleHiggsH.Array_Decays[3][2] = H0amplitudesantis; ParticleHiggsH.Array_Decays[3][3] = 2; ParticleHiggsH.Array_Comments[3] = "# H -> s sb";
   ParticleHiggsH.Array_Decays[4][0] = PDGbottom; ParticleHiggsH.Array_Decays[4][1] = -PDGbottom; ParticleHiggsH.Array_Decays[4][2] = H0amplitudebantib; ParticleHiggsH.Array_Decays[4][3] = 2; ParticleHiggsH.Array_Comments[4] = "# H -> b bb";
   ParticleHiggsH.Array_Decays[5][0] = PDGtop; ParticleHiggsH.Array_Decays[5][1] = -PDGtop; ParticleHiggsH.Array_Decays[5][2] = H0amplitudetantit; ParticleHiggsH.Array_Decays[5][3] = 2; ParticleHiggsH.Array_Comments[5] = "# H -> t tb";
   ParticleHiggsH.Array_Decays[6][0] = PDGelectron; ParticleHiggsH.Array_Decays[6][1] = -PDGelectron; ParticleHiggsH.Array_Decays[6][2] = H0amplitudeeantie; ParticleHiggsH.Array_Decays[6][3] = 2; ParticleHiggsH.Array_Comments[6] = "# H -> e- e+";
   ParticleHiggsH.Array_Decays[7][0] = PDGmuon; ParticleHiggsH.Array_Decays[7][1] = -PDGmuon; ParticleHiggsH.Array_Decays[7][2] = H0amplitudemuantimu; ParticleHiggsH.Array_Decays[7][3] = 2; ParticleHiggsH.Array_Comments[7] = "# H -> mu- mu+";
   ParticleHiggsH.Array_Decays[8][0] = PDGtau; ParticleHiggsH.Array_Decays[8][1] = -PDGtau; ParticleHiggsH.Array_Decays[8][2] = H0amplitudetauantitau; ParticleHiggsH.Array_Decays[8][3] = 2; ParticleHiggsH.Array_Comments[8] = "# H -> tau- tau+";
   ParticleHiggsH.Array_Decays[9][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[9][1] = PDGneutralino1; ParticleHiggsH.Array_Decays[9][2] = H0amplitudeneutZ1neutZ1; ParticleHiggsH.Array_Decays[9][3] = 2; ParticleHiggsH.Array_Comments[9] = "# H -> ~chi_10 ~chi_10";
   ParticleHiggsH.Array_Decays[10][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[10][1] = PDGneutralino2; ParticleHiggsH.Array_Decays[10][2] = H0amplitudeneutZ1neutZ2; ParticleHiggsH.Array_Decays[10][3] = 2; ParticleHiggsH.Array_Comments[10] = "# H -> ~chi_10 ~chi_20";
   ParticleHiggsH.Array_Decays[11][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[11][1] = PDGneutralino3; ParticleHiggsH.Array_Decays[11][2] = H0amplitudeneutZ1neutZ3; ParticleHiggsH.Array_Decays[11][3] = 2; ParticleHiggsH.Array_Comments[11] = "# H -> ~chi_10 ~chi_30";
   ParticleHiggsH.Array_Decays[12][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[12][1] = PDGneutralino4; ParticleHiggsH.Array_Decays[12][2] = H0amplitudeneutZ1neutZ4; ParticleHiggsH.Array_Decays[12][3] = 2; ParticleHiggsH.Array_Comments[12] = "# H -> ~chi_10 ~chi_40";
   ParticleHiggsH.Array_Decays[13][0] = PDGneutralino2; ParticleHiggsH.Array_Decays[13][1] = PDGneutralino2; ParticleHiggsH.Array_Decays[13][2] = H0amplitudeneutZ2neutZ2; ParticleHiggsH.Array_Decays[13][3] = 2; ParticleHiggsH.Array_Comments[13] = "# H -> ~chi_20 ~chi_20";
   ParticleHiggsH.Array_Decays[14][0] = PDGneutralino2; ParticleHiggsH.Array_Decays[14][1] = PDGneutralino3; ParticleHiggsH.Array_Decays[14][2] = H0amplitudeneutZ2neutZ3; ParticleHiggsH.Array_Decays[14][3] = 2; ParticleHiggsH.Array_Comments[14] = "# H -> ~chi_20 ~chi_30";
   ParticleHiggsH.Array_Decays[15][0] = PDGneutralino2; ParticleHiggsH.Array_Decays[15][1] = PDGneutralino4; ParticleHiggsH.Array_Decays[15][2] = H0amplitudeneutZ2neutZ4; ParticleHiggsH.Array_Decays[15][3] = 2; ParticleHiggsH.Array_Comments[15] = "# H -> ~chi_20 ~chi_40";
   ParticleHiggsH.Array_Decays[16][0] = PDGneutralino3; ParticleHiggsH.Array_Decays[16][1] = PDGneutralino3; ParticleHiggsH.Array_Decays[16][2] = H0amplitudeneutZ3neutZ3; ParticleHiggsH.Array_Decays[16][3] = 2; ParticleHiggsH.Array_Comments[16] = "# H -> ~chi_30 ~chi_30";
   ParticleHiggsH.Array_Decays[17][0] = PDGneutralino3; ParticleHiggsH.Array_Decays[17][1] = PDGneutralino4; ParticleHiggsH.Array_Decays[17][2] = H0amplitudeneutZ3neutZ4; ParticleHiggsH.Array_Decays[17][3] = 2; ParticleHiggsH.Array_Comments[17] = "# H -> ~chi_30 ~chi_40";
   ParticleHiggsH.Array_Decays[18][0] = PDGneutralino4; ParticleHiggsH.Array_Decays[18][1] = PDGneutralino4; ParticleHiggsH.Array_Decays[18][2] = H0amplitudeneutZ4neutZ4; ParticleHiggsH.Array_Decays[18][3] = 2; ParticleHiggsH.Array_Comments[18] = "# H -> ~chi_40 ~chi_40";
   ParticleHiggsH.Array_Decays[19][0] = PDGchargino1; ParticleHiggsH.Array_Decays[19][1] = -PDGchargino1; ParticleHiggsH.Array_Decays[19][2] = H0amplitudecharW1charW1; ParticleHiggsH.Array_Decays[19][3] = 2; ParticleHiggsH.Array_Comments[19] = "# H -> ~chi_1+ ~chi_1-";
   ParticleHiggsH.Array_Decays[20][0] = PDGchargino2; ParticleHiggsH.Array_Decays[20][1] = -PDGchargino2; ParticleHiggsH.Array_Decays[20][2] = H0amplitudecharW2charW2; ParticleHiggsH.Array_Decays[20][3] = 2; ParticleHiggsH.Array_Comments[20] = "# H -> ~chi_2+ ~chi_2-";
   ParticleHiggsH.Array_Decays[21][0] = PDGchargino1; ParticleHiggsH.Array_Decays[21][1] = -PDGchargino2; ParticleHiggsH.Array_Decays[21][2] = H0amplitudecharW1charW2; ParticleHiggsH.Array_Decays[21][3] = 2; ParticleHiggsH.Array_Comments[21] = "# H -> ~chi_1+ ~chi_2-";
   ParticleHiggsH.Array_Decays[22][0] = PDGchargino2; ParticleHiggsH.Array_Decays[22][1] = -PDGchargino1; ParticleHiggsH.Array_Decays[22][2] = H0amplitudecharW1charW2; ParticleHiggsH.Array_Decays[22][3] = 2; ParticleHiggsH.Array_Comments[22] = "# H -> ~chi_2+ ~chi_1-"; ///amplitude same as decay to ~chi1+ and ~chi2- by CP invariance
   ParticleHiggsH.Array_Decays[23][0] = PDGh0; ParticleHiggsH.Array_Decays[23][1] = PDGh0; ParticleHiggsH.Array_Decays[23][2] = H0amplitudeh0h0; ParticleHiggsH.Array_Decays[23][3] = 2; ParticleHiggsH.Array_Comments[23] = "# H -> h h";
   ParticleHiggsH.Array_Decays[24][0] = PDGA0; ParticleHiggsH.Array_Decays[24][1] = PDGA0; ParticleHiggsH.Array_Decays[24][2] = H0amplitudehiggsAhiggsA; ParticleHiggsH.Array_Decays[24][3] = 2; ParticleHiggsH.Array_Comments[24] = "# H -> A A";
   ParticleHiggsH.Array_Decays[25][0] = PDGHplus; ParticleHiggsH.Array_Decays[25][1] = -PDGHplus; ParticleHiggsH.Array_Decays[25][2] = H0amplitudeHplusHminus; ParticleHiggsH.Array_Decays[25][3] = 2; ParticleHiggsH.Array_Comments[25] = "# H -> H+ H-";
   ParticleHiggsH.Array_Decays[26][0] = PDGA0; ParticleHiggsH.Array_Decays[26][1] = PDGZboson; ParticleHiggsH.Array_Decays[26][2] = H0amplitudehiggsAZboson; ParticleHiggsH.Array_Decays[26][3] = 2; ParticleHiggsH.Array_Comments[26] = "# H -> A Z";
   ParticleHiggsH.Array_Decays[27][0] = PDGsupL; ParticleHiggsH.Array_Decays[27][1] = -PDGsupL; ParticleHiggsH.Array_Decays[27][2] = H0amplitudesupLantisupL; ParticleHiggsH.Array_Decays[27][3] = 2; ParticleHiggsH.Array_Comments[27] = "# H -> ~u_L ~u_L*";
   ParticleHiggsH.Array_Decays[28][0] = PDGsupR; ParticleHiggsH.Array_Decays[28][1] = -PDGsupR; ParticleHiggsH.Array_Decays[28][2] = H0amplitudesupRantisupR; ParticleHiggsH.Array_Decays[28][3] = 2; ParticleHiggsH.Array_Comments[28] = "# H -> ~u_R ~u_R*";
   ParticleHiggsH.Array_Decays[29][0] = PDGsupL; ParticleHiggsH.Array_Decays[29][1] = -PDGsupR; ParticleHiggsH.Array_Decays[29][2] = H0amplitudesupLantisupR; ParticleHiggsH.Array_Decays[29][3] = 2; ParticleHiggsH.Array_Comments[29] = "# H -> ~u_L ~u_R*";
   ParticleHiggsH.Array_Decays[30][0] = PDGsupR; ParticleHiggsH.Array_Decays[30][1] = -PDGsupL; ParticleHiggsH.Array_Decays[30][2] = H0amplitudesupRantisupL; ParticleHiggsH.Array_Decays[30][3] = 2; ParticleHiggsH.Array_Comments[30] = "# H -> ~u_R ~u_L*";
   ParticleHiggsH.Array_Decays[31][0] = PDGsdownL; ParticleHiggsH.Array_Decays[31][1] = -PDGsdownL; ParticleHiggsH.Array_Decays[31][2] = H0amplitudesdownLantisdownL; ParticleHiggsH.Array_Decays[31][3] = 2; ParticleHiggsH.Array_Comments[31] = "# H -> ~d_L ~d_L*";
   ParticleHiggsH.Array_Decays[32][0] = PDGsdownR; ParticleHiggsH.Array_Decays[32][1] = -PDGsdownR; ParticleHiggsH.Array_Decays[32][2] = H0amplitudesdownRantisdownR; ParticleHiggsH.Array_Decays[32][3] = 2; ParticleHiggsH.Array_Comments[32] = "# H -> ~d_R ~d_R*";
   ParticleHiggsH.Array_Decays[33][0] = PDGsdownL; ParticleHiggsH.Array_Decays[33][1] = -PDGsdownR; ParticleHiggsH.Array_Decays[33][2] = H0amplitudesdownLantisdownR; ParticleHiggsH.Array_Decays[33][3] = 2; ParticleHiggsH.Array_Comments[33] = "# H -> ~d_L ~d_R*";
   ParticleHiggsH.Array_Decays[34][0] = PDGsdownR; ParticleHiggsH.Array_Decays[34][1] = -PDGsdownL; ParticleHiggsH.Array_Decays[34][2] = H0amplitudesdownRantisdownL; ParticleHiggsH.Array_Decays[34][3] = 2; ParticleHiggsH.Array_Comments[34] = "# H -> ~d_R ~d_L*";
   ParticleHiggsH.Array_Decays[35][0] = PDGscharmL; ParticleHiggsH.Array_Decays[35][1] = -PDGscharmL; ParticleHiggsH.Array_Decays[35][2] = H0amplitudescharmLantischarmL; ParticleHiggsH.Array_Decays[35][3] = 2; ParticleHiggsH.Array_Comments[35] = "# H -> ~c_L ~c_L*";
   ParticleHiggsH.Array_Decays[36][0] = PDGscharmR; ParticleHiggsH.Array_Decays[36][1] = -PDGscharmR; ParticleHiggsH.Array_Decays[36][2] = H0amplitudescharmRantischarmR; ParticleHiggsH.Array_Decays[36][3] = 2; ParticleHiggsH.Array_Comments[36] = "# H -> ~c_R ~c_R*";
   ParticleHiggsH.Array_Decays[37][0] = PDGscharmL; ParticleHiggsH.Array_Decays[37][1] = -PDGscharmR; ParticleHiggsH.Array_Decays[37][2] = H0amplitudescharmLantischarmR; ParticleHiggsH.Array_Decays[37][3] = 2; ParticleHiggsH.Array_Comments[37] = "# H -> ~c_L ~c_R*";
   ParticleHiggsH.Array_Decays[38][0] = PDGscharmR; ParticleHiggsH.Array_Decays[38][1] = -PDGscharmL; ParticleHiggsH.Array_Decays[38][2] = H0amplitudescharmRantischarmL; ParticleHiggsH.Array_Decays[38][3] = 2; ParticleHiggsH.Array_Comments[38] = "# H -> ~c_R ~c_L*";
   ParticleHiggsH.Array_Decays[39][0] = PDGsstrangeL; ParticleHiggsH.Array_Decays[39][1] = -PDGsstrangeL; ParticleHiggsH.Array_Decays[39][2] = H0amplitudesstrangeLantisstrangeL; ParticleHiggsH.Array_Decays[39][3] = 2; ParticleHiggsH.Array_Comments[39] = "# H -> ~s_L ~s_L*";
   ParticleHiggsH.Array_Decays[40][0] = PDGsstrangeR; ParticleHiggsH.Array_Decays[40][1] = -PDGsstrangeR; ParticleHiggsH.Array_Decays[40][2] = H0amplitudesstrangeRantisstrangeR; ParticleHiggsH.Array_Decays[40][3] = 2; ParticleHiggsH.Array_Comments[40] = "# H -> ~s_R ~s_R*";
   ParticleHiggsH.Array_Decays[41][0] = PDGsstrangeL; ParticleHiggsH.Array_Decays[41][1] = -PDGsstrangeR; ParticleHiggsH.Array_Decays[41][2] = H0amplitudesstrangeLantisstrangeR; ParticleHiggsH.Array_Decays[41][3] = 2; ParticleHiggsH.Array_Comments[41] = "# H -> ~s_L ~s_R*";
   ParticleHiggsH.Array_Decays[42][0] = PDGsstrangeR; ParticleHiggsH.Array_Decays[42][1] = -PDGsstrangeL; ParticleHiggsH.Array_Decays[42][2] = H0amplitudesstrangeRantisstrangeL; ParticleHiggsH.Array_Decays[42][3] = 2; ParticleHiggsH.Array_Comments[42] = "# H -> ~s_R ~s_L*";
   ParticleHiggsH.Array_Decays[43][0] = PDGnuselectronL; ParticleHiggsH.Array_Decays[43][1] = -PDGnuselectronL; ParticleHiggsH.Array_Decays[43][2] = H0amplitudesnueLantisnueL; ParticleHiggsH.Array_Decays[43][3] = 2; ParticleHiggsH.Array_Comments[43] = "# H -> ~nu_eL ~nu_eL*";
   ParticleHiggsH.Array_Decays[44][0] = PDGselectronL; ParticleHiggsH.Array_Decays[44][1] = -PDGselectronL; ParticleHiggsH.Array_Decays[44][2] = H0amplitudeselectronLantiselectronL; ParticleHiggsH.Array_Decays[44][3] = 2; ParticleHiggsH.Array_Comments[44] = "# H -> ~e_L- ~e_L+";
   ParticleHiggsH.Array_Decays[45][0] = PDGselectronR; ParticleHiggsH.Array_Decays[45][1] = -PDGselectronR; ParticleHiggsH.Array_Decays[45][2] = H0amplitudeselectronRantiselectronR; ParticleHiggsH.Array_Decays[45][3] = 2; ParticleHiggsH.Array_Comments[45] = "# H -> ~e_R- ~e_R+";
   ParticleHiggsH.Array_Decays[46][0] = PDGselectronL; ParticleHiggsH.Array_Decays[46][1] = -PDGselectronR; ParticleHiggsH.Array_Decays[46][2] = H0amplitudeselectronLantiselectronR; ParticleHiggsH.Array_Decays[46][3] = 2; ParticleHiggsH.Array_Comments[46] = "# H -> ~e_L- ~e_R+";
   ParticleHiggsH.Array_Decays[47][0] = PDGselectronR; ParticleHiggsH.Array_Decays[47][1] = -PDGselectronL; ParticleHiggsH.Array_Decays[47][2] = H0amplitudeselectronRantiselectronL; ParticleHiggsH.Array_Decays[47][3] = 2; ParticleHiggsH.Array_Comments[47] = "# H -> ~e_R- ~e_L+";
   ParticleHiggsH.Array_Decays[48][0] = PDGnusmuonL; ParticleHiggsH.Array_Decays[48][1] = -PDGnusmuonL; ParticleHiggsH.Array_Decays[48][2] = H0amplitudesnumuLantisnumuL; ParticleHiggsH.Array_Decays[48][3] = 2; ParticleHiggsH.Array_Comments[48] = "# H -> ~nu_muL ~nu_muL*";
   ParticleHiggsH.Array_Decays[49][0] = PDGsmuonL; ParticleHiggsH.Array_Decays[49][1] = -PDGsmuonL; ParticleHiggsH.Array_Decays[49][2] = H0amplitudesmuonLantismuonL; ParticleHiggsH.Array_Decays[49][3] = 2; ParticleHiggsH.Array_Comments[49] = "# H -> ~mu_L- ~mu_L+";
   ParticleHiggsH.Array_Decays[50][0] = PDGsmuonR; ParticleHiggsH.Array_Decays[50][1] = -PDGsmuonR; ParticleHiggsH.Array_Decays[50][2] = H0amplitudesmuonRantismuonR; ParticleHiggsH.Array_Decays[50][3] = 2; ParticleHiggsH.Array_Comments[50] = "# H -> ~mu_R- ~mu_R+";
   ParticleHiggsH.Array_Decays[51][0] = PDGsmuonL; ParticleHiggsH.Array_Decays[51][1] = -PDGsmuonR; ParticleHiggsH.Array_Decays[51][2] = H0amplitudesmuonLantismuonR; ParticleHiggsH.Array_Decays[51][3] = 2; ParticleHiggsH.Array_Comments[51] = "# H -> ~mu_L- ~mu_R+";
   ParticleHiggsH.Array_Decays[52][0] = PDGsmuonR; ParticleHiggsH.Array_Decays[52][1] = -PDGsmuonL; ParticleHiggsH.Array_Decays[52][2] = H0amplitudesmuonRantismuonL; ParticleHiggsH.Array_Decays[52][3] = 2; ParticleHiggsH.Array_Comments[52] = "# H -> ~mu_R- ~mu_L+";	
   ParticleHiggsH.Array_Decays[53][0] = PDGnustauL; ParticleHiggsH.Array_Decays[53][1] = -PDGnustauL; ParticleHiggsH.Array_Decays[53][2] = H0amplitudesnutauLantisnutauL; ParticleHiggsH.Array_Decays[53][3] = 2; ParticleHiggsH.Array_Comments[53] = "# H -> ~nu_tauL ~nu_tauL*";
   ParticleHiggsH.Array_Decays[54][0] = PDGstop1; ParticleHiggsH.Array_Decays[54][1] = -PDGstop1; ParticleHiggsH.Array_Decays[54][2] = H0amplitudestop1antistop1; ParticleHiggsH.Array_Decays[54][3] = 2; ParticleHiggsH.Array_Comments[54] = "# H -> ~t_1 ~t_1*";	  
   ParticleHiggsH.Array_Decays[55][0] = PDGstop2; ParticleHiggsH.Array_Decays[55][1] = -PDGstop2; ParticleHiggsH.Array_Decays[55][2] = H0amplitudestop2antistop2; ParticleHiggsH.Array_Decays[55][3] = 2; ParticleHiggsH.Array_Comments[55] = "# H -> ~t_2 ~t_2*";
   ParticleHiggsH.Array_Decays[56][0] = PDGstop1; ParticleHiggsH.Array_Decays[56][1] = -PDGstop2; ParticleHiggsH.Array_Decays[56][2] = H0amplitudestop1antistop2; ParticleHiggsH.Array_Decays[56][3] = 2; ParticleHiggsH.Array_Comments[56] = "# H -> ~t_1 ~t_2*";	  
   ParticleHiggsH.Array_Decays[57][0] = PDGstop2; ParticleHiggsH.Array_Decays[57][1] = -PDGstop1; ParticleHiggsH.Array_Decays[57][2] = H0amplitudestop2antistop1; ParticleHiggsH.Array_Decays[57][3] = 2; ParticleHiggsH.Array_Comments[57] = "# H -> ~t_2 ~t_1*";
   ParticleHiggsH.Array_Decays[58][0] = PDGsbottom1; ParticleHiggsH.Array_Decays[58][1] = -PDGsbottom1; ParticleHiggsH.Array_Decays[58][2] = H0amplitudesbottom1antisbottom1; ParticleHiggsH.Array_Decays[58][3] = 2; ParticleHiggsH.Array_Comments[58] = "# H -> ~b_1 ~b_1*";	  
   ParticleHiggsH.Array_Decays[59][0] = PDGsbottom2; ParticleHiggsH.Array_Decays[59][1] = -PDGsbottom2; ParticleHiggsH.Array_Decays[59][2] = H0amplitudesbottom2antisbottom2; ParticleHiggsH.Array_Decays[59][3] = 2; ParticleHiggsH.Array_Comments[59] = "# H -> ~b_2 ~b_2*";
   ParticleHiggsH.Array_Decays[60][0] = PDGsbottom1; ParticleHiggsH.Array_Decays[60][1] = -PDGsbottom2; ParticleHiggsH.Array_Decays[60][2] = H0amplitudesbottom1antisbottom2; ParticleHiggsH.Array_Decays[60][3] = 2; ParticleHiggsH.Array_Comments[60] = "# H -> ~b_1 ~b_2*";	  
   ParticleHiggsH.Array_Decays[61][0] = PDGsbottom2; ParticleHiggsH.Array_Decays[61][1] = -PDGsbottom1; ParticleHiggsH.Array_Decays[61][2] = H0amplitudesbottom2antisbottom1; ParticleHiggsH.Array_Decays[61][3] = 2; ParticleHiggsH.Array_Comments[61] = "# H -> ~b_2 ~b_1*";
   ParticleHiggsH.Array_Decays[62][0] = PDGstau1; ParticleHiggsH.Array_Decays[62][1] = -PDGstau1; ParticleHiggsH.Array_Decays[62][2] = H0amplitudestau1antistau1; ParticleHiggsH.Array_Decays[62][3] = 2; ParticleHiggsH.Array_Comments[62] = "# H -> ~tau_1- ~tau_1+";	  
   ParticleHiggsH.Array_Decays[63][0] = PDGstau2; ParticleHiggsH.Array_Decays[63][1] = -PDGstau2; ParticleHiggsH.Array_Decays[63][2] = H0amplitudestau2antistau2; ParticleHiggsH.Array_Decays[63][3] = 2; ParticleHiggsH.Array_Comments[63] = "# H -> ~tau_2- ~tau_2+";
   ParticleHiggsH.Array_Decays[64][0] = PDGstau1; ParticleHiggsH.Array_Decays[64][1] = -PDGstau2; ParticleHiggsH.Array_Decays[64][2] = H0amplitudestau1antistau2; ParticleHiggsH.Array_Decays[64][3] = 2; ParticleHiggsH.Array_Comments[64] = "# H -> ~tau_1- ~tau_2+";	  
   ParticleHiggsH.Array_Decays[65][0] = PDGstau2; ParticleHiggsH.Array_Decays[65][1] = -PDGstau1; ParticleHiggsH.Array_Decays[65][2] = H0amplitudestau2antistau1; ParticleHiggsH.Array_Decays[65][3] = 2; ParticleHiggsH.Array_Comments[65] = "# H -> ~tau_2- ~tau_1+";
   ParticleHiggsH.Array_Decays[66][0] = PDGphoton; ParticleHiggsH.Array_Decays[66][1] = PDGphoton; ParticleHiggsH.Array_Decays[66][2] = H0amplitudegammagamma; ParticleHiggsH.Array_Decays[66][3] = 2; ParticleHiggsH.Array_Comments[66] = "# H -> gamma gamma";
   ParticleHiggsH.Array_Decays[67][0] = PDGgluon; ParticleHiggsH.Array_Decays[67][1] = PDGgluon; ParticleHiggsH.Array_Decays[67][2] = H0amplitudegluongluon; ParticleHiggsH.Array_Decays[67][3] = 2; ParticleHiggsH.Array_Comments[67] = "# H -> gluon gluon";
   ParticleHiggsH.Array_Decays[68][0] = PDGZboson; ParticleHiggsH.Array_Decays[68][1] = PDGphoton; ParticleHiggsH.Array_Decays[68][2] = H0amplitudeZgamma; ParticleHiggsH.Array_Decays[68][3] = 2; ParticleHiggsH.Array_Comments[68] = "# H -> Z gamma";
   ParticleHiggsH.Array_Decays[69][0] = PDGWplus; ParticleHiggsH.Array_Decays[69][1] = -PDGWplus; ParticleHiggsH.Array_Decays[69][2] = H0amplitudeWbosonWboson; ParticleHiggsH.Array_Decays[69][3] = H0WWNDA; ParticleHiggsH.Array_Comments[69] = H0WWcomment;
   ParticleHiggsH.Array_Decays[70][0] = PDGZboson; ParticleHiggsH.Array_Decays[70][1] = -PDGZboson; ParticleHiggsH.Array_Decays[70][2] = H0amplitudeZbosonZboson; ParticleHiggsH.Array_Decays[70][3] = H0ZZNDA; ParticleHiggsH.Array_Comments[70] = H0ZZcomment;
   
   ParticleHiggsH.Array_Decays[71][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[71][1] = PDGneutralino5; ParticleHiggsH.Array_Decays[71][2] = H0amplitudeneutZ1neutZ5; ParticleHiggsH.Array_Decays[71][3] = 2; ParticleHiggsH.Array_Comments[71] = "# H -> ~chi_10 ~chi_50";
   ParticleHiggsH.Array_Decays[72][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[72][1] = PDGneutralino5; ParticleHiggsH.Array_Decays[72][2] = H0amplitudeneutZ2neutZ5; ParticleHiggsH.Array_Decays[72][3] = 2; ParticleHiggsH.Array_Comments[72] = "# H -> ~chi_20 ~chi_50";
   ParticleHiggsH.Array_Decays[73][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[73][1] = PDGneutralino5; ParticleHiggsH.Array_Decays[73][2] = H0amplitudeneutZ3neutZ5; ParticleHiggsH.Array_Decays[73][3] = 2; ParticleHiggsH.Array_Comments[73] = "# H -> ~chi_30 ~chi_50";
   ParticleHiggsH.Array_Decays[74][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[74][1] = PDGneutralino5; ParticleHiggsH.Array_Decays[74][2] = H0amplitudeneutZ4neutZ5; ParticleHiggsH.Array_Decays[74][3] = 2; ParticleHiggsH.Array_Comments[74] = "# H -> ~chi_40 ~chi_50";
   ParticleHiggsH.Array_Decays[75][0] = PDGneutralino1; ParticleHiggsH.Array_Decays[75][1] = PDGneutralino5; ParticleHiggsH.Array_Decays[75][2] = H0amplitudeneutZ5neutZ5; ParticleHiggsH.Array_Decays[75][3] = 2; ParticleHiggsH.Array_Comments[75] = "# H -> ~chi_50 ~chi_50";
   ParticleHiggsH.Array_Decays[76][0] = PDGA0; ParticleHiggsH.Array_Decays[76][1] = PDGA2; ParticleHiggsH.Array_Decays[76][2] = H0amplitudehiggsAhiggsA2; ParticleHiggsH.Array_Decays[76][3] = 2; ParticleHiggsH.Array_Comments[76] = "# H -> A A2";

   ParticleHiggsH.Array_Decays[78][0] = PDGA2; ParticleHiggsH.Array_Decays[78][1] = PDGA2; ParticleHiggsH.Array_Decays[78][2] = H0amplitudehiggsA2higgsA2; ParticleHiggsH.Array_Decays[78][3] = 2; ParticleHiggsH.Array_Comments[78] = "# H -> A2 A2";
   ParticleHiggsH.Array_Decays[79][0] = PDGZboson; ParticleHiggsH.Array_Decays[79][1] = PDGA2; ParticleHiggsH.Array_Decays[79][2] = H0amplitudehiggsA2Zboson; ParticleHiggsH.Array_Decays[79][3] = 2; ParticleHiggsH.Array_Comments[79] = "# H -> A2 Z";
   ParticleHiggsH.Array_Decays[80][0] = PDGHplus; ParticleHiggsH.Array_Decays[80][1] = -PDGWplus; ParticleHiggsH.Array_Decays[80][2] = H0amplitudeWHpm; ParticleHiggsH.Array_Decays[80][3] = 2; ParticleHiggsH.Array_Comments[80] = "# H -> H+- W-+";
   
   double HiggsH_No_1to2_Decays = 0;
   
   HiggsH_No_1to2_Decays = ParticleHiggsH.No_1to2_Decays + ParticleHiggsH.No_NMSSM_Decays; /// As higgsH can't be NLSP as heavier than higgsl

   
   for (int j = 0; j<HiggsH_No_1to2_Decays; j++) {
     ParticleHiggsH.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<HiggsH_No_1to2_Decays; j++) {
     ParticleHiggsH.two_width = ParticleHiggsH.two_width + ParticleHiggsH.Array_Decays[j][2];
   }
   for (int j=HiggsH_No_1to2_Decays; j<ParticleHiggsH.No_of_Decays; j++) {
     ParticleHiggsH.three_width = ParticleHiggsH.three_width + ParticleHiggsH.Array_Decays[j][2];
   }
   
   for(int j=0; j<ParticleHiggsH.No_of_Decays; j++) {
     ParticleHiggsH.Array_Decays[j][4] = 0;
   }
   
   ///Could argue no need for test for nans here as the higgs 1 -> 3 decay formulae are all purely analytic algebraic expressions, therefore no numerical integration is involved so we can't get nans. Will check anyway as possibility of -ve sqrts in kinematics or -ve logs, or infs etc
   if ( ParticleHiggsH.three_width != ParticleHiggsH.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for HiggsH - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleHiggsH.No_of_Decays = HiggsH_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleHiggsH.total_width = ParticleHiggsH.two_width;
     }
   else {
     ParticleHiggsH.total_width = ParticleHiggsH.two_width + ParticleHiggsH.three_width;
   }
   
   if ( ParticleHiggsH.total_width != ParticleHiggsH.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleHiggsH.No_of_Decays; i++) {
       //   fout << i << " " << ParticleHiggsH.Array_Decays[i][2] << endl;
       // }	  
       throw( "nan in H0 (second heaviest higgs) total width \n");
     }
   
   for (int i =0; i<ParticleHiggsH.No_of_Decays; i++) {
     ParticleHiggsH.Array_Decays[i][5]= ParticleHiggsH.Array_Decays[i][2]/ParticleHiggsH.total_width;
   } 
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleHiggsH, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleHiggsH, BRTol);}
   
 } 
 
 if (nmssmIsIt == true) {
   
   ///higgsH3 decays
   
   double H03amplitudeuantiu=0, H03amplitudedantid=0, H03amplitudesantis=0, H03amplitudecantic=0, H03amplitudebantib=0, H03amplitudetantit=0, H03amplitudeeantie=0, H03amplitudemuantimu=0, H03amplitudetauantitau=0, H03amplitudeneutZ1neutZ1=0, H03amplitudeneutZ1neutZ2=0, H03amplitudeneutZ1neutZ3=0, H03amplitudeneutZ1neutZ4=0, H03amplitudeneutZ2neutZ2=0, H03amplitudeneutZ2neutZ3=0, H03amplitudeneutZ2neutZ4=0, H03amplitudeneutZ3neutZ3=0, H03amplitudeneutZ3neutZ4=0, H03amplitudeneutZ4neutZ4=0, H03amplitudecharW1charW1=0, H03amplitudecharW1charW2=0, H03amplitudecharW2charW2=0, H03amplitudeh0h0=0, H03amplitudehiggsAhiggsA=0, H03amplitudeHplusHminus=0, H03amplitudehiggsAZboson=0, H03amplitudesupLantisupL=0, H03amplitudesupLantisupR=0, H03amplitudesupRantisupL=0, H03amplitudesupRantisupR=0, H03amplitudesdownLantisdownL=0, H03amplitudesdownLantisdownR=0, H03amplitudesdownRantisdownL=0, H03amplitudesdownRantisdownR=0, H03amplitudescharmLantischarmL=0, H03amplitudescharmLantischarmR=0, H03amplitudescharmRantischarmL=0, H03amplitudescharmRantischarmR=0, H03amplitudesstrangeLantisstrangeL=0, H03amplitudesstrangeLantisstrangeR=0, H03amplitudesstrangeRantisstrangeL=0, H03amplitudesstrangeRantisstrangeR=0, H03amplitudesnueLantisnueL=0, H03amplitudeselectronLantiselectronL=0, H03amplitudeselectronRantiselectronR=0, H03amplitudeselectronLantiselectronR=0, H03amplitudeselectronRantiselectronL=0, H03amplitudesnumuLantisnumuL=0, H03amplitudesnutauLantisnutauL=0, H03amplitudesmuonLantismuonL=0, H03amplitudesmuonRantismuonR=0, H03amplitudesmuonLantismuonR=0, H03amplitudesmuonRantismuonL=0, H03amplitudestau1antistau1=0, H03amplitudestau2antistau2=0, H03amplitudestau1antistau2=0, H03amplitudestau2antistau1=0, H03amplitudestop1antistop1=0, H03amplitudestop1antistop2=0, H03amplitudestop2antistop1=0, H03amplitudestop2antistop2=0, H03amplitudesbottom1antisbottom1=0, H03amplitudesbottom1antisbottom2=0, H03amplitudesbottom2antisbottom1=0, H03amplitudesbottom2antisbottom2=0, H03amplitudegluongluon=0, H03amplitudegammagamma=0, H03amplitudeZgamma=0, H03amplitudeneutZ1neutZ5 = 0, H03amplitudeneutZ2neutZ5 = 0, H03amplitudeneutZ3neutZ5 = 0, H03amplitudeneutZ4neutZ5 = 0, H03amplitudeneutZ5neutZ5 = 0, H03amplitudeWW = 0, H03amplitudeZZ = 0, H03amplitudehiggsAhiggsA2 = 0, H03amplitudehiggsA2higgsA2 = 0, H03amplitudehiggsA2Zboson = 0, H03amplitudeh0H0 = 0, H03amplitudeH0H0 = 0, H03amplitudeWHpm = 0;
   
   if (flagH3 == 1) {

       // *ffout << "alphasAtMH3 = " << alphasAtMH3 << std::endl;
     
     if (QCDcorr == false) {
       ///No decays to u or d as PWs to u and d are tiny as proportional to yukawas squared
       ///Use running masses here to try to approximate some of the correction (which aren't included)
       H03amplitudecantic = higgslorHamplitudedecayquarkantiquark (mh0(3), runmc, g, alpha, beta, runmw, 1, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3);
       H03amplitudesantis = higgslorHamplitudedecayquarkantiquark (mh0(3), runms, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3);
       H03amplitudebantib = higgslorHamplitudedecayquarkantiquark (mh0(3), runmb, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3); ///use runmb here to reduce necessary corrections
       H03amplitudetantit = higgslorHamplitudedecayquarkantiquark (mh0(3), runmt, g, alpha, beta, runmw, 1, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3); ///may wish to use mtPole here rather than runmt as gives closer to answer with corrections
     }
     else {
       H03amplitudecantic = higgslorHamplitudedecayquarkantiquark (mh0(3), mcpole, g, alpha, beta, runmw, 1, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3);
       H03amplitudesantis = higgslorHamplitudedecayquarkantiquark (mh0(3), mspole, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3);
       ///mcpole and mspole set in decays.h, this values used are those appropriate for the scheme used for the h -> qq QCD corrections, as in hdecay
       H03amplitudebantib = higgslorHamplitudedecayquarkantiquark (mh0(3), mbPole, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3); 
       H03amplitudetantit = higgslorHamplitudedecayquarkantiquark (mh0(3), mtPole, g, alpha, beta, runmw, 1, 'M', CPEMix, nmssmIsIt, QCDcorr, alphasAtMH3); 

     }


     
     H03amplitudeeantie = higgslorHamplitudedecayquarkantiquark (mh0(3), runmel, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, false, alphasAtMH3)/3; ///0 as leptons are like down-type quarks, divide by 3 as No of colours is 1 for leptons cf 3 for quarks
     H03amplitudemuantimu = higgslorHamplitudedecayquarkantiquark (mh0(3), runmmu, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, false, alphasAtMH3)/3;
     H03amplitudetauantitau = higgslorHamplitudedecayquarkantiquark (mh0(3), runmtau, g, alpha, beta, runmw, 0, 'M', CPEMix, nmssmIsIt, false, alphasAtMH3)/3;
  
     H03amplitudesupLantisupL = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), mu(1,1), mu(1,1), g, gp, alpha, beta, runmw, runmu, CPEMix, 1);
     H03amplitudesupRantisupR = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), mu(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmu, CPEMix, 3);
     H03amplitudesdownLantisdownL = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), md(1,1), md(1,1), g, gp, alpha, beta, runmw, runmd, CPEMix, 2);
     H03amplitudesdownRantisdownR = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), md(2,1), mu(2,1), g, gp, alpha, beta, runmw, runmd, CPEMix, 4);
     H03amplitudescharmLantischarmL = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), mu(1,2), mu(1,2), g, gp, alpha, beta, runmw, runmc, CPEMix, 1);
     H03amplitudescharmRantischarmR = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), mu(2,2), mu(2,2), g, gp, alpha, beta, runmw, runmc, CPEMix, 3);
     H03amplitudesstrangeLantisstrangeL = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), md(2,1), md(2,1), g, gp, alpha, beta, runmw, runms, CPEMix, 2);
     H03amplitudesstrangeRantisstrangeR = higgsH3amplitudedecay2squarksamehandNMSSM (mh0(3), md(2,2), md(2,2), g, gp, alpha, beta, runmw, runms, CPEMix, 4);
     
     H03amplitudesnueLantisnueL = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), msnu(1), msnu(1), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     H03amplitudeselectronLantiselectronL = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), me(1,1), me(1,1), g, gp, alpha, beta, runmw, runmel, CPEMix, 2);
     H03amplitudeselectronRantiselectronR = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), me(2,1), me(2,1), g, gp, alpha, beta, runmw, runmel, CPEMix, 3);
     H03amplitudesnumuLantisnumuL = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), msnu(2), msnu(2), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     H03amplitudesmuonLantismuonL = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), me(1,2), me(1,2), g, gp, alpha, beta, runmw, runmmu, CPEMix, 2);
     H03amplitudesmuonRantismuonR = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), me(2,2), me(2,2), g, gp, alpha, beta, runmw, runmmu, CPEMix, 3);
     H03amplitudesnutauLantisnutauL = higgsH3amplitudedecay2sleptonsamehandNMSSM (mh0(3), msnu(3), msnu(3), g, gp, alpha, beta, runmw, 0, CPEMix, 1);
     
     H03amplitudesupLantisupR = higgshamplitudedecay2squarkdiffhandNMSSM(mh0(3), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, Au, mueff, lam, CPEMix, 1, 3);
     H03amplitudesupRantisupL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), mu(1,1), mu(2,1), g, alpha, beta, runmw, runmu, Au, mueff, lam, CPEMix, 1, 3);
     H03amplitudesdownLantisdownR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), md(1,1), md(2,1), g, alpha, beta, runmw, runmd, Ad, mueff, lam, CPEMix, 2, 3);
     H03amplitudesdownRantisdownL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), md(1,1), md(2,1), g, alpha, beta, runmw, runmd, Ad, mueff, lam, CPEMix, 2, 3);
     H03amplitudescharmLantischarmR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, Ac, mueff, lam, CPEMix, 1, 3);
     H03amplitudescharmRantischarmL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), mu(1,2), mu(2,2), g, alpha, beta, runmw, runmc, Ac, mueff, lam, CPEMix, 1, 3);
     H03amplitudesstrangeLantisstrangeR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), md(2,1), md(2,2), g, alpha, beta, runmw, runms, As, mueff, lam, CPEMix, 2, 3);
     H03amplitudesstrangeRantisstrangeL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), md(2,1), md(2,2), g, alpha, beta, runmw, runms, As, mueff, lam, CPEMix, 2, 3);
     H03amplitudeselectronLantiselectronR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), me(1,1), me(2,1), g, alpha, beta, runmw, runmel, Ae, mueff, lam, CPEMix, 2, 3)/3;
     H03amplitudeselectronRantiselectronL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), me(2,1), me(1,1), g, alpha, beta, runmw, runmel, Ae, mueff, lam, CPEMix, 2, 3)/3;
     H03amplitudesmuonLantismuonR = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), me(1,2), me(2,2), g, alpha, beta, runmw, runmmu, Amu, mueff, lam, CPEMix, 2, 3)/3;
     H03amplitudesmuonRantismuonL = higgshamplitudedecay2squarkdiffhandNMSSM (mh0(3), me(2,2), me(2,1), g, alpha, beta, runmw, runmmu, Amu, mueff, lam, CPEMix, 2, 3)/3;
     H03amplitudestop1antistop1 = higgsCPevenamplitudedecaystopistopiNMSSM (mh0(2), mu(1,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 1, 3);
     H03amplitudestop2antistop2 = higgsCPevenamplitudedecaystopistopiNMSSM (mh0(2), mu(2,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 2, 3) ;
     H03amplitudestop1antistop2 = higgsCPevenamplitudedecaystopistopjNMSSM (mh0(3), mu(1,3), mu(2,3), thetat, runmt, g, gp, runmw, beta, CPEMix, At, mueff, lam, 3); 
     H03amplitudestop2antistop1 = h0amplitudestop1antistop2;
     H03amplitudesbottom1antisbottom1 = higgsCPevenamplitudedecaysbottomisbottomiNMSSM (mh0(3), md(1,3), thetab, runmb, g, gp, runmw, beta,  CPEMix, Ab, mueff, lam, 1, 3);
     H03amplitudesbottom2antisbottom2 = higgsCPevenamplitudedecaysbottomisbottomiNMSSM (mh0(3), md(2,3), thetab, runmb, g, gp, runmw, beta,  CPEMix, Ab, mueff, lam, 2, 3);
     H03amplitudesbottom1antisbottom2 = higgsCPevenamplitudedecaysbottomisbottomjNMSSM (mh0(3), md(1,3), md(2,3), thetab, runmb, g, gp, runmw, beta, CPEMix, Ab, mueff, lam, 3);
     H03amplitudesbottom2antisbottom1 = h0amplitudesbottom1antisbottom2;
     H03amplitudestau1antistau1 = higgsCPevenamplitudedecaystauistauiNMSSM (mh0(3), me(1,3), thetatau - PI/2, runmtau, g, gp, runmw, beta,  CPEMix, Atau, mueff, lam, 1, 3); 
     H03amplitudestau2antistau2 = higgsCPevenamplitudedecaystauistauiNMSSM (mh0(3), me(2,3), thetatau - PI/2, runmtau, g, gp, runmw, beta,  CPEMix, Atau, mueff, lam, 2, 3);
     H03amplitudestau1antistau2 = higgsCPevenamplitudedecaystauistaujNMSSM (mh0(3), me(1,3), me(2,3), thetatau - PI/2, runmtau, g, gp, runmw, beta, CPEMix, Atau, mueff, lam, 3);
     H03amplitudestau2antistau1 = h0amplitudestau1antistau2;
     
     H03amplitudecharW1charW1 = higgsphiamplitudedecaysamecharginoNMSSM (mh0(3), mch(1), g, thetaL2, thetaR2, lam, CPEMix, 1, 3);
     H03amplitudecharW2charW2 = higgsphiamplitudedecaysamecharginoNMSSM (mh0(3), mch(2), g, thetaL2, thetaR2, lam, CPEMix, 2, 3);
     H03amplitudecharW1charW2 = higgsphiamplitudedecaydiffcharginoNMSSM (mh0(3), -mch(1), mch(2), g, thetaL2, thetaR2, lam, CPEMix, 3);
     
     H03amplitudegammagamma = higgsCPevenamplitudedecaygammagammaNMSSM(mh0(3), mtAtMH3, mbAtMH3, mcAtMH3, runmtau, runmw, mHpm, mch(1), mch(2), mu(1,2), mu(2,2), mu(1,3), mu(2,3), md(1,2), md(2,2), md(1,3), md(2,3), me(1,2), me(2,2), me(1,3), me(2,3), CPEMix, beta, g, gp, alphaAtMH3, thetat, thetab, thetatau-PI/2, thetaL2, thetaR2, At, Ab, Atau, greekmu, mueff, lam, kappa, Alambda, 3); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
  
     H03amplitudegluongluon = higgsCPevenamplitudedecaygluongluonNMSSM(mh0(3), mtPole, mbPole, mcpole, runmw, mu(1,2), mu(2,2), mu(1,3), mu(2,3), md(1,2), md(2,2), md(1,3), md(2,3), mu(1,1), mu(2,1), md(1,1), md(2,1), mtPole, mbPole, CPEMix, beta, g, gp, gs, alphasAtMH3, thetat, thetab, thetaL2, thetaR2, At, Ab, greekmu, mueff, lam, kappa, Alambda, 3, QCDcorr); ///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW

     H03amplitudeZgamma = higgshamplitudedecayZgammaNMSSM (mh0(3), g, gp, alphaAtMH3, runmw, polemz, mHpm, CPEMix, beta, mtAtMH3, mbAtMH3, mcAtMH3, mch(1), mch(2), thetaL2, thetaR2, lam, kappa, Alambda, greekmu, mueff, 3); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     
     H03amplitudeneutZ1neutZ1 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(1), mneut(1), g, gp, CPEMix, mixNeut, lam, kappa, 1, 1, 3);
     H03amplitudeneutZ1neutZ2 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(1), mneut(2), g, gp, CPEMix, mixNeut, lam, kappa, 1, 2, 3);
     H03amplitudeneutZ1neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(1), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 1, 3, 3);
     H03amplitudeneutZ1neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(1), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 1, 4, 3);
     H03amplitudeneutZ1neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(1), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 1, 5, 3);
     H03amplitudeneutZ2neutZ2 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(2), mneut(2), g, gp, CPEMix, mixNeut, lam, kappa, 2, 2, 3);
     H03amplitudeneutZ2neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(2), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 2, 3, 3);
     H03amplitudeneutZ2neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(2), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 2, 4, 3);
     H03amplitudeneutZ2neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(2), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 2, 5, 3);
     H03amplitudeneutZ3neutZ3 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(3), mneut(3), g, gp, CPEMix, mixNeut, lam, kappa, 3, 3, 3);
     H03amplitudeneutZ3neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(3), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 3, 4, 3);
     H03amplitudeneutZ3neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(3), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 3, 5, 3);
     H03amplitudeneutZ4neutZ4 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(4), mneut(4), g, gp, CPEMix, mixNeut, lam, kappa, 4, 4, 3);
     H03amplitudeneutZ4neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(4), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 4, 5, 3);
     H03amplitudeneutZ5neutZ5 = higgshamplitudedecayneutineutjNMSSM (mh0(3), mneut(5), mneut(5), g, gp, CPEMix, mixNeut, lam, kappa, 5, 5, 3);
     
     H03amplitudehiggsAhiggsA = higgsCPevenamplitudedecayAANMSSM(mh0(3), mA0(1), mA0(1), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 3, 1, 1);
     H03amplitudehiggsAhiggsA2 = 2*higgsCPevenamplitudedecayAANMSSM(mh0(3), mA0(1), mA0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 3, 1, 2);
     H03amplitudehiggsA2higgsA2 = higgsCPevenamplitudedecayAANMSSM(mh0(3), mA0(2), mA0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 3, 2, 2);
      H03amplitudehiggsAZboson = higgsCPevenamplitudedecaypseudoscalarZNMSSM(mh0(3), mA0(1), polemz, g, gp, beta, CPEMix, CPOMix, 3, 1);
      H03amplitudehiggsA2Zboson = higgsCPevenamplitudedecaypseudoscalarZNMSSM(mh0(3), mA0(2), polemz, g, gp, beta, CPEMix, CPOMix, 3, 2);
      H03amplitudeHplusHminus = higgsCPevenamplitudedecayHpHmNMSSM (mh0(3), mHpm, runmw, g, gp, runmt, runmb, beta, lam, mueff, kappa, Alambda, CPEMix, 3);
      H03amplitudeh0h0 = higgsCPevenamplitudedecayhhorhHorHHNMSSM(mh0(3), mh0(1), mh0(1), g, gp, runmw, runmt, runmb, beta, lam,  Alambda, kappa, Akappa, mueff, CPEMix, CPOMix, 1, 1, 3);
      H03amplitudeh0H0 = higgsCPevenamplitudedecayhhorhHorHHNMSSM(mh0(3), mh0(1), mh0(2), g, gp, runmw, runmt, runmb, beta, lam,  Alambda, kappa, Akappa, mueff, CPEMix, CPOMix, 1, 2, 3);
      H03amplitudeH0H0 = higgsCPevenamplitudedecayhhorhHorHHNMSSM(mh0(3), mh0(2), mh0(2), g, gp, runmw, runmt, runmb, beta, lam,  Alambda, kappa, Akappa, mueff, CPEMix, CPOMix, 2, 2, 3);
      H03amplitudeWHpm = higgsCPevenamplitudedecayWHpmNMSSM (mh0(3), polemw, mHpm, beta, g, CPEMix, 3)*2; ///*2 as W+H- or W-H+
      H03amplitudeWW = higgsH3amplitudedecayVVNMSSM(mh0(3), polemw, polemz, g, gp, alpha, beta, 'W', CPEMix, nmssmIsIt)(1);
      H03amplitudeZZ = higgsH3amplitudedecayVVNMSSM(mh0(3), polemw, polemz, g, gp, alpha, beta, 'Z', CPEMix, nmssmIsIt)(1);
      
      int H03WWcommentcode, H03ZZcommentcode, H03WWNDA=0, H03ZZNDA=0;
      H03WWcommentcode = higgsH3amplitudedecayVVNMSSM(mh0(3), polemw, polemz, g, gp, alpha, beta, 'W', CPEMix, nmssmIsIt)(2);
      string H03WWcomment, H03ZZcomment;
      if (H03WWcommentcode == 1) {
	H03WWcomment = "# H3 -> WW* -> W f f'bar";
	H03WWNDA = 2; ///So read into other programs, e.g. PYTHIA, correctly
      }
      else if(H03WWcommentcode == 2) {
	H03WWcomment = "# H3 -> W+ W-";
	H03WWNDA = 2;
      }
      H03ZZcommentcode = higgsH3amplitudedecayVVNMSSM(mh0(3), polemw, polemz, g, gp, alpha, beta, 'Z', CPEMix, nmssmIsIt)(2);
      if (H03ZZcommentcode == 1) {
	H03ZZcomment = "# H3 -> ZZ* -> Z f f'bar";
	H03ZZNDA = 2; ///So read into other programs, e.g. PYTHIA, correctly
      }
      else if(H03ZZcommentcode == 2) {
	H03ZZcomment = "# H3 -> Z Z";
	H03ZZNDA = 2; 
      }
      
      
      ParticleHiggsH3.Array_Decays[0][0] = PDGup; ParticleHiggsH3.Array_Decays[0][1] = -PDGup; ParticleHiggsH3.Array_Decays[0][2] = H03amplitudeuantiu; ParticleHiggsH3.Array_Decays[0][3] = 2; ParticleHiggsH3.Array_Comments[0] = "# H3 -> u ub";
      ParticleHiggsH3.Array_Decays[1][0] = PDGdown; ParticleHiggsH3.Array_Decays[1][1] = -PDGdown; ParticleHiggsH3.Array_Decays[1][2] = H03amplitudedantid; ParticleHiggsH3.Array_Decays[1][3] = 2; ParticleHiggsH3.Array_Comments[1] = "# H3 -> d db";
      ParticleHiggsH3.Array_Decays[2][0] = PDGcharm; ParticleHiggsH3.Array_Decays[2][1] = -PDGcharm; ParticleHiggsH3.Array_Decays[2][2] = H03amplitudecantic; ParticleHiggsH3.Array_Decays[2][3] = 2; ParticleHiggsH3.Array_Comments[2] = "# H3 -> c cb";
      ParticleHiggsH3.Array_Decays[3][0] = PDGstrange; ParticleHiggsH3.Array_Decays[3][1] = -PDGstrange; ParticleHiggsH3.Array_Decays[3][2] = H03amplitudesantis; ParticleHiggsH3.Array_Decays[3][3] = 2; ParticleHiggsH3.Array_Comments[3] = "# H3 -> s sb";
      ParticleHiggsH3.Array_Decays[4][0] = PDGbottom; ParticleHiggsH3.Array_Decays[4][1] = -PDGbottom; ParticleHiggsH3.Array_Decays[4][2] = H03amplitudebantib; ParticleHiggsH3.Array_Decays[4][3] = 2; ParticleHiggsH3.Array_Comments[4] = "# H3 -> b bb";
      ParticleHiggsH3.Array_Decays[5][0] = PDGtop; ParticleHiggsH3.Array_Decays[5][1] = -PDGtop; ParticleHiggsH3.Array_Decays[5][2] = H03amplitudetantit; ParticleHiggsH3.Array_Decays[5][3] = 2; ParticleHiggsH3.Array_Comments[5] = "# H3 -> t tb";
      ParticleHiggsH3.Array_Decays[6][0] = PDGelectron; ParticleHiggsH3.Array_Decays[6][1] = -PDGelectron; ParticleHiggsH3.Array_Decays[6][2] = H03amplitudeeantie; ParticleHiggsH3.Array_Decays[6][3] = 2; ParticleHiggsH3.Array_Comments[6] = "# H3 -> e- e+";
      ParticleHiggsH3.Array_Decays[7][0] = PDGmuon; ParticleHiggsH3.Array_Decays[7][1] = -PDGmuon; ParticleHiggsH3.Array_Decays[7][2] = H03amplitudemuantimu; ParticleHiggsH3.Array_Decays[7][3] = 2; ParticleHiggsH3.Array_Comments[7] = "# H3 -> mu- mu+";
      ParticleHiggsH3.Array_Decays[8][0] = PDGtau; ParticleHiggsH3.Array_Decays[8][1] = -PDGtau; ParticleHiggsH3.Array_Decays[8][2] = H03amplitudetauantitau; ParticleHiggsH3.Array_Decays[8][3] = 2; ParticleHiggsH3.Array_Comments[8] = "# H3 -> tau- tau+";
      
      ParticleHiggsH3.Array_Decays[9][0] = PDGneutralino1; ParticleHiggsH3.Array_Decays[9][1] = PDGneutralino1; ParticleHiggsH3.Array_Decays[9][2] = H03amplitudeneutZ1neutZ1; ParticleHiggsH3.Array_Decays[9][3] = 2; ParticleHiggsH3.Array_Comments[9] = "# H3 -> ~chi_10 ~chi_10";
      ParticleHiggsH3.Array_Decays[10][0] = PDGneutralino1; ParticleHiggsH3.Array_Decays[10][1] = PDGneutralino2; ParticleHiggsH3.Array_Decays[10][2] = H03amplitudeneutZ1neutZ2; ParticleHiggsH3.Array_Decays[10][3] = 2; ParticleHiggsH3.Array_Comments[10] = "# H3 -> ~chi_10 ~chi_20";
      ParticleHiggsH3.Array_Decays[11][0] = PDGneutralino1; ParticleHiggsH3.Array_Decays[11][1] = PDGneutralino3; ParticleHiggsH3.Array_Decays[11][2] = H03amplitudeneutZ1neutZ3; ParticleHiggsH3.Array_Decays[11][3] = 2; ParticleHiggsH3.Array_Comments[11] = "# H3 -> ~chi_10 ~chi_30";
      ParticleHiggsH3.Array_Decays[12][0] = PDGneutralino1; ParticleHiggsH3.Array_Decays[12][1] = PDGneutralino4; ParticleHiggsH3.Array_Decays[12][2] = H03amplitudeneutZ1neutZ4; ParticleHiggsH3.Array_Decays[12][3] = 2; ParticleHiggsH3.Array_Comments[12] = "# H3 -> ~chi_10 ~chi_40";
      ParticleHiggsH3.Array_Decays[13][0] = PDGneutralino2; ParticleHiggsH3.Array_Decays[13][1] = PDGneutralino2; ParticleHiggsH3.Array_Decays[13][2] = H03amplitudeneutZ2neutZ2; ParticleHiggsH3.Array_Decays[13][3] = 2; ParticleHiggsH3.Array_Comments[13] = "# H3 -> ~chi_20 ~chi_20";
      ParticleHiggsH3.Array_Decays[14][0] = PDGneutralino2; ParticleHiggsH3.Array_Decays[14][1] = PDGneutralino3; ParticleHiggsH3.Array_Decays[14][2] = H03amplitudeneutZ2neutZ3; ParticleHiggsH3.Array_Decays[14][3] = 2; ParticleHiggsH3.Array_Comments[14] = "# H3 -> ~chi_20 ~chi_30";
      ParticleHiggsH3.Array_Decays[15][0] = PDGneutralino2; ParticleHiggsH3.Array_Decays[15][1] = PDGneutralino4; ParticleHiggsH3.Array_Decays[15][2] = H03amplitudeneutZ2neutZ4; ParticleHiggsH3.Array_Decays[15][3] = 2; ParticleHiggsH3.Array_Comments[15] = "# H3 -> ~chi_20 ~chi_40";
      ParticleHiggsH3.Array_Decays[16][0] = PDGneutralino3; ParticleHiggsH3.Array_Decays[16][1] = PDGneutralino3; ParticleHiggsH3.Array_Decays[16][2] = H03amplitudeneutZ3neutZ3; ParticleHiggsH3.Array_Decays[16][3] = 2; ParticleHiggsH3.Array_Comments[16] = "# H3 -> ~chi_30 ~chi_30";
      ParticleHiggsH3.Array_Decays[17][0] = PDGneutralino3; ParticleHiggsH3.Array_Decays[17][1] = PDGneutralino4; ParticleHiggsH3.Array_Decays[17][2] = H03amplitudeneutZ3neutZ4; ParticleHiggsH3.Array_Decays[17][3] = 2; ParticleHiggsH3.Array_Comments[17] = "# H3 -> ~chi_30 ~chi_40";
      ParticleHiggsH3.Array_Decays[18][0] = PDGneutralino4; ParticleHiggsH3.Array_Decays[18][1] = PDGneutralino4; ParticleHiggsH3.Array_Decays[18][2] = H03amplitudeneutZ4neutZ4; ParticleHiggsH3.Array_Decays[18][3] = 2; ParticleHiggsH3.Array_Comments[18] = "# H3 -> ~chi_40 ~chi_40";
      
      ParticleHiggsH3.Array_Decays[19][0] = PDGchargino1; ParticleHiggsH3.Array_Decays[19][1] = -PDGchargino1; ParticleHiggsH3.Array_Decays[19][2] = H03amplitudecharW1charW1; ParticleHiggsH3.Array_Decays[19][3] = 2; ParticleHiggsH3.Array_Comments[19] = "# H3 -> ~chi_1+ ~chi_1-";
      ParticleHiggsH3.Array_Decays[20][0] = PDGchargino2; ParticleHiggsH3.Array_Decays[20][1] = -PDGchargino2; ParticleHiggsH3.Array_Decays[20][2] = H03amplitudecharW2charW2; ParticleHiggsH3.Array_Decays[20][3] = 2; ParticleHiggsH3.Array_Comments[20] = "# H3 -> ~chi_2+ ~chi_2-";
      ParticleHiggsH3.Array_Decays[21][0] = PDGchargino1; ParticleHiggsH3.Array_Decays[21][1] = -PDGchargino2; ParticleHiggsH3.Array_Decays[21][2] = H03amplitudecharW1charW2; ParticleHiggsH3.Array_Decays[21][3] = 2; ParticleHiggsH3.Array_Comments[21] = "# H3 -> ~chi_1+ ~chi_2-";
      ParticleHiggsH3.Array_Decays[22][0] = PDGchargino2; ParticleHiggsH3.Array_Decays[22][1] = -PDGchargino1; ParticleHiggsH3.Array_Decays[22][2] = H03amplitudecharW1charW2; ParticleHiggsH3.Array_Decays[22][3] = 2; ParticleHiggsH3.Array_Comments[22] = "# H3 -> ~chi_2+ ~chi_1-"; ///amplitude same as decay to W1+ and W2- by CP invariance
      
      ParticleHiggsH3.Array_Decays[23][0] = PDGh0; ParticleHiggsH3.Array_Decays[23][1] = PDGh0; ParticleHiggsH3.Array_Decays[23][2] = H03amplitudeh0h0; ParticleHiggsH3.Array_Decays[23][3] = 2; ParticleHiggsH3.Array_Comments[23] = "# H3 -> h h";
      ParticleHiggsH3.Array_Decays[24][0] = PDGA0; ParticleHiggsH3.Array_Decays[24][1] = PDGA0; ParticleHiggsH3.Array_Decays[24][2] = H03amplitudehiggsAhiggsA; ParticleHiggsH3.Array_Decays[24][3] = 2; ParticleHiggsH3.Array_Comments[24] = "# H3 -> A A";
      ParticleHiggsH3.Array_Decays[25][0] = PDGHplus; ParticleHiggsH3.Array_Decays[25][1] = -PDGHplus; ParticleHiggsH3.Array_Decays[25][2] = H03amplitudeHplusHminus; ParticleHiggsH3.Array_Decays[25][3] = 2; ParticleHiggsH3.Array_Comments[25] = "# H3 -> H+ H-";
      ParticleHiggsH3.Array_Decays[26][0] = PDGA0; ParticleHiggsH3.Array_Decays[26][1] = PDGZboson; ParticleHiggsH3.Array_Decays[26][2] = H03amplitudehiggsAZboson; ParticleHiggsH3.Array_Decays[26][3] = 2; ParticleHiggsH3.Array_Comments[26] = "# H3 -> A Z";
      
      ParticleHiggsH3.Array_Decays[27][0] = PDGsupL; ParticleHiggsH3.Array_Decays[27][1] = -PDGsupL; ParticleHiggsH3.Array_Decays[27][2] = H03amplitudesupLantisupL; ParticleHiggsH3.Array_Decays[27][3] = 2; ParticleHiggsH3.Array_Comments[27] = "# H3 -> ~u_L ~u_L*";
      ParticleHiggsH3.Array_Decays[28][0] = PDGsupR; ParticleHiggsH3.Array_Decays[28][1] = -PDGsupR; ParticleHiggsH3.Array_Decays[28][2] = H03amplitudesupRantisupR; ParticleHiggsH3.Array_Decays[28][3] = 2; ParticleHiggsH3.Array_Comments[28] = "# H3 -> ~u_R ~u_R*";
      ParticleHiggsH3.Array_Decays[29][0] = PDGsupL; ParticleHiggsH3.Array_Decays[29][1] = -PDGsupR; ParticleHiggsH3.Array_Decays[29][2] = H03amplitudesupLantisupR; ParticleHiggsH3.Array_Decays[29][3] = 2; ParticleHiggsH3.Array_Comments[29] = "# H3 -> ~u_L ~u_R*";
      ParticleHiggsH3.Array_Decays[30][0] = PDGsupR; ParticleHiggsH3.Array_Decays[30][1] = -PDGsupL; ParticleHiggsH3.Array_Decays[30][2] = H03amplitudesupRantisupL; ParticleHiggsH3.Array_Decays[30][3] = 2; ParticleHiggsH3.Array_Comments[30] = "# H3 -> ~u_R ~u_L*";
      ParticleHiggsH3.Array_Decays[31][0] = PDGsdownL; ParticleHiggsH3.Array_Decays[31][1] = -PDGsdownL; ParticleHiggsH3.Array_Decays[31][2] = H03amplitudesdownLantisdownL; ParticleHiggsH3.Array_Decays[31][3] = 2; ParticleHiggsH3.Array_Comments[31] = "# H3 -> ~d_L ~d_L*";
      ParticleHiggsH3.Array_Decays[32][0] = PDGsdownR; ParticleHiggsH3.Array_Decays[32][1] = -PDGsdownR; ParticleHiggsH3.Array_Decays[32][2] = H03amplitudesdownRantisdownR; ParticleHiggsH3.Array_Decays[32][3] = 2; ParticleHiggsH3.Array_Comments[32] = "# H3 -> ~d_R ~d_R*";
      ParticleHiggsH3.Array_Decays[33][0] = PDGsdownL; ParticleHiggsH3.Array_Decays[33][1] = -PDGsdownR; ParticleHiggsH3.Array_Decays[33][2] = H03amplitudesdownLantisdownR; ParticleHiggsH3.Array_Decays[33][3] = 2; ParticleHiggsH3.Array_Comments[33] = "# H3 -> ~d_L ~d_R*";
      ParticleHiggsH3.Array_Decays[34][0] = PDGsdownR; ParticleHiggsH3.Array_Decays[34][1] = -PDGsdownL; ParticleHiggsH3.Array_Decays[34][2] = H03amplitudesdownRantisdownL; ParticleHiggsH3.Array_Decays[34][3] = 2; ParticleHiggsH3.Array_Comments[34] = "# H3 -> ~d_R ~d_L*";
      ParticleHiggsH3.Array_Decays[35][0] = PDGscharmL; ParticleHiggsH3.Array_Decays[35][1] = -PDGscharmL; ParticleHiggsH3.Array_Decays[35][2] = H03amplitudescharmLantischarmL; ParticleHiggsH3.Array_Decays[35][3] = 2; ParticleHiggsH3.Array_Comments[35] = "# H3 -> ~c_L ~c_L*";
      ParticleHiggsH3.Array_Decays[36][0] = PDGscharmR; ParticleHiggsH3.Array_Decays[36][1] = -PDGscharmR; ParticleHiggsH3.Array_Decays[36][2] = H03amplitudescharmRantischarmR; ParticleHiggsH3.Array_Decays[36][3] = 2; ParticleHiggsH3.Array_Comments[36] = "# H3 -> ~c_R ~c_R*";
      ParticleHiggsH3.Array_Decays[37][0] = PDGscharmL; ParticleHiggsH.Array_Decays[37][1] = -PDGscharmR; ParticleHiggsH3.Array_Decays[37][2] = H03amplitudescharmLantischarmR; ParticleHiggsH3.Array_Decays[37][3] = 2; ParticleHiggsH3.Array_Comments[37] = "# H3 -> ~c_L ~c_R*";
      ParticleHiggsH3.Array_Decays[38][0] = PDGscharmR; ParticleHiggsH3.Array_Decays[38][1] = -PDGscharmL; ParticleHiggsH3.Array_Decays[38][2] = H03amplitudescharmRantischarmL; ParticleHiggsH3.Array_Decays[38][3] = 2; ParticleHiggsH3.Array_Comments[38] = "# H3 -> ~c_R ~c_L*";
      ParticleHiggsH3.Array_Decays[39][0] = PDGsstrangeL; ParticleHiggsH3.Array_Decays[39][1] = -PDGsstrangeL; ParticleHiggsH3.Array_Decays[39][2] = H03amplitudesstrangeLantisstrangeL; ParticleHiggsH3.Array_Decays[39][3] = 2; ParticleHiggsH3.Array_Comments[39] = "# H3 -> ~s_L ~s_L*";
      ParticleHiggsH3.Array_Decays[40][0] = PDGsstrangeR; ParticleHiggsH3.Array_Decays[40][1] = -PDGsstrangeR; ParticleHiggsH3.Array_Decays[40][2] = H03amplitudesstrangeRantisstrangeR; ParticleHiggsH3.Array_Decays[40][3] = 2; ParticleHiggsH3.Array_Comments[40] = "# H3 -> ~s_R ~s_R*";
      ParticleHiggsH3.Array_Decays[41][0] = PDGsstrangeL; ParticleHiggsH3.Array_Decays[41][1] = -PDGsstrangeR; ParticleHiggsH3.Array_Decays[41][2] = H03amplitudesstrangeLantisstrangeR; ParticleHiggsH3.Array_Decays[41][3] = 2; ParticleHiggsH3.Array_Comments[41] = "# H3 -> ~s_L ~s_R*";
      ParticleHiggsH3.Array_Decays[42][0] = PDGsstrangeR; ParticleHiggsH3.Array_Decays[42][1] = -PDGsstrangeL; ParticleHiggsH3.Array_Decays[42][2] = H03amplitudesstrangeRantisstrangeL; ParticleHiggsH3.Array_Decays[42][3] = 2; ParticleHiggsH3.Array_Comments[42] = "# H3 -> ~s_R ~s_L*";
      
      ParticleHiggsH3.Array_Decays[43][0] = PDGnuselectronL; ParticleHiggsH3.Array_Decays[43][1] = -PDGnuselectronL; ParticleHiggsH3.Array_Decays[43][2] = H03amplitudesnueLantisnueL; ParticleHiggsH3.Array_Decays[43][3] = 2; ParticleHiggsH3.Array_Comments[43] = "# H3 -> ~nu_eL ~nu_eL*";
      ParticleHiggsH3.Array_Decays[44][0] = PDGselectronL; ParticleHiggsH3.Array_Decays[44][1] = -PDGselectronL; ParticleHiggsH3.Array_Decays[44][2] = H03amplitudeselectronLantiselectronL; ParticleHiggsH3.Array_Decays[44][3] = 2; ParticleHiggsH3.Array_Comments[44] = "# H3 -> ~e_L- ~e_L+";
      ParticleHiggsH3.Array_Decays[45][0] = PDGselectronR; ParticleHiggsH3.Array_Decays[45][1] = -PDGselectronR; ParticleHiggsH3.Array_Decays[45][2] = H03amplitudeselectronRantiselectronR; ParticleHiggsH3.Array_Decays[45][3] = 2; ParticleHiggsH3.Array_Comments[45] = "# H3 -> ~e_R- ~e_R+";
      ParticleHiggsH3.Array_Decays[46][0] = PDGselectronL; ParticleHiggsH3.Array_Decays[46][1] = -PDGselectronR; ParticleHiggsH3.Array_Decays[46][2] = H03amplitudeselectronLantiselectronR; ParticleHiggsH3.Array_Decays[46][3] = 2; ParticleHiggsH3.Array_Comments[46] = "# H3 -> ~e_L- ~e_R+";
      ParticleHiggsH3.Array_Decays[47][0] = PDGselectronR; ParticleHiggsH3.Array_Decays[47][1] = -PDGselectronL; ParticleHiggsH3.Array_Decays[47][2] = H03amplitudeselectronRantiselectronL; ParticleHiggsH3.Array_Decays[47][3] = 2; ParticleHiggsH3.Array_Comments[47] = "# H3 -> ~e_R- ~e_L+";
      ParticleHiggsH3.Array_Decays[48][0] = PDGnusmuonL; ParticleHiggsH3.Array_Decays[48][1] = -PDGnusmuonL; ParticleHiggsH3.Array_Decays[48][2] = H03amplitudesnumuLantisnumuL; ParticleHiggsH3.Array_Decays[48][3] = 2; ParticleHiggsH3.Array_Comments[48] = "# H3 -> ~nu_muL ~nu_muL*";
      ParticleHiggsH3.Array_Decays[49][0] = PDGsmuonL; ParticleHiggsH3.Array_Decays[49][1] = -PDGsmuonL; ParticleHiggsH3.Array_Decays[49][2] = H03amplitudesmuonLantismuonL; ParticleHiggsH3.Array_Decays[49][3] = 2; ParticleHiggsH3.Array_Comments[49] = "# H3 -> ~mu_L- ~mu_L+";
      ParticleHiggsH3.Array_Decays[50][0] = PDGsmuonR; ParticleHiggsH3.Array_Decays[50][1] = -PDGsmuonR; ParticleHiggsH3.Array_Decays[50][2] = H03amplitudesmuonRantismuonR; ParticleHiggsH3.Array_Decays[50][3] = 2; ParticleHiggsH3.Array_Comments[50] = "# H3 -> ~mu_R- ~mu_R+";
      ParticleHiggsH3.Array_Decays[51][0] = PDGsmuonL; ParticleHiggsH3.Array_Decays[51][1] = -PDGsmuonR; ParticleHiggsH3.Array_Decays[51][2] = H03amplitudesmuonLantismuonR; ParticleHiggsH3.Array_Decays[51][3] = 2; ParticleHiggsH3.Array_Comments[51] = "# H3 -> ~mu_L- ~mu_R+";
      ParticleHiggsH3.Array_Decays[52][0] = PDGsmuonR; ParticleHiggsH3.Array_Decays[52][1] = -PDGsmuonL; ParticleHiggsH3.Array_Decays[52][2] = H03amplitudesmuonRantismuonL; ParticleHiggsH3.Array_Decays[52][3] = 2; ParticleHiggsH3.Array_Comments[52] = "# H3 -> ~mu_R- ~mu_L+";	
      ParticleHiggsH3.Array_Decays[53][0] = PDGnustauL; ParticleHiggsH3.Array_Decays[53][1] = -PDGnustauL; ParticleHiggsH3.Array_Decays[53][2] = H03amplitudesnutauLantisnutauL; ParticleHiggsH3.Array_Decays[53][3] = 2; ParticleHiggsH3.Array_Comments[53] = "# H3 -> ~nu_tauL ~nu_tauL*";
      ParticleHiggsH3.Array_Decays[54][0] = PDGstop1; ParticleHiggsH3.Array_Decays[54][1] = -PDGstop1; ParticleHiggsH3.Array_Decays[54][2] = H03amplitudestop1antistop1; ParticleHiggsH3.Array_Decays[54][3] = 2; ParticleHiggsH3.Array_Comments[54] = "# H3 -> ~t_1 ~t_1*";	  
      ParticleHiggsH3.Array_Decays[55][0] = PDGstop2; ParticleHiggsH3.Array_Decays[55][1] = -PDGstop2; ParticleHiggsH3.Array_Decays[55][2] = H03amplitudestop2antistop2; ParticleHiggsH3.Array_Decays[55][3] = 2; ParticleHiggsH3.Array_Comments[55] = "# H3 -> ~t_2 ~t_2*";
      ParticleHiggsH3.Array_Decays[56][0] = PDGstop1; ParticleHiggsH3.Array_Decays[56][1] = -PDGstop2; ParticleHiggsH3.Array_Decays[56][2] = H03amplitudestop1antistop2; ParticleHiggsH3.Array_Decays[56][3] = 2; ParticleHiggsH3.Array_Comments[56] = "# H3 -> ~t_1 ~t_2*";	  
      ParticleHiggsH3.Array_Decays[57][0] = PDGstop2; ParticleHiggsH3.Array_Decays[57][1] = -PDGstop1; ParticleHiggsH3.Array_Decays[57][2] = H03amplitudestop2antistop1; ParticleHiggsH3.Array_Decays[57][3] = 2; ParticleHiggsH3.Array_Comments[57] = "# H3 -> ~t_2 ~t_1*";
      ParticleHiggsH3.Array_Decays[58][0] = PDGsbottom1; ParticleHiggsH3.Array_Decays[58][1] = -PDGsbottom1; ParticleHiggsH3.Array_Decays[58][2] = H03amplitudesbottom1antisbottom1; ParticleHiggsH.Array_Decays[58][3] = 2; ParticleHiggsH3.Array_Comments[58] = "# H3 -> ~b_1 ~b_1*";	  
      ParticleHiggsH3.Array_Decays[59][0] = PDGsbottom2; ParticleHiggsH3.Array_Decays[59][1] = -PDGsbottom2; ParticleHiggsH3.Array_Decays[59][2] = H03amplitudesbottom2antisbottom2; ParticleHiggsH3.Array_Decays[59][3] = 2; ParticleHiggsH3.Array_Comments[59] = "# H3 -> ~b_2 ~b_2*";
      ParticleHiggsH3.Array_Decays[60][0] = PDGsbottom1; ParticleHiggsH3.Array_Decays[60][1] = -PDGsbottom2; ParticleHiggsH3.Array_Decays[60][2] = H03amplitudesbottom1antisbottom2; ParticleHiggsH3.Array_Decays[60][3] = 2; ParticleHiggsH3.Array_Comments[60] = "# H3 -> ~b_1 ~b_2*";	  
      ParticleHiggsH3.Array_Decays[61][0] = PDGsbottom2; ParticleHiggsH3.Array_Decays[61][1] = -PDGsbottom1; ParticleHiggsH3.Array_Decays[61][2] = H03amplitudesbottom2antisbottom1; ParticleHiggsH3.Array_Decays[61][3] = 2; ParticleHiggsH3.Array_Comments[61] = "# H3 -> ~b_2 ~b_1*";
      ParticleHiggsH3.Array_Decays[62][0] = PDGstau1; ParticleHiggsH3.Array_Decays[62][1] = -PDGstau1; ParticleHiggsH3.Array_Decays[62][2] = H03amplitudestau1antistau1; ParticleHiggsH3.Array_Decays[62][3] = 2; ParticleHiggsH3.Array_Comments[62] = "# H3 -> ~tau_1- ~tau_1+";	  
      ParticleHiggsH3.Array_Decays[63][0] = PDGstau2; ParticleHiggsH3.Array_Decays[63][1] = -PDGstau2; ParticleHiggsH3.Array_Decays[63][2] = H03amplitudestau2antistau2; ParticleHiggsH3.Array_Decays[63][3] = 2; ParticleHiggsH3.Array_Comments[63] = "# H3 -> ~tau_2- ~tau_2+";
      ParticleHiggsH3.Array_Decays[64][0] = PDGstau1; ParticleHiggsH3.Array_Decays[64][1] = -PDGstau2; ParticleHiggsH3.Array_Decays[64][2] = H03amplitudestau1antistau2; ParticleHiggsH3.Array_Decays[64][3] = 2; ParticleHiggsH3.Array_Comments[64] = "# H3 -> ~tau_1- ~tau_2+";	  
      ParticleHiggsH3.Array_Decays[65][0] = PDGstau2; ParticleHiggsH3.Array_Decays[65][1] = -PDGstau1; ParticleHiggsH3.Array_Decays[65][2] = H03amplitudestau2antistau1; ParticleHiggsH3.Array_Decays[65][3] = 2; ParticleHiggsH3.Array_Comments[65] = "# H3 -> ~tau_2- ~tau_1+";
      
      ParticleHiggsH3.Array_Decays[66][0] = PDGphoton; ParticleHiggsH3.Array_Decays[66][1] = PDGphoton; ParticleHiggsH3.Array_Decays[66][2] = H03amplitudegammagamma; ParticleHiggsH3.Array_Decays[66][3] = 2; ParticleHiggsH3.Array_Comments[66] = "# H3 -> gamma gamma";
      ParticleHiggsH3.Array_Decays[67][0] = PDGgluon; ParticleHiggsH3.Array_Decays[67][1] = PDGgluon; ParticleHiggsH3.Array_Decays[67][2] = H03amplitudegluongluon; ParticleHiggsH3.Array_Decays[67][3] = 2; ParticleHiggsH3.Array_Comments[67] = "# H3 -> gluon gluon";
      ParticleHiggsH3.Array_Decays[68][0] = PDGZboson; ParticleHiggsH3.Array_Decays[68][1] = PDGphoton; ParticleHiggsH3.Array_Decays[68][2] = H03amplitudeZgamma; ParticleHiggsH3.Array_Decays[68][3] = 2; ParticleHiggsH3.Array_Comments[68] = "# H3 -> Z gamma";
      ParticleHiggsH3.Array_Decays[69][0] = PDGWplus; ParticleHiggsH3.Array_Decays[69][1] = -PDGWplus; ParticleHiggsH3.Array_Decays[69][2] = H03amplitudeWW; ParticleHiggsH3.Array_Decays[69][3] = H03WWNDA; ParticleHiggsH3.Array_Comments[69] = H03WWcomment;
      ParticleHiggsH3.Array_Decays[70][0] = PDGZboson; ParticleHiggsH3.Array_Decays[70][1] = -PDGZboson; ParticleHiggsH3.Array_Decays[70][2] = H03amplitudeZZ; ParticleHiggsH3.Array_Decays[70][3] = H03ZZNDA; ParticleHiggsH3.Array_Comments[70] = H03ZZcomment;
      
      ParticleHiggsH3.Array_Decays[71][0] = PDGneutralino1; ParticleHiggsH3.Array_Decays[71][1] = PDGneutralino5; ParticleHiggsH3.Array_Decays[71][2] = H03amplitudeneutZ1neutZ5; ParticleHiggsH3.Array_Decays[71][3] = 2; ParticleHiggsH3.Array_Comments[71] = "# H3 -> ~chi_10 ~chi_50";
      ParticleHiggsH3.Array_Decays[72][0] = PDGneutralino2; ParticleHiggsH3.Array_Decays[72][1] = PDGneutralino5; ParticleHiggsH3.Array_Decays[72][2] = H03amplitudeneutZ2neutZ5; ParticleHiggsH3.Array_Decays[72][3] = 2; ParticleHiggsH3.Array_Comments[72] = "# H3 -> ~chi_20 ~chi_50";
      ParticleHiggsH3.Array_Decays[73][0] = PDGneutralino3; ParticleHiggsH3.Array_Decays[73][1] = PDGneutralino5; ParticleHiggsH3.Array_Decays[73][2] = H03amplitudeneutZ3neutZ5; ParticleHiggsH3.Array_Decays[73][3] = 2; ParticleHiggsH3.Array_Comments[73] = "# H3 -> ~chi_30 ~chi_50";
      ParticleHiggsH3.Array_Decays[74][0] = PDGneutralino4; ParticleHiggsH3.Array_Decays[74][1] = PDGneutralino5; ParticleHiggsH3.Array_Decays[74][2] = H03amplitudeneutZ4neutZ5; ParticleHiggsH3.Array_Decays[74][3] = 2; ParticleHiggsH3.Array_Comments[74] = "# H3 -> ~chi_40 ~chi_50";
      ParticleHiggsH3.Array_Decays[75][0] = PDGneutralino5; ParticleHiggsH3.Array_Decays[75][1] = PDGneutralino5; ParticleHiggsH3.Array_Decays[75][2] = H03amplitudeneutZ5neutZ5; ParticleHiggsH3.Array_Decays[75][3] = 2; ParticleHiggsH3.Array_Comments[75] = "# H3 -> ~chi_50 ~chi_50";
      ParticleHiggsH3.Array_Decays[76][0] = PDGA0; ParticleHiggsH3.Array_Decays[76][1] = PDGA2; ParticleHiggsH3.Array_Decays[76][2] = H03amplitudehiggsAhiggsA2; ParticleHiggsH3.Array_Decays[76][3] = 2; ParticleHiggsH3.Array_Comments[76] = "# H3 -> A A2";

      ParticleHiggsH3.Array_Decays[78][0] = PDGA2; ParticleHiggsH3.Array_Decays[78][1] = PDGA2; ParticleHiggsH3.Array_Decays[78][2] = H03amplitudehiggsA2higgsA2; ParticleHiggsH3.Array_Decays[78][3] = 2; ParticleHiggsH3.Array_Comments[78] = "# H3 -> A2 A2";
      ParticleHiggsH3.Array_Decays[79][0] = PDGZboson; ParticleHiggsH3.Array_Decays[79][1] = PDGA2; ParticleHiggsH3.Array_Decays[79][2] = H03amplitudehiggsA2Zboson; ParticleHiggsH3.Array_Decays[79][3] = 2; ParticleHiggsH3.Array_Comments[79] = "# H3 -> A2 Z";
      ParticleHiggsH3.Array_Decays[80][0] = PDGh0; ParticleHiggsH3.Array_Decays[80][1] = PDGH0; ParticleHiggsH3.Array_Decays[80][2] = H03amplitudeh0H0; ParticleHiggsH3.Array_Decays[80][3] = 2; ParticleHiggsH3.Array_Comments[80] = "# H3 -> h H";
      ParticleHiggsH3.Array_Decays[81][0] = PDGH0; ParticleHiggsH3.Array_Decays[81][1] = PDGH0; ParticleHiggsH3.Array_Decays[81][2] = H03amplitudeH0H0; ParticleHiggsH3.Array_Decays[81][3] = 2; ParticleHiggsH3.Array_Comments[81] = "# H3 -> H H";
      ParticleHiggsH3.Array_Decays[82][0] = PDGHplus; ParticleHiggsH3.Array_Decays[82][1] = -PDGWplus; ParticleHiggsH3.Array_Decays[82][2] = H03amplitudeWHpm; ParticleHiggsH3.Array_Decays[82][3] = 2; ParticleHiggsH3.Array_Comments[82] = "# H3 -> H+- W-+";
      
      double HiggsH3_No_1to2_Decays = 0;
      
      HiggsH3_No_1to2_Decays = ParticleHiggsH3.No_1to2_Decays + ParticleHiggsH3.No_NMSSM_Decays; 
      
      for (int j = 0; j<HiggsH3_No_1to2_Decays; j++) {
	ParticleHiggsH3.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
      }
      
      for (int j=0; j<HiggsH3_No_1to2_Decays; j++) {
	ParticleHiggsH3.two_width = ParticleHiggsH3.two_width + ParticleHiggsH3.Array_Decays[j][2];
      }
      for (int j=HiggsH3_No_1to2_Decays; j<ParticleHiggsH3.No_of_Decays; j++) {
	ParticleHiggsH3.three_width = ParticleHiggsH3.three_width + ParticleHiggsH3.Array_Decays[j][2];
      }
      
      for(int j=0; j<ParticleHiggsH3.No_of_Decays; j++) {
	ParticleHiggsH3.Array_Decays[j][4] = 0;
      }
      
      ///Could argue no need for test for nans here as the higgs 1 -> 3 decay formulae are all purely analytic algebraic expressions, therefore no numerical integration is involved so we can't get nans. Will check anyway as possibility of -ve sqrts in kinematics or -ve logs, or infs etc
   if ( ParticleHiggsH3.three_width != ParticleHiggsH3.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for HiggsH3 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleHiggsH3.No_of_Decays = HiggsH3_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleHiggsH3.total_width = ParticleHiggsH3.two_width;
     }
   else {
     ParticleHiggsH3.total_width = ParticleHiggsH3.two_width + ParticleHiggsH3.three_width;
   }

   if ( ParticleHiggsH3.total_width != ParticleHiggsH3.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleHiggsH3.No_of_Decays; i++) {
       //   fout << ParticleHiggsH3.Array_Decays[i][2] << endl;
       // }	    
       throw( "nan in H03 heaviest higgs total width \n");
     }
   
   for (int i =0; i<ParticleHiggsH3.No_of_Decays; i++) {
     ParticleHiggsH3.Array_Decays[i][5]= ParticleHiggsH3.Array_Decays[i][2]/ParticleHiggsH3.total_width;
   } 
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleHiggsH3, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleHiggsH3, BRTol);}
   
   }
 }

 ///higgsA decays

 double A0amplitudeuantiu=0, A0amplitudedantid=0, A0amplitudesantis=0, A0amplitudecantic=0, A0amplitudebantib=0, A0amplitudetantit=0, A0amplitudeeantie=0, A0amplitudemuantimu=0, A0amplitudetauantitau=0, A0amplitudeneutZ1neutZ1=0, A0amplitudeneutZ1neutZ2=0, A0amplitudeneutZ1neutZ3=0, A0amplitudeneutZ1neutZ4=0, A0amplitudeneutZ2neutZ2=0, A0amplitudeneutZ2neutZ3=0, A0amplitudeneutZ2neutZ4=0, A0amplitudeneutZ3neutZ3=0, A0amplitudeneutZ3neutZ4=0, A0amplitudeneutZ4neutZ4=0, A0amplitudecharW1charW1=0, A0amplitudecharW1charW2=0, A0amplitudecharW2charW2=0, A0amplitudehiggshZboson=0, A0amplitudehiggsHZboson=0, A0amplitudesupLantisupR=0, A0amplitudesupRantisupL=0, A0amplitudesdownLantisdownR=0, A0amplitudesdownRantisdownL=0, A0amplitudescharmLantischarmR=0, A0amplitudescharmRantischarmL=0, A0amplitudesstrangeLantisstrangeR=0, A0amplitudesstrangeRantisstrangeL=0, A0amplitudestop1antistop2=0, A0amplitudestop2antistop1=0, A0amplitudesbottom1antisbottom2=0, A0amplitudesbottom2antisbottom1=0, A0amplitudeselectronLselectronR=0, A0amplitudeselectronRselectronL=0, A0amplitudesmuonLsmuonR=0, A0amplitudesmuonRsmuonL=0, A0amplitudestau1stau2=0, A0amplitudestau2stau1=0, A0amplitudegluongluon=0, A0amplitudegammagamma=0, A0amplitudeZgamma=0, A0amplitudeWHpm=0;

 double A0amplitudeneutZ1neutZ5=0, A0amplitudeneutZ2neutZ5=0, A0amplitudeneutZ3neutZ5=0, A0amplitudeneutZ4neutZ5=0, A0amplitudeneutZ5neutZ5=0, A0amplitudehiggsH3Zboson=0;

 if (flagA1 == 1) {
   if (nmssmIsIt == false) {
     if (QCDcorr == false) {
       ///No decays to u or d as PWs to u and d are tiny as proportional to yukawas squared
       ///Use running masses here to try to approximate some of the correction (which aren't included)
       A0amplitudecantic = higgsAamplitudedecayquarkantiquark (mA0(1), runmc, g, beta, runmw, 1, QCDcorr, alphasAtMA);
       A0amplitudesantis = higgsAamplitudedecayquarkantiquark (mA0(1), runms, g, beta, runmw, 0, QCDcorr, alphasAtMA);
       A0amplitudebantib = higgsAamplitudedecayquarkantiquark (mA0(1), runmb, g, beta, runmw, 0, QCDcorr, alphasAtMA);
       A0amplitudetantit = higgsAamplitudedecayquarkantiquark (mA0(1), runmt, g, beta, runmw, 1, QCDcorr, alphasAtMA); 
     }
     else {
       A0amplitudecantic = higgsAamplitudedecayquarkantiquark (mA0(1), mcpole, g, beta, runmw, 1, QCDcorr, alphasAtMA);
       A0amplitudesantis = higgsAamplitudedecayquarkantiquark (mA0(1), mspole, g, beta, runmw, 0, QCDcorr, alphasAtMA);
       ///mcpole and mspole set in decays.h, this values used are those appropriate for the scheme used for the h -> qq QCD corrections, as in hdecay
       A0amplitudebantib = higgsAamplitudedecayquarkantiquark (mA0(1), mbPole, g, beta, runmw, 0, QCDcorr, alphasAtMA);
       A0amplitudetantit = higgsAamplitudedecayquarkantiquark (mA0(1), mtPole, g, beta, runmw, 1, QCDcorr, alphasAtMA);
     }

     A0amplitudeeantie = higgsAamplitudedecayquarkantiquark (mA0(1), runmel, g, beta, runmw, 0, false, alphasAtMA)/3; ///0 as leptons are like down-type quarks, divide by 3 as No of colours is 1 for leptons cf 3 for quarks
     A0amplitudemuantimu = higgsAamplitudedecayquarkantiquark (mA0(1), runmmu, g, beta, runmw, 0, false, alphasAtMA)/3;
     A0amplitudetauantitau = higgsAamplitudedecayquarkantiquark (mA0(1), runmtau, g, beta, runmw, 0, false, alphasAtMA)/3; 
     A0amplitudeneutZ1neutZ1 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(1), mneut(1), g, tanthetaW, beta, mixNeut, 1, 1, 'A');
     A0amplitudeneutZ1neutZ2 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(1), mneut(2), g, tanthetaW, beta, mixNeut, 1, 2, 'A');
     A0amplitudeneutZ1neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(1), mneut(3), g, tanthetaW, beta, mixNeut, 1, 3, 'A');
     A0amplitudeneutZ1neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(1), mneut(4), g, tanthetaW, beta, mixNeut, 1, 4, 'A');
     A0amplitudeneutZ2neutZ2 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(2), mneut(2), g, tanthetaW, beta, mixNeut, 2, 2, 'A');
     A0amplitudeneutZ2neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(2), mneut(3), g, tanthetaW, beta, mixNeut, 2, 3, 'A');
     A0amplitudeneutZ2neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(2), mneut(4), g, tanthetaW, beta, mixNeut, 2, 4, 'A');
     A0amplitudeneutZ3neutZ3 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(3), mneut(3), g, tanthetaW, beta, mixNeut, 3, 3, 'A');
     A0amplitudeneutZ3neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(3), mneut(4), g, tanthetaW, beta, mixNeut, 3, 4, 'A');
     A0amplitudeneutZ4neutZ4 = higgsphiamplitudedecayneutralinoneutralino (mA0(1), mneut(4), mneut(4), g, tanthetaW, beta, mixNeut, 4, 4, 'A');
     A0amplitudecharW1charW1 = higgsphiamplitudedecaysamechargino (mA0(1), mch(1), g, thetaL2, thetaR2, alpha, beta, 1, 'A');
     A0amplitudecharW2charW2 = higgsphiamplitudedecaysamechargino (mA0(1), mch(2), g, thetaL2, thetaR2, alpha, beta, 2, 'A');
     A0amplitudecharW1charW2 = higgsphiamplitudedecaydifchargino (mA0(1), mch(1), mch(2), g, thetaL2, thetaR2, alpha, beta, 'A');
     A0amplitudehiggshZboson = higgsAamplitudedecayhiggshZboson (mA0(1), polemz, mh0(1), g, gp, alpha, beta);
     
     ///In general may wish to not allow the A -> HZ decay for heavy higgs as it's ruled out by SUSY constraints on the mass spectrum (Djouadi Tome II)?
     A0amplitudehiggsHZboson = higgsAamplitudedecayhiggsHZboson (mA0(1), polemz, mh0(2), g, gp, alpha, beta);
     A0amplitudesupLantisupR = 3*higgsAamplitudedecaysfermions (mA0(1), mu(1,1), mu(2,1), g, runmw, runmu, greekmu, Au, beta, 'u');
     A0amplitudesupRantisupL = 3*higgsAamplitudedecaysfermions (mA0(1), mu(2,1), mu(1,1), g, runmw, runmu, greekmu, Au, beta, 'u');
     A0amplitudesdownLantisdownR = 3*higgsAamplitudedecaysfermions (mA0(1), md(1,1), md(2,1), g, runmw, runmd, greekmu, Ad, beta, 'd');
     A0amplitudesdownRantisdownL = 3*higgsAamplitudedecaysfermions (mA0(1), md(2,1), md(1,1), g, runmw, runmd, greekmu, Ad, beta, 'd');
     A0amplitudescharmLantischarmR = 3*higgsAamplitudedecaysfermions(mA0(1), mu(1,2), mu(2,2), g, runmw, runmc, greekmu, Ac, beta, 'u');
     A0amplitudescharmRantischarmL = 3*higgsAamplitudedecaysfermions(mA0(1), mu(2,2), mu(1,2), g, runmw, runmc, greekmu, Ac, beta, 'u');
     A0amplitudesstrangeLantisstrangeR = 3*higgsAamplitudedecaysfermions(mA0(1), md(1,2), md(2,2), g, runmw, runms, greekmu, As, beta, 'd');
     A0amplitudesstrangeRantisstrangeL = 3*higgsAamplitudedecaysfermions(mA0(1), md(2,2), md(1,2), g, runmw, runms, greekmu, As, beta, 'd');
     A0amplitudestop1antistop2 = 3*higgsAamplitudedecaysfermions(mA0(1), mu(1,3), mu(2,3), g, runmw, runmt, greekmu, At, beta, 'u');
     A0amplitudestop2antistop1 = 3*higgsAamplitudedecaysfermions(mA0(1), mu(2,3), mu(1,3), g, runmw, runmt, greekmu, At, beta, 'u');
     A0amplitudesbottom1antisbottom2 = 3*higgsAamplitudedecaysfermions(mA0(1), md(1,3), md(2,3), g, runmw, runmb, greekmu, Ab, beta, 'd');
     A0amplitudesbottom2antisbottom1 = 3*higgsAamplitudedecaysfermions(mA0(1), md(2,3), md(1,3), g, runmw, runmb, greekmu, Ab, beta, 'd');
     A0amplitudeselectronLselectronR = higgsAamplitudedecaysfermions(mA0(1), me(1,1), me(2,1), g, runmw, runmel, greekmu, Ae, beta, 'd');
     A0amplitudeselectronRselectronL = higgsAamplitudedecaysfermions(mA0(1), me(2,1), me(1,1), g, runmw, runmel, greekmu, Ae, beta, 'd');
     A0amplitudesmuonLsmuonR = higgsAamplitudedecaysfermions(mA0(1), me(1,2), me(2,2), g, runmw, runmmu, greekmu, Amu, beta, 'd');
     A0amplitudesmuonRsmuonL = higgsAamplitudedecaysfermions(mA0(1), me(2,2), me(1,2), g, runmw, runmmu, greekmu, Amu, beta, 'd');
     A0amplitudestau1stau2 = higgsAamplitudedecaysfermions(mA0(1), me(1,3), me(2,3), g, runmw, runmtau, greekmu, Atau, beta, 'd');
     A0amplitudestau2stau1 = higgsAamplitudedecaysfermions(mA0(1), me(2,3), me(1,3), g, runmw, runmtau, greekmu, Atau, beta, 'd');
     
     A0amplitudegammagamma = higgsesamplitudedecaygammagammatotal(mA0(1), g, gp, alphaAtMA, runmw, polemw, alpha, beta, mtAtMA, mbAtMA, mcAtMA, runmtau, mHpm, mu(1,3), mu(2,3), md(1,3), md(2,3), me(1,3), me(2,3), mch(1), mch(2), thetaL, thetaR, thetat, thetab, thetatau, greekmu, At, Ab, Atau, 'A'); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     A0amplitudegluongluon = higgsesamplitudedecaygluongluontotal(mA0(1), g, g3atmA0, gp, runmw, alpha, beta, mtPole, mbPole, mcpole, mu(1,3), mu(2,3), md(1,3), md(2,3), thetat, thetab, greekmu, At, Ab, runms, mu(1,2), mu(2,2), md(1,2), md(2,2), Ac, As, runmu, runmd, mu(1,1), mu(2,1), md(1,1), md(2,1), Au, Ad, 'A', QCDcorr);///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     A0amplitudeZgamma = higgsesamplitudedecayZbosonphotontotal(mA0(1), polemz, g, gp, alphaAtMA, polemw, runmw, alpha, beta, mtAtMA, mbAtMA, mcAtMA, msAtMA, mu(1,3), mu(2,3), md(1,3), md(2,3), mHpm, thetat, thetab, greekmu, At, Ab, 'A');///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
   
     A0amplitudeWHpm = higgsAamplitudedecayHpmWboson(mA0(1), polemw, mHpm, g, thetaA, 1, nmssmIsIt);
   }
   
   else if (nmssmIsIt == true){ ///NMSSM so need to modify by elements of pseudoscalar mixing matrix
     if (QCDcorr == false) {
       ///No decays to u or d as PWs to u and d are tiny as proportional to yukawas squared
       ///Use running masses here to try to approximate some of the correction (which aren't included)
       A0amplitudecantic = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), runmc, beta, CPOMix, 1, 1, QCDcorr, alphasAtMA);
       A0amplitudesantis = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), runms, beta, CPOMix, 0, 1, QCDcorr, alphasAtMA);
       A0amplitudebantib = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), runmb, beta, CPOMix, 0, 1, QCDcorr, alphasAtMA);
       A0amplitudetantit = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), runmt, beta, CPOMix, 1, 1, QCDcorr, alphasAtMA);
     }
     else {
       A0amplitudecantic = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), mcpole, beta, CPOMix, 1, 1, QCDcorr, alphasAtMA);
       A0amplitudesantis = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), mspole, beta, CPOMix, 0, 1, QCDcorr, alphasAtMA);
       ///mcpole and mspole set in decays.h, this values used are those appropriate for the scheme used for the h -> qq QCD corrections, as in hdecay
       A0amplitudebantib = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), mbPole, beta, CPOMix, 0, 1, QCDcorr, alphasAtMA);
       A0amplitudetantit = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(1), mtPole, beta, CPOMix, 1, 1, QCDcorr, alphasAtMA);
     }
     
     A0amplitudeeantie = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(1), runmel, beta, CPOMix, 0, 1, false, alphasAtMA)/3; ///0 as leptons are like down-type quarks, divide by 3 as No of colours is 1 for leptons cf 3 for quarks
     A0amplitudemuantimu = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(1), runmmu, beta, CPOMix, 0, 1, false, alphasAtMA)/3;
     A0amplitudetauantitau = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(1), runmtau, beta, CPOMix, 0, 1, false, alphasAtMA)/3;
     
     A0amplitudeneutZ1neutZ1 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(1), mneut(1), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 1, 1);
     A0amplitudeneutZ1neutZ2 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(1), mneut(2), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 2, 1);
     A0amplitudeneutZ1neutZ3 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(1), mneut(3), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 3, 1);
     A0amplitudeneutZ1neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(1), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 4, 1);
     A0amplitudeneutZ1neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(1), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 5, 1);
     A0amplitudeneutZ2neutZ2 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(2), mneut(2), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 2, 1);
     A0amplitudeneutZ2neutZ3 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(2), mneut(3), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 3, 1);
     A0amplitudeneutZ2neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(2), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 4, 1);
     A0amplitudeneutZ2neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(2), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 5, 1);
     A0amplitudeneutZ3neutZ3 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(3), mneut(3), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 3, 3, 1);
     A0amplitudeneutZ3neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(3), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 3, 4, 1);
     A0amplitudeneutZ3neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(3), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 3, 5, 1);
     A0amplitudeneutZ4neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(4), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 4, 4, 1);
     A0amplitudeneutZ4neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(4), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 4, 5, 1);
     A0amplitudeneutZ5neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(1), mneut(5), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 5, 5, 1);
     A0amplitudecharW1charW1 = higgsAamplitudedecaysamecharginoNMSSM (mA0(1), mch(1), g, thetaL2, thetaR2, alpha, lam, CPOMix, 1, 1);
     A0amplitudecharW2charW2 = higgsAamplitudedecaysamecharginoNMSSM (mA0(1), mch(2), g, thetaL2, thetaR2, alpha, lam, CPOMix, 2, 1);
     A0amplitudecharW1charW2 = higgsAamplitudedecaydifcharginoNMSSM (mA0(1), mch(1), mch(2), g, thetaL2, thetaR2, alpha, lam, CPOMix, 1);
     A0amplitudehiggshZboson = higgsAamplitudedecayhiggshorHZbosonNMSSM (mA0(1), polemz, mh0(1), g, gp, alpha, beta, thetaA, CPEMix, 1, 1);
     A0amplitudehiggsHZboson = higgsAamplitudedecayhiggshorHZbosonNMSSM (mA0(1), polemz, mh0(2), g, gp, alpha, beta, thetaA, CPEMix, 1, 2);
     A0amplitudehiggsH3Zboson = higgsAamplitudedecayhiggshorHZbosonNMSSM (mA0(1), polemz, mh0(3), g, gp, alpha, beta, thetaA, CPEMix, 1, 3);   
     A0amplitudesupLantisupR = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(1), mu(1,1), mu(2,1), g, runmw, runmu, Au, beta, lam, mueff, CPOMix, 'u', 1);
     A0amplitudesupRantisupL = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(1), mu(2,1), mu(1,1), g, runmw, runmu, Au, beta, lam, mueff, CPOMix, 'u', 1);
     A0amplitudesdownLantisdownR = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(1), md(1,1), md(2,1), g, runmw, runmd, Ad, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudesdownRantisdownL = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(1), md(2,1), md(1,1), g, runmw, runmd, Ad, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudescharmLantischarmR = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), mu(1,2), mu(2,2), g, runmw, runmc, Ac, beta, lam, mueff, CPOMix, 'u', 1);
     A0amplitudescharmRantischarmL = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), mu(2,2), mu(1,2), g, runmw, runmc, Ac, beta, lam, mueff, CPOMix, 'u', 1);
     A0amplitudesstrangeLantisstrangeR = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), md(1,2), md(2,2), g, runmw, runms, As, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudesstrangeRantisstrangeL = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), md(2,2), md(1,2), g, runmw, runms, As, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudestop1antistop2 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), mu(1,3), mu(2,3), g, runmw, runmt, At, beta, lam, mueff, CPOMix, 'u', 1);
     A0amplitudestop2antistop1 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), mu(2,3), mu(1,3), g, runmw, runmt, At, beta, lam, mueff, CPOMix, 'u', 1);
     A0amplitudesbottom1antisbottom2 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), md(1,3), md(2,3), g, runmw, runmb, Ab, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudesbottom2antisbottom1 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(1), md(2,3), md(1,3), g, runmw, runmb, Ab, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudeselectronLselectronR = higgsAamplitudedecaysfermionsNMSSM(mA0(1), me(1,1), me(2,1), g, runmw, runmel, Ae, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudeselectronRselectronL = higgsAamplitudedecaysfermionsNMSSM(mA0(1), me(2,1), me(1,1), g, runmw, runmel, Ae, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudesmuonLsmuonR = higgsAamplitudedecaysfermionsNMSSM(mA0(1), me(1,2), me(2,2), g, runmw, runmmu, Amu, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudesmuonRsmuonL = higgsAamplitudedecaysfermionsNMSSM(mA0(1), me(2,2), me(1,2), g, runmw, runmmu, Amu, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudestau1stau2 = higgsAamplitudedecaysfermionsNMSSM(mA0(1), me(1,3), me(2,3), g, runmw, runmtau, Atau, beta, lam, mueff, CPOMix, 'd', 1);
     A0amplitudestau2stau1 = higgsAamplitudedecaysfermionsNMSSM(mA0(1), me(2,3), me(1,3), g, runmw, runmtau, Atau, beta, lam, mueff, CPOMix, 'd', 1); 

   A0amplitudegammagamma = higgsAamplitudedecaygammagammaNMSSM (mA0(1), g, gp, alphaAtMA, runmw, CPOMix, beta, mtAtMA, mbAtMA, mcAtMA, runmtau, mch(1), mch(2), thetaL2, thetaR2, lam, 1); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
   A0amplitudegluongluon = higgsAamplitudedecaygluongluonNMSSM (mA0(1), g, gs, alphasAtMA, runmw, CPOMix, beta, mtPole, mbPole, mcpole, lam, 1, QCDcorr); ///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
   A0amplitudeZgamma = higgsAamplitudedecayZgammaNMSSM (mA0(1), g, gp, alphaAtMA, runmw, polemz, CPOMix, beta,mtAtMA, mbAtMA, mcAtMA, mch(1), mch(2), thetaL2, thetaR2, lam, 1); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
   
   A0amplitudeWHpm = higgsAamplitudedecayHpmWboson(mA0(1), polemw, mHpm, g, thetaA, 1, nmssmIsIt);
   }
   
   ParticleHiggsA.Array_Decays[0][0] = PDGup; ParticleHiggsA.Array_Decays[0][1] = -PDGup; ParticleHiggsA.Array_Decays[0][2] = A0amplitudeuantiu; ParticleHiggsA.Array_Decays[0][3] = 2; ParticleHiggsA.Array_Comments[0] = "# A -> u ub";
   ParticleHiggsA.Array_Decays[1][0] = PDGdown; ParticleHiggsA.Array_Decays[1][1] = -PDGdown; ParticleHiggsA.Array_Decays[1][2] = A0amplitudedantid; ParticleHiggsA.Array_Decays[1][3] = 2; ParticleHiggsA.Array_Comments[1] = "# A -> d db";
   ParticleHiggsA.Array_Decays[2][0] = PDGcharm; ParticleHiggsA.Array_Decays[2][1] = -PDGcharm; ParticleHiggsA.Array_Decays[2][2] = A0amplitudecantic; ParticleHiggsA.Array_Decays[2][3] = 2; ParticleHiggsA.Array_Comments[2] = "# A -> c cb";
   ParticleHiggsA.Array_Decays[3][0] = PDGstrange; ParticleHiggsA.Array_Decays[3][1] = -PDGstrange; ParticleHiggsA.Array_Decays[3][2] = A0amplitudesantis; ParticleHiggsA.Array_Decays[3][3] = 2; ParticleHiggsA.Array_Comments[3] = "# A -> s sb";
   ParticleHiggsA.Array_Decays[4][0] = PDGbottom; ParticleHiggsA.Array_Decays[4][1] = -PDGbottom; ParticleHiggsA.Array_Decays[4][2] = A0amplitudebantib; ParticleHiggsA.Array_Decays[4][3] = 2; ParticleHiggsA.Array_Comments[4] = "# A -> b bb";
   ParticleHiggsA.Array_Decays[5][0] = PDGtop; ParticleHiggsA.Array_Decays[5][1] = -PDGtop; ParticleHiggsA.Array_Decays[5][2] = A0amplitudetantit; ParticleHiggsA.Array_Decays[5][3] = 2; ParticleHiggsA.Array_Comments[5] = "# A -> t tb";
   ParticleHiggsA.Array_Decays[6][0] = PDGelectron; ParticleHiggsA.Array_Decays[6][1] = -PDGelectron; ParticleHiggsA.Array_Decays[6][2] = A0amplitudeeantie; ParticleHiggsA.Array_Decays[6][3] = 2; ParticleHiggsA.Array_Comments[6] = "# A -> e- e+";
   ParticleHiggsA.Array_Decays[7][0] = PDGmuon; ParticleHiggsA.Array_Decays[7][1] = -PDGmuon; ParticleHiggsA.Array_Decays[7][2] = A0amplitudemuantimu; ParticleHiggsA.Array_Decays[7][3] = 2; ParticleHiggsA.Array_Comments[7] = "# A -> mu- mu+";
   ParticleHiggsA.Array_Decays[8][0] = PDGtau; ParticleHiggsA.Array_Decays[8][1] = -PDGtau; ParticleHiggsA.Array_Decays[8][2] = A0amplitudetauantitau; ParticleHiggsA.Array_Decays[8][3] = 2; ParticleHiggsA.Array_Comments[8] = "# A -> tau- tau+";
   ParticleHiggsA.Array_Decays[9][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[9][1] = PDGneutralino1; ParticleHiggsA.Array_Decays[9][2] = A0amplitudeneutZ1neutZ1; ParticleHiggsA.Array_Decays[9][3] = 2; ParticleHiggsA.Array_Comments[9] = "# A -> ~chi_10 ~chi_10";
   ParticleHiggsA.Array_Decays[10][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[10][1] = PDGneutralino2; ParticleHiggsA.Array_Decays[10][2] = A0amplitudeneutZ1neutZ2; ParticleHiggsA.Array_Decays[10][3] = 2; ParticleHiggsA.Array_Comments[10] = "# A -> ~chi_10 ~chi_20";
   ParticleHiggsA.Array_Decays[11][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[11][1] = PDGneutralino3; ParticleHiggsA.Array_Decays[11][2] = A0amplitudeneutZ1neutZ3; ParticleHiggsA.Array_Decays[11][3] = 2; ParticleHiggsA.Array_Comments[11] = "# A -> ~chi_10 ~chi_30";
   ParticleHiggsA.Array_Decays[12][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[12][1] = PDGneutralino4; ParticleHiggsA.Array_Decays[12][2] = A0amplitudeneutZ1neutZ4; ParticleHiggsA.Array_Decays[12][3] = 2; ParticleHiggsA.Array_Comments[12] = "# A -> ~chi_10 ~chi_40";
   ParticleHiggsA.Array_Decays[13][0] = PDGneutralino2; ParticleHiggsA.Array_Decays[13][1] = PDGneutralino2; ParticleHiggsA.Array_Decays[13][2] = A0amplitudeneutZ2neutZ2; ParticleHiggsA.Array_Decays[13][3] = 2; ParticleHiggsA.Array_Comments[13] = "# A -> ~chi_20 ~chi_20";
   ParticleHiggsA.Array_Decays[14][0] = PDGneutralino2; ParticleHiggsA.Array_Decays[14][1] = PDGneutralino3; ParticleHiggsA.Array_Decays[14][2] = A0amplitudeneutZ2neutZ3; ParticleHiggsA.Array_Decays[14][3] = 2; ParticleHiggsA.Array_Comments[14] = "# A -> ~chi_20 ~chi_30";
   ParticleHiggsA.Array_Decays[15][0] = PDGneutralino2; ParticleHiggsA.Array_Decays[15][1] = PDGneutralino4; ParticleHiggsA.Array_Decays[15][2] = A0amplitudeneutZ2neutZ4; ParticleHiggsA.Array_Decays[15][3] = 2; ParticleHiggsA.Array_Comments[15] = "# A -> ~chi_20 ~chi_40";
   ParticleHiggsA.Array_Decays[16][0] = PDGneutralino3; ParticleHiggsA.Array_Decays[16][1] = PDGneutralino3; ParticleHiggsA.Array_Decays[16][2] = A0amplitudeneutZ3neutZ3; ParticleHiggsA.Array_Decays[16][3] = 2; ParticleHiggsA.Array_Comments[16] = "# A -> ~chi_30 ~chi_30";
   ParticleHiggsA.Array_Decays[17][0] = PDGneutralino3; ParticleHiggsA.Array_Decays[17][1] = PDGneutralino4; ParticleHiggsA.Array_Decays[17][2] = A0amplitudeneutZ3neutZ4; ParticleHiggsA.Array_Decays[17][3] = 2; ParticleHiggsA.Array_Comments[17] = "# A -> ~chi_30 ~chi_40";
   ParticleHiggsA.Array_Decays[18][0] = PDGneutralino4; ParticleHiggsA.Array_Decays[18][1] = PDGneutralino4; ParticleHiggsA.Array_Decays[18][2] = A0amplitudeneutZ4neutZ4; ParticleHiggsA.Array_Decays[18][3] = 2; ParticleHiggsA.Array_Comments[18] = "# A -> ~chi_40 ~chi_40";
   ParticleHiggsA.Array_Decays[19][0] = PDGchargino1; ParticleHiggsA.Array_Decays[19][1] = -PDGchargino1; ParticleHiggsA.Array_Decays[19][2] = A0amplitudecharW1charW1; ParticleHiggsA.Array_Decays[19][3] = 2; ParticleHiggsA.Array_Comments[19] = "# A -> ~chi_1+ ~chi_1-";
   ParticleHiggsA.Array_Decays[20][0] = PDGchargino2; ParticleHiggsA.Array_Decays[20][1] = -PDGchargino2; ParticleHiggsA.Array_Decays[20][2] = A0amplitudecharW2charW2; ParticleHiggsA.Array_Decays[20][3] = 2; ParticleHiggsA.Array_Comments[20] = "# A -> ~chi_2+ ~chi_2-";
   ParticleHiggsA.Array_Decays[21][0] = PDGchargino1; ParticleHiggsA.Array_Decays[21][1] = -PDGchargino2; ParticleHiggsA.Array_Decays[21][2] = A0amplitudecharW1charW2; ParticleHiggsA.Array_Decays[21][3] = 2; ParticleHiggsA.Array_Comments[21] = "# A -> ~chi_1+ ~chi_2-";
   ParticleHiggsA.Array_Decays[22][0] = PDGchargino2; ParticleHiggsA.Array_Decays[22][1] = -PDGchargino1; ParticleHiggsA.Array_Decays[22][2] = A0amplitudecharW1charW2; ParticleHiggsA.Array_Decays[22][3] = 2; ParticleHiggsA.Array_Comments[22] = "# A -> ~chi_2+ ~chi_1-"; ///amplitude same as decay to W1+ and W2- by CP invariance
   ParticleHiggsA.Array_Decays[23][0] = PDGZboson; ParticleHiggsA.Array_Decays[23][1] = PDGh0; ParticleHiggsA.Array_Decays[23][2] = A0amplitudehiggshZboson; ParticleHiggsA.Array_Decays[23][3] = 2; ParticleHiggsA.Array_Comments[23] = "# A -> h Z";
   ParticleHiggsA.Array_Decays[24][0] = PDGZboson; ParticleHiggsA.Array_Decays[24][1] = PDGH0; ParticleHiggsA.Array_Decays[24][2] = A0amplitudehiggsHZboson; ParticleHiggsA.Array_Decays[24][3] = 2; ParticleHiggsA.Array_Comments[24] = "# A -> H Z";
   ParticleHiggsA.Array_Decays[25][0] = PDGsupL; ParticleHiggsA.Array_Decays[25][1] = PDGsupR; ParticleHiggsA.Array_Decays[25][2] = A0amplitudesupLantisupR; ParticleHiggsA.Array_Decays[25][3] = 2; ParticleHiggsA.Array_Comments[25] = "# A-> ~u_L ~u_R*"; 
   ParticleHiggsA.Array_Decays[26][0] = PDGsupR; ParticleHiggsA.Array_Decays[26][1] = PDGsupL; ParticleHiggsA.Array_Decays[26][2] = A0amplitudesupRantisupL; ParticleHiggsA.Array_Decays[26][3] = 2; ParticleHiggsA.Array_Comments[26] = "# A-> ~u_R ~u_L*";
   ParticleHiggsA.Array_Decays[27][0] = PDGsdownL; ParticleHiggsA.Array_Decays[27][1] = PDGsdownR; ParticleHiggsA.Array_Decays[27][2] = A0amplitudesdownLantisdownR; ParticleHiggsA.Array_Decays[27][3] = 2; ParticleHiggsA.Array_Comments[27] = "# A-> ~d_L ~d_R*";
   ParticleHiggsA.Array_Decays[28][0] = PDGsdownR; ParticleHiggsA.Array_Decays[28][1] = PDGsdownL; ParticleHiggsA.Array_Decays[28][2] = A0amplitudesdownRantisdownL; ParticleHiggsA.Array_Decays[28][3] = 2; ParticleHiggsA.Array_Comments[28] = "# A-> ~d_R ~d_L*";
   ParticleHiggsA.Array_Decays[29][0] = PDGscharmL; ParticleHiggsA.Array_Decays[29][1] = PDGscharmR; ParticleHiggsA.Array_Decays[29][2] = A0amplitudescharmLantischarmR; ParticleHiggsA.Array_Decays[29][3] = 2; ParticleHiggsA.Array_Comments[29] = "# A-> ~c_L ~c_R*"; 
   ParticleHiggsA.Array_Decays[30][0] = PDGscharmR; ParticleHiggsA.Array_Decays[30][1] = PDGscharmL; ParticleHiggsA.Array_Decays[30][2] = A0amplitudescharmRantischarmL; ParticleHiggsA.Array_Decays[30][3] = 2; ParticleHiggsA.Array_Comments[30] = "# A-> ~c_R ~c_L*";
   ParticleHiggsA.Array_Decays[31][0] = PDGsstrangeL; ParticleHiggsA.Array_Decays[31][1] = PDGsstrangeR; ParticleHiggsA.Array_Decays[31][2] = A0amplitudesstrangeLantisstrangeR; ParticleHiggsA.Array_Decays[31][3] = 2; ParticleHiggsA.Array_Comments[31] = "# A-> ~s_L ~s_R*";
   ParticleHiggsA.Array_Decays[32][0] = PDGsstrangeR; ParticleHiggsA.Array_Decays[32][1] = PDGsstrangeL; ParticleHiggsA.Array_Decays[32][2] = A0amplitudesstrangeRantisstrangeL; ParticleHiggsA.Array_Decays[32][3] = 2; ParticleHiggsA.Array_Comments[32] = "# A-> ~s_R ~s_L*";
   ParticleHiggsA.Array_Decays[33][0] = PDGstop1; ParticleHiggsA.Array_Decays[33][1] = PDGstop2; ParticleHiggsA.Array_Decays[33][2] = A0amplitudestop1antistop2; ParticleHiggsA.Array_Decays[33][3] = 2; ParticleHiggsA.Array_Comments[33] = "# A-> ~t_1 ~t_2*"; 
   ParticleHiggsA.Array_Decays[34][0] = PDGstop2; ParticleHiggsA.Array_Decays[34][1] = PDGstop1; ParticleHiggsA.Array_Decays[34][2] = A0amplitudestop2antistop1; ParticleHiggsA.Array_Decays[34][3] = 2; ParticleHiggsA.Array_Comments[34] = "# A-> ~t_2 ~t_1*";
   ParticleHiggsA.Array_Decays[35][0] = PDGsbottom1; ParticleHiggsA.Array_Decays[35][1] = PDGsbottom2; ParticleHiggsA.Array_Decays[35][2] = A0amplitudesbottom1antisbottom2; ParticleHiggsA.Array_Decays[35][3] = 2; ParticleHiggsA.Array_Comments[35] = "# A-> ~b_1 ~b_2*";
   ParticleHiggsA.Array_Decays[36][0] = PDGsbottom2; ParticleHiggsA.Array_Decays[36][1] = PDGsbottom1; ParticleHiggsA.Array_Decays[36][2] = A0amplitudesbottom2antisbottom1; ParticleHiggsA.Array_Decays[36][3] = 2; ParticleHiggsA.Array_Comments[36] = "# A-> ~b_2 ~b_1*";
   ParticleHiggsA.Array_Decays[37][0] = PDGselectronL; ParticleHiggsA.Array_Decays[37][1] = PDGselectronR; ParticleHiggsA.Array_Decays[37][2] = A0amplitudeselectronLselectronR; ParticleHiggsA.Array_Decays[37][3] = 2; ParticleHiggsA.Array_Comments[37] = "# A-> ~e_L- ~e_R+"; 
   ParticleHiggsA.Array_Decays[38][0] = PDGselectronR; ParticleHiggsA.Array_Decays[38][1] = PDGselectronL; ParticleHiggsA.Array_Decays[38][2] = A0amplitudeselectronRselectronL; ParticleHiggsA.Array_Decays[38][3] = 2; ParticleHiggsA.Array_Comments[38] = "# A-> ~e_R- ~e_L+";
   ParticleHiggsA.Array_Decays[39][0] = PDGsmuonL; ParticleHiggsA.Array_Decays[39][1] = PDGsmuonR; ParticleHiggsA.Array_Decays[39][2] = A0amplitudesmuonLsmuonR; ParticleHiggsA.Array_Decays[39][3] = 2; ParticleHiggsA.Array_Comments[39] = "# A-> ~mu_L- ~mu_R+";
   ParticleHiggsA.Array_Decays[40][0] = PDGsmuonR; ParticleHiggsA.Array_Decays[40][1] = PDGsmuonL; ParticleHiggsA.Array_Decays[40][2] = A0amplitudesmuonRsmuonL; ParticleHiggsA.Array_Decays[40][3] = 2; ParticleHiggsA.Array_Comments[40] = "# A-> ~mu_R- ~mu_L+";
   ParticleHiggsA.Array_Decays[41][0] = PDGstau1; ParticleHiggsA.Array_Decays[41][1] = PDGstau2; ParticleHiggsA.Array_Decays[41][2] = A0amplitudestau1stau2; ParticleHiggsA.Array_Decays[41][3] = 2; ParticleHiggsA.Array_Comments[41] = "# A-> ~tau_1- ~tau_2+";
   ParticleHiggsA.Array_Decays[42][0] = PDGstau2; ParticleHiggsA.Array_Decays[42][1] = PDGstau1; ParticleHiggsA.Array_Decays[42][2] = A0amplitudestau2stau1; ParticleHiggsA.Array_Decays[42][3] = 2; ParticleHiggsA.Array_Comments[42] = "# A-> ~tau_2- ~tau_1+";
   ParticleHiggsA.Array_Decays[43][0] = PDGphoton; ParticleHiggsA.Array_Decays[43][1] = PDGphoton; ParticleHiggsA.Array_Decays[43][2] = A0amplitudegammagamma; ParticleHiggsA.Array_Decays[43][3] = 2; ParticleHiggsA.Array_Comments[43] = "# A-> gamma gamma";
   ParticleHiggsA.Array_Decays[44][0] = PDGgluon; ParticleHiggsA.Array_Decays[44][1] = PDGgluon; ParticleHiggsA.Array_Decays[44][2] = A0amplitudegluongluon; ParticleHiggsA.Array_Decays[44][3] = 2; ParticleHiggsA.Array_Comments[44] = "# A -> gluon gluon";
   ParticleHiggsA.Array_Decays[45][0] = PDGZboson; ParticleHiggsA.Array_Decays[45][1] = PDGphoton; ParticleHiggsA.Array_Decays[45][2] = A0amplitudeZgamma; ParticleHiggsA.Array_Decays[45][3] = 2; ParticleHiggsA.Array_Comments[45] = "# A -> Z gamma"; 
   ParticleHiggsA.Array_Decays[46][0] = PDGWplus; ParticleHiggsA.Array_Decays[46][1] = -PDGHplus; ParticleHiggsA.Array_Decays[46][2] = A0amplitudeWHpm*2; ParticleHiggsA.Array_Decays[46][3] = 2; ParticleHiggsA.Array_Comments[46] = "# A -> W+- H-+"; ///*2 so includes A -> W- H+
   
   ParticleHiggsA.Array_Decays[47][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[47][1] = PDGneutralino5; ParticleHiggsA.Array_Decays[47][2] = A0amplitudeneutZ1neutZ5; ParticleHiggsA.Array_Decays[47][3] = 2; ParticleHiggsA.Array_Comments[47] = "# A -> ~chi_10 ~chi_50";
   ParticleHiggsA.Array_Decays[48][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[48][1] = PDGneutralino5; ParticleHiggsA.Array_Decays[48][2] = A0amplitudeneutZ2neutZ5; ParticleHiggsA.Array_Decays[48][3] = 2; ParticleHiggsA.Array_Comments[48] = "# A -> ~chi_20 ~chi_50";
   ParticleHiggsA.Array_Decays[49][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[49][1] = PDGneutralino5; ParticleHiggsA.Array_Decays[49][2] = A0amplitudeneutZ3neutZ5; ParticleHiggsA.Array_Decays[49][3] = 2; ParticleHiggsA.Array_Comments[49] = "# A -> ~chi_30 ~chi_50";
   ParticleHiggsA.Array_Decays[50][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[50][1] = PDGneutralino5; ParticleHiggsA.Array_Decays[50][2] = A0amplitudeneutZ4neutZ5; ParticleHiggsA.Array_Decays[50][3] = 2; ParticleHiggsA.Array_Comments[50] = "# A -> ~chi_40 ~chi_50";
   ParticleHiggsA.Array_Decays[51][0] = PDGneutralino1; ParticleHiggsA.Array_Decays[51][1] = PDGneutralino5; ParticleHiggsA.Array_Decays[51][2] = A0amplitudeneutZ5neutZ5; ParticleHiggsA.Array_Decays[51][3] = 2; ParticleHiggsA.Array_Comments[51] = "# A -> ~chi_50 ~chi_50";
   ParticleHiggsA.Array_Decays[52][0] = PDGZboson; ParticleHiggsA.Array_Decays[52][1] = PDGH3; ParticleHiggsA.Array_Decays[52][2] = A0amplitudehiggsH3Zboson; ParticleHiggsA.Array_Decays[52][3] = 2; ParticleHiggsA.Array_Comments[52] = "# A -> H3 Z";
   
   double HiggsA_No_1to2_Decays = 0;
   
   HiggsA_No_1to2_Decays = ParticleHiggsA.No_1to2_Decays + ParticleHiggsA.No_NMSSM_Decays; /// As higgsA can't be NLSP as heavier than higgsl
   
   for (int j = 0; j<HiggsA_No_1to2_Decays; j++) {
     ParticleHiggsA.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<HiggsA_No_1to2_Decays; j++) {
     ParticleHiggsA.two_width = ParticleHiggsA.two_width + ParticleHiggsA.Array_Decays[j][2];
   }
   for (int j=HiggsA_No_1to2_Decays; j<ParticleHiggsA.No_of_Decays; j++) {
     ParticleHiggsA.three_width = ParticleHiggsA.three_width + ParticleHiggsA.Array_Decays[j][2];
   }
   
   for(int j=0; j<ParticleHiggsA.No_of_Decays; j++) {
     ParticleHiggsA.Array_Decays[j][4] = 0;
   }

   ///Note no 3 body decays for HiggsA
   if ( ParticleHiggsA.three_width != ParticleHiggsA.three_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       fout << "# Three body decays give nan for HiggsA - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
       errorflag = -1;
       ParticleHiggsA.No_of_Decays = HiggsA_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
       ParticleHiggsA.total_width = ParticleHiggsA.two_width;
     }
   else {
     ParticleHiggsA.total_width = ParticleHiggsA.two_width + ParticleHiggsA.three_width;
   }

   if ( ParticleHiggsA.total_width != ParticleHiggsA.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleHiggsA.No_of_Decays; i++) {
       //   fout << ParticleHiggsA.Array_Decays[i][2] << endl;
       // }	    
       throw( "nan in A0 lightest pseudoscalar higgs total width \n");
     }
   
   for (int i =0; i<ParticleHiggsA.No_of_Decays; i++) {
     ParticleHiggsA.Array_Decays[i][5]= ParticleHiggsA.Array_Decays[i][2]/ParticleHiggsA.total_width;
   } 
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleHiggsA, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleHiggsA, BRTol);}
   
 }

 ///NMSSM Pseudoscalar2 (A2) decays:
 if(nmssmIsIt == true) { ///NMSSM
   double A02amplitudeuantiu=0, A02amplitudedantid=0, A02amplitudesantis=0, A02amplitudecantic=0, A02amplitudebantib=0, A02amplitudetantit=0, A02amplitudeeantie=0, A02amplitudemuantimu=0, A02amplitudetauantitau=0, A02amplitudeneutZ1neutZ1=0, A02amplitudeneutZ1neutZ2=0, A02amplitudeneutZ1neutZ3=0, A02amplitudeneutZ1neutZ4=0, A02amplitudeneutZ2neutZ2=0, A02amplitudeneutZ2neutZ3=0, A02amplitudeneutZ2neutZ4=0, A02amplitudeneutZ3neutZ3=0, A02amplitudeneutZ3neutZ4=0, A02amplitudeneutZ4neutZ4=0, A02amplitudecharW1charW1=0, A02amplitudecharW1charW2=0, A02amplitudecharW2charW2=0, A02amplitudehiggshZboson=0, A02amplitudehiggsHZboson=0, A02amplitudesupLantisupR=0, A02amplitudesupRantisupL=0, A02amplitudesdownLantisdownR=0, A02amplitudesdownRantisdownL=0, A02amplitudescharmLantischarmR=0, A02amplitudescharmRantischarmL=0, A02amplitudesstrangeLantisstrangeR=0, A02amplitudesstrangeRantisstrangeL=0, A02amplitudestop1antistop2=0, A02amplitudestop2antistop1=0, A02amplitudesbottom1antisbottom2=0, A02amplitudesbottom2antisbottom1=0, A02amplitudeselectronLselectronR=0, A02amplitudeselectronRselectronL=0, A02amplitudesmuonLsmuonR=0, A02amplitudesmuonRsmuonL=0, A02amplitudestau1stau2=0, A02amplitudestau2stau1=0, A02amplitudegluongluon=0, A02amplitudegammagamma=0, A02amplitudeZgamma=0, A02amplitudeWHpm=0;
   
   double A02amplitudeneutZ1neutZ5=0, A02amplitudeneutZ2neutZ5=0, A02amplitudeneutZ3neutZ5=0, A02amplitudeneutZ4neutZ5=0, A02amplitudeneutZ5neutZ5=0, A02amplitudehiggsH3Zboson=0, A02amplitudehiggshA0=0, A02amplitudehiggsHA0=0, A02amplitudehiggsH3A0=0;

   if (flagA2 == 1) {
     if (QCDcorr == false) {
       ///No decays to u or d as PWs to u and d are tiny as proportional to yukawas squared
       ///Use running masses here to try to approximate some of the correction (which aren't included)
       A02amplitudecantic = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runmc, beta, CPOMix, 1, 2, QCDcorr, alphasAtMA2);
       A02amplitudesantis = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runms, beta, CPOMix, 0, 2, QCDcorr, alphasAtMA2);
       A02amplitudebantib = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runmb, beta, CPOMix, 0, 2, QCDcorr, alphasAtMA2);
       A02amplitudetantit = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runmt, beta, CPOMix, 1, 2, QCDcorr, alphasAtMA2);
     }
     else {
       A02amplitudecantic = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(2), mcpole, beta, CPOMix, 1, 2, QCDcorr, alphasAtMA2);
       A02amplitudesantis = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(2), mspole, beta, CPOMix, 0, 2, QCDcorr, alphasAtMA2);
       A02amplitudebantib = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(2), mbPole, beta, CPOMix, 0, 2, QCDcorr, alphasAtMA2);
       ///mcpole and mspole set in decays.h, this values used are those appropriate for the scheme used for the h -> qq QCD corrections, as in hdecay
       A02amplitudetantit = higgsAamplitudedecayquarkantiquarkNMSSM (mA0(2), mtPole, beta, CPOMix, 1, 2, QCDcorr, alphasAtMA2);
     }
     
     A02amplitudeeantie = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runmel, beta, CPOMix, 0, 2, false, alphasAtMA2)/3; ///0 as leptons are like down-type quarks, divide by 3 as No of colours is 1 for leptons cf 3 for quarks
     A02amplitudemuantimu = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runmmu, beta, CPOMix, 0, 2, false, alphasAtMA2)/3;
     A02amplitudetauantitau = higgsAamplitudedecayquarkantiquarkNMSSM(mA0(2), runmtau, beta, CPOMix, 0, 2, false, alphasAtMA2)/3;
     
     A02amplitudeneutZ1neutZ1 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(1), mneut(1), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 1, 2);
     A02amplitudeneutZ1neutZ2 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(1), mneut(2), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 2, 2);
     A02amplitudeneutZ1neutZ3 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(1), mneut(3), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 3, 2);
     A02amplitudeneutZ1neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(1), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 4, 2);
     A02amplitudeneutZ1neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(1), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 1, 5, 2);
     A02amplitudeneutZ2neutZ2 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(2), mneut(2), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 2, 2);
     A02amplitudeneutZ2neutZ3 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(2), mneut(3), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 3, 2);
     A02amplitudeneutZ2neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(2), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 4, 2);
     A02amplitudeneutZ2neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(2), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 2, 5, 2);
     A02amplitudeneutZ3neutZ3 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(3), mneut(3), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 3, 3, 2);
     A02amplitudeneutZ3neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(3), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 3, 4, 2);
     A02amplitudeneutZ3neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(3), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 3, 5, 2);
     A02amplitudeneutZ4neutZ4 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(4), mneut(4), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 4, 4, 2);
     A02amplitudeneutZ4neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(4), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 4, 5, 2);
     A02amplitudeneutZ5neutZ5 = higgsAamplitudedecayneutralinoneutralinoNMSSM (mA0(2), mneut(5), mneut(5), g, tanthetaW, lam, kappa, CPOMix, mixNeut, 5, 5, 2);
     A02amplitudecharW1charW1 = higgsAamplitudedecaysamecharginoNMSSM (mA0(2), mch(1), g, thetaL2, thetaR2, alpha, lam, CPOMix, 1, 2);
     A02amplitudecharW2charW2 = higgsAamplitudedecaysamecharginoNMSSM (mA0(2), mch(2), g, thetaL2, thetaR2, alpha, lam, CPOMix, 2, 2);
     A02amplitudecharW1charW2 = higgsAamplitudedecaydifcharginoNMSSM (mA0(2), mch(1), mch(2), g, thetaL2, thetaR2, alpha, lam, CPOMix, 2);
     A02amplitudehiggshZboson = higgsAamplitudedecayhiggshorHZbosonNMSSM (mA0(2), polemz, mh0(1), g, gp, alpha, beta, thetaA, CPEMix, 2, 1);
     A02amplitudehiggsHZboson = higgsAamplitudedecayhiggshorHZbosonNMSSM (mA0(2), polemz, mh0(2), g, gp, alpha, beta, thetaA, CPEMix, 2, 2);
     A02amplitudehiggsH3Zboson = higgsAamplitudedecayhiggshorHZbosonNMSSM (mA0(2), polemz, mh0(3), g, gp, alpha, beta, thetaA, CPEMix, 2, 3);     
     A02amplitudesupLantisupR = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(2), mu(1,1), mu(2,1), g, runmw, runmu, Au, beta, lam, mueff, CPOMix, 'u', 2);
     A02amplitudesupRantisupL = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(2), mu(2,1), mu(1,1), g, runmw, runmu, Au, beta, lam, mueff, CPOMix, 'u', 2);
     A02amplitudesdownLantisdownR = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(2), md(1,1), md(2,1), g, runmw, runmd, Ad, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudesdownRantisdownL = 3*higgsAamplitudedecaysfermionsNMSSM (mA0(2), md(2,1), md(1,1), g, runmw, runmd, Ad, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudescharmLantischarmR = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), mu(1,2), mu(2,2), g, runmw, runmc, Ac, beta, lam, mueff, CPOMix, 'u', 2);
     A02amplitudescharmRantischarmL = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), mu(2,2), mu(1,2), g, runmw, runmc, Ac, beta, lam, mueff, CPOMix, 'u', 2);
     A02amplitudesstrangeLantisstrangeR = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), md(1,2), md(2,2), g, runmw, runms, As, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudesstrangeRantisstrangeL = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), md(2,2), md(1,2), g, runmw, runms, As, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudestop1antistop2 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), mu(1,3), mu(2,3), g, runmw, runmt, At, beta, lam, mueff, CPOMix, 'u', 2);
     A02amplitudestop2antistop1 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), mu(2,3), mu(1,3), g, runmw, runmt, At, beta, lam, mueff, CPOMix, 'u', 2);
     A02amplitudesbottom1antisbottom2 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), md(1,3), md(2,3), g, runmw, runmb, Ab, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudesbottom2antisbottom1 = 3*higgsAamplitudedecaysfermionsNMSSM(mA0(2), md(2,3), md(1,3), g, runmw, runmb, Ab, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudeselectronLselectronR = higgsAamplitudedecaysfermionsNMSSM(mA0(2), me(1,1), me(2,1), g, runmw, runmel, Ae, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudeselectronRselectronL = higgsAamplitudedecaysfermionsNMSSM(mA0(2), me(2,1), me(1,1), g, runmw, runmel, Ae, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudesmuonLsmuonR = higgsAamplitudedecaysfermionsNMSSM(mA0(2), me(1,2), me(2,2), g, runmw, runmmu, Amu, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudesmuonRsmuonL = higgsAamplitudedecaysfermionsNMSSM(mA0(2), me(2,2), me(1,2), g, runmw, runmmu, Amu, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudestau1stau2 = higgsAamplitudedecaysfermionsNMSSM(mA0(2), me(1,3), me(2,3), g, runmw, runmtau, Atau, beta, lam, mueff, CPOMix, 'd', 2);
     A02amplitudestau2stau1 = higgsAamplitudedecaysfermionsNMSSM(mA0(2), me(2,3), me(1,3), g, runmw, runmtau, Atau, beta, lam, mueff, CPOMix, 'd', 2); 
     
     A02amplitudegluongluon = higgsAamplitudedecaygluongluonNMSSM (mA0(2), g, gs, alphasAtMA2, runmw, CPOMix, beta, mtPole, mbPole, mcpole, lam, 2, QCDcorr); ///Use gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     A02amplitudegammagamma = higgsAamplitudedecaygammagammaNMSSM (mA0(2), g, gp, alphaAtMA2, runmw, CPOMix, beta, mtAtMA2, mbAtMA2, mcAtMA2, runmtau, mch(1), mch(2), thetaL2, thetaR2, lam, 2); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW
     A02amplitudeZgamma = higgsAamplitudedecayZgammaNMSSM (mA0(2), g, gp, alphaAtMA2, runmw, polemz, CPOMix, beta, mtAtMA2, mbAtMA2, mcAtMA2, mch(1), mch(2), thetaL2, thetaR2, lam, 2); ///Use quark masses and gauge couplings run to the mass of the decaying higgs, exact scale these were evaluated may significantly alter the PW

     A02amplitudeWHpm = higgsAamplitudedecayHpmWboson(mA0(2), polemw, mHpm, g, thetaA, 2, nmssmIsIt);
     A02amplitudehiggshA0 = higgsA2amplitudedecayA1CPevenNMSSM(mA0(2), mA0(1), mh0(1), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 1);
     A02amplitudehiggsHA0 = higgsA2amplitudedecayA1CPevenNMSSM(mA0(2), mA0(1), mh0(2), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 2);
     A02amplitudehiggsH3A0 = higgsA2amplitudedecayA1CPevenNMSSM(mA0(2), mA0(1), mh0(3), runmw, runmt, runmb, g, gp, beta, CPEMix, CPOMix, lam, kappa, Alambda, Akappa, mueff, 3);
     
     ParticleHiggsA2.Array_Decays[0][0] = PDGup; ParticleHiggsA2.Array_Decays[0][1] = -PDGup; ParticleHiggsA2.Array_Decays[0][2] = A02amplitudeuantiu; ParticleHiggsA2.Array_Decays[0][3] = 2; ParticleHiggsA2.Array_Comments[0] = "# A2 -> u ub";
     ParticleHiggsA2.Array_Decays[1][0] = PDGdown; ParticleHiggsA2.Array_Decays[1][1] = -PDGdown; ParticleHiggsA2.Array_Decays[1][2] = A02amplitudedantid; ParticleHiggsA2.Array_Decays[1][3] = 2; ParticleHiggsA2.Array_Comments[1] = "# A2 -> d db";
     ParticleHiggsA2.Array_Decays[2][0] = PDGcharm; ParticleHiggsA2.Array_Decays[2][1] = -PDGcharm; ParticleHiggsA2.Array_Decays[2][2] = A02amplitudecantic; ParticleHiggsA2.Array_Decays[2][3] = 2; ParticleHiggsA2.Array_Comments[2] = "# A2 -> c cb";
     ParticleHiggsA2.Array_Decays[3][0] = PDGstrange; ParticleHiggsA2.Array_Decays[3][1] = -PDGstrange; ParticleHiggsA2.Array_Decays[3][2] = A02amplitudesantis; ParticleHiggsA2.Array_Decays[3][3] = 2; ParticleHiggsA2.Array_Comments[3] = "# A2 -> s sb";
     ParticleHiggsA2.Array_Decays[4][0] = PDGbottom; ParticleHiggsA2.Array_Decays[4][1] = -PDGbottom; ParticleHiggsA2.Array_Decays[4][2] = A02amplitudebantib; ParticleHiggsA2.Array_Decays[4][3] = 2; ParticleHiggsA2.Array_Comments[4] = "# A2 -> b bb";
     ParticleHiggsA2.Array_Decays[5][0] = PDGtop; ParticleHiggsA2.Array_Decays[5][1] = -PDGtop; ParticleHiggsA2.Array_Decays[5][2] = A02amplitudetantit; ParticleHiggsA2.Array_Decays[5][3] = 2; ParticleHiggsA2.Array_Comments[5] = "# A2 -> t tb";
     ParticleHiggsA2.Array_Decays[6][0] = PDGelectron; ParticleHiggsA2.Array_Decays[6][1] = -PDGelectron; ParticleHiggsA2.Array_Decays[6][2] = A02amplitudeeantie; ParticleHiggsA2.Array_Decays[6][3] = 2; ParticleHiggsA2.Array_Comments[6] = "# A2 -> e- e+";
     ParticleHiggsA2.Array_Decays[7][0] = PDGmuon; ParticleHiggsA2.Array_Decays[7][1] = -PDGmuon; ParticleHiggsA2.Array_Decays[7][2] = A02amplitudemuantimu; ParticleHiggsA2.Array_Decays[7][3] = 2; ParticleHiggsA2.Array_Comments[7] = "# A2 -> mu- mu+";
     ParticleHiggsA2.Array_Decays[8][0] = PDGtau; ParticleHiggsA2.Array_Decays[8][1] = -PDGtau; ParticleHiggsA2.Array_Decays[8][2] = A02amplitudetauantitau; ParticleHiggsA2.Array_Decays[8][3] = 2; ParticleHiggsA2.Array_Comments[8] = "# A2 -> tau- tau+";
     
     ParticleHiggsA2.Array_Decays[9][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[9][1] = PDGneutralino1; ParticleHiggsA2.Array_Decays[9][2] = A02amplitudeneutZ1neutZ1; ParticleHiggsA2.Array_Decays[9][3] = 2; ParticleHiggsA2.Array_Comments[9] = "# A2 -> ~chi_10 ~chi_10";
     ParticleHiggsA2.Array_Decays[10][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[10][1] = PDGneutralino2; ParticleHiggsA2.Array_Decays[10][2] = A02amplitudeneutZ1neutZ2; ParticleHiggsA2.Array_Decays[10][3] = 2; ParticleHiggsA2.Array_Comments[10] = "# A2 -> ~chi_10 ~chi_20";
     ParticleHiggsA2.Array_Decays[11][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[11][1] = PDGneutralino3; ParticleHiggsA2.Array_Decays[11][2] = A02amplitudeneutZ1neutZ3; ParticleHiggsA2.Array_Decays[11][3] = 2; ParticleHiggsA2.Array_Comments[11] = "# A2 -> ~chi_10 ~chi_30";
     ParticleHiggsA2.Array_Decays[12][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[12][1] = PDGneutralino4; ParticleHiggsA2.Array_Decays[12][2] = A02amplitudeneutZ1neutZ4; ParticleHiggsA2.Array_Decays[12][3] = 2; ParticleHiggsA2.Array_Comments[12] = "# A2 -> ~chi_10 ~chi_40";
     ParticleHiggsA2.Array_Decays[13][0] = PDGneutralino2; ParticleHiggsA2.Array_Decays[13][1] = PDGneutralino2; ParticleHiggsA2.Array_Decays[13][2] = A02amplitudeneutZ2neutZ2; ParticleHiggsA2.Array_Decays[13][3] = 2; ParticleHiggsA2.Array_Comments[13] = "# A2 -> ~chi_20 ~chi_20";
     ParticleHiggsA2.Array_Decays[14][0] = PDGneutralino2; ParticleHiggsA2.Array_Decays[14][1] = PDGneutralino3; ParticleHiggsA2.Array_Decays[14][2] = A02amplitudeneutZ2neutZ3; ParticleHiggsA2.Array_Decays[14][3] = 2; ParticleHiggsA2.Array_Comments[14] = "# A2 -> ~chi_20 ~chi_30";
     ParticleHiggsA2.Array_Decays[15][0] = PDGneutralino2; ParticleHiggsA2.Array_Decays[15][1] = PDGneutralino4; ParticleHiggsA2.Array_Decays[15][2] = A02amplitudeneutZ2neutZ4; ParticleHiggsA2.Array_Decays[15][3] = 2; ParticleHiggsA2.Array_Comments[15] = "# A2 -> ~chi_20 ~chi_40";
     ParticleHiggsA2.Array_Decays[16][0] = PDGneutralino3; ParticleHiggsA2.Array_Decays[16][1] = PDGneutralino3; ParticleHiggsA2.Array_Decays[16][2] = A02amplitudeneutZ3neutZ3; ParticleHiggsA2.Array_Decays[16][3] = 2; ParticleHiggsA2.Array_Comments[16] = "# A2 -> ~chi_30 ~chi_30";
     ParticleHiggsA2.Array_Decays[17][0] = PDGneutralino3; ParticleHiggsA2.Array_Decays[17][1] = PDGneutralino4; ParticleHiggsA2.Array_Decays[17][2] = A02amplitudeneutZ3neutZ4; ParticleHiggsA2.Array_Decays[17][3] = 2; ParticleHiggsA2.Array_Comments[17] = "# A2 -> ~chi_30 ~chi_40";
     ParticleHiggsA2.Array_Decays[18][0] = PDGneutralino4; ParticleHiggsA2.Array_Decays[18][1] = PDGneutralino4; ParticleHiggsA2.Array_Decays[18][2] = A02amplitudeneutZ4neutZ4; ParticleHiggsA2.Array_Decays[18][3] = 2; ParticleHiggsA2.Array_Comments[18] = "# A2 -> ~chi_40 ~chi_40";
     
     ParticleHiggsA2.Array_Decays[19][0] = PDGchargino1; ParticleHiggsA2.Array_Decays[19][1] = -PDGchargino1; ParticleHiggsA2.Array_Decays[19][2] = A02amplitudecharW1charW1; ParticleHiggsA2.Array_Decays[19][3] = 2; ParticleHiggsA2.Array_Comments[19] = "# A2 -> ~chi_1+ ~chi_1-";
     ParticleHiggsA2.Array_Decays[20][0] = PDGchargino2; ParticleHiggsA2.Array_Decays[20][1] = -PDGchargino2; ParticleHiggsA2.Array_Decays[20][2] = A02amplitudecharW2charW2; ParticleHiggsA2.Array_Decays[20][3] = 2; ParticleHiggsA2.Array_Comments[20] = "# A2 -> ~chi_2+ ~chi_2-";
     ParticleHiggsA2.Array_Decays[21][0] = PDGchargino1; ParticleHiggsA2.Array_Decays[21][1] = -PDGchargino2; ParticleHiggsA2.Array_Decays[21][2] = A02amplitudecharW1charW2; ParticleHiggsA2.Array_Decays[21][3] = 2; ParticleHiggsA2.Array_Comments[21] = "# A2 -> ~chi_1+ ~chi_2-";
     ParticleHiggsA2.Array_Decays[22][0] = PDGchargino2; ParticleHiggsA2.Array_Decays[22][1] = -PDGchargino1; ParticleHiggsA2.Array_Decays[22][2] = A02amplitudecharW1charW2; ParticleHiggsA2.Array_Decays[22][3] = 2; ParticleHiggsA2.Array_Comments[22] = "# A2 -> ~chi_2+ ~chi_1-"; ///amplitude same as decay to W1+ and W2- by CP invariance

     
     ParticleHiggsA2.Array_Decays[23][0] = PDGZboson; ParticleHiggsA2.Array_Decays[23][1] = PDGh0; ParticleHiggsA2.Array_Decays[23][2] = A02amplitudehiggshZboson; ParticleHiggsA2.Array_Decays[23][3] = 2; ParticleHiggsA2.Array_Comments[23] = "# A2 -> h Z";
     ParticleHiggsA2.Array_Decays[24][0] = PDGZboson; ParticleHiggsA2.Array_Decays[24][1] = PDGH0; ParticleHiggsA2.Array_Decays[24][2] = A02amplitudehiggsHZboson; ParticleHiggsA2.Array_Decays[24][3] = 2; ParticleHiggsA2.Array_Comments[24] = "# A2 -> H Z";
     
     ParticleHiggsA2.Array_Decays[25][0] = PDGsupL; ParticleHiggsA2.Array_Decays[25][1] = PDGsupR; ParticleHiggsA2.Array_Decays[25][2] = A02amplitudesupLantisupR; ParticleHiggsA2.Array_Decays[25][3] = 2; ParticleHiggsA2.Array_Comments[25] = "# A2-> ~u_L ~u_R*"; 
     ParticleHiggsA.Array_Decays[26][0] = PDGsupR; ParticleHiggsA2.Array_Decays[26][1] = PDGsupL; ParticleHiggsA2.Array_Decays[26][2] = A02amplitudesupRantisupL; ParticleHiggsA2.Array_Decays[26][3] = 2; ParticleHiggsA2.Array_Comments[26] = "# A2-> ~u_R ~u_L*";
     ParticleHiggsA2.Array_Decays[27][0] = PDGsdownL; ParticleHiggsA2.Array_Decays[27][1] = PDGsdownR; ParticleHiggsA2.Array_Decays[27][2] = A02amplitudesdownLantisdownR; ParticleHiggsA2.Array_Decays[27][3] = 2; ParticleHiggsA2.Array_Comments[27] = "# A2-> ~d_L ~d_R*";
     ParticleHiggsA2.Array_Decays[28][0] = PDGsdownR; ParticleHiggsA2.Array_Decays[28][1] = PDGsdownL; ParticleHiggsA2.Array_Decays[28][2] = A02amplitudesdownRantisdownL; ParticleHiggsA2.Array_Decays[28][3] = 2; ParticleHiggsA2.Array_Comments[28] = "# A2-> ~d_R ~d_L*";
     ParticleHiggsA2.Array_Decays[29][0] = PDGscharmL; ParticleHiggsA2.Array_Decays[29][1] = PDGscharmR; ParticleHiggsA2.Array_Decays[29][2] = A02amplitudescharmLantischarmR; ParticleHiggsA2.Array_Decays[29][3] = 2; ParticleHiggsA2.Array_Comments[29] = "# A2-> ~c_L ~c_R*"; 
     ParticleHiggsA2.Array_Decays[30][0] = PDGscharmR; ParticleHiggsA2.Array_Decays[30][1] = PDGscharmL; ParticleHiggsA2.Array_Decays[30][2] = A02amplitudescharmRantischarmL; ParticleHiggsA2.Array_Decays[30][3] = 2; ParticleHiggsA2.Array_Comments[30] = "# A2-> ~c_R ~c_L*";
     ParticleHiggsA2.Array_Decays[31][0] = PDGsstrangeL; ParticleHiggsA2.Array_Decays[31][1] = PDGsstrangeR; ParticleHiggsA2.Array_Decays[31][2] = A02amplitudesstrangeLantisstrangeR; ParticleHiggsA2.Array_Decays[31][3] = 2; ParticleHiggsA2.Array_Comments[31] = "# A2-> ~s_L ~s_R*";
     ParticleHiggsA2.Array_Decays[32][0] = PDGsstrangeR; ParticleHiggsA2.Array_Decays[32][1] = PDGsstrangeL; ParticleHiggsA2.Array_Decays[32][2] = A02amplitudesstrangeRantisstrangeL; ParticleHiggsA2.Array_Decays[32][3] = 2; ParticleHiggsA2.Array_Comments[32] = "# A2-> ~s_R ~s_L*";
     ParticleHiggsA2.Array_Decays[33][0] = PDGstop1; ParticleHiggsA2.Array_Decays[33][1] = PDGstop2; ParticleHiggsA2.Array_Decays[33][2] = A02amplitudestop1antistop2; ParticleHiggsA2.Array_Decays[33][3] = 2; ParticleHiggsA2.Array_Comments[33] = "# A2-> ~t_1 ~t_2*"; 
     ParticleHiggsA2.Array_Decays[34][0] = PDGstop2; ParticleHiggsA2.Array_Decays[34][1] = PDGstop1; ParticleHiggsA2.Array_Decays[34][2] = A02amplitudestop2antistop1; ParticleHiggsA2.Array_Decays[34][3] = 2; ParticleHiggsA2.Array_Comments[34] = "# A2-> ~t_2 ~t_1*";
     ParticleHiggsA2.Array_Decays[35][0] = PDGsbottom1; ParticleHiggsA2.Array_Decays[35][1] = PDGsbottom2; ParticleHiggsA2.Array_Decays[35][2] = A02amplitudesbottom1antisbottom2; ParticleHiggsA2.Array_Decays[35][3] = 2; ParticleHiggsA2.Array_Comments[35] = "# A2-> ~b_1 ~b_2*";
     ParticleHiggsA2.Array_Decays[36][0] = PDGsbottom2; ParticleHiggsA2.Array_Decays[36][1] = PDGsbottom1; ParticleHiggsA2.Array_Decays[36][2] = A02amplitudesbottom2antisbottom1; ParticleHiggsA2.Array_Decays[36][3] = 2; ParticleHiggsA2.Array_Comments[36] = "# A2-> ~b_2 ~b_1*";
     ParticleHiggsA2.Array_Decays[37][0] = PDGselectronL; ParticleHiggsA2.Array_Decays[37][1] = PDGselectronR; ParticleHiggsA2.Array_Decays[37][2] = A02amplitudeselectronLselectronR; ParticleHiggsA2.Array_Decays[37][3] = 2; ParticleHiggsA2.Array_Comments[37] = "# A2-> ~e_L- ~e_R+"; 
     ParticleHiggsA.Array_Decays[38][0] = PDGselectronR; ParticleHiggsA2.Array_Decays[38][1] = PDGselectronL; ParticleHiggsA2.Array_Decays[38][2] = A02amplitudeselectronRselectronL; ParticleHiggsA2.Array_Decays[38][3] = 2; ParticleHiggsA2.Array_Comments[38] = "# A2-> ~e_R- ~e_L+";
     ParticleHiggsA2.Array_Decays[39][0] = PDGsmuonL; ParticleHiggsA2.Array_Decays[39][1] = PDGsmuonR; ParticleHiggsA2.Array_Decays[39][2] = A02amplitudesmuonLsmuonR; ParticleHiggsA2.Array_Decays[39][3] = 2; ParticleHiggsA2.Array_Comments[39] = "# A2-> ~mu_L- ~mu_R+";
     ParticleHiggsA2.Array_Decays[40][0] = PDGsmuonR; ParticleHiggsA2.Array_Decays[40][1] = PDGsmuonL; ParticleHiggsA2.Array_Decays[40][2] = A02amplitudesmuonRsmuonL; ParticleHiggsA2.Array_Decays[40][3] = 2; ParticleHiggsA2.Array_Comments[40] = "# A2-> ~mu_R- ~mu_L+";
     ParticleHiggsA2.Array_Decays[41][0] = PDGstau1; ParticleHiggsA2.Array_Decays[41][1] = PDGstau2; ParticleHiggsA2.Array_Decays[41][2] = A02amplitudestau1stau2; ParticleHiggsA2.Array_Decays[41][3] = 2; ParticleHiggsA2.Array_Comments[41] = "# A2-> ~tau_1- ~tau_2+";
     ParticleHiggsA2.Array_Decays[42][0] = PDGstau2; ParticleHiggsA2.Array_Decays[42][1] = PDGstau1; ParticleHiggsA2.Array_Decays[42][2] = A02amplitudestau2stau1; ParticleHiggsA2.Array_Decays[42][3] = 2; ParticleHiggsA2.Array_Comments[42] = "# A2-> ~tau_2- ~tau_1+";
     
     ParticleHiggsA2.Array_Decays[43][0] = PDGphoton; ParticleHiggsA2.Array_Decays[43][1] = PDGphoton; ParticleHiggsA2.Array_Decays[43][2] = A02amplitudegammagamma; ParticleHiggsA2.Array_Decays[43][3] = 2; ParticleHiggsA2.Array_Comments[43] = "# A2-> gamma gamma";
     ParticleHiggsA2.Array_Decays[44][0] = PDGgluon; ParticleHiggsA2.Array_Decays[44][1] = PDGgluon; ParticleHiggsA2.Array_Decays[44][2] = A02amplitudegluongluon; ParticleHiggsA2.Array_Decays[44][3] = 2; ParticleHiggsA2.Array_Comments[44] = "# A2-> gluon gluon";
     ParticleHiggsA2.Array_Decays[45][0] = PDGZboson; ParticleHiggsA2.Array_Decays[45][1] = PDGphoton; ParticleHiggsA2.Array_Decays[45][2] = A02amplitudeZgamma; ParticleHiggsA2.Array_Decays[45][3] = 2; ParticleHiggsA2.Array_Comments[45] = "# A2 -> Z gamma"; 
     ParticleHiggsA2.Array_Decays[46][0] = PDGWplus; ParticleHiggsA2.Array_Decays[46][1] = -PDGHplus; ParticleHiggsA2.Array_Decays[46][2] = A02amplitudeWHpm*2; ParticleHiggsA2.Array_Decays[46][3] = 2; ParticleHiggsA2.Array_Comments[46] = "# A2 -> W+- H-+"; ///*2 so includes A2 -> W- H+
     
     ParticleHiggsA2.Array_Decays[47][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[47][1] = PDGneutralino5; ParticleHiggsA2.Array_Decays[47][2] = A02amplitudeneutZ1neutZ5; ParticleHiggsA2.Array_Decays[47][3] = 2; ParticleHiggsA2.Array_Comments[47] = "# A2 -> ~chi_10 ~chi_50";
     ParticleHiggsA2.Array_Decays[48][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[48][1] = PDGneutralino5; ParticleHiggsA2.Array_Decays[48][2] = A02amplitudeneutZ2neutZ5; ParticleHiggsA2.Array_Decays[48][3] = 2; ParticleHiggsA2.Array_Comments[48] = "# A2 -> ~chi_20 ~chi_50";
     ParticleHiggsA2.Array_Decays[49][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[49][1] = PDGneutralino5; ParticleHiggsA2.Array_Decays[49][2] = A02amplitudeneutZ3neutZ5; ParticleHiggsA2.Array_Decays[49][3] = 2; ParticleHiggsA2.Array_Comments[49] = "# A2 -> ~chi_30 ~chi_50";
     ParticleHiggsA2.Array_Decays[50][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[50][1] = PDGneutralino5; ParticleHiggsA2.Array_Decays[50][2] = A02amplitudeneutZ4neutZ5; ParticleHiggsA2.Array_Decays[50][3] = 2; ParticleHiggsA2.Array_Comments[50] = "# A2 -> ~chi_40 ~chi_50";
     ParticleHiggsA2.Array_Decays[51][0] = PDGneutralino1; ParticleHiggsA2.Array_Decays[51][1] = PDGneutralino5; ParticleHiggsA2.Array_Decays[51][2] = A02amplitudeneutZ5neutZ5; ParticleHiggsA2.Array_Decays[51][3] = 2; ParticleHiggsA2.Array_Comments[51] = "# A2 -> ~chi_50 ~chi_50";
     ParticleHiggsA2.Array_Decays[52][0] = PDGZboson; ParticleHiggsA2.Array_Decays[52][1] = PDGH3; ParticleHiggsA2.Array_Decays[52][2] = A02amplitudehiggsH3Zboson; ParticleHiggsA2.Array_Decays[52][3] = 2; ParticleHiggsA2.Array_Comments[52] = "# A2 -> H3 Z";
     ParticleHiggsA2.Array_Decays[53][0] = PDGh0; ParticleHiggsA2.Array_Decays[53][1] = PDGA0; ParticleHiggsA2.Array_Decays[53][2] = A02amplitudehiggshA0; ParticleHiggsA2.Array_Decays[53][3] = 2; ParticleHiggsA2.Array_Comments[53] = "# A2 -> h A";
     ParticleHiggsA2.Array_Decays[54][0] = PDGH0; ParticleHiggsA2.Array_Decays[54][1] = PDGA0; ParticleHiggsA2.Array_Decays[54][2] = A02amplitudehiggsHA0; ParticleHiggsA2.Array_Decays[54][3] = 2; ParticleHiggsA2.Array_Comments[54] = "# A2 -> H A";
     ParticleHiggsA2.Array_Decays[55][0] = PDGH3; ParticleHiggsA2.Array_Decays[55][1] = PDGA0; ParticleHiggsA2.Array_Decays[55][2] = A02amplitudehiggsH3A0; ParticleHiggsA2.Array_Decays[55][3] = 2; ParticleHiggsA2.Array_Comments[55] = "# A2 -> H3 A";
     
     double HiggsA2_No_1to2_Decays = 0;
     ParticleHiggsA2.two_width = 0;
     ParticleHiggsA2.three_width = 0;
     ParticleHiggsA2.total_width = 0;
     
     HiggsA2_No_1to2_Decays = ParticleHiggsA2.No_1to2_Decays + ParticleHiggsA2.No_NMSSM_Decays; 
     
     for (int j = 0; j<HiggsA2_No_1to2_Decays; j++) {
       ParticleHiggsA2.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
     }
     
     for (int j=0; j<HiggsA2_No_1to2_Decays; j++) {
       ParticleHiggsA2.two_width = ParticleHiggsA2.two_width + ParticleHiggsA2.Array_Decays[j][2];
     }
     for (int j=HiggsA2_No_1to2_Decays; j<ParticleHiggsA2.No_of_Decays; j++) {
       ParticleHiggsA2.three_width = ParticleHiggsA2.three_width + ParticleHiggsA2.Array_Decays[j][2];
     }
     
     for(int j=0; j<ParticleHiggsA2.No_of_Decays; j++) {
       ParticleHiggsA2.Array_Decays[j][4] = 0;
     }
     
     ///Note no 3 body decays for HiggsA2
     if ( ParticleHiggsA2.three_width != ParticleHiggsA2.three_width) /// Tests for a nan as only nans aren't equal to themselves
       {
	 fout << "# Three body decays give nan for HiggsA2 - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
	 errorflag = -1;
	 ParticleHiggsA2.No_of_Decays = HiggsA2_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
	 ParticleHiggsA2.total_width = ParticleHiggsA2.two_width;
       }
     else {
       ParticleHiggsA2.total_width = ParticleHiggsA2.two_width + ParticleHiggsA2.three_width;
     }
     
     if ( ParticleHiggsA2.total_width != ParticleHiggsA2.total_width) /// Tests for a nan as only nans aren't equal to themselves
       {
	 errorflag = -1;
	 // for (int i = 0; i<ParticleHiggsA2.No_of_Decays; i++) {
	 //   fout << ParticleHiggsA2.Array_Decays[i][2] << endl;
	 // }	    
	 throw( "nan in A02 heaviest pseudoscalar higgs total width \n");
       }
          
     for (int i =0; i<ParticleHiggsA2.No_of_Decays; i++) {
       ParticleHiggsA2.Array_Decays[i][5]= ParticleHiggsA2.Array_Decays[i][2]/ParticleHiggsA2.total_width;
     } 
     
     if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleHiggsA2, BRTol);}
     else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleHiggsA2, BRTol);}
     
   }
 }
 
 ///Charged higgs+ decays
 
 double Hplusamplitudeupdown=0, Hplusamplitudecharmstrange=0, Hplusamplitudetopbottom=0, Hplusamplitudeelectronelectronneutrino=0, Hplusamplitudemuonmuonneutrino=0, Hplusamplitudetautauneutrino=0, Hplusamplitudeupstrange=0, Hplusamplitudeupbottom=0, Hplusamplitudecharmdown=0, Hplusamplitudecharmbottom=0, Hplusamplitudetopdown=0, Hplusamplitudetopstrange=0, HplusamplitudeneutZ1charW1=0, HplusamplitudeneutZ1charW2=0, HplusamplitudeneutZ2charW1=0, HplusamplitudeneutZ2charW2=0, HplusamplitudeneutZ3charW1=0, HplusamplitudeneutZ3charW2=0, HplusamplitudeneutZ4charW1=0, HplusamplitudeneutZ4charW2=0, HplusamplitudehW=0, HplusamplitudesupLsdownL=0, HplusamplitudesupRsdownL=0, HplusamplitudesupLsdownR=0, HplusamplitudesupRsdownR=0, HplusamplitudescharmLsstrangeL=0, HplusamplitudescharmLsstrangeR=0, HplusamplitudescharmRsstrangeL=0, HplusamplitudescharmRsstrangeR=0, Hplusamplitudestop1sbottom1=0, Hplusamplitudestop1sbottom2=0, Hplusamplitudestop2sbottom1=0, Hplusamplitudestop2sbottom2=0, HplusamplitudeselectronLsnue=0, HplusamplitudeselectronRsnue=0, HplusamplitudesmuonLsnumu=0, HplusamplitudesmuonRsnumu=0, Hplusamplitudestau1snutau=0, Hplusamplitudestau2snutau=0; ///note Hplus -> H W is kinematically forbidden if we take tree-level mass formulae in the MSSM

 double HplusamplitudeWH = 0, HplusamplitudeWH3 = 0, HplusamplitudeWA = 0, HplusamplitudeWA2 = 0, HplusamplitudeneutZ5charW1 = 0, HplusamplitudeneutZ5charW2 = 0;///for NMSSM

 if (flagHpm == 1) {
   Hplusamplitudeupdown = higgsHplusamplitudedecayquarkantiquark (mHpm, mup, mdo, g, runmw, beta, VCKM, 1, 1);
   Hplusamplitudecharmstrange = higgsHplusamplitudedecayquarkantiquark (mHpm, mc, ms, g, runmw, beta, VCKM, 2, 2);
   Hplusamplitudetopbottom = higgsHplusamplitudedecayquarkantiquark (mHpm, mt, mb, g, runmw, beta, VCKM, 3, 3);
   Hplusamplitudeupstrange = higgsHplusamplitudedecayquarkantiquark (mHpm, mup, ms, g, runmw, beta, VCKM, 1, 2);
   Hplusamplitudeupbottom = higgsHplusamplitudedecayquarkantiquark (mHpm, mup, mb, g, runmw, beta, VCKM, 1, 3);
   Hplusamplitudecharmdown = higgsHplusamplitudedecayquarkantiquark (mHpm, mc, mdo, g, runmw, beta, VCKM, 2, 1);
   Hplusamplitudecharmbottom = higgsHplusamplitudedecayquarkantiquark (mHpm, mc, mb, g, runmw, beta, VCKM, 2, 3);
   Hplusamplitudetopdown = higgsHplusamplitudedecayquarkantiquark (mHpm, mt, mdo, g, runmw, beta, VCKM, 3, 1);
   Hplusamplitudetopstrange = higgsHplusamplitudedecayquarkantiquark (mHpm, mt, ms, g, runmw, beta, VCKM, 3, 2);
   Hplusamplitudeelectronelectronneutrino = higgsHplusamplitudedecayquarkantiquark(mHpm, 0, mel, g, runmw, beta, I3, 1, 1)/3;
   Hplusamplitudemuonmuonneutrino = higgsHplusamplitudedecayquarkantiquark(mHpm, 0, mmu, g, runmw, beta, I3, 2, 2)/3;
   Hplusamplitudetautauneutrino = higgsHplusamplitudedecayquarkantiquark(mHpm, 0, mtau, g, runmw, beta, I3, 3, 3)/3;
   
   HplusamplitudesupLsdownL = higgsHplusamplitudedecaysquarksquark (mHpm, mu(1,1), md(1,1), g, beta, runmw, runmu, runmd, greekmu, Au, Ad) (1);
   HplusamplitudesupRsdownR = higgsHplusamplitudedecaysquarksquark (mHpm, mu(2,1), md(2,1), g, beta, runmw, runmu, runmd, greekmu, Au, Ad) (2);
   HplusamplitudesupLsdownR = higgsHplusamplitudedecaysquarksquark (mHpm, mu(1,1), md(2,1), g, beta, runmw, runmu, runmd, greekmu, Au, Ad) (3);
   HplusamplitudesupRsdownL = higgsHplusamplitudedecaysquarksquark (mHpm, mu(2,1), md(2,1), g, beta, runmw, runmu, runmd, greekmu, Au, Ad) (4);
   HplusamplitudescharmLsstrangeL = higgsHplusamplitudedecaysquarksquark (mHpm, mu(1,2), md(1,2), g, beta, runmw, runmc, runms, greekmu, Ac, As) (1);
   HplusamplitudescharmRsstrangeR = higgsHplusamplitudedecaysquarksquark (mHpm, mu(2,2), md(2,2), g, beta, runmw, runmc, runms, greekmu, Ac, As) (2);
   HplusamplitudescharmLsstrangeR = higgsHplusamplitudedecaysquarksquark (mHpm, mu(1,2), md(2,2), g, beta, runmw, runmc, runms, greekmu, Ac, As) (3);
   HplusamplitudescharmRsstrangeL = higgsHplusamplitudedecaysquarksquark (mHpm, mu(2,2), md(1,2), g, beta, runmw, runmc, runms, greekmu, Ac, As) (4);
   HplusamplitudeselectronLsnue = higgsHplusamplitudedecaysquarksquark (mHpm, msnu(1), me(1,1), g, beta, runmw, 0, runmel, greekmu, 0, Ae) (1)/3;
   HplusamplitudeselectronRsnue = higgsHplusamplitudedecaysquarksquark (mHpm, msnu(1), me(2,1), g, beta, runmw, 0, runmel, greekmu, 0, Ae) (3)/3;
   HplusamplitudesmuonLsnumu = higgsHplusamplitudedecaysquarksquark (mHpm, msnu(2), me(1,2), g, beta, runmw, 0, runmmu, greekmu, 0, Amu) (1)/3;
   HplusamplitudesmuonRsnumu = higgsHplusamplitudedecaysquarksquark (mHpm, msnu(2), me(2,2), g, beta, runmw, 0, runmmu, greekmu, 0, Amu) (3)/3;
   Hplusamplitudestop1sbottom1 = higgsHplusamplitudedecaysquarksquarkmix (mHpm, mu(1,3), md(1,3), g, beta, runmw, runmt, runmb, greekmu,  At, Ab, thetat, thetab) (1); 
   Hplusamplitudestop2sbottom2 = higgsHplusamplitudedecaysquarksquarkmix (mHpm, mu(2,3), md(2,3), g, beta, runmw, runmt, runmb, greekmu,  At, Ab, thetat, thetab) (2);  
   Hplusamplitudestop1sbottom2 = higgsHplusamplitudedecaysquarksquarkmix (mHpm, mu(1,3), md(2,3), g, beta, runmw, runmt, runmb, greekmu,  At, Ab, thetat, thetab) (3);
   Hplusamplitudestop2sbottom1 = higgsHplusamplitudedecaysquarksquarkmix (mHpm, mu(2,3), md(1,3), g, beta, runmw, runmt, runmb, greekmu,  At, Ab, thetat, thetab) (4);
   Hplusamplitudestau1snutau = higgsHplusamplitudedecaysquarksquarkmix (mHpm, msnu(3), me(1,3), g, beta, runmw, 0, runmtau, greekmu, 0, Atau, 0, thetatau-PI/2) (1)/3;
   Hplusamplitudestau2snutau = higgsHplusamplitudedecaysquarksquarkmix (mHpm, msnu(3), me(2,3), g, beta, runmw, 0, runmtau, greekmu, 0, Atau, 0, thetatau-PI/2) (3)/3;
   
   if (nmssmIsIt == false) { 
     HplusamplitudehW = higgsHplusamplitudedecayWbosonhiggsh (mHpm, polemw, mh0(1), g, alpha, beta);
     HplusamplitudeneutZ1charW1 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(1), MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 1, 1);
     HplusamplitudeneutZ1charW2 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(1), MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 1, 2);
     HplusamplitudeneutZ2charW1 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(2), MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 2, 1);
     HplusamplitudeneutZ2charW2 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(2), MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 2, 2);
     HplusamplitudeneutZ3charW1 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(3), MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 3, 1);
     HplusamplitudeneutZ3charW2 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(3), MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 3, 2);
     HplusamplitudeneutZ4charW1 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(4), MCH1, g, gp, beta, thetaL2, thetaR2, mixNeut, 4, 1);
     HplusamplitudeneutZ4charW2 = higgsHplusamplitudedecayneutralinochargino (mHpm, mneut(4), MCH2, g, gp, beta, thetaL2, thetaR2, mixNeut, 4, 2);
   }
   
   else if (nmssmIsIt == true) {
     HplusamplitudehW = higgsCPevenamplitudedecayWHpmNMSSM (mHpm, polemw, mh0(1), beta, g, CPEMix, 1);
     HplusamplitudeWH = higgsCPevenamplitudedecayWHpmNMSSM (mHpm, polemw, mh0(2), beta, g, CPEMix, 2);
     HplusamplitudeWH3 = higgsCPevenamplitudedecayWHpmNMSSM (mHpm, polemw, mh0(3), beta, g, CPEMix, 3);
     HplusamplitudeWA = higgsAamplitudedecayHpmWboson(mHpm, polemw, mA0(1), g, thetaA, 1, nmssmIsIt);
     HplusamplitudeWA2 = higgsAamplitudedecayHpmWboson(mHpm, polemw, mA0(2), g, thetaA, 2, nmssmIsIt);
     HplusamplitudeneutZ1charW1 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH1, mneut(1), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 1, 1);
     HplusamplitudeneutZ1charW2 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH2, mneut(1), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 1, 2);
     HplusamplitudeneutZ2charW1 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH1, mneut(2), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 2, 1);
     HplusamplitudeneutZ2charW2 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH2, mneut(2), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 2, 2);
     HplusamplitudeneutZ3charW1 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH1, mneut(3), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 3, 1);
     HplusamplitudeneutZ3charW2 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH2, mneut(3), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 3, 2);
     HplusamplitudeneutZ4charW1 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH1, mneut(4), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 4, 1);
     HplusamplitudeneutZ4charW2 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH2, mneut(4), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 4, 2);
     HplusamplitudeneutZ5charW1 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH1, mneut(5), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 5, 1);
     HplusamplitudeneutZ5charW2 = HpmamplitudecharginojneutralinoiNMSSM (mHpm, MCH2, mneut(5), g, gp, beta, thetaL2, thetaR2, lam, mixNeut, 5, 2);
   }
   
   ParticleHiggsplus.Array_Decays[0][0] = PDGup; ParticleHiggsplus.Array_Decays[0][1] = -PDGdown; ParticleHiggsplus.Array_Decays[0][2] = Hplusamplitudeupdown; ParticleHiggsplus.Array_Decays[0][3] = 2; ParticleHiggsplus.Array_Comments[0] = "# H+ -> u db";
   ParticleHiggsplus.Array_Decays[1][0] = PDGcharm; ParticleHiggsplus.Array_Decays[1][1] = -PDGstrange; ParticleHiggsplus.Array_Decays[1][2] = Hplusamplitudecharmstrange; ParticleHiggsplus.Array_Decays[1][3] = 2; ParticleHiggsplus.Array_Comments[1] = "# H+ -> c sb";
   ParticleHiggsplus.Array_Decays[2][0] = PDGtop; ParticleHiggsplus.Array_Decays[2][1] = -PDGbottom; ParticleHiggsplus.Array_Decays[2][2] = Hplusamplitudetopbottom; ParticleHiggsplus.Array_Decays[2][3] = 2; ParticleHiggsplus.Array_Comments[2] = "# H+ -> t bb";
   ParticleHiggsplus.Array_Decays[3][0] = PDGup; ParticleHiggsplus.Array_Decays[3][1] = -PDGstrange; ParticleHiggsplus.Array_Decays[3][2] = Hplusamplitudeupstrange; ParticleHiggsplus.Array_Decays[3][3] = 2; ParticleHiggsplus.Array_Comments[3] = "# H+ -> u sb";
   ParticleHiggsplus.Array_Decays[4][0] = PDGup; ParticleHiggsplus.Array_Decays[4][1] = -PDGbottom; ParticleHiggsplus.Array_Decays[4][2] = Hplusamplitudeupbottom; ParticleHiggsplus.Array_Decays[4][3] = 2; ParticleHiggsplus.Array_Comments[4] = "# H+ -> u bb";
   ParticleHiggsplus.Array_Decays[5][0] = PDGcharm; ParticleHiggsplus.Array_Decays[5][1] = -PDGdown; ParticleHiggsplus.Array_Decays[5][2] = Hplusamplitudecharmdown; ParticleHiggsplus.Array_Decays[5][3] = 2; ParticleHiggsplus.Array_Comments[5] = "# H+ -> c db";
   ParticleHiggsplus.Array_Decays[6][0] = PDGcharm; ParticleHiggsplus.Array_Decays[6][1] = -PDGbottom; ParticleHiggsplus.Array_Decays[6][2] = Hplusamplitudecharmbottom; ParticleHiggsplus.Array_Decays[6][3] = 2; ParticleHiggsplus.Array_Comments[6] = "# H+ -> c bb";
   ParticleHiggsplus.Array_Decays[7][0] = PDGtop; ParticleHiggsplus.Array_Decays[7][1] = -PDGdown; ParticleHiggsplus.Array_Decays[7][2] = Hplusamplitudetopdown; ParticleHiggsplus.Array_Decays[7][3] = 2; ParticleHiggsplus.Array_Comments[7] = "# H+ -> t db";
   ParticleHiggsplus.Array_Decays[8][0] = PDGtop; ParticleHiggsplus.Array_Decays[8][1] = -PDGstrange; ParticleHiggsplus.Array_Decays[8][2] = Hplusamplitudetopstrange; ParticleHiggsplus.Array_Decays[8][3] = 2; ParticleHiggsplus.Array_Comments[8] = "# H+ -> t sb";
   ParticleHiggsplus.Array_Decays[9][0] = PDGnuelectron; ParticleHiggsplus.Array_Decays[9][1] = -PDGelectron; ParticleHiggsplus.Array_Decays[9][2] = Hplusamplitudeelectronelectronneutrino; ParticleHiggsplus.Array_Decays[9][3] = 2; ParticleHiggsplus.Array_Comments[9] = "# H+ -> e+ nu_e";
   ParticleHiggsplus.Array_Decays[10][0] = PDGnumuon; ParticleHiggsplus.Array_Decays[10][1] = -PDGmuon; ParticleHiggsplus.Array_Decays[10][2] = Hplusamplitudemuonmuonneutrino; ParticleHiggsplus.Array_Decays[10][3] = 2; ParticleHiggsplus.Array_Comments[10] = "# H+ -> mu+ nu_mu";
   ParticleHiggsplus.Array_Decays[11][0] = PDGnutau; ParticleHiggsplus.Array_Decays[11][1] = -PDGtau; ParticleHiggsplus.Array_Decays[11][2] = Hplusamplitudetautauneutrino; ParticleHiggsplus.Array_Decays[11][3] = 2; ParticleHiggsplus.Array_Comments[11] = "# H+ -> tau+ nu_tau";
   ParticleHiggsplus.Array_Decays[12][0] = PDGneutralino1; ParticleHiggsplus.Array_Decays[12][1] = PDGchargino1; ParticleHiggsplus.Array_Decays[12][2] = HplusamplitudeneutZ1charW1; ParticleHiggsplus.Array_Decays[12][3] = 2; ParticleHiggsplus.Array_Comments[12] = "# H+ -> ~chi_10 ~chi_1+";
   ParticleHiggsplus.Array_Decays[13][0] = PDGneutralino1; ParticleHiggsplus.Array_Decays[13][1] = PDGchargino2; ParticleHiggsplus.Array_Decays[13][2] = HplusamplitudeneutZ1charW2; ParticleHiggsplus.Array_Decays[13][3] = 2; ParticleHiggsplus.Array_Comments[13] = "# H+ -> ~chi_10 ~chi_2+";
   ParticleHiggsplus.Array_Decays[14][0] = PDGneutralino2; ParticleHiggsplus.Array_Decays[14][1] = PDGchargino1; ParticleHiggsplus.Array_Decays[14][2] = HplusamplitudeneutZ2charW1; ParticleHiggsplus.Array_Decays[14][3] = 2; ParticleHiggsplus.Array_Comments[14] = "# H+ -> ~chi_20 ~chi_1+";
   ParticleHiggsplus.Array_Decays[15][0] = PDGneutralino2; ParticleHiggsplus.Array_Decays[15][1] = PDGchargino2; ParticleHiggsplus.Array_Decays[15][2] = HplusamplitudeneutZ2charW2; ParticleHiggsplus.Array_Decays[15][3] = 2; ParticleHiggsplus.Array_Comments[15] = "# H+ -> ~chi_20 ~chi_2+";
   ParticleHiggsplus.Array_Decays[16][0] = PDGneutralino3; ParticleHiggsplus.Array_Decays[16][1] = PDGchargino1; ParticleHiggsplus.Array_Decays[16][2] = HplusamplitudeneutZ3charW1; ParticleHiggsplus.Array_Decays[16][3] = 2; ParticleHiggsplus.Array_Comments[16] = "# H+ -> ~chi_30 ~chi_1+";
   ParticleHiggsplus.Array_Decays[17][0] = PDGneutralino3; ParticleHiggsplus.Array_Decays[17][1] = PDGchargino2; ParticleHiggsplus.Array_Decays[17][2] = HplusamplitudeneutZ3charW2; ParticleHiggsplus.Array_Decays[17][3] = 2; ParticleHiggsplus.Array_Comments[17] = "# H+ -> ~chi_30 ~chi_2+";
   ParticleHiggsplus.Array_Decays[18][0] = PDGneutralino4; ParticleHiggsplus.Array_Decays[18][1] = PDGchargino1; ParticleHiggsplus.Array_Decays[18][2] = HplusamplitudeneutZ4charW1; ParticleHiggsplus.Array_Decays[18][3] = 2; ParticleHiggsplus.Array_Comments[18] = "# H+ -> ~chi_40 ~chi_1+";
   ParticleHiggsplus.Array_Decays[19][0] = PDGneutralino4; ParticleHiggsplus.Array_Decays[19][1] = PDGchargino2; ParticleHiggsplus.Array_Decays[19][2] = HplusamplitudeneutZ4charW2; ParticleHiggsplus.Array_Decays[19][3] = 2; ParticleHiggsplus.Array_Comments[19] = "# H+ -> ~chi_40 ~chi_2+";
   ParticleHiggsplus.Array_Decays[20][0] = PDGWplus; ParticleHiggsplus.Array_Decays[20][1] = PDGh0; ParticleHiggsplus.Array_Decays[20][2] = HplusamplitudehW; ParticleHiggsplus.Array_Decays[20][3] = 2; ParticleHiggsplus.Array_Comments[20] = "# H+ -> W+ h";  
   ParticleHiggsplus.Array_Decays[21][0] = PDGsupL; ParticleHiggsplus.Array_Decays[21][1] = -PDGsdownL; ParticleHiggsplus.Array_Decays[21][2] = HplusamplitudesupLsdownL; ParticleHiggsplus.Array_Decays[21][3] = 2; ParticleHiggsplus.Array_Comments[21] = "# H+ -> ~u_L d_L*"; 
   ParticleHiggsplus.Array_Decays[22][0] = PDGsupR; ParticleHiggsplus.Array_Decays[22][1] = -PDGsdownR; ParticleHiggsplus.Array_Decays[22][2] = HplusamplitudesupRsdownR; ParticleHiggsplus.Array_Decays[22][3] = 2; ParticleHiggsplus.Array_Comments[22] = "# H+ -> ~u_R d_R*";
   ParticleHiggsplus.Array_Decays[23][0] = PDGsupL; ParticleHiggsplus.Array_Decays[23][1] = -PDGsdownR; ParticleHiggsplus.Array_Decays[23][2] = HplusamplitudesupLsdownR; ParticleHiggsplus.Array_Decays[23][3] = 2; ParticleHiggsplus.Array_Comments[23] = "# H+ -> ~u_L d_R*";
   ParticleHiggsplus.Array_Decays[24][0] = PDGsupR; ParticleHiggsplus.Array_Decays[24][1] = -PDGsdownL; ParticleHiggsplus.Array_Decays[24][2] = HplusamplitudesupRsdownL; ParticleHiggsplus.Array_Decays[24][3] = 2; ParticleHiggsplus.Array_Comments[24] = "# H+ -> ~u_R d_L*";
   ParticleHiggsplus.Array_Decays[25][0] = PDGscharmL; ParticleHiggsplus.Array_Decays[25][1] = -PDGsstrangeL; ParticleHiggsplus.Array_Decays[25][2] = HplusamplitudescharmLsstrangeL; ParticleHiggsplus.Array_Decays[25][3] = 2; ParticleHiggsplus.Array_Comments[25] = "# H+ -> ~c_L s_L*"; 
   ParticleHiggsplus.Array_Decays[26][0] = PDGscharmR; ParticleHiggsplus.Array_Decays[26][1] = -PDGsstrangeR; ParticleHiggsplus.Array_Decays[26][2] = HplusamplitudescharmRsstrangeR; ParticleHiggsplus.Array_Decays[26][3] = 2; ParticleHiggsplus.Array_Comments[26] = "# H+ -> ~c_R s_R*";
   ParticleHiggsplus.Array_Decays[27][0] = PDGscharmL; ParticleHiggsplus.Array_Decays[27][1] = -PDGsstrangeR; ParticleHiggsplus.Array_Decays[27][2] = HplusamplitudescharmLsstrangeR; ParticleHiggsplus.Array_Decays[27][3] = 2; ParticleHiggsplus.Array_Comments[27] = "# H+ -> ~c_L s_R*";
   ParticleHiggsplus.Array_Decays[28][0] = PDGscharmR; ParticleHiggsplus.Array_Decays[28][1] = -PDGsstrangeL; ParticleHiggsplus.Array_Decays[28][2] = HplusamplitudescharmRsstrangeL; ParticleHiggsplus.Array_Decays[28][3] = 2; ParticleHiggsplus.Array_Comments[28] = "# H+ -> ~c_R s_L*";
   ParticleHiggsplus.Array_Decays[29][0] = PDGnuselectronL; ParticleHiggsplus.Array_Decays[29][1] = -PDGselectronL; ParticleHiggsplus.Array_Decays[29][2] = HplusamplitudeselectronLsnue; ParticleHiggsplus.Array_Decays[29][3] = 2; ParticleHiggsplus.Array_Comments[29] = "# H+ -> ~e_L+ nu_eL";
   ParticleHiggsplus.Array_Decays[30][0] = PDGnuselectronL; ParticleHiggsplus.Array_Decays[30][1] = -PDGselectronR; ParticleHiggsplus.Array_Decays[30][2] = HplusamplitudeselectronRsnue; ParticleHiggsplus.Array_Decays[30][3] = 2; ParticleHiggsplus.Array_Comments[30] = "# H+ -> ~e_R+ nu_eL";
   ParticleHiggsplus.Array_Decays[31][0] = PDGnusmuonL; ParticleHiggsplus.Array_Decays[31][1] = -PDGsmuonL; ParticleHiggsplus.Array_Decays[31][2] = HplusamplitudesmuonLsnumu; ParticleHiggsplus.Array_Decays[31][3] = 2; ParticleHiggsplus.Array_Comments[31] = "# H+ -> ~mu_L+ nu_muL";
   ParticleHiggsplus.Array_Decays[32][0] = PDGnusmuonL; ParticleHiggsplus.Array_Decays[32][1] = -PDGsmuonR; ParticleHiggsplus.Array_Decays[32][2] = HplusamplitudesmuonRsnumu; ParticleHiggsplus.Array_Decays[32][3] = 2; ParticleHiggsplus.Array_Comments[32] = "# H+ -> ~mu_R+ nu_muL";
   ParticleHiggsplus.Array_Decays[33][0] = PDGstop1; ParticleHiggsplus.Array_Decays[33][1] = -PDGsbottom1; ParticleHiggsplus.Array_Decays[33][2] = Hplusamplitudestop1sbottom1; ParticleHiggsplus.Array_Decays[33][3] = 2; ParticleHiggsplus.Array_Comments[33] = "# H+ -> ~t_1 b_1*";
   ParticleHiggsplus.Array_Decays[34][0] = PDGstop2; ParticleHiggsplus.Array_Decays[34][1] = -PDGsbottom2; ParticleHiggsplus.Array_Decays[34][2] = Hplusamplitudestop2sbottom2; ParticleHiggsplus.Array_Decays[34][3] = 2; ParticleHiggsplus.Array_Comments[34] = "# H+ -> ~t_2 b_2*";
   ParticleHiggsplus.Array_Decays[35][0] = PDGstop1; ParticleHiggsplus.Array_Decays[35][1] = -PDGsbottom2; ParticleHiggsplus.Array_Decays[35][2] = Hplusamplitudestop1sbottom2; ParticleHiggsplus.Array_Decays[35][3] = 2; ParticleHiggsplus.Array_Comments[35] = "# H+ -> ~t_1 b_2*";
   ParticleHiggsplus.Array_Decays[36][0] = PDGstop2; ParticleHiggsplus.Array_Decays[36][1] = -PDGsbottom1; ParticleHiggsplus.Array_Decays[36][2] = Hplusamplitudestop2sbottom1; ParticleHiggsplus.Array_Decays[36][3] = 2; ParticleHiggsplus.Array_Comments[36] = "# H+ -> ~t_2 b_1*";
   ParticleHiggsplus.Array_Decays[37][0] = PDGnustauL; ParticleHiggsplus.Array_Decays[37][1] = -PDGstau1; ParticleHiggsplus.Array_Decays[37][2] = Hplusamplitudestau1snutau; ParticleHiggsplus.Array_Decays[37][3] = 2; ParticleHiggsplus.Array_Comments[37] = "# H+ -> ~tau_1+ nu_tauL";
   ParticleHiggsplus.Array_Decays[38][0] = PDGnustauL; ParticleHiggsplus.Array_Decays[38][1] = -PDGstau2; ParticleHiggsplus.Array_Decays[38][2] = Hplusamplitudestau2snutau; ParticleHiggsplus.Array_Decays[38][3] = 2; ParticleHiggsplus.Array_Comments[38] = "# H+ -> ~tau_2+ nu_tauL";
   
   ///NMSSM
   ParticleHiggsplus.Array_Decays[39][0] = PDGWplus; ParticleHiggsplus.Array_Decays[39][1] = PDGH0; ParticleHiggsplus.Array_Decays[39][2] = HplusamplitudeWH; ParticleHiggsplus.Array_Decays[39][3] = 2; ParticleHiggsplus.Array_Comments[39] = "# H+ -> W+ H"; 
   ParticleHiggsplus.Array_Decays[40][0] = PDGWplus; ParticleHiggsplus.Array_Decays[40][1] = PDGH3; ParticleHiggsplus.Array_Decays[40][2] = HplusamplitudeWH3; ParticleHiggsplus.Array_Decays[40][3] = 2; ParticleHiggsplus.Array_Comments[40] = "# H+ -> W+ H3";  
   ParticleHiggsplus.Array_Decays[41][0] = PDGWplus; ParticleHiggsplus.Array_Decays[41][1] = PDGA0; ParticleHiggsplus.Array_Decays[41][2] = HplusamplitudeWA; ParticleHiggsplus.Array_Decays[41][3] = 2; ParticleHiggsplus.Array_Comments[41] = "# H+ -> W+ A"; 
   ParticleHiggsplus.Array_Decays[42][0] = PDGWplus; ParticleHiggsplus.Array_Decays[42][1] = PDGA2; ParticleHiggsplus.Array_Decays[42][2] = HplusamplitudeWA2; ParticleHiggsplus.Array_Decays[42][3] = 2; ParticleHiggsplus.Array_Comments[42] = "# H+ -> W+ A2";
   ParticleHiggsplus.Array_Decays[43][0] = PDGneutralino5; ParticleHiggsplus.Array_Decays[43][1] = PDGchargino1; ParticleHiggsplus.Array_Decays[43][2] = HplusamplitudeneutZ5charW1; ParticleHiggsplus.Array_Decays[43][3] = 2; ParticleHiggsplus.Array_Comments[43] = "# H+ -> ~chi_50 ~chi_1+";
   ParticleHiggsplus.Array_Decays[44][0] = PDGneutralino5; ParticleHiggsplus.Array_Decays[44][1] = PDGchargino2; ParticleHiggsplus.Array_Decays[44][2] = HplusamplitudeneutZ5charW2; ParticleHiggsplus.Array_Decays[44][3] = 2; ParticleHiggsplus.Array_Comments[44] = "# H+ -> ~chi_50 ~chi_2+";
   
   double Higgsplus_No_1to2_Decays = 0;
   
   Higgsplus_No_1to2_Decays = ParticleHiggsplus.No_1to2_Decays + ParticleHiggsplus.No_NMSSM_Decays; /// As higgsplus can't be NLSP as heavier than higgsl
   
   for (int j = 0; j<Higgsplus_No_1to2_Decays; j++) {
     ParticleHiggsplus.Array_Decays[j][4] = 0; ///0 indicates no 3rd daughter so 1->2 decay.
   }
   
   for (int j=0; j<Higgsplus_No_1to2_Decays; j++) {
     ParticleHiggsplus.two_width = ParticleHiggsplus.two_width + ParticleHiggsplus.Array_Decays[j][2];
   }
   
   for (int j=Higgsplus_No_1to2_Decays; j<ParticleHiggsplus.No_of_Decays; j++) {
     ParticleHiggsplus.three_width = ParticleHiggsplus.three_width + ParticleHiggsplus.Array_Decays[j][2];
   }
   
   for(int j=0; j<ParticleHiggsplus.No_of_Decays; j++) {
     ParticleHiggsplus.Array_Decays[j][4] = 0;
   }

   ///Note no 3 body decays for Higgsplus
   if ( ParticleHiggsplus.three_width != ParticleHiggsplus.three_width) /// Tests for a nan as only nans aren't equal to themselves
       {
	 fout << "# Three body decays give nan for Higgsplus - problem! Therefore total and partial widths and branching ratios output only includes 1->2 decays" << endl;
	 errorflag = -1;
	 ParticleHiggsplus.No_of_Decays = Higgsplus_No_1to2_Decays; ///So only 1 to 2 decays are output if a 1 to 3 decay gives a nan
	 ParticleHiggsplus.total_width = ParticleHiggsplus.two_width;
       }
   else {
     ParticleHiggsplus.total_width = ParticleHiggsplus.two_width + ParticleHiggsplus.three_width;
   }
   
   if ( ParticleHiggsplus.total_width != ParticleHiggsplus.total_width) /// Tests for a nan as only nans aren't equal to themselves
     {
       errorflag = -1;
       // for (int i = 0; i<ParticleHiggsplus.No_of_Decays; i++) {
       //   fout << ParticleHiggsplus.Array_Decays[i][2] << endl;
       // }	    
       throw( "nan in H+ total width \n");
     }
   
   for (int i =0; i<ParticleHiggsplus.No_of_Decays; i++) {
     ParticleHiggsplus.Array_Decays[i][5]= ParticleHiggsplus.Array_Decays[i][2]/ParticleHiggsplus.total_width;
   } 
   
   if (outputPartialWidths == false) {  OutputNoPWs(fout, ParticleHiggsplus, BRTol);}
   else if (outputPartialWidths == true) { OutputYesPWs(fout, ParticleHiggsplus, BRTol);}
 }
 
 return errorflag;
}

/// Function to calculate the gluino decay amplitudes

double gluinoamplitudedecay (double m1, double m2, double m3, double alphastrong) {
  double squareratio, squareplus, squareminus, amplitudeW;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
      squareplus = pow(m1,2) - pow((m2 + m3),2);
      squareminus = pow(m1,2) - pow((m2 - m3),2);
      if (squareplus*squareminus < 0) {
	throw ("problem: lambda will give nan in gluinoamplitudedecay\n");
	errorflag = -1;
      }
      squareratio = 1 + pow((m2/m1),2) - pow((m3/m1),2);
      amplitudeW = 1./4*alphastrong*(1/(2*m1))*squareratio*pow(squareplus*squareminus,0.5);
  }
  return amplitudeW;
}


double gluinoamplitudedecaymix (double m1, double m2, double m3, double alphastrong, double squarkmix, double theta) {
  double squareratio, squareplus, squareminus, amplitudeW=0, squareratiomix1, squareratiomix2;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = pow(m1,2) - pow((m2 + m3),2);
    squareminus = pow(m1,2) - pow((m2 - m3),2);
    squareratio = 1 + pow((m2/m1),2) - pow((m3/m1),2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in gluinoamplitudedecaymix\n");
      errorflag = -1;
    }
    else{}

    if (squarkmix ==1) { 
      squareratiomix1= squareratio - 2*sin(2*theta)*m2/m1;
      amplitudeW = (alphastrong*1./4)*squareratiomix1*(1/(2*m1))*pow(squareplus*squareminus,0.5); 
    }
    else if (squarkmix ==2) {
      squareratiomix2 = squareratio + 2*sin(2*theta)*m2/m1;
      amplitudeW = (alphastrong*1./4)*squareratiomix2*(1/(2*m1))*pow(squareplus*squareminus,0.5);
    }
    else {
      throw ("problem: squarkmix must be 1 or 2 in gluinoamplitudedecaymix\n");
      errorflag = -1;
    }
  }
  return amplitudeW;
}


double squarkamplitudedecaygluino (double m1, double m2, double m3, double alphastrong) {
  double squareratio, squareplus, squareminus, amplitudeW;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {  
    squareplus = pow(m1,2) - pow((m2 + m3),2);
    squareminus = pow(m1,2) - pow((m2 - m3),2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squarkamplitudedecaygluino\n");
      errorflag = -1;
    }
    else{}
    squareratio = 1 - pow((m2/m1),2) - pow((m3/m1),2);
    amplitudeW = 4./3*alphastrong*(1/(2*m1))*squareratio*pow(squareplus*squareminus,0.5);
  }
  return amplitudeW;
}

double squarkamplitudedecaygluinomix (double m1, double m2, double m3, double alphastrong, double squarkmix, double theta) {
  double squareratiomix, squareplus, squareminus, amplitudeW=0;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = pow(m1,2)-pow((m2+m3),2);
    squareminus = pow(m1,2) - pow((m2-m3),2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squarkamplitudedecaygluinomix\n");
      errorflag = -1;
    }
    else{}
    if (squarkmix == 1) {
      squareratiomix = 1- pow(m2/m1,2) - pow(m3/m1,2) +2*sin(2*theta)*m2*m3/(pow(m1,2));
      amplitudeW = 4./3*alphastrong*1/(2*m1)*squareratiomix*pow(squareplus*squareminus,0.5);
    }
    else if (squarkmix == 2) {
      squareratiomix = 1- pow(m2/m1,2) - pow(m3/m1,2) -2*sin(2*theta)*m2*m3/(pow(m1,2));
      amplitudeW = 4./3*alphastrong*1/(2*m1)*squareratiomix*pow(squareplus*squareminus,0.5);
    }
    else {
      throw ("problem: quarkmix must be 1 or 2 in squarkamplitudedecaygluinomix\n");
      errorflag = -1;
    }
  }
  return amplitudeW;
}


double squarkamplitudedecaycharginoW1 (double m1, double m2, double m3, double g, double gamma) {
  double squareratio, squareplus, squareminus, amplitudeW;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
    squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squarkamplitudedecaycharginoW1\n");
      errorflag = -1;
    }
    else{}
    squareratio = 1 - pow(fabs(m3)/m1,2) - pow(m2/m1,2);
    amplitudeW = pow(g,2)*pow(sin(gamma),2)/(16*M_PI)*m1*squareratio*pow(squareplus*squareminus,0.5);
  }
  return amplitudeW;
}
		  
double squarkamplitudedecaycharginoW2 (double m1, double m2, double m3, double g, double gamma) {
  double squareratio, squareplus, squareminus, amplitudeW;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
    squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squarkamplitudedecaycharginoW2\n");
      errorflag = -1;
    }
    else{}
    squareratio = 1 - pow(fabs(m3)/m1,2) - pow(m2/m1,2);
    amplitudeW = pow(g,2)*pow(cos(gamma),2)/(16*M_PI)*m1*squareratio*pow(squareplus*squareminus,0.5);
  }
  return amplitudeW;
}


double squark1amplitudedecaycharginoW1mix (double m1, double m2, double m3, double g, double gammaL, double gammaR,  double theta, double beta, double mWboson, double runmt, double runmb, double torb) /// the variable torb depends on if it is stop (torb=1) or sbottom (torb =2) decaying and changes AprimeuW1 to AprimedW1 accordingly
{
  double squareratio=0, squareplus=0, squareminus=0, lambda=0, angular1=0, angular2=0, amplitudeW=0;
  DoubleVector squarkmixcharginocouplings (double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb);
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
    squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark1amplitudedecaycharginoW1mix\n");
      errorflag = -1;
    }
    else{}
    squareratio = 1- pow(fabs(m3)/m1,2) - pow(m2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    angular1 = squarkmixcharginocouplings(g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, m3, 0, torb)(1);
    angular2 = squarkmixcharginocouplings(g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, m3, 0, torb)(2);
    amplitudeW = m1/(16*PI)*(angular1*squareratio + m3*m2/(pow(m1,2))*angular2)*lambda; //test
  }
  return amplitudeW;
}



double squark1amplitudedecaycharginoW2mix (double m1, double m2, double m3, double g, double gammaL, double gammaR,  double theta, double beta, double mWboson, double runmt, double runmb, double torb) /// the variable torb depends on if it is stop (torb=1) or sbottom (torb =2) decaying and changes AprimeuW2 to AprimedW2 accordingly
{
  double squareratio=0, squareplus=0, squareminus=0, lambda=0, angular1=0, angular2=0, amplitudeW=0;
  DoubleVector squarkmixcharginocouplings (double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb);
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
    squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark1amplitudedecaycharginoW2mix\n");
      errorflag = -1;
    }
    squareratio = 1- pow(fabs(m3)/m1,2) - pow(m2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    angular1 = squarkmixcharginocouplings (g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, 0, m3, torb)(3);
    angular2 = squarkmixcharginocouplings (g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, 0, m3, torb)(4);
		
    amplitudeW = m1/(16*PI)*lambda*(angular1*squareratio + m3*m2/(pow(m1,2))*angular2);
  }
  return amplitudeW;
}



double squark2amplitudedecaycharginoW1mix (double m1, double m2, double m3, double g, double gammaL, double gammaR,  double theta, double beta, double mWboson, double runmt, double runmb, double torb) /// the variable torb depends on if it is stop (torb=1) or sbottom (torb =2) decaying and changes AprimeuW1 to AprimedW1 accordingly
{
  double squareratio=0, squareplus=0, squareminus=0, lambda=0, angular1=0, angular2=0, amplitudeW=0;
  DoubleVector squarkmixcharginocouplings (double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb);

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
    squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark2amplitudedecaycharginoW1mix\n");
      errorflag = -1;
    }
    squareratio = 1- pow(fabs(m3)/m1,2) - pow(m2/m1,2);
    lambda = pow(squareplus*squareminus, 0.5);
    angular1 = squarkmixcharginocouplings (g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, m3, 0, torb)(5);
    angular2 = squarkmixcharginocouplings (g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, m3, 0, torb)(6);
    amplitudeW = m1/(16*PI)*lambda*(angular1*squareratio + m3*m2/(pow(m1,2))*angular2);
   
  }
  return amplitudeW;
}

double squark2amplitudedecaycharginoW2mix (double m1, double m2, double m3, double g, double gammaL, double gammaR,  double theta, double beta, double mWboson, double runmt, double runmb, double torb) /// the variable torb depends on if it is stop (torb=1) or sbottom (torb =2) decaying and changes AprimeuW2 to AprimedW2 accordingly
{
  double squareratio=0, squareplus=0, squareminus=0, lambda = 0, angular1=0, angular2=0, amplitudeW=0;
  DoubleVector squarkmixcharginocouplings (double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb);
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
    squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark2amplitudedecaycharginoW2mix\n");
      errorflag = -1;
    }
    squareratio = 1- pow(fabs(m3)/m1,2) - pow(m2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    angular1 = squarkmixcharginocouplings (g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, 0, m3, torb)(7);
    angular2 = squarkmixcharginocouplings (g, theta, beta, gammaL, gammaR, runmt, runmb, mWboson, 0, m3, torb)(8);
    
    amplitudeW = m1/(16*PI)*lambda*(angular1*squareratio + m3*m2/(pow(m1,2))*angular2); 
  }
  return amplitudeW;
}

double squarkLamplitudedecayneutralino (double m1, double m2, double m3, double g, double gprime,  DoubleMatrix & mixNeut, int neutralino, int uord ) ///neutralino takes values of 1, 2, 3, or 4 and denotes which neutralino mass eigenstate we decay into, uord takes value 1 for up quarks (or charm quarks) and -1 for down quarks (or strange quarks) in order to change the sign of the g*neutralinomixingmatrix[2][element] in AqZ accordingly
{
  double squareplus, squareminus, squareratio, AqZ, lambda, amplitudeW;
	if (fabs(m1) < fabs(m2) +fabs(m3)) {
	  amplitudeW = 0;
    	}
	else {
	  squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
	  squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
	  if (squareplus*squareminus < 0) {
	    throw ("problem: lambda will give nan in squarkLamplitudedecayneutralino\n");
	    errorflag = -1;
	  }
	  squareratio = 1 - pow(fabs(m3)/m1,2) - pow(m2/m1,2);
	  AqZ = 1/(pow(2,0.5))*(uord*g*mixNeut(neutralino,2) + gprime*mixNeut(neutralino,1)/3); 
	  lambda = pow(squareplus*squareminus,0.5);
	  amplitudeW = pow(AqZ,2)*m1/(16*PI)*squareratio*lambda; 
	}
	return amplitudeW;
}

double squarkRamplitudedecayneutralino (double m1, double m2, double m3, double g, double gprime, DoubleMatrix & mixNeut, int neutralino, int uord ) ///neutralino takes values of 1, 2, 3, or 4 and denotes which neutralino mass eigenstate we decay into, uord takes value 1 for up quarks (or charm quarks) and -1 for down quarks (or strange quarks) in order to change the sign and magnitude of the coefficient BqZ accordingly
{
  double squareplus, squareminus, squareratio, BqZ, uordchanger=0, lambda, amplitudeW;
	if (fabs(m1) < fabs(m2) +fabs(m3)) {
	  amplitudeW = 0;
    	}
	else {
	  squareplus = 1 - pow(fabs(m3)/m1+m2/m1,2);
	  squareminus = 1 - pow(fabs(m3)/m1-m2/m1,2);
	  if (squareplus*squareminus < 0) {
	    throw ("problem: lambda will give nan in squarkRamplitudedecayneutralino\n");
	    errorflag = -1;
	  }
	  squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
	  if ( uord == 1) { uordchanger =1;}
	  else if (uord == -1) { uordchanger =-0.5;}
	  else {
	    throw("problem: uord must be 1 or -1 in squarkRamplitudedecayneutralino");
	    errorflag = -1;
	  }
	  BqZ = 1/(pow(2,0.5))*4./3*uordchanger*gprime*mixNeut(neutralino,1); ///Following changes in AqZ suggested by SUSYHIT
	  lambda = pow(squareplus*squareminus,0.5);
	  amplitudeW = pow(BqZ,2)*m1/(16*PI)*squareratio*lambda; /// need to check this formula, unsure about BqZ and also if it should be mod squared or just the squared I have done here!
	  
	}
	return amplitudeW;
}



double squark3amplitudedecayneutralino (double m1, double m2, double m3, double mWboson, double theta, double beta, DoubleMatrix & mixNeut, double g, double gp, double runmq, int squark , int oneortwo,  int neutralino) {

  double amplitudeW, squareplus, squareminus, lambda, fq=0, alphatilda=0, betatilda=0, a=0, b=0;
  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+(m3))/m1,2);
    squareminus = 1 - pow((m2-(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark3amplitudedecayneutralino\n");
      errorflag = -1;
    }
    
    if (squark == 1) /// we have stops
      {
	fq = g*runmq/(pow(2,0.5)*mWboson*sin(beta));
	if (oneortwo == 1) /// we have stop1s
	  {
	    alphatilda = (cos(theta)*1/(pow(2,0.5))*(-g*mixNeut(neutralino,2) - gp/3*mixNeut(neutralino,1)) - fq*sin(theta)*mixNeut(neutralino,4)); /// this is just simpler (rearranged) form of atopr(1,i) from susyhit *g
	    betatilda = (4/(3*pow(2,0.5))*gp*mixNeut(neutralino,1)*sin(theta) - fq*mixNeut(neutralino,4)*cos(theta)); /// this is just simpler (rearranged) form of btopr(1,i) from susyhit * g
	  }
     	else if (oneortwo == 2) /// we have stop2s
	  {
	    alphatilda = (-sin(theta)*1/(pow(2,0.5))*(mixNeut(neutralino,1)*gp/3 + mixNeut(neutralino,2)*g) + cos(theta)*fq*mixNeut(neutralino,4)); /// again simplified form of atopr(2,i) * g from susyhit
	    betatilda = -4/(3*pow(2,0.5))*cos(theta)*mixNeut(neutralino,1)*gp - fq*sin(theta)*mixNeut(neutralino,4); /// again simplified form of btopr(2,i) * g from susyhit
	  }
	else {
	  throw("problem: stop must be stop1 or stop2\n"); 
	  errorflag = -1;
	}
      }
    else if ( squark ==2) /// we have sbottoms
      {
	fq = g*runmq/(pow(2,0.5)*mWboson*cos(beta));
	
	if ( oneortwo == 1) /// we have sbottom1s
	  {
	    alphatilda = (1/pow(2,0.5))*cos(theta)*(-mixNeut(neutralino,1)*gp/3 + mixNeut(neutralino,2)*g) - sin(theta)*mixNeut(neutralino,3)*fq; /// just simplified form of abot(1,i) * g from susyhit
	    betatilda = sin(theta)*2/(3*pow(2,0.5))*(-mixNeut(neutralino,1)*gp) - cos(theta)*fq*mixNeut(neutralino,3);
	  }
	else if (oneortwo == 2) /// we have sbottom2s
	  {
	    alphatilda = sin(theta)*(mixNeut(neutralino,1)*-gp*(1/(3*pow(2,0.5))) + mixNeut(neutralino,2)*g*1/(pow(2,0.5))) + cos(theta)*fq*mixNeut(neutralino,3); /// simplified abot(2,i)*g from susyhit
	    betatilda = cos(theta)*(2/(3*pow(2,0.5)))*gp*(mixNeut(neutralino,1)) - sin(theta)*fq*mixNeut(neutralino,3); /// simplified bbot(2,i)*g from susyhit
	  }
	  
	else {
	  throw("problem: must be sbottom1s or sbottom2s\n");
	  errorflag = -1;
	}
      }
      
    else {
      throw("problem: third generation squarks must be stops or sbottoms\n");
      errorflag = -1;
    }
          
    a = 0.5*(alphatilda + betatilda);
    b = 0.5*(betatilda - alphatilda);
                        
    amplitudeW = m1/(8*PI)*lambda*(pow(a,2)*squareplus + pow(b,2)*squareminus);
  }

  return amplitudeW;
  
}
      
double squark3amplitudedecaysquark3Wboson (double m1, double m2, double m3, double g, double thetat, double thetab, int m1torb, int m1oneortwo, int m3torb, int m3oneortwo) /// m1torb tells the function if the initial squark is a stop or sbottom, m1oneortwo tells it whether it's the lighter or heavier squark, similarly for the final state squark with m3torb and m3oneortwo
{
  double amplitudeW, squareplus, squareminus, lambda, capthetai=0, capthetaf=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark3amplitudedecaysquark3Wboson\n");
      errorflag = -1;
    }
    
    if(m1torb == 1) /// we have an initial stop
      {
	if(m1oneortwo == 1) /// we have an initial stop1
	  {
	    capthetai = pow(cos(thetat),2);
	  }
	else if (m1oneortwo ==2) // we have an initial stop2
	  {
	    capthetai = pow(sin(thetat),2);
	  }
	else {
	  throw("problem: m1oneortwo must be 1 or 2 in squark3amplitudedecaysquark3Wboson!\n");
	  errorflag = -1;
	}
      }
    else if(m1torb == 2) /// we have an initial sbottom
      {
	if(m1oneortwo == 1) /// we have an initial sbottom1
	  {
	    capthetai = pow(cos(thetab),2);
	  }
	else if (m1oneortwo == 2) // we have an initial sbottom2
	  {
	    capthetai = pow(sin(thetab),2);
	  }
	else {throw("problem: m1oneortwo must be 1 or 2 in squark3amplitudedecaysquark3Wboson!\n");
	  errorflag = -1;
	}
      }
    else { throw("problem: m1torb must be 1 or 2 in squark3amplitudedecaysquark3Wboson!");
      errorflag = -1;
    }
      

    if(m3torb == 1) /// we have a final state stop
      {
	if(m3oneortwo == 1) // we have a final state stop1
	  {
	    capthetaf = pow(cos(thetat),2);
	  }
	else if (m3oneortwo ==2) /// we have a final state stop2
	  {
	    capthetaf = pow(sin(thetat),2);
	  }
	else { throw("problem: m3oneortwo must be 1 or 2 in squark3amplitudedecaysquark3Wboson!");
	  errorflag = -1;
	}
      }
    else if(m3torb == 2) /// we have a final state sbottom
      {
	if(m3oneortwo == 1) /// we have a final state sbottom1
	  {
	    capthetaf = pow(cos(thetab),2);
	  }
	else if (m3oneortwo == 2) /// we have a final state sbottom2
	  {
	    capthetaf = pow(sin(thetab),2);
	  }
	else { throw("problem: m3oneortwo must be 1 or 2 in squark3amplitudedecaysquark3Wboson!");
	  errorflag = -1;
	}
      }
    else { throw("problem: m3torb must be 1 or 2 in squark3amplitudedecaysquark3Wboson!");
      errorflag = -1;
    }
    amplitudeW = pow(g,2)/(32*PI)*(pow(m1,3)/pow(m2,2))*pow(lambda,3)*capthetai*capthetaf;
  }
  return amplitudeW;
}
      
double squark3amplitudedecaychargedHiggssquark3 (double m1, double m2, double m3, double g, double mWboson, double beta, double thetat, double thetab, double greekmu, double At, double Ab, double mt, double mb, int t1or2, int b1or2) {
  double amplitudeW, squareplus, squareminus, lambda, A, A11, A12, A21, A22, combo1, combo2, combo3, combo4;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark3amplitudedecaychargedHiggssquark3\n");
      errorflag = -1;
    }
    combo1 = tan(beta) + 1/(tan(beta));
    combo2 = greekmu + At/(tan(beta));
    combo3 = greekmu + Ab*tan(beta);
    combo4 = (pow(mb,2)*tan(beta) + pow(mt,2)/(tan(beta))) - pow(mWboson,2)*sin(2*beta);
      
    A11 = g/(pow(2,0.5)*mWboson)*(mt*mb*combo1*sin(thetat)*sin(thetab) + mt*combo2*sin(thetat)*cos(thetab) + mb*combo3*sin(thetab)*cos(thetat) + combo4*cos(thetat)*cos(thetab));
    A12 = g/(pow(2,0.5)*mWboson)*(mt*mb*combo1*sin(thetat)*(-cos(thetab)) + mt*combo2*sin(thetat)*sin(thetab) + mb*combo3*(-cos(thetab))*cos(thetat) + combo4*cos(thetat)*sin(thetab));
    A21 = g/(pow(2,0.5)*mWboson)*(mt*mb*combo1*(-cos(thetat))*sin(thetab) + mt*combo2*(-cos(thetat))*cos(thetab) + mb*combo3*sin(thetab)*sin(thetat) + combo4*sin(thetat)*cos(thetab));
    A22 = g/(pow(2,0.5)*mWboson)*(mt*mb*combo1*(-cos(thetat))*(-cos(thetab)) + mt*combo2*-(cos(thetat))*sin(thetab) + mb*combo3*(-cos(thetab))*sin(thetat) + combo4*sin(thetat)*sin(thetab));

    if(t1or2 == 1) /// we have an initial stop1
      {
	if (b1or2 == 1) /// we have a final state sbottom1
	  {
	    A = A11;
	  }
	else if (b1or2 == 2) /// we have a final state sbottom2
	  {
	    A = A12;
	  }
	else {
	  throw("problem:b1or2 must be 1 or 2 in squark3amplitudedecaychargedHiggssquark3\n");
	  errorflag = -1;
	}
      }
    if(t1or2 == 2) /// we have an initial stop2
      {
	if (b1or2 == 1) /// we have a final state sbottom1
	  {
	    A = A21;
	  }
	else if (b1or2 == 2) /// we have a final state sbottom2
	  {
	    A = A22;
	  }
	else {
	  throw("problem:b1or2 must be 1 or 2 in squark3amplitudedecaychargedHiggssquark3\n");
	  errorflag = -1;
	}
      }
    else {
      throw("problem:t1or2 must be 1 or 2 in squark3amplitudedecaychargedHiggssquark3\n");
      errorflag = -1;
    }
    
    amplitudeW = pow(A,2)*lambda/(16*PI*m1);
  }
  return amplitudeW;
  
}


      
double squark32amplitudedecayneutralHiggssquark3 (double m1, double m2, double m3, double g, double gp, double mWboson, double beta, double alpha, double thetat, double thetab, double greekmu, double At, double Ab, double mt, double mb, int torb, char phi) {
  double amplitudeW=0, squareplus, squareminus, lambda, A, B, Ah, AH, AA, Bh, BH, BA, combo1, combo2, combo3, combo4, combo5, combo6, combo7;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark32amplitudedecayneutralHiggssquark3\n");
      errorflag = -1;
    }
    combo1 = 1 - 5./3 * pow(gp/g,2);
    combo2 = -1 +1./3 * pow(gp/g,2);
    combo3 = At*cos(alpha) + greekmu*sin(alpha);
    combo4 = -At*sin(alpha) + greekmu*cos(alpha);
    combo5 = At/(tan(beta)) + greekmu;
    combo6 = -Ab*sin(alpha) - greekmu*cos(alpha);
    combo7 = Ab*cos(alpha) - greekmu*sin(alpha);
      
    Ah = g*mWboson*sin(beta+alpha)/4 * combo1*sin(2*thetat) + g*mt*cos(2*thetat)/(2*mWboson*sin(beta))*combo3;
    AH = -g*mWboson*cos(beta+alpha)/4 * combo1*sin(2*thetat) - g*mt*cos(2*thetat)/(2*mWboson*sin(beta))*combo4; /// possible minus sign issue here, both terms are same sign in susyhit -> changed second sign to - ?? whereas Tata and Baer has a signs of two terms opposite - note as it's squared anyway only relative sign between the two terms matters
    AA = g*mt*combo5/(2*mWboson);

    Bh = g*mWboson*sin(beta+alpha)/4 * combo2*sin(2*thetab) + g*mb*cos(2*thetab)/(2*mWboson*cos(beta))*combo6;
    BH = -g*mWboson*cos(beta+alpha)/4 * combo2*sin(2*thetab) + g*mb*cos(2*thetab)/(2*mWboson*cos(beta))*combo7;
    BA = g*mb*(Ab*tan(beta)+greekmu)/(2*mWboson);

    if(phi == 'h') {
      A=Ah;
      B=Bh;
    }
      
    else if (phi == 'H') {
      A=AH;
      B=BH;
    }

    else if (phi == 'A') {
      A=AA;
      B=BA;
    }
      
    else {
      throw("problem: phi must be one of h, H, or A in squark32amplitudedecayneutraliHiggssquark3 \n");
      errorflag = -1;
    }
    
    if (torb == 1) ///stop2 decay
      {
	amplitudeW = pow(A,2)*lambda/(16*PI*m1);
      }
    
    else if (torb == 2) ///sbottom2 decay
      {
	amplitudeW = pow(B,2)*lambda/(16*PI*m1);
      }
    else {
      throw("problem:torb must be 1 or 2 in squark32amplitudedecayneutralHiggssquark3\n");
      errorflag = -1;
    }
  }
  return amplitudeW;
}

	     
double squark32amplitudedecaysquark3Zboson (double m1, double m2, double m3, double g, double gp, double theta) {
  double amplitudeW, squareplus, squareminus, lambda, angular, costhetaW;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squark32amplitudedecaysquark3Zboson\n");
      errorflag = -1;
    }
    angular = pow(cos(theta)*sin(theta),2);
    costhetaW = g/pow((pow(g,2)+pow(gp,2)),0.5);
    
    amplitudeW = pow(g,2)*pow(m1,3)/(64*PI*pow(m3*costhetaW,2))*pow(lambda,3)*angular;
  }
  return amplitudeW;
}

double sleptonamplitudedecayleptonneutralino (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, char LorR, int neutralino) {
  double amplitudeW, squareplus, squareminus, squareratio, lambda, A, B, C;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sleptonamplitudedecayleptonneutralino\n");
      errorflag = -1;
    }
    A = -1/(pow(2,0.5)) * (g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1));
    B = -pow(2,0.5)*gp*mixNeut(neutralino,1);
    if(LorR == 'L') {
      C=A;
    }
      
    else if (LorR == 'R') {
      C=B;
    }
    else {
      throw("problem: LorR must be L or R in sleptonamplitudedecayleptonneutralino\n");
      errorflag = -1;
    }
      
   
    amplitudeW = pow(C,2)*m1*fabs(squareratio)/(16*PI) * lambda;
  }
  return amplitudeW;
}


double sneutrinoamplitudedecayneutrinoneutralino (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, int neutralino) {
  double amplitudeW, squareplus, squareminus, squareratio, lambda, A;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sneutrinoamplitudedecayneutrinoneutralino\n");
      errorflag = -1;
    }
    A = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) - gp*mixNeut(neutralino,1));

    amplitudeW = pow(A,2)*m1*squareratio*lambda/(16*PI); /// note here as m2=0 then lambda and squareratio each reduce to (1-pow(m3/m1,2)) 
      }
  return amplitudeW;
}


double sleptonamplitudedecaychargino (double m1, double m2, double m3, double g, double theta, int chargino) ///for both sleptonL decays to charginos + neutrinos and for sneutrino decays to lepton + charginos - just change theta from thetaL in first case to thetaR in second case
{
  double amplitudeW, squareplus, squareminus, squareratio, lambda, trigtheta=0;  
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sleptonamplitudedecaychargino\n");
      errorflag = -1;
    }
    if (chargino == 1) {
      trigtheta = sin(theta);
    }
    else if (chargino ==2) {
      trigtheta = cos(theta);
    }
    else {
      throw("problem: chargino must be a 1 or 2 in sleptonamplitudedecaychargino\n");
      errorflag = -1;
    }	    
    amplitudeW = pow(g*trigtheta,2)*m1*squareratio*lambda/(16*PI); /// note in the slepton decay to neutrinos case m2 is zero so lambda reduces to squareratio - giving squareratio squared
      }
  return amplitudeW;
}

      
double stauamplitudedecaytauneutralino (double m1, double m2, double m3, double g, double gp, double mWboson, DoubleMatrix & mixNeut, double theta, double beta, int oneortwo, int neutralino) {
  double amplitudeW, squareplus, squareminus, lambda, ftau, alphatilda=0, betatilda=0, a, b;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stauamplitudedecaytauneutralino\n");
      errorflag = -1;
    }
    ftau = g*m2/(pow(2,0.5)*mWboson*cos(beta));
    if (oneortwo == 1) /// we have a stau1 decaying
      {
	alphatilda = 1/(pow(2,0.5))*sin(theta)*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1)) + ftau*mixNeut(neutralino,3)*cos(theta);
	betatilda =  pow(2,0.5)*gp*mixNeut(neutralino,1)*-cos(theta) + ftau*mixNeut(neutralino,3)*sin(theta);
      }
    else if (oneortwo ==2) /// we have a stau2 decaying
      {
	alphatilda = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*-cos(theta) + ftau*mixNeut(neutralino,3)*sin(theta);
	betatilda = pow(2,0.5)*gp*mixNeut(neutralino,1)*sin(theta) + ftau*mixNeut(neutralino,3)*cos(theta); 
      }
    else {
      throw("problem: oneortwo must be 1 or 2 in stauamplitudedecaytauneutralino\n");
      errorflag = -1;
    }
    a = 0.5*(alphatilda + betatilda);
    b = 0.5*(betatilda - alphatilda);
    amplitudeW = m1*lambda/(8*PI)*(pow(a,2)*squareplus + pow(b,2)*squareminus);
  }
  return amplitudeW;
}

double stausneutrinoamplitudedecaytauneutrinoneutralino (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, int neutralino) {
  double amplitudeW, squareplus, squareminus, squareratio, lambda, A;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stausneutrinoamplitudedecaytauneutrinoneutralino\n");
      errorflag = -1;
    }
    A = 1/(pow(2,0.5))*(g*-mixNeut(neutralino,2) + gp*mixNeut(neutralino,1));
    amplitudeW = m1/(16*PI)*pow(A,2)*lambda*squareratio; /// note lambda and squareratio reduce to same thing here as m2 = 0
  }
  return amplitudeW;
}

double stauamplitudedecaynutauchargino (double m1, double m2, double m3, double g, double mWboson, double theta, double thetaL, double beta, double mtau, int oneortwo, int chargino) {
  double amplitudeW = 0, squareplus = 0, squareminus = 0, squareratio = 0, lambda = 0, ftau = 0, A=0, B=0, mixingpart = 0;  
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stauamplitudedecaynutauchargino\n");
      errorflag = -1;
    }
    ftau = g*mtau/(pow(2,0.5)*mWboson*cos(beta));
      
      if (chargino ==1)	{
	A = g*sin(thetaL);
	B = -ftau*cos(thetaL);
	
      }

      else if(chargino ==2) {
	A = g*cos(thetaL);
	B = ftau*sin(thetaL);
      }
            
      else {
	throw("problem: chargino must be a 1 or 2 in stauamplitudedecaynutauchargino\n");
	errorflag = -1;
      }
      
      if(oneortwo == 2) { 
	mixingpart = -A*sin(theta) + B*cos(theta);
      }
      else if (oneortwo == 1) {
	mixingpart = A*cos(theta) + B*sin(theta);
      }
      else {
	throw("problem: oneortwo must be 1 or 2 in stauamplitudedecaynutauchargino\n");
	errorflag = -1;
      }
            
      amplitudeW = pow(mixingpart,2)*m1*lambda*squareratio/(16*PI); ///again lambda and squareratio reduce to same thing as m2 = 0
    }

  return amplitudeW;
}


double stausneutrinoamplitudedecaytauchargino (double m1, double m2, double m3, double g, double mWboson, double beta, double thetaL, double thetaR, int chargino) {
  double amplitudeW, squareplus, squareminus, squareratio, lambda, ftau, A, B, sumsquare;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareratio = 1 - pow(m3/m1,2) - pow(m2/m1,2);
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stausneutrinoamplitudedecaytauchargino\n");
      errorflag = -1;
    }
    ftau = g*m2/(pow(2,0.5)*mWboson*cos(beta)); ///as m2 is mtau which is what we need to calculate ftau
    
    if(chargino==1) {
      A = g*sin(thetaR);
      B = -ftau*cos(thetaL);
    }
    else if (chargino==2) {
      A = g*cos(thetaR);
      B = ftau*sin(thetaL);
    }
    else {
      throw("problem: chargino must be a 1 or 2 in stausneutrinoamplitudedecaytauchargino\n");
      errorflag = -1;
    }   
    sumsquare = pow(A,2) + pow(B,2);
    amplitudeW = m1*lambda/(16*PI)*(sumsquare*squareratio + 4*m2*m3/(pow(m1,2))*B*A);
  }
  return amplitudeW;
}


double stauamplitudedecaysnustauHminus (double m1, double m2, double m3, double g, double mWboson, double beta, double thetatau, double mtau, double greekmu, double Atau, int oneortwo) ///Also does decay mode snustau to Hplus and stau1/2 just with m1, m2 and m3 permuted.

{
  double amplitudeW, squareplus, squareminus, lambda, A, combo1, combo2;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stauamplitudedecaysnustauHminus\n");
      errorflag = -1;
    }
    
    combo1 = pow(mtau,2)*tan(beta) - pow(mWboson,2)*sin(2*beta);
    combo2 = mtau*(greekmu+Atau*tan(beta));

      if (oneortwo == 1) {
	A = g/(pow(2,0.5)*mWboson)*(combo1*sin(thetatau) - combo2*cos(thetatau));
      }
      else if (oneortwo == 2) {
	A = g/(pow(2,0.5)*mWboson)*(-combo1*cos(thetatau) - sin(thetatau)*combo2);
      }
      else {
	throw("problem: oneortwo must be 1 or 2 in stauamplitudedecaysnustauHminus\n");
	errorflag = -1;
      }
      
      amplitudeW = pow(A,2)*lambda/(16*PI*m1);
  }
  return amplitudeW;
}


double stauamplitudedecaysnustauWboson (double m1, double m2, double m3, double g, double thetatau, int oneortwo) ///m3 must be mw here
  
{
  double amplitudeW, squareplus, squareminus, lambda, mixangle=0;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stauamplitudedecaysnustauWboson\n");
      errorflag = -1;
    }
    
    if (oneortwo == 1) {
      mixangle = sin(thetatau);
    }
      else if (oneortwo == 2) {
	mixangle = cos(thetatau);
      }
      else {
	throw("problem oneortwo must be 1 or 2 in stauamplitudedecaysnustauWboson\n");
	errorflag = -1;
      }
    
    amplitudeW = pow(g*mixangle,2)*pow(m1,3)/(32*PI*pow(m3,2))*pow(lambda,3);
  }
  return amplitudeW;
}

double stau2amplitudedecaystau1Zboson (double m1, double m2, double m3, double g, double gp, double thetatau) ///m3 must be mz here
  
{
  double amplitudeW, squareplus, squareminus, lambda, mixangle, costhetaW;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
    }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stau2amplitudedecaystau1Zboson\n");
      errorflag = -1;
    }
    mixangle = pow(cos(thetatau)*sin(thetatau),2);
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    
    amplitudeW = pow(g,2)*mixangle*pow(m1,3)*pow(lambda,3)/(64*PI*pow(m3*costhetaW,2));
  }
  return amplitudeW;
}

double stau2amplitudedecaystau1phi (double m1, double m2, double m3, double g, double gp, double thetatau, double beta, double alpha, double mWboson, double mtau, double greekmu, double Atau, char phi) {
  double amplitudeW, squareplus, squareminus, lambda, combo1, combo2, combo3, combo4, combo5, combo6, Acoeff;  

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stau2amplitudedecaystau1phi\n");
      errorflag = -1;
    }
    combo1 = -1 +3*pow(gp/g,2); /// is just -1 + 3*pow(tanthetaW,2)
    combo2 = g*mWboson/4;
    combo3 = g*mtau/(2*mWboson);
    combo4 = greekmu*cos(alpha) + Atau*sin(alpha);
    combo5 = -greekmu*sin(alpha) + Atau*cos(alpha);
    combo6 = greekmu + Atau*tan(beta);

    if (phi == 'h') {
      Acoeff = -combo2*sin(beta+alpha)*sin(2*thetatau)*combo1 + combo3/(cos(beta))*cos(2*thetatau)*combo4;
    }
    else if (phi == 'H') {
      Acoeff = combo2*cos(beta+alpha)*sin(2*thetatau)*combo1 - combo3/(cos(beta))*cos(2*thetatau)*combo5;
    }
    else if (phi == 'A') {
      Acoeff = combo3*combo6;
    }
    else {
      throw("problem: phi can only be an h, H or A instau2amplitudedecaystau1phi\n");
      errorflag = -1;
    }    
    amplitudeW = pow(Acoeff,2)*lambda/(16*PI*m1);
  }
  return amplitudeW;
}


double charginoamplitudedecayquarksquarkL (double m1, double m2, double m3, double g, double theta, int chargino) ///quark mass is m2

{
  double amplitudeW, squareplus, squareminus, alteredsquareratio, lambda, scriptA;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    alteredsquareratio = 1 - pow(m3/m1,2) + pow(m2/m1,2); /// altered as now + quarkmass/initialmass ^2 not minus
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecayquarksquarkL\n");
      errorflag = -1;
    }
    
    if (chargino == 1) /// chargino1 decaying
      {
	scriptA = g*sin(theta); /// theta is thetaL if sdownL and thetaR if supL
      }
    else if (chargino == 2) ///chargino2 decaying
      {
	scriptA = g*cos(theta); /// theta is thetaL if sdownL and thetaR if supL
      }
    else {
      throw("problem: chargino must be a 1 or 2 in charginoamplitudedecayquarksquarkL\n");
      errorflag = -1;
    }
    amplitudeW = 3*fabs(m1)*lambda/(32*PI)*(pow(scriptA,2)*alteredsquareratio);
  }
  return amplitudeW;
}

double charginoamplitudedecayquarksquarkmix (double m1, double m2, double m3, double g, double theta, double thetaL, double thetaR, double beta, double runmt, double runmb, double mWboson, int chargino, int upordowntypesquark, int oneortwo) ///quark mass is m2

{
  double amplitudeW, squareplus, squareminus, alteredsquareratio, lambda, combo1=0, combo2=0;
  DoubleVector squarkmixcharginocouplings (double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    alteredsquareratio = 1 - pow(m3/m1,2) + pow(m2/m1,2); ///altered as now + quarkmass/initialmass ^2 not minus
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecayquarksquarkmix\n");
      errorflag = -1;
    }
    
    int torb = upordowntypesquark;

    if (chargino == 1) {
      if (oneortwo == 1) {
    	combo1 = squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, m3, 0, torb)(1);
    	combo2 = -squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, m3, 0, torb)(2);
      }
      else if (oneortwo == 2) {
    	combo1 = squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, m3, 0, torb)(5);
    	combo2 = -squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, m3, 0, torb)(6);
      }
      else {
	throw("problem: oneortwo must be a 1 or 2 in charginoamplitudedecayquarksquarkmix\n");
	errorflag = -1;
      }
    }
    else if (chargino == 2) {
      if (oneortwo == 1) {
    	combo1 = squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, 0, m3, torb)(3);
    	combo2 = -squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, 0, m3, torb)(4);
      }
      else if (oneortwo == 2) {
    	combo1 = squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, 0, m3, torb)(7);
    	combo2 = -squarkmixcharginocouplings (g, theta, beta, thetaL, thetaR, runmt, runmb, mWboson, 0, m3, torb)(8);
      }
      else { 
	throw("problem: oneortwo must be a 1 or 2 in charginoamplitudedecayquarksquarkmix\n");
	errorflag = -1;
      }
    }
    else {
      throw("problem: chargino must be a 1 or 2 in charginoamplitudedecayquarksquarkmix\n");
      errorflag = -1;
    }

    amplitudeW = 3*fabs(m1)*lambda/(32*PI)*(combo1*alteredsquareratio + combo2*m2/m1);
  }
  return amplitudeW;
}


double charginoamplitudedecayleptonsleptonL (double m1, double m2, double m3, double g, double thetaLorR, int chargino) ///lepton mass is m2, use thetaR for decays to sneutrinos and leptons, use thetaL for decays to sleptons neutrinos

{
  double amplitudeW, squareplus, squareminus, alteredsquareratio, lambda, A=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    alteredsquareratio = 1 - pow(m3/m1,2) + pow(m2/m1,2); /// altered as now + quarkmass/initialmass ^2 not minus
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecayleptonsleptonL\n");
      errorflag = -1;
    }
      
    if (chargino == 1) { 
      A = -g*sin(thetaLorR);
    }
    else if (chargino == 2) {
      A = -g*cos(thetaLorR);
    }
    else {
      throw("problem: chargino must be a 1 or 2 in charginoamplitudedecayleptonsleptonL\n");
      errorflag = -1;
    }

    amplitudeW = fabs(m1)*lambda/(32*PI)*pow(A,2)*alteredsquareratio;
  }
  return amplitudeW;
}


double charginoamplitudedecaysnutautau (double m1, double m2, double m3, double g, double thetaL, double thetaR, double beta, double mWboson, int chargino) ///m2 must be tau mass

{
  double amplitudeW, squareplus, squareminus, alteredsquareratio, lambda, ftau, A=0, Bprimeprime=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    alteredsquareratio = 1 - pow(m3/m1,2) + pow(m2/m1,2); /// altered as now + quarkmass/initialmass ^2 not minus
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);	 
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecaysnutautau\n");
      errorflag = -1;
    }
    ftau = g*m2/(pow(2,0.5)*mWboson*cos(beta));
    
    if (chargino == 1) {
      A = g*sin(thetaR);
      Bprimeprime = - ftau*cos(thetaL);
    }
    else if (chargino == 2) {
      A = g*cos(thetaR);
      Bprimeprime = ftau*sin(thetaL);
    }
    else { 
      throw("problem: chargino must be a 1 or 2 in charginoamplitudedecaysnutautau\n");
      errorflag = -1;
    }

    amplitudeW = fabs(m1)*lambda/(32*PI)*((pow(A,2)+pow(Bprimeprime,2))*alteredsquareratio + 4*A*Bprimeprime*m2/fabs(m1));
  }
  return amplitudeW;
}
      

double charginoamplitudedecaystaunutau (double m1, double m2, double m3, double g, double thetaL, double thetaR, double thetatau, double beta, double mWboson, double mtau, int oneortwo, int chargino) ///m2 must be nutau mass (i.e. 0)

{
  double amplitudeW, squareplus, squareminus, alteredsquareratio, lambda, ftau, A=0, Bprimeprime=0, scriptA=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    alteredsquareratio = 1 - pow(m3/m1,2) + pow(m2/m1,2); /// altered as now + quarkmass/initialmass ^2 not minus
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);	 /// reduces to 1 - pow(m3/m1,2) as m2 = 0
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecaystaunutau\n");
      errorflag = -1;
    }
    ftau = g*mtau/(pow(2,0.5)*mWboson*cos(beta));
      
      if (chargino == 1) {
	A = -g*sin(thetaL);
	Bprimeprime = -ftau*cos(thetaL);
	if (oneortwo == 1) /// decaying to a stau1
	  {
	    scriptA = A*sin(thetatau) + Bprimeprime*cos(thetatau);
	  }
	else if (oneortwo == 2) /// decaying to a stau2
	  {
	    scriptA = -A*cos(thetatau) + Bprimeprime*sin(thetatau);
	  }
	else {
	  throw("problem: oneortwo must be a 1 or 2 in charginoamplitudedecaystaunutau\n");
	  errorflag = -1;
	}
      }
      else if (chargino == 2) {
	A = -g*cos(thetaL);
	Bprimeprime = ftau*sin(thetaL);
	
	if (oneortwo == 1) /// decaying to a stau1
	  {
	    scriptA = A*sin(thetatau) + Bprimeprime*cos(thetatau);
	  }
	else if (oneortwo == 2) /// decaying to a stau2
	  {
	    scriptA= -A*cos(thetatau) + Bprimeprime*sin(thetatau);
	  }
	else {
	  throw("problem: oneortwo must be a 1 or 2 in charginoamplitudedecaystaunutau\n");
	  errorflag = -1;
	}
      }
      else {
	throw("problem: chargino must be a 1 or 2 in charginoamplitudedecaystaunutau\n");
	errorflag = -1;
      }      
      amplitudeW = pow(scriptA,2)*fabs(m1)*lambda*alteredsquareratio/(32*PI);
  }
  return amplitudeW;
}



double charginoamplitudedecayWbosonneutralino (double m1, double m2, double m3, double g, double thetaL, double thetaR, DoubleMatrix & mixNeut, int chargino, int neutralino) ///m2 must be Wboson mass

{
  double amplitudeW, squareplus, squareminus, squarecombo1, squarecombo2, lambda, X=0, Y=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecayWbosonneutralino\n");
      errorflag = -1;
    }
    squarecombo1 = pow(m1,2) + pow(m3,2) - pow(m2,2);
    squarecombo2 = (pow(pow(m1,2) - pow(m3,2),2) - pow(m2,4))/pow(m2,2);
      
    if (chargino == 1) {
      X = 0.5*((cos(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) - sin(thetaR)*mixNeut(neutralino,2)) - cos(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - sin(thetaL)*mixNeut(neutralino,2));
      Y = 0.5*(-(cos(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) - sin(thetaR)*mixNeut(neutralino,2)) - cos(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - sin(thetaL)*mixNeut(neutralino,2));
    }
      
    else if (chargino == 2) {
      X = 0.5*((-sin(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) - cos(thetaR)*mixNeut(neutralino,2)) + sin(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - cos(thetaL)*mixNeut(neutralino,2));
      Y = 0.5*((sin(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) + cos(thetaR)*mixNeut(neutralino,2)) + sin(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - cos(thetaL)*mixNeut(neutralino,2));
    }
    else {
      throw("problem: chargino must be a 1 or 2 in charginoamplitudedecayWbosonneutralino\n");
      errorflag = -1;
    }
    amplitudeW = pow(g,2)/(16*PI*fabs(m1))*lambda*((pow(X,2)+pow(Y,2))*(squarecombo1+squarecombo2) - 6*(pow(X,2) - pow(Y,2))*(m1)*(m3));
  }
  return amplitudeW;
}


double charginoamplitudedecayHminusneutralino (double m1, double m2, double m3, double g, double gp, double thetaL, double thetaR, double beta, DoubleMatrix & mixNeut, int chargino, int neutralino) ///m2 must be Hminus mass

{
  double amplitudeW, squareplus, squareminus, lambda, squarecombo1, A1=0, A2=0, A3=0, A4=0, a=0, b=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoamplitudedecayHminusneutralino\n");
      errorflag = -1;
    }
    squarecombo1 = pow(m1,2) + pow(m3,2) - pow(m2,2);
    
    A1 = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*sin(thetaR) - g*mixNeut(neutralino,4)*cos(thetaR);
    A2 = -1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*cos(thetaR) - g*mixNeut(neutralino,4)*sin(thetaR);
    A3 = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*sin(thetaL) + g*mixNeut(neutralino,3)*cos(thetaL);
    A4 = -1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*cos(thetaL) + g*mixNeut(neutralino,3)*sin(thetaL);
    
    if (chargino == 1) {
      a = 0.5*(-cos(beta)*A2 + sin(beta)*A4);
      b = 0.5*(-cos(beta)*A2 - sin(beta)*A4);
    }
      
    else if (chargino == 2) {
      a = 0.5*(-cos(beta)*A1 + sin(beta)*A3);
      b = 0.5*(-cos(beta)*A1 - sin(beta)*A3);
    }
    else { 
      throw("problem: chargino must be a 1 or 2 in charginoamplitudedecayHminusneutralino\n");
      errorflag = -1;
    }
    amplitudeW = lambda/(16*PI*fabs(m1))*((pow(a,2)+pow(b,2))*squarecombo1 + 2*(pow(a,2) - pow(b,2))*m1*m3);
  }
  return amplitudeW;
}



double chargino2amplitudedecaychargino1Zboson (double m1, double m2, double m3, double g, double gp, double thetaL, double thetaR) ///m2 must be Zboson mass

{
  double amplitudeW, squareplus, squareminus, lambda, squarecombo1, squarecombo2, matelem=0, x=0, y=0, e;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/fabs(m1),2);
    squareminus = 1 - pow((m2-fabs(m3))/fabs(m1),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in chargino2amplitudedecaychargino1Zboson\n");
      errorflag = -1;
    }
    squarecombo1 = pow(m1,2) + pow(m3,2) - pow(m2,2);
    squarecombo2 = (pow(pow(m1,2) - pow(m3,2),2) - pow(m2,4))/pow(m2,2); 
    e = g*gp/(pow(pow(g,2)+pow(gp,2),0.5));
      
    x = 0.5*(sin(thetaL)*cos(thetaL) - sin(thetaR)*cos(thetaR));
    y = 0.5*(sin(thetaL)*cos(thetaL) + sin(thetaR)*cos(thetaR));
    matelem = (pow(x,2) + pow(y,2))*(squarecombo1 + squarecombo2) + 6*(pow(x,2) - pow(y,2))*m1*m3;
    
    amplitudeW = pow(e,2)*lambda/(64*PI*fabs(m1))*pow(g/gp + gp/g,2)*matelem;
  }
  return amplitudeW;
}


double chargino2amplitudedecaychargino1neutHiggs (double m1, double m2, double m3, double g, double gp, double thetaL, double thetaR, double beta, double alpha, char phi) ///m2 must be neutral Higgs mass
  
{
  double amplitudeW, squareplus, squareminus, lambda, squarecombo1, matelem=0, S=0, P=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/fabs(m1),2);
    squareminus = 1 - pow((m2-fabs(m3))/fabs(m1),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in chargino2amplitudedecaychargino1neutHiggs\n");
      errorflag = -1;
    }
    squarecombo1 = pow(m1,2) - pow(m2,2) + pow(m3,2);
    
    if(phi == 'h') {
      S= 0.5*(-sin(thetaR)*sin(thetaL)*sin(alpha) - cos(thetaL)*cos(thetaR)*cos(alpha) + sin(thetaL)*sin(thetaR)*cos(alpha) + cos(thetaL)*cos(thetaR)*sin(alpha));
      P = 0.5*(sin(thetaR)*sin(thetaL)*sin(alpha) + cos(thetaL)*cos(thetaR)*cos(alpha) + sin(thetaL)*sin(thetaR)*cos(alpha) + cos(thetaL)*cos(thetaR)*sin(alpha));
      ///  throw("DECAY to h\n"); 
	}
    
    else if(phi == 'H') {
      S= 0.5*(sin(thetaR)*sin(thetaL)*cos(alpha) - cos(thetaL)*cos(thetaR)*sin(alpha) + sin(thetaL)*sin(thetaR)*sin(alpha) - cos(thetaL)*cos(thetaR)*cos(alpha));
      P = 0.5*(-sin(thetaR)*sin(thetaL)*cos(alpha) + cos(thetaL)*cos(thetaR)*sin(alpha) + sin(thetaL)*sin(thetaR)*sin(alpha) - cos(thetaL)*cos(thetaR)*cos(alpha));
      ///  throw("DECAY to H\n"); 
    }
      
    else if (phi == 'A') {
      S = 0.5*(sin(thetaR)*sin(thetaL)*sin(beta) - cos(thetaL)*cos(thetaR)*cos(beta) - sin(thetaL)*sin(thetaR)*cos(beta) + cos(thetaL)*cos(thetaR)*sin(beta));
      P = 0.5*(-sin(thetaR)*sin(thetaL)*sin(beta) + cos(thetaL)*cos(thetaR)*cos(beta) - sin(thetaL)*sin(thetaR)*cos(beta) + cos(thetaL)*cos(thetaR)*sin(beta));
      /// throw("DECAY to A\n"); 
    }
    
    else {
      throw("problem: phi must be one of h, H, or A in chargino2amplitudedecaychargino1neutHiggs\n");
      errorflag = -1;
    }    
    matelem = (pow(S,2) + pow(P,2))*squarecombo1 + 2*(pow(S,2)-pow(P,2))*m1*m3;
    
    amplitudeW = pow(g,2)*lambda/(32*PI*fabs(m1))*matelem;
  }
  return amplitudeW;
}


double neutralinoamplitudedecayquarksquarkLorR (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, int uordtype , char LorR, int neutralino) ///m2 must be quark mass

{
  double amplitudeW, squareplus, squareminus, lambda, alteredsquareratio, A=0, B=0, C=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayquarksquarkLorR\n");
      errorflag = -1;
    }
    alteredsquareratio = 1 + pow(m2/m1,2) - pow(m3/m1,2);
    
    if (uordtype == 1) /// up type squark (i.e. u squark or c squark)
      {
	A = 1/(pow(2,0.5))*(-g*mixNeut(neutralino,2) - gp/3*mixNeut(neutralino,1));
	B = -4/(3*pow(2,0.5))*gp*mixNeut(neutralino,1);
      }
    
    else if (uordtype == 2) /// down type squark (i.e. d squark or s squark)
      {
	A = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) - gp/3*mixNeut(neutralino,1));
	B = 2/(3*pow(2,0.5))*gp*mixNeut(neutralino,1);
      }
    else {
      throw("problem: uordtype must be a 1 or 2 in neutralinoamplitudedecayquarksquarLorR\n");
      errorflag = -1;
    }
    if(LorR == 'L') /// so get wino and zino couplings as LH squark
      {
	C = A;
      }
    
    else if (LorR == 'R') /// so get only Zino couplings as RH
      {
	C = B;
      }
    else {
      throw("problem: LorR must be a L or R in neutralinoamplitudedecayquarksquarLorR\n");
      errorflag = -1;
    }    
    amplitudeW = 3*pow(C,2)*fabs(m1)*lambda/(32*PI)*alteredsquareratio;
  }
  return amplitudeW;
}

	  

double neutralinoamplitudedecayleptonsleptonLorR (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, char LorR, int neutralino) ///m2 must be lepton mass
  
{
  double amplitudeW, squareplus, squareminus, lambda, alteredsquareratio, A=0, B=0, C=0;
    
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayleptonsleptonLorR\n");
      errorflag = -1;
    }
    alteredsquareratio = 1 + pow(m2/m1,2) - pow(m3/m1,2);
    
    A = -1/(pow(2,0.5)) * (g*-mixNeut(neutralino,2) + gp*-mixNeut(neutralino,1));
    B = pow(2,0.5)*gp*mixNeut(neutralino,1);
    
    if(LorR == 'L' ) /// so get wino and zino couplings as LH slepton
      {
	C = A;
      }
    
    else if (LorR == 'R') /// so get only Zino couplings as RH
      {
	C = B;
      }    
    else {
      throw("problem: LorR must be a L or R in neutralinoamplitudedecayleptonsleptonLorR\n");
      errorflag = -1;
    }  
    amplitudeW = pow(C,2)*fabs(m1)*lambda*alteredsquareratio/(32*PI);
  }
  return amplitudeW;
}



double neutralinoamplitudedecayneutrinosneutrinoL (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, int neutralino) ///m2 must be neutrino mass (i.e. 0)

{
  double amplitudeW, squareplus, squareminus, lambda, alteredsquareratio, A=0;
    

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayneutrinosneutrinoL\n");
      errorflag = -1;
    }
    alteredsquareratio = 1 + pow(m2/m1,2) - pow(m3/m1,2);
    
    A = 1/(pow(2,0.5)) * (g*-mixNeut(neutralino,2) + gp*mixNeut(neutralino,1));
    
    amplitudeW = pow(A,2)*fabs(m1)*lambda*alteredsquareratio/(32*PI);
  }
  return amplitudeW;
}




double neutralinoamplitudedecaysquark3quarkmix (double m1, double m2, double m3, double mWboson, double theta, double beta, DoubleMatrix & mixNeut, double g, double gp, double runmq, int squark , int oneortwo,  int neutralino) /// m2 must be quark mass
{
  double amplitudeW, squareplus, squareminus, masscombo1, masscombo2, lambda, fq=0, alphatilda=0, betatilda=0, a=0, b=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaysquark3quarkmix\n");
      errorflag = -1;
    }
    masscombo1 = pow(1+m2/(m1),2) - pow(m3/m1,2);
    masscombo2 = pow(1-m2/(m1),2) - pow(m3/m1,2);      
    
    
    if (squark == 1) /// we have stops
      {
	fq = g*runmq/(pow(2,0.5)*mWboson*sin(beta));
	if (oneortwo == 1) /// we have stop1s
	  {
	    alphatilda = (cos(theta)*1/(pow(2,0.5))*(-g*mixNeut(neutralino,2) - gp/3*mixNeut(neutralino,1)) - fq*sin(theta)*mixNeut(neutralino,4)); /// this is just simpler (rearranged) form of atopr(1,i) from susyhit *g
	    betatilda = (4/(3*pow(2,0.5))*gp*mixNeut(neutralino,1)*sin(theta) - fq*mixNeut(neutralino,4)*cos(theta)); /// this is just simpler (rearranged) form of btopr(1,i) from susyhit * g
	  }
	
	else if (oneortwo == 2) /// we have stop2s
	  {
	    alphatilda = (sin(theta)*1/(pow(2,0.5))*(-mixNeut(neutralino,1)*gp/3 - mixNeut(neutralino,2)*g) + cos(theta)*fq*mixNeut(neutralino,4)); /// again simplified form of atopr(2,i) * g from susyhit
	    betatilda = 4/(3*pow(2,0.5))*cos(theta)*-mixNeut(neutralino,1)*gp - fq*sin(theta)*mixNeut(neutralino,4); /// again simplified form of btopr(2,i) * g from susyhit
	  }
	
	else {
	  throw("problem: oneortwo must be 1 or 2 in neutralinoamplitudedecaysquark3quarkmix\n");
	  errorflag = -1;
	}
      }
    
    else if ( squark ==2) /// we have sbottoms
      {
	fq = g*runmq/(pow(2,0.5)*mWboson*cos(beta));
	
	if ( oneortwo == 1) /// we have sbottom1s
	  {
	    alphatilda = (1/pow(2,0.5))*cos(theta)*(-mixNeut(neutralino,1)*gp/3 + mixNeut(neutralino,2)*g) - sin(theta)*mixNeut(neutralino,3)*fq; /// just simplified form of abot(1,i) * g from susyhit
	    betatilda = sin(theta)*2/(3*pow(2,0.5))*(-mixNeut(neutralino,1)*gp) - cos(theta)*fq*mixNeut(neutralino,3);
	  }
	
	else if (oneortwo == 2) /// we have sbottom2s
	  {
	    alphatilda = sin(theta)*(mixNeut(neutralino,1)*-gp*(1/(3*pow(2,0.5))) + mixNeut(neutralino,2)*g*1/(pow(2,0.5))) + cos(theta)*fq*mixNeut(neutralino,3); /// simplified abot(2,i)*g from susyhit
	    betatilda = cos(theta)*(2/(3*pow(2,0.5)))*gp*(mixNeut(neutralino,1)) - sin(theta)*fq*mixNeut(neutralino,3); /// simplified bbot(2,i)*g from susyhit
	  }
	else {
	  throw("problem: oneortwo must be 1 or 2 in neutralinoamplitudedecaysquark3quarkmix\n");
	  errorflag = -1;
	}
	}
      
    else {
      throw("problem: squark must be 1 or 2 in neutralinoamplitudedecaysquark3quarkmix\n");
      errorflag = -1;
    }    
    a = 0.5*(alphatilda + betatilda);
    b = 0.5*(betatilda - alphatilda);
    amplitudeW = 3*lambda*fabs(m1)/(16*PI)*(pow(a,2)*masscombo1 + pow(b,2)*masscombo2);
    
  }
  return amplitudeW;
}



double neutralinoamplitudedecaystautau (double m1, double m2, double m3, double mWboson, double theta, double beta, DoubleMatrix & mixNeut, double g, double gp, int oneortwo,  int neutralino) /// m2 must be tau (i.e. lepton) mass
{

  double amplitudeW, squareplus, squareminus, lambda, ftau=0, alphatilda=0, betatilda=0, a=0, b=0, factor1=0, factor2=0;

  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaystautau\n");
      errorflag = -1;
    }
    
    ftau = g*m2/(pow(2,0.5)*mWboson*cos(beta));
    if (oneortwo == 1) /// we are decaying into a stau1
      {
	alphatilda = 1/(pow(2,0.5))*sin(theta)*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1)) + ftau*mixNeut(neutralino,3)*cos(theta);
	betatilda =  pow(2,0.5)*gp*mixNeut(neutralino,1)*-cos(theta) + ftau*mixNeut(neutralino,3)*sin(theta);
      }
    else if (oneortwo ==2) /// we are decaying into a stau2
      {
	alphatilda = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*-cos(theta) + ftau*mixNeut(neutralino,3)*sin(theta);
	betatilda = -pow(2,0.5)*gp*mixNeut(neutralino,1)*sin(theta) - ftau*mixNeut(neutralino,3)*cos(theta);
      }
    else {
       throw("problem: oneortwo must be 1 or 2 in neutralinoamplitudedecaystautau\n"); 
       errorflag = -1;
    }

    a = 0.5*(alphatilda + betatilda);
    b = 0.5*(betatilda - alphatilda);
    factor1 = (pow(m1+m2,2)-pow(m3,2))/pow(m1,2);
    factor2 = (pow(m1-m2,2)-pow(m3,2))/pow(m1,2);

    amplitudeW = fabs(m1)*lambda/(16*PI)*(pow(a,2)*factor1 + pow(b,2)*factor2);
  }
  return amplitudeW;
}



double neutralinoamplitudedecaycharginoWboson (double m1, double m2, double m3, double g, double thetaL, double thetaR, DoubleMatrix & mixNeut, int neutralino,  int chargino) /// m2 must be W boson mass (expect to be pole mass 80.4...), neutralino is i in T&B whilst chargino is j
{

  double amplitudeW, squareplus, squareminus, squarecombo1=0, squarecombo2=0, lambda, X=0, Y=0;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+fabs(m3))/m1,2);
    squareminus = 1 - pow((m2-fabs(m3))/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaycharginoWboson\n");
      errorflag = -1;
    }    
  
    squarecombo1 = pow(m1,2) + pow(m3,2) - pow(m2,2);
    squarecombo2 = (pow(pow(m1,2) - pow(m3,2),2) - pow(m2,4))/pow(m2,2);
    
    if (chargino == 1) {
      X = 0.5*((cos(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) - sin(thetaR)*mixNeut(neutralino,2)) - cos(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - sin(thetaL)*mixNeut(neutralino,2));
      Y = 0.5*(-(cos(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) - sin(thetaR)*mixNeut(neutralino,2)) - cos(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - sin(thetaL)*mixNeut(neutralino,2));
	}
      
    else if (chargino == 2) {
      X = 0.5*((-sin(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) - cos(thetaR)*mixNeut(neutralino,2)) + sin(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - cos(thetaL)*mixNeut(neutralino,2));
      Y = 0.5*((sin(thetaR)*mixNeut(neutralino,4)/(pow(2,0.5)) + cos(thetaR)*mixNeut(neutralino,2)) + sin(thetaL)*mixNeut(neutralino,3)/(pow(2,0.5)) - cos(thetaL)*mixNeut(neutralino,2));
    }
    else {
      throw("problem: chargino must be 1 or 2 in neutralinoamplitudedecaycharginoWboson\n");
      errorflag = -1;
    }
    amplitudeW = pow(g,2)/(16*PI*fabs(m1))*lambda*((pow(X,2)+pow(Y,2))*(squarecombo1+squarecombo2) - 6*(pow(X,2) - pow(Y,2))*m1*m3);
      
  }
  return amplitudeW;
}


double neutralinoamplitudedecaycharginoHplus (double m1, double m2, double m3, double g, double gp, double beta, double thetaL, double thetaR, DoubleMatrix & mixNeut, int neutralino,  int chargino) /// m2 must be Hplus mass, neutralino is i in T&B whilst chargino is j
{
  
  double amplitudeW, squareplus, squareminus, squarecombo1=0, lambda, A1=0, A2=0, A3=0, A4=0,a=0, b=0;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
     amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaycharginoHplus\n");
      errorflag = -1;
    }    
    
    squarecombo1 = pow(m1,2) + pow(m3,2) - pow(m2,2);

    A1 = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*sin(thetaR) - g*mixNeut(neutralino,4)*cos(thetaR);
    A2 = -1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*cos(thetaR) - g*mixNeut(neutralino,4)*sin(thetaR);
    A3 = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*sin(thetaL) + g*mixNeut(neutralino,3)*cos(thetaL);
    A4 = -1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*cos(thetaL) + g*mixNeut(neutralino,3)*sin(thetaL);
          
    if (chargino == 1) {
      a = 0.5*(-cos(beta)*A2 + sin(beta)*A4);
      b = 0.5*(-cos(beta)*A2 - sin(beta)*A4);
    }
     
    else if (chargino == 2) {
      a = 0.5*(-cos(beta)*A1 + sin(beta)*A3);
      b = 0.5*(-cos(beta)*A1 - sin(beta)*A3);
    }
    else {
      throw("problem: chargino must be 1 or 2 in neutralinoamplitudedecaycharginoHplus\n");
      errorflag = -1;
    }
    amplitudeW = lambda/(16*PI*fabs(m1))*((pow(a,2)+pow(b,2))*squarecombo1 + 2*(pow(a,2) - pow(b,2))*m1*m3);
  }
  return amplitudeW;
}


double neutralinoamplitudedecayneutralinoZboson (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, int ineutralino,  int fneutralino) /// m2 must be Z mass, ineutralino is i in T&B whilst fneutralino is j
{
  
  double amplitudeW, squareplus, squareminus, squarecombo1=0, squarecombo2=0, lambda, Wij=0;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayneutralinoZboson\n");
      errorflag = -1;
    }    
    
    squarecombo1 = pow(m1,2) + pow(m3,2) - pow(m2,2);
    squarecombo2 = (pow(pow(m1,2)-pow(m3,2),2) -pow(m2,4))/(pow(m2,2));
    
    Wij = 0.25*pow(pow(g,2)+pow(gp,2),0.5)*(mixNeut(ineutralino,4)*mixNeut(fneutralino,4) - mixNeut(ineutralino,3)*mixNeut(fneutralino,3));

    amplitudeW = pow(Wij,2)*lambda/(4*PI*fabs(m1))*(squarecombo1 + squarecombo2 +6*m1*m3);
    }
  return amplitudeW;
}

      
double neutralinoamplitudedecayneutralinoneutHiggs (double m1, double m2, double m3, double g, double gp, DoubleMatrix & mixNeut, double mixingangle, int ineutralino,  int fneutralino, char phi) /// m2 must be phi mass, ineutralino is i in T&B whilst fneutralino is j
{

  double amplitudeW=0, squareplus, squareminus, squarecombo=0, lambda, Xij=0, Xji=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    squarecombo = pow(m1,2) + pow(m3,2) - pow(m2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayneutralinoneutHiggs\n");
      errorflag = -1;
    }    
        
    if(phi == 'h') /// here mixingangle is alpha
      {
	Xij = -0.5*(mixNeut(ineutralino,3)*-sin(mixingangle) - mixNeut(ineutralino,4)*cos(mixingangle))*(-g*mixNeut(fneutralino,2) + gp*mixNeut(fneutralino,1));
	Xji = -0.5*(mixNeut(fneutralino,3)*-sin(mixingangle) - mixNeut(fneutralino,4)*cos(mixingangle))*(-g*mixNeut(ineutralino,2) + gp*mixNeut(ineutralino,1));	
	amplitudeW = pow(Xij+Xji,2)*lambda/(16*PI*fabs(m1))*(squarecombo + 2*m1*m3);
      }
    
    else if (phi == 'H') /// here mixingangle is alpha
      {
	Xij = -0.5*(mixNeut(ineutralino,3)*cos(mixingangle) - mixNeut(ineutralino,4)*sin(mixingangle))*(-g*mixNeut(fneutralino,2) + gp*mixNeut(fneutralino,1));
	Xji = -0.5*(mixNeut(fneutralino,3)*cos(mixingangle) - mixNeut(fneutralino,4)*sin(mixingangle))*(-g*mixNeut(ineutralino,2) + gp*mixNeut(ineutralino,1));
	amplitudeW = pow(Xij+Xji,2)*lambda/(16*PI*fabs(m1))*(squarecombo + 2*m1*m3);
      }
    
    else if (phi == 'A') /// here mixingangle is beta
      {
	Xij = 0.5*(mixNeut(ineutralino,3)*sin(mixingangle) - mixNeut(ineutralino,4)*cos(mixingangle))*(-g*mixNeut(fneutralino,2) + gp*mixNeut(fneutralino,1));
	Xji = 0.5*(mixNeut(fneutralino,3)*sin(mixingangle) - mixNeut(fneutralino,4)*cos(mixingangle))*(-g*mixNeut(ineutralino,2) + gp*mixNeut(ineutralino,1));
	amplitudeW = pow(Xij+Xji,2)*lambda/(16*PI*fabs(m1))*(squarecombo - 2*m1*m3);
      }
    else { 
      throw("problem: phi must be h or H or A in neutralinoamplitudedecayneutralinoneutHiggs\n");
      errorflag = -1;
    }
  }
  return amplitudeW;
}
double higgslorHamplitudedecayquarkantiquark (double m1, double m2, double g, double alpha, double beta, double mWboson, int uord, char lorH, DoubleMatrix & CPEMix, bool NMSSMmodel, bool QCD, double alphas) /// uord indicates if it's an up type quark (1) or down type quark (0) to choose which trig functions to act on the mixing angles (which parts of the mixing matrices), and int lorH tells the program if it's a light higgs (l) or heavy higgs (H) decaying in order to change the trig functions acting on the mixing angles; note can also use this formula for decays of higgs to leptons as these are in this sense down-type
{

  double amplitudeW=0, squarecombo1=0, angular=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }

  else { 
    squarecombo1 = 1 - 4*pow(m2/m1,2);
    if (lorH == 'l') {
	if (uord == 1) { 
	  if (NMSSMmodel == false) {
	    angular = pow(cos(alpha)/sin(beta),2);
	  }
	  else if (NMSSMmodel == true) {
	    angular = pow(CPEMix(1,1)/sin(beta),2);
	  }
	}
	else if (uord == 0) {
	  if (NMSSMmodel == false) {
	    angular = pow(-sin(alpha)/cos(beta),2);
	  }
	  else if (NMSSMmodel == true) {
	    angular = pow(CPEMix(1,2)/cos(beta),2);
	  }
	}
	else {
	  throw("problem: uord must be 1 or 0 in higgslorHamplitudedecayquarkantiquark\n");
	  errorflag = -1;
	}
      }
    else if (lorH == 'H') {
	if (uord == 1) {
	  if (NMSSMmodel == false) {
	    angular = pow(-sin(alpha)/sin(beta),2);
	  }
	  else if (NMSSMmodel ==true) {
	    angular = pow(CPEMix(2,1)/sin(beta),2);
	  }
	}
	else if (uord == 0) {
	  if (NMSSMmodel == false) {
	    angular = pow(cos(alpha)/cos(beta),2);
	  }
	  else if (NMSSMmodel == true) {
	    angular = pow(CPEMix(2,2)/cos(beta),2);
	  }
	}
	else {
	  throw("problem: uord must be 1 or 0 in higgslorHamplitudedecayquarkantiquark\n");
	  errorflag = -1;
	}
    }

    else if (NMSSMmodel ==true && lorH == 'M') ///M for max i.e. H3 heaviest higgs in NMSSM
      {
	if (uord == 1) /// u
	  {
	    angular = pow(CPEMix(3,1)/sin(beta),2);
	  }
	else if (uord == 0) /// d
	  {
	    angular = pow(CPEMix(3,2)/cos(beta),2);
	  }
	else {
	  throw("problem: uord must be 1 or 0 in higgslorHamplitudedecayquarkantiquark\n");
	  errorflag = -1;
	}
      }
    else {
      throw("problem: lorH must be h or H or M (i.e. H3), where M is only for NMSSM, in higgslorHamplitudedecayquarkantiquark\n");
      errorflag = -1;
    }

    amplitudeW = GFosqrt2*3*m1/(4*PI)*pow(m2,2)*angular*pow(squarecombo1,1.5);

    if (QCD == true) {
      double higgsCPevenamplitudedecayqqbarQCDcorrections (double amplitude, double alphas, double x);
      double x = 0;
      x = m2/m1;
      amplitudeW = higgsCPevenamplitudedecayqqbarQCDcorrections(amplitudeW, alphas, x);
    }
    else {
      amplitudeW = amplitudeW;
    }
  }
  return amplitudeW;
}   


double higgsCPevenamplitudedecayqqbarQCDcorrections (double amplitude, double alphas, double x) {
  double beta = 0, A = 0, amplitudeW = 0, corrfactor = 0;
  beta = pow(1-4*pow(x,2),0.5);
  A = (1+pow(beta,2))*(4*dilog((1-beta)/(1+beta)) + 2*dilog((beta-1)/(beta+1)) - 3*log((1+beta)/(1-beta))*log(2/(1+beta)) - 2*log((1+beta)/(1-beta))*log(beta)) - 3*beta*log(4/(1-pow(beta,2))) - 4*beta*log(beta);
  corrfactor = 4*alphas/(3*PI)*(A/beta + (3+34*pow(beta,2)-13*pow(beta,4))/(16*pow(beta,3))*log((1+beta)/(1-beta)) + 3/(8*pow(beta,2))*(7*pow(beta,2)-1));
  amplitudeW = amplitude*(1+corrfactor);
  return amplitudeW;
}




double higgsAamplitudedecayquarkantiquark (double m1, double m2, double g, double beta, double mWboson, int uord, bool QCD, double alphas) /// uord indicates if it's an up type quark (1) or down type quark (0) to choose which trig functions to act on the mixing angles (which parts of the mixing matrices), note can also use this formula for decays of higgs to leptons as these are in this sense down-type
{

  double amplitudeW=0, squarecombo1=0, angular=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }

  else { 
    squarecombo1 = 1 - 4*pow(m2/m1,2);
    
    if (uord == 1) { 
      angular = pow(1/(tan(beta)),2);
    }
    else if (uord == 0) {
      angular = pow(tan(beta),2);
    }
    else {
      throw("problem: uord must be 1 or 0 in higgsAamplitudedecayquarkantiquark\n");
      errorflag = -1;
    }
    amplitudeW = 3*GFosqrt2/(4*PI)*angular*(pow(m2,2))*m1*pow(squarecombo1,0.5);

    if (QCD == true) {
      double higgsCPoddamplitudedecayqqbarQCDcorrections (double amplitude, double alphas, double x);
      double x = 0;
      x = m2/m1;
      amplitudeW = higgsCPoddamplitudedecayqqbarQCDcorrections(amplitudeW, alphas, x);
    }
    else {
      amplitudeW = amplitudeW;
    }
  }
  
  return amplitudeW;
}

double higgsCPoddamplitudedecayqqbarQCDcorrections (double amplitude, double alphas, double x) {
  double beta = 0, A = 0, amplitudeW = 0, corrfactor = 0;
  beta = pow(1-4*pow(x,2),0.5);
  A = (1+pow(beta,2))*(4*dilog((1-beta)/(1+beta)) + 2*dilog((beta-1)/(beta+1)) - 3*log((1+beta)/(1-beta))*log(2/(1+beta)) - 2*log((1+beta)/(1-beta))*log(beta)) - 3*beta*log(4/(1-pow(beta,2))) - 4*beta*log(beta);
  corrfactor = 4*alphas/(3*PI)*(A/beta + (19+2*pow(beta,2)+3*pow(beta,4))/(16*beta)*log((1+beta)/(1-beta)) + 3./8*(7-pow(beta,2)));
  amplitudeW = amplitude*(1+corrfactor);
  return amplitudeW;
}

double higgsAamplitudedecayquarkantiquarkNMSSM (double m1, double m2, double beta, DoubleMatrix & CPOMix, int uord, int higgs, bool QCD, double alphas) /// uord indicates if it's an up type quark (1) or down type quark (0) to choose which trig functions to act on the mixing angles (which parts of the mixing matrices), note can also use this formula for decays of higgs to leptons as these are in this sense down-type
{

  double amplitudeW=0, squarecombo1=0, angular=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }

  else { 
    squarecombo1 = 1 - 4*pow(m2/m1,2);
    
    if (uord == 1) { 
      angular = pow(CPOMix(higgs,1)/(sin(beta)),2);
    }
    else if (uord == 0) {
      angular = pow(CPOMix(higgs,2)/cos(beta),2);
    }
    else {
      throw("problem: uord must be 1 or 0 in higgsAamplitudedecayquarkantiquarkNMSSM\n");
      errorflag = -1;
    }
    amplitudeW = 3*GFosqrt2/(4*PI)*angular*(pow(m2,2))*m1*pow(squarecombo1,0.5);

    if (QCD == true) {
      double higgsCPoddamplitudedecayqqbarQCDcorrections (double amplitude, double alphas, double x);
      double x = 0;
      x = m2/m1;
      amplitudeW = higgsCPoddamplitudedecayqqbarQCDcorrections(amplitudeW, alphas, x);
    }
    else {
      amplitudeW = amplitudeW;
    }
  }
  
  return amplitudeW;
}


double higgsphiamplitudedecayneutralinoneutralino (double m1, double m2, double m3, double g, double tanthetaW, double mixingangle, DoubleMatrix & mixNeut, int ineutralino, int fneutralino, char phi) /// phi tells it whether a "h", "H" or "A" is decaying 
{

  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, Xij=0, Xji=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);        
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsphiamplitudedecayneutralinoneutralino\n");
      errorflag = -1;
    }    
     
    if(phi == 'h') /// here mixingangle is alpha
      {
	Xij = -0.5*(mixNeut(ineutralino,3)*-sin(mixingangle) - mixNeut(ineutralino,4)*cos(mixingangle))*(-mixNeut(fneutralino,2) + tanthetaW*mixNeut(fneutralino,1));
	Xji = -0.5*(mixNeut(fneutralino,3)*-sin(mixingangle) - mixNeut(fneutralino,4)*cos(mixingangle))*(-mixNeut(ineutralino,2) + tanthetaW*mixNeut(ineutralino,1)); ///these are actually Xij/g and Xji/g really
	if (ineutralino == fneutralino) {
	  amplitudeW = 0.5*pow(g,2)*fabs(m1)/(8*PI)*(pow(Xij+Xji,2))*squareplus*lambda;
	}
	else 
	  amplitudeW = pow(g,2)*fabs(m1)/(8*PI)*(pow(Xij+Xji,2))*squareplus*lambda;
      }
    
    else if (phi == 'H') /// here mixingangle is alpha
      {
	Xij = -0.5*(mixNeut(ineutralino,3)*cos(mixingangle) - mixNeut(ineutralino,4)*sin(mixingangle))*(-mixNeut(fneutralino,2) + tanthetaW*mixNeut(fneutralino,1));
	Xji = -0.5*(mixNeut(fneutralino,3)*cos(mixingangle) - mixNeut(fneutralino,4)*sin(mixingangle))*(-mixNeut(ineutralino,2) + tanthetaW*mixNeut(ineutralino,1));
	if (ineutralino == fneutralino) {
	  amplitudeW = 0.5*pow(g,2)*fabs(m1)/(8*PI)*(pow(Xij+Xji,2))*squareplus*lambda;
	}
	else 
	  amplitudeW = pow(g,2)*fabs(m1)/(8*PI)*(pow(Xij+Xji,2))*squareplus*lambda;
      }
    
    else if (phi == 'A') /// here mixingangle is beta
      {
	Xij = 0.5*(mixNeut(ineutralino,3)*sin(mixingangle) - mixNeut(ineutralino,4)*cos(mixingangle))*(-mixNeut(fneutralino,2) + tanthetaW*mixNeut(fneutralino,1));
	Xji = 0.5*(mixNeut(fneutralino,3)*sin(mixingangle) - mixNeut(fneutralino,4)*cos(mixingangle))*(-mixNeut(ineutralino,2) + tanthetaW*mixNeut(ineutralino,1));
	if (ineutralino == fneutralino) {
	  amplitudeW = 0.5*pow(g,2)*fabs(m1)/(8*PI)*(pow(Xij+Xji,2))*squareminus*lambda;
	}
	else {
	  amplitudeW = pow(g,2)*fabs(m1)/(8*PI)*(pow(Xij+Xji,2))*squareminus*lambda;
	}
      }
    else {
      throw("problem: phi must be h or H or A in higgsphiamplitudedecayneutralinoneutralino\n");
      errorflag = -1;
    }
  }

  return amplitudeW;
}
     


double higgsAamplitudedecayneutralinoneutralinoNMSSM (double m1, double m2, double m3, double g, double tanthetaW, double lam, double kappa, DoubleMatrix & CPOMix, DoubleMatrix & mixNeut, int ineutralino, int jneutralino, int pseudoscalar)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, delta = 0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecayneutralinoneutralinoNMSSM\n");
      errorflag = -1;
    }    

    coupling = lam/(pow(2,0.5))*(CPOMix(pseudoscalar,1)*(mixNeut(ineutralino,3)*mixNeut(jneutralino,5) + mixNeut(ineutralino,5)*mixNeut(jneutralino,3)) + CPOMix(pseudoscalar,2)*(mixNeut(ineutralino,4)*mixNeut(jneutralino,5) + mixNeut(ineutralino,5)*mixNeut(jneutralino,4)) + CPOMix(pseudoscalar,3)*(mixNeut(ineutralino,3)*mixNeut(jneutralino,4)+mixNeut(jneutralino,3)*mixNeut(ineutralino,4))) - pow(2,0.5)*kappa*CPOMix(pseudoscalar,3)*mixNeut(ineutralino,5)*mixNeut(jneutralino,5) - tanthetaW*g/2*(-CPOMix(pseudoscalar,1)*(mixNeut(ineutralino,1)*mixNeut(jneutralino,4) + mixNeut(ineutralino,4)*mixNeut(jneutralino,1)) + CPOMix(pseudoscalar,2)*(mixNeut(ineutralino,1)*mixNeut(jneutralino,3) + mixNeut(ineutralino,3)*mixNeut(jneutralino,1))) - g/2*(CPOMix(pseudoscalar,1)*(mixNeut(ineutralino,2)*mixNeut(jneutralino,4) + mixNeut(ineutralino,4)*mixNeut(jneutralino,2)) - CPOMix(pseudoscalar,2)*(mixNeut(ineutralino,2)*mixNeut(jneutralino,3) + mixNeut(ineutralino,3)*mixNeut(jneutralino,2)));

    if (ineutralino == jneutralino) { delta = 1;}
    else if (ineutralino != jneutralino) { delta = 2;}

    amplitudeW = m1/(16*PI)*squareminus*lambda*pow(coupling,2)*delta;

  }
  return amplitudeW;
}


double higgsphiamplitudedecaysamechargino (double m1, double m2, double g, double thetaL, double thetaR, double alpha, double beta, int chargino, char phi) /// phi tells it whether a "h", "H" or "A" is decaying
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, S=0, index=0;
  DoubleVector higgsphisamecharginocouplings(double alpha, double beta, double thetaL, double thetaR);
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); /// so ofcourse squarminus is just 1, just keeping link with other amplitudes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsphiamplitudedecaysamechargino\n");
      errorflag = -1;
    }    
    
    DoubleVector SWcoupling(6);
     for (int i=1; i<=6; i++) {
     SWcoupling(i) = 0;
   }
     
     SWcoupling = higgsphisamecharginocouplings(alpha, beta, thetaL, thetaR);
     
     if (phi == 'h' && chargino == 1) {
       S = SWcoupling(1);
       index = 3;
     }
     else if (phi == 'h' && chargino == 2) {
       S = SWcoupling(2);
       index = 3;
     }
     else if (phi == 'H' && chargino == 1) {
       S = SWcoupling(3);
       index = 3;
     }
     else if (phi == 'H' && chargino == 2) {
       S = SWcoupling(4);
       index = 3;
     }
     else if (phi == 'A' && chargino == 1) {
       S = SWcoupling(5);
       index = 1;
     }
     else if (phi == 'A' && chargino == 2) {
       S = SWcoupling(6);
       index = 1;
     }
     else {
       throw("problem: phi must be h or H or A and chargino must be 1 or 2 in higgsphiamplitudedecaysamechargino\n");
       errorflag = -1;
     }    
    amplitudeW = pow(g,2)/(4*PI)*pow(S,2)*fabs(m1)*pow(lambda,index);
  }  
  return amplitudeW; 
}


double higgsphiamplitudedecaysamecharginoNMSSM (double m1, double m2, double g, double thetaL, double thetaR, double lam, DoubleMatrix & CPEMix, int chargino, int higgs)
{

  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); /// so ofcourse squarminus is just 1, just keeping link with other amplitudes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsphiamplitudedecaysamecharginoNMSSM\n");
      errorflag = -1;
    }    

    if (chargino == 1) {
      coupling = (lam/(pow(2,0.5))*CPEMix(higgs,3)*cos(thetaL)*cos(thetaR) + g/(pow(2,0.5))*(CPEMix(higgs,1)*sin(thetaL)*cos(thetaR) + CPEMix(higgs,2)*cos(thetaL)*sin(thetaR)));
    }
    else if (chargino == 2) {
      coupling = (lam/(pow(2,0.5))*CPEMix(higgs,3)*sin(thetaL)*sin(thetaR) - g/(pow(2,0.5))*(CPEMix(higgs,1)*cos(thetaL)*sin(thetaR) + CPEMix(higgs,2)*sin(thetaL)*cos(thetaR)));
    }
    else {
      throw("problem: phi must be h or H or A in higgsphiamplitudedecaysamecharginoNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = m1/(8*PI)*pow(lambda,3)*pow(coupling,2);

  }
  return amplitudeW;
}


double higgsAamplitudedecaysamecharginoNMSSM (double m1, double m2, double g, double thetaL, double thetaR, double alpha, double lam, DoubleMatrix & CPOMix, int chargino, int pseudoscalar)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, S=0;

  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); /// so ofcourse squarminus is just 1, just keeping link with other amplitudes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecaysamecharginoNMSSM\n");
      errorflag = -1;
    }    

    if (chargino == 1) {
      S = (lam/(pow(2,0.5))*CPOMix(pseudoscalar,3)*cos(thetaL)*cos(thetaR) - g/(pow(2,0.5))*(CPOMix(pseudoscalar,1)*sin(thetaL)*cos(thetaR) + CPOMix(pseudoscalar,2)*cos(thetaL)*sin(thetaR)));
    }
    else if (chargino == 2) {
      S = (lam/(pow(2,0.5))*CPOMix(pseudoscalar,3)*sin(thetaL)*sin(thetaR) + g/(pow(2,0.5))*(CPOMix(pseudoscalar,1)*cos(thetaL)*sin(thetaR) + CPOMix(pseudoscalar,2)*sin(thetaL)*cos(thetaR))); 
    }
    else { 
      throw("problem: chargino must be 1 or 2 in higgsAamplitudedecaysamecharginoNMSSM\n");
      errorflag = -1;
    }
    amplitudeW = m1/(8*PI)*lambda*pow(S,2);

  }
  return amplitudeW;
}

double higgsphiamplitudedecaydiffcharginoNMSSM (double m1, double m2, double m3, double g, double thetaL, double thetaR, double lam, DoubleMatrix & CPEMix, int higgs)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling1=0, coupling2=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsphiamplitudedecaydiffcharginoNMSSM\n");
      errorflag = -1;
    }  

    coupling1 = (lam/(pow(2,0.5))*CPEMix(higgs,3)*cos(thetaL)*sin(thetaR) + g/(pow(2,0.5))*(CPEMix(higgs,1)*sin(thetaL)*sin(thetaR) - CPEMix(higgs,2)*cos(thetaL)*cos(thetaR)));
    coupling2 = (lam/(pow(2,0.5))*CPEMix(higgs,3)*sin(thetaL)*cos(thetaR) - g/(pow(2,0.5))*(CPEMix(higgs,1)*cos(thetaL)*cos(thetaR) - CPEMix(higgs,2)*sin(thetaL)*sin(thetaR)));

    amplitudeW = m1/(16*PI)*lambda*((pow(coupling1,2)+pow(coupling2,2))*0.5*(squareplus+squareminus) + coupling1*coupling2*(squareminus-squareplus));
  }
  return amplitudeW;
}
 

double higgsphiamplitudedecaydifchargino (double m1, double m2, double m3, double g, double thetaL, double thetaR, double alpha, double beta, char phi) /// phi tells it whether a "h", "H" or "A" is decaying
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, S=0, P=0;
  DoubleVector higgsphidifcharginocouplings(double alpha, double beta, double thetaL, double thetaR);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2); 
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsphiamplitudedecaydifchargino\n");
      errorflag = -1;
    }  
    
    DoubleVector SPWcoupling(6);
     for (int i=1; i<=6; i++) {
     SPWcoupling(i) = 0;
   }
     
     SPWcoupling = higgsphidifcharginocouplings(alpha, beta, thetaL, thetaR);
     
     if (phi == 'h') {
       S = SPWcoupling(1);
       P = SPWcoupling(2);
     }
     else if (phi == 'H') {
       S = SPWcoupling(3);
       P = SPWcoupling(4);
     }
     else if (phi == 'A') {
       S = SPWcoupling(5);
       P = SPWcoupling(6);
     }
     else {
       throw("problem: phi must be h or H or A in higgsphiamplitudedecaydifchargino\n");
       errorflag = -1;
     }     
     amplitudeW = pow(g,2)/(16*PI)*fabs(m1)*lambda*(pow(S,2)*squareplus + pow(P,2)*squareminus);
  }  
  
  return amplitudeW; 
};

double higgsAamplitudedecaydifcharginoNMSSM (double m1, double m2, double m3, double g, double thetaL, double thetaR, double alpha, double lam, DoubleMatrix & CPOMix, int pseudoscalar)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, C1 = 0, C2 = 0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2); 
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecaydifcharginoNMSSM\n");
      errorflag = -1;
    }  

    C1 = (lam/pow(2,0.5)*CPOMix(pseudoscalar,3)*cos(thetaL)*sin(thetaR) - pow(2,-0.5)*g*(CPOMix(pseudoscalar,1)*sin(thetaL)*sin(thetaR) - CPOMix(pseudoscalar,2)*cos(thetaL)*cos(thetaR)));

    C2 = (lam/pow(2,0.5)*CPOMix(pseudoscalar,3)*sin(thetaL)*cos(thetaR) - pow(2,-0.5)*g*(CPOMix(pseudoscalar,1)*-cos(thetaL)*cos(thetaR) + CPOMix(pseudoscalar,2)*sin(thetaR)*sin(thetaL)));
    
    amplitudeW = lambda/(16*PI)*m1*((pow(C1,2) + pow(C2,2))*0.5*(squareplus+squareminus) + 4*C1*C2*0.25*(squareminus-squareplus));

  }
  return amplitudeW;
}


double higgshamplitudedecayAA (double m1, double m2, double g, double gp, double alpha, double beta, double mWboson) ///calculates partial width for h->AA
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); ///obviously 1, just for comparison and consistency with other decay modes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecayAA\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling = g*mWboson/(4*pow(costhetaW,2))*sin(beta+alpha)*cos(2*beta);
    
    amplitudeW = pow(coupling,2)/(8*PI*fabs(m1))*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecayhh (double m1, double m2, double g, double gp, double alpha, double beta, double mWboson) ///calculates partial width for h->hh
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); ///obviously 1, just for comparison and consistency with other decay modes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecayhh\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling = g*mWboson/(4*pow(costhetaW,2))*(cos(2*alpha)*cos(beta+alpha) - 2*sin(2*alpha)*sin(beta+alpha));
    
    amplitudeW = pow(coupling,2)/(8*PI*fabs(m1))*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecayAA (double m1, double m2, double g, double gp, double alpha, double beta, double mWboson) ///calculates partial width for H->AA
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); ///obviously 1, just for comparison and consistency with other decay modes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecayAA\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling = -g*mWboson/(4*pow(costhetaW,2))*(cos(beta+alpha)*cos(2*beta));
    
    amplitudeW = pow(coupling,2)/(8*PI*fabs(m1))*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecayHplusHminus (double m1, double m2, double g, double gp, double alpha, double beta, double mWboson) ///calculates partial width for H->H+H-
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m2)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m2)/m1,2);
    squareminus = 1 - pow((m2-m2)/m1,2); ///obviously 1, just for comparison and consistency with other decay modes
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecayHplusHminus\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling = g*mWboson*(cos(beta-alpha) - cos(beta+alpha)*cos(2*beta)/(2*pow(costhetaW,2)));
    
    amplitudeW = pow(coupling,2)/(16*PI*fabs(m1))*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecayhiggsAZboson (double m1, double m2, double m3, double g, double gp, double alpha, double beta) ///calculates partial width for h->AZ, m2 must be Zboson mass
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecayhiggsAZboson\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling =(g/(costhetaW))*(cos(beta-alpha));
    
    amplitudeW = pow(coupling,2)*fabs(pow(m1,3))/(64*PI*pow(m2,2))*pow(lambda,3);
  }
  return amplitudeW;
}


double higgsHamplitudedecayhiggsAZboson (double m1, double m2, double m3, double g, double gp, double alpha, double beta) ///calculates partial width for H->AZ, m2 must be Zboson mass
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecayhiggsAZboson\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling =(g/(costhetaW))*(sin(beta-alpha));
    
    amplitudeW = pow(coupling,2)*fabs(pow(m1,3))/(64*PI*pow(m2,2))*pow(lambda,3);
  }
  return amplitudeW;
}



double higgsAamplitudedecayhiggshZboson (double m1, double m2, double m3, double g, double gp, double alpha, double beta) ///calculates partial width for A->hZ, m2 must be Zboson mass
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecayhiggshZboson\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling =(g/(costhetaW))*(cos(beta-alpha));
    
    amplitudeW = pow(coupling,2)*fabs(pow(m1,3))/(64*PI*pow(m2,2))*pow(lambda,3);
  }
  return amplitudeW;
}




double higgsAamplitudedecayhiggsHZboson (double m1, double m2, double m3, double g, double gp, double alpha, double beta) ///calculates partial width for A->HZ, m2 must be Zboson mass
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, costhetaW=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecayhiggsHZboson\n");
      errorflag = -1;
    }  
    
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    coupling =(g/(costhetaW))*(sin(beta-alpha));
    
    amplitudeW = pow(coupling,2)*fabs(pow(m1,3))/(64*PI*pow(m2,2))*pow(lambda,3);
  }
  return amplitudeW;
}


double higgsAamplitudedecayhiggshorHZbosonNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double thetaA, DoubleMatrix & CPEMix, int pseudoscalar, int higgs) ///m2 must be Z mass
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecayhiggshorHZbosonNMSSM\n");
      errorflag = -1;
    }  
    
    if (pseudoscalar == 1 && higgs == 1) {
      coupling = (CPEMix(1,1)*cos(beta) - CPEMix(1,2)*sin(beta))*cos(thetaA);
    }
    else if (pseudoscalar == 2 && higgs == 1) {
      coupling = (CPEMix(1,1)*cos(beta) - CPEMix(1,2)*sin(beta))*sin(thetaA);
    }
    else if (pseudoscalar == 1 && higgs == 2) {
      coupling = (CPEMix(2,1)*cos(beta) - CPEMix(2,2)*sin(beta))*cos(thetaA);
    }
    else if (pseudoscalar == 2 && higgs == 2) {
      coupling = (CPEMix(2,1)*cos(beta) - CPEMix(2,2)*sin(beta))*sin(thetaA);
    }
    else if (pseudoscalar == 1 && higgs == 3) {
      coupling = (CPEMix(3,1)*cos(beta) - CPEMix(3,2)*sin(beta))*cos(thetaA);
    }
    else if (pseudoscalar == 2 && higgs == 3) {
      coupling = (CPEMix(3,1)*cos(beta) - CPEMix(3,2)*sin(beta))*sin(thetaA);
    }
    else { 
      throw("problem: higgs must be 1 or 2 or 3 and pseudoscalar must be 1 or 2 in higgsAamplitudedecayhiggshorHZbosonNMSSM\n");
      errorflag = -1;
    }

    amplitudeW = GFosqrt2*pow(m1,3)/(8*PI)*pow(lambda,3)*pow(coupling,2);
  }
  return amplitudeW;
}



double higgshamplitudedecay2squarksamehand (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mupq, double mdownq, int sq) ///calculates partial width for h->squark squark with no mixing and squarks of same handedness, therefore for first two generations, int sq tells the function which squarks it's decaying into - uL, dL, uR, dR for sq = 1,2,3,4 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mupq, double mdownq);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2squarksamehand\n");
      errorflag = -1;
    }  
     DoubleVector hsqsqcoupling(4);
     for (int i=1; i<=4; i++) {
     hsqsqcoupling(i) = 0;
     }

     hsqsqcoupling = higgshsquarksamehandcouplings(mWboson, g, gp, alpha, beta, mupq, mdownq);
     if (sq == 1) {
      coupling = hsqsqcoupling(1);
    }
    else if (sq == 2) {
      coupling = hsqsqcoupling(2);
    }
    else if (sq == 3) {
      coupling = hsqsqcoupling(3);
    }
    else if (sq == 4) {
      coupling = hsqsqcoupling(4);
    }    
    else {
      throw("problem: sq must be 1, 2, 3, or 4 in higgshamplitudedecay2squarksamehand\n");
      errorflag = -1;
    }
    
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecay2squarksamehandNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mq, DoubleMatrix & CPEMix, int sq)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2squarksamehandNMSSM\n");
      errorflag = -1;
    }  

    if (sq == 1) ///uLuL
      {
	coupling = g*(mWboson*(0.5-pow(gp/g,2)/6)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)) - pow(mq,2)*CPEMix(1,1)/(mWboson*sin(beta)));
      }
    else if (sq == 2) ///dLdL
      {
	coupling = g*(mWboson*(-0.5-pow(gp/g,2)/6)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)) - pow(mq,2)*CPEMix(1,2)/(mWboson*cos(beta)));
      }
    else if (sq == 3) ///uRuR
      {
	coupling = g*(2*mWboson/3*pow(gp/g,2)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)) - pow(mq,2)*CPEMix(1,1)/(mWboson*sin(beta)));
      }
    else if (sq == 4) ///dRdR
      {
	coupling = g*(-mWboson/3*pow(gp/g,2)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)) - pow(mq,2)*CPEMix(1,2)/(mWboson*cos(beta)));
      }
    else {
      throw("problem: sq must be 1, 2, 3, or 4 in higgshamplitudedecay2squarksamehandNMSSM\n");
      errorflag = -1;
    }    
    amplitudeW = 3*lambda*pow(coupling,2)/(16*PI*m1);
  }
  return amplitudeW;
}

double higgshamplitudedecay2sleptonsamehandNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mq, DoubleMatrix & CPEMix, int sl)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2sleptonsamehandNMSSM\n");
      errorflag = -1;
    }  

    if (sl == 1) ///snuLsnuL - drop terms proportional to ml^2 here
      {
	coupling = g*(mWboson*(0.5+pow(gp/g,2)/2)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)));
      }
    else if (sl == 2) ///slLslL
      {
	coupling = g*(mWboson*(0.5-pow(gp/g,2)/2)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)));
      }
    else if (sl == 3) ///slRslR
      {
	coupling = g*(mWboson*pow(gp/g,2)*(sin(beta)*CPEMix(1,1) - cos(beta)*CPEMix(1,2)));
      }
    else {
      throw("problem: sl must be 1, 2, or 3 in higgshamplitudedecay2sleptonsamehandNMSSM\n");
      errorflag = -1;
    }    
    amplitudeW = lambda*pow(coupling,2)/(16*PI*m1);

  }
  return amplitudeW;
}


double higgsHamplitudedecay2sleptonsamehandNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mq, DoubleMatrix & CPEMix, int sl)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);

    if (squareplus*squareminus < 0) {
      throw("lambda will give nan in higgsHamplitudedecay2sleptonsamehandNMSSM");
      errorflag = -1;
    }  

    if (sl == 1) ///snuLsnuL - drop terms proportional to ml^2 here
      {
	coupling = g*(mWboson*(0.5+pow(gp/g,2)/2)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)));
      }
    else if (sl == 2) ///slLslL
      {
	coupling = g*(mWboson*(0.5-pow(gp/g,2)/2)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)));
      }
    else if (sl == 3) ///slRslR
      {
	coupling = g*(mWboson*pow(gp/g,2)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)));
      }
    else {
      throw("problem: sl must be 1, 2, or 3 in higgsHamplitudedecay2sleptonsamehandNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = lambda*pow(coupling,2)/(16*PI*m1);
  }
  return amplitudeW;
}

double higgsH3amplitudedecay2sleptonsamehandNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mq, DoubleMatrix & CPEMix, int sl)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsH3amplitudedecay2sleptonsamehandNMSSM\n");
      errorflag = -1;
    }  

    if (sl == 1) ///snuLsnuL - drop terms proportional to ml^2 here
      {
	coupling = g*(mWboson*(0.5+pow(gp/g,2)/2)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)));
      }
    else if (sl == 2) ///slLslL
      {
	coupling = g*(mWboson*(0.5-pow(gp/g,2)/2)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)));
      }
    else if (sl == 3) ///slRslR
      {
	coupling = g*(mWboson*pow(gp/g,2)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)));
      }
    else {
      throw("problem: sl must be 1, 2, or 3 in higgsH3amplitudedecay2sleptonsamehandNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = lambda*pow(coupling,2)/(16*PI*m1); 
  }
  return amplitudeW;
}

double higgshamplitudedecay2squarkdiffhand (double m1, double m2, double m3, double g, double alpha, double beta, double mWboson, double mupq, double mdownq, double greekmu, double Aup, double Adown, int sq) ///calculates partial width for h->squark squark with no mixing and squarks of different handedness, therefore for first two generations, int sq tells the function which squarks it's decaying into - uL, dL, uR, dR for sq = 1,2,3,4 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mupq, double mdownq, double greekmu, double Aup, double Adown);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2squarkdiffhand\n");
      errorflag = -1;
    }  

     DoubleVector hsqsqcoupling(2);
     for (int i=1; i<=2; i++) {
     hsqsqcoupling(i) = 0;
     }

     hsqsqcoupling = higgshsquarkdiffhandcouplings(mWboson, g, alpha, beta, mupq, mdownq, greekmu, Aup, Adown);
   
    if (sq == 1) {
      coupling = hsqsqcoupling(1);
    }
    else if (sq == 2) {
      coupling = hsqsqcoupling(2);
    }
    else {
      throw("problem: sq must be 1, or 2 in higgshamplitudedecay2squarkdiffhand\n");
      errorflag = -1;
    }
        
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecay2squarkdiffhandNMSSM (double m1, double m2, double m3, double g, double alpha, double beta, double mWboson,double mq, double Aq, double mueff, double lam, DoubleMatrix & CPEMix, int sq, int higgs)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2squarkdiffhandNMSSM\n");
      errorflag = -1;
    }  

    if (sq == 1) ///uLuR
      {
	coupling = mq*g/(2*mWboson*sin(beta))*(Aq*CPEMix(higgs,1) - mueff*CPEMix(higgs,2) - lam*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,3));
      }
    if (sq == 2) ///dLdR
      {
	coupling = mq*g/(2*mWboson*cos(beta))*(Aq*CPEMix(higgs,2) - mueff*CPEMix(higgs,1) - lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3));
      }
    else {
      throw("problem: sq must be 1, or 2 in higgshamplitudedecay2squarkdiffhandNMSSM\n");
      errorflag = -1;
    }
    amplitudeW = 3/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}



double higgsHamplitudedecay2squarksamehand (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mupq, double mdownq, int sq) ///calculates partial width for H->squark squark with no mixing and squarks of same handedness, therefore for first two generations, int sq tells the function which squarks it's decaying into - uL, dL, uR, dR for sq = 1,2,3,4 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mupq, double mdownq);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecay2squarksamehand\n");
      errorflag = -1;
    }  

     DoubleVector Hsqsqcoupling(4);
     for (int i=1; i<=4; i++) {
     Hsqsqcoupling(i) = 0;
     }

     Hsqsqcoupling = higgsHsquarksamehandcouplings(mWboson, g, gp, alpha, beta, mupq, mdownq);

    if (sq == 1) {
      coupling = Hsqsqcoupling(1);
    }
    else if (sq == 2) {
      coupling = Hsqsqcoupling(2);
    }
    else if (sq == 3) {
      coupling = Hsqsqcoupling(3);
    }
    else if (sq == 4) {
      coupling = Hsqsqcoupling(4);
    }    
    else {
      throw("problem: sq must be 1, 2, 3 or 4 in higgsHamplitudedecay2squarksamehand\n");
      errorflag = -1;
    }
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecay2squarksamehandNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mq, DoubleMatrix & CPEMix, int sq)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecay2squarksamehandNMSSM\n");
      errorflag = -1;
    }  

    if (sq == 1) ///uLuL
      {
	coupling = g*(mWboson*(0.5-pow(gp/g,2)/6)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)) - pow(mq,2)*CPEMix(2,1)/(mWboson*sin(beta)));
      }
    else if (sq == 2) ///dLdL
      {
	coupling = g*(mWboson*(-0.5-pow(gp/g,2)/6)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)) - pow(mq,2)*CPEMix(2,2)/(mWboson*cos(beta)));
      }
    else if (sq == 3) ///uRuR
      {
	coupling = g*(2*mWboson/3*pow(gp/g,2)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)) - pow(mq,2)*CPEMix(2,1)/(mWboson*sin(beta)));
      }
    else if (sq == 4) ///dRdR
      {
	coupling = g*(-mWboson/3*pow(gp/g,2)*(sin(beta)*CPEMix(2,1) - cos(beta)*CPEMix(2,2)) - pow(mq,2)*CPEMix(2,2)/(mWboson*cos(beta)));
      }
    else {
      throw("problem: sq must be 1, 2, 3 or 4 in higgsHamplitudedecay2squarksamehandNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = 3*lambda*pow(coupling,2)/(16*PI*m1); 
  }
  return amplitudeW;
}

double higgsH3amplitudedecay2squarksamehandNMSSM (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson,double mq, DoubleMatrix & CPEMix, int sq)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
    
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsH3amplitudedecay2squarksamehandNMSSM\n");
      errorflag = -1;
    }  
    
    if (sq == 1) ///uLuL
      {
	coupling = g*(mWboson*(0.5-pow(gp/g,2)/6)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)) - pow(mq,2)*CPEMix(3,1)/(mWboson*sin(beta)));
      }
    else if (sq == 2) ///dLdL
      {
	coupling = g*(mWboson*(-0.5-pow(gp/g,2)/6)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)) - pow(mq,2)*CPEMix(3,2)/(mWboson*cos(beta)));
      }
    else if (sq == 3) ///uRuR
      {
	coupling = g*(2*mWboson/3*pow(gp/g,2)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)) - pow(mq,2)*CPEMix(3,1)/(mWboson*sin(beta)));
      }
    else if (sq == 4) ///dRdR
      {
	coupling = g*(-mWboson/3*pow(gp/g,2)*(sin(beta)*CPEMix(3,1) - cos(beta)*CPEMix(3,2)) - pow(mq,2)*CPEMix(3,2)/(mWboson*cos(beta)));
      }
    else {
      throw("problem: sq must be 1, 2, 3 or 4 in higgsH3amplitudedecay2squarksamehandNMSSM\n");
      errorflag = -1;
    }    
    amplitudeW = 3*lambda*pow(coupling,2)/(16*PI*m1); 
  }
  return amplitudeW;
}


double higgsHamplitudedecay2squarkdiffhand (double m1, double m2, double m3, double g, double alpha, double beta, double mWboson, double mupq, double mdownq, double greekmu, double Aup, double Adown, int sq) ///calculates partial width for H->squark squark with no mixing and squarks of different handedness, therefore for first two generations, int sq tells the function which squarks it's decaying into - uL, dL, uR, dR for sq = 1,2,3,4 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mupq, double mdownq, double greekmu, double Aup, double Adown);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecay2squarkdiffhand\n");
      errorflag = -1;
    }  

     DoubleVector Hsqsqcoupling(2);
     for (int i=1; i<=2; i++) {
     Hsqsqcoupling(i) = 0;
     }

     Hsqsqcoupling = higgsHsquarkdiffhandcouplings(mWboson, g, alpha, beta, mupq, mdownq, greekmu, Aup, Adown);
   
    if (sq == 1) {
      coupling = Hsqsqcoupling(1);
    }
    else if (sq == 2) {
      coupling = Hsqsqcoupling(2);
    }
    else { 
      throw("problem: sq must be 1 or 2 in higgsHamplitudedecay2squarkdiffhand\n");
      errorflag = -1;
    }        
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecay2sleptonsamehand (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mel, int sl) ///calculates partial width for h->slepton slepton with no mixing and sleptons of same handedness, therefore for first two generations, int sl tells the function which sleptons it's decaying into - nuL, eL, eR for sl = 1,2,3 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgshsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mel);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2sleptonsamehand\n");
      errorflag = -1;
    }  

     DoubleVector hslslcoupling(3);
     for (int i=1; i<=3; i++) {
     hslslcoupling(i) = 0;
     }

     hslslcoupling = higgshsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mel);

    if (sl == 1) {
      coupling = hslslcoupling(1);
    }
    else if (sl == 2) {
      coupling = hslslcoupling(2);
    }
    else if (sl == 3) {
      coupling = hslslcoupling(3);
    }
    else {
      throw("problem: sl must be 1, 2, or 3 in higgshamplitudedecay2sleptonsamehand\n");
      errorflag = -1;
    }        
    amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecay2sleptondiffhand (double m1, double m2, double m3, double g, double alpha, double beta, double mWboson, double mel, double greekmu, double Aelectron, int sl) ///calculates partial width for h->slepton slepton with no mixing and sleptons of different handedness, therefore for first two generations, int sl tells the function which sleptons it's decaying into - nuL, eL, eR for sl = 1,2,3 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgshsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mel, double greekmu, double Ae);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2sleptondiffhand\n");
      errorflag = -1;
    }  

     DoubleVector hslslcoupling(1);
     for (int i=1; i<=1; i++) {
     hslslcoupling(i) = 0;
     }

     hslslcoupling = higgshsleptondiffhandcouplings (mWboson, g, alpha, beta, mel, greekmu, Aelectron);
   
    if (sl == 1) {
      coupling = hslslcoupling(1);
    }
    else {
      throw("problem: sl must be 1 in higgshamplitudedecay2sleptondiffhand\n");
      errorflag = -1;
    } 
    amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecay2sleptonsamehand (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mel, int sl) ///calculates partial width for H->slepton slepton with no mixing and sleptons of same handedness, therefore for first two generations, int sl tells the function which sleptons it's decaying into - nuL, eL, eR for sl = 1,2,3 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgsHsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mel);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecay2sleptonsamehand\n");
      errorflag = -1;
    }  

     DoubleVector Hslslcoupling(3);
     for (int i=1; i<=3; i++) {
     Hslslcoupling(i) = 0;
     }

     Hslslcoupling = higgsHsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mel);

    if (sl == 1) {
      coupling = Hslslcoupling(1);
    }
    else if (sl == 2) {
      coupling = Hslslcoupling(2);
    }
    else if (sl == 3) {
      coupling = Hslslcoupling(3);
    }
    else {
      throw("problem: sl must be 1, 2, or 3 in higgsHamplitudedecay2sleptonsamehand\n");
      errorflag = -1;
    }   
    amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecay2sleptondiffhand (double m1, double m2, double m3, double g, double alpha, double beta, double mWboson, double mel, double greekmu, double Aelectron, int sl) ///calculates partial width for H->slepton slepton with no mixing and sleptons of different handedness, therefore for first two generations, int sl tells the function which sleptons it's decaying into - nuL, eL, eR for sl = 1,2,3 respectively
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;
  DoubleVector higgsHsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mel, double greekmu, double Ae);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecay2sleptondiffhand\n");
      errorflag = -1;
    }  

     DoubleVector Hslslcoupling(1);
     for (int i=1; i<=1; i++) {
     Hslslcoupling(i) = 0;
     }

     Hslslcoupling = higgsHsleptondiffhandcouplings (mWboson, g, alpha, beta, mel, greekmu, Aelectron);
   
    if (sl == 1) {
      coupling = Hslslcoupling(1);
    }
    else {
      throw("problem: sl must be 1 in higgsHamplitudedecay2sleptondiffhand\n");
      errorflag = -1;
    }        
    amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecaystop1stop1 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for h->stop1 antistop1
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaystop1stop1\n");
      errorflag = -1;
    }  

     DoubleVector hst1st1samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     hst1st1samehandcoupling(i) = 0;
     }

     hst1st1samehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = hst1st1samehandcoupling(1);
     couplingRR = hst1st1samehandcoupling(3);

     DoubleVector hst1st1diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     hst1st1diffhandcoupling(i) = 0;
     }

     hst1st1diffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = hst1st1diffhandcoupling(1);

     coupling = couplingLL*pow(cos(theta),2) + couplingRR*pow(sin(theta),2) - 2*couplingLR*cos(theta)*sin(theta);
        
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecaystop2stop2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for h->stop2 antistop2
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaystop2stop2\n");
      errorflag = -1;
    }  

     DoubleVector hst2st2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     hst2st2samehandcoupling(i) = 0;
     }

     hst2st2samehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = hst2st2samehandcoupling(1);
     couplingRR = hst2st2samehandcoupling(3);

     DoubleVector hst2st2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     hst2st2diffhandcoupling(i) = 0;
     }

     hst2st2diffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = hst2st2diffhandcoupling(1);

     coupling = couplingLL*pow(sin(theta),2) + couplingRR*pow(cos(theta),2) + 2*couplingLR*cos(theta)*sin(theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecaystop1stop2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for h->stop1 antistop2 or stop2 antistop1 as they are the same
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecay2stop1stop2\n");
      errorflag = -1;
    }  

     DoubleVector hst1st2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     hst1st2samehandcoupling(i) = 0;
     }

     hst1st2samehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = hst1st2samehandcoupling(1);
     couplingRR = hst1st2samehandcoupling(3);

     DoubleVector hst1st2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     hst1st2diffhandcoupling(i) = 0;
     }

     hst1st2diffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = hst1st2diffhandcoupling(1);

     coupling = couplingLL*sin(theta)*cos(theta) - couplingRR*cos(theta)*sin(theta) + couplingLR*cos(2*theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecaysbottom1sbottom1 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for h->sbottom1 antisbottom1
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaysbottom1sbottom1\n");
      errorflag = -1;
    }  

     DoubleVector hsb1sb1samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     hsb1sb1samehandcoupling(i) = 0;
     }

     hsb1sb1samehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = hsb1sb1samehandcoupling(2);
     couplingRR = hsb1sb1samehandcoupling(4);

     DoubleVector hsb1sb1diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     hsb1sb1diffhandcoupling(i) = 0;
     }

     hsb1sb1diffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = hsb1sb1diffhandcoupling(2);

     coupling = couplingLL*pow(cos(theta),2) + couplingRR*pow(sin(theta),2) - 2*couplingLR*cos(theta)*sin(theta);
        
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecaysbottom2sbottom2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for h->sbottom2 antisbottom2
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaysbottom2sbottom2\n");
      errorflag = -1;
    }  

     DoubleVector hsb2sb2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     hsb2sb2samehandcoupling(i) = 0;
     }

     hsb2sb2samehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = hsb2sb2samehandcoupling(2);
     couplingRR = hsb2sb2samehandcoupling(4);

     DoubleVector hsb2sb2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     hsb2sb2diffhandcoupling(i) = 0;
     }

     hsb2sb2diffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = hsb2sb2diffhandcoupling(2);

     coupling = couplingLL*pow(sin(theta),2) + couplingRR*pow(cos(theta),2) + 2*couplingLR*cos(theta)*sin(theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecaysbottom1sbottom2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for h->sbottom1 antisbottom2 or sbottom2 antisbottom1 as they are the same
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaysbottom1sbottom2\n");
      errorflag = -1;
    }  

     DoubleVector hsb1sb2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     hsb1sb2samehandcoupling(i) = 0;
     }

     hsb1sb2samehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = hsb1sb2samehandcoupling(2);
     couplingRR = hsb1sb2samehandcoupling(4);

     DoubleVector hsb1sb2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     hsb1sb2diffhandcoupling(i) = 0;
     }

     hsb1sb2diffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = hsb1sb2diffhandcoupling(2);

     coupling = couplingLL*sin(theta)*cos(theta) - couplingRR*cos(theta)*sin(theta) + couplingLR*cos(2*theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecaystop1stop1 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for H->stop1 antistop1
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaystop1stop1\n");
      errorflag = -1;
    }  

     DoubleVector Hst1st1samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     Hst1st1samehandcoupling(i) = 0;
     }

     Hst1st1samehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = Hst1st1samehandcoupling(1);
     couplingRR = Hst1st1samehandcoupling(3);

     DoubleVector Hst1st1diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     Hst1st1diffhandcoupling(i) = 0;
     }

     Hst1st1diffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = Hst1st1diffhandcoupling(1);

     coupling = couplingLL*pow(cos(theta),2) + couplingRR*pow(sin(theta),2) - 2*couplingLR*cos(theta)*sin(theta);
        
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecaystop2stop2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for H->stop2 antistop2
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaystop2stop2\n");
      errorflag = -1;
    }  

     DoubleVector Hst2st2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     Hst2st2samehandcoupling(i) = 0;
     }

     Hst2st2samehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = Hst2st2samehandcoupling(1);
     couplingRR = Hst2st2samehandcoupling(3);

     DoubleVector Hst2st2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     Hst2st2diffhandcoupling(i) = 0;
     }

     Hst2st2diffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = Hst2st2diffhandcoupling(1);

     coupling = couplingLL*pow(sin(theta),2) + couplingRR*pow(cos(theta),2) + 2*couplingLR*cos(theta)*sin(theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecaystop1stop2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for H->stop1 antistop2 or stop2 antistop1 as they are the same
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaystop1stop2\n");
      errorflag = -1;
    }  

     DoubleVector Hst1st2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     Hst1st2samehandcoupling(i) = 0;
     }

     Hst1st2samehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = Hst1st2samehandcoupling(1);
     couplingRR = Hst1st2samehandcoupling(3);

     DoubleVector Hst1st2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     Hst1st2diffhandcoupling(i) = 0;
     }

     Hst1st2diffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = Hst1st2diffhandcoupling(1);

     coupling = couplingLL*sin(theta)*cos(theta) - couplingRR*cos(theta)*sin(theta) + couplingLR*cos(2*theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecaysbottom1sbottom1 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for H->sbottom1 antisbottom1
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaysbottom1sbottom1\n");
      errorflag = -1;
    }  

     DoubleVector Hsb1sb1samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     Hsb1sb1samehandcoupling(i) = 0;
     }

     Hsb1sb1samehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = Hsb1sb1samehandcoupling(2);
     couplingRR = Hsb1sb1samehandcoupling(4);
     
     DoubleVector Hsb1sb1diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     Hsb1sb1diffhandcoupling(i) = 0;
     }

     Hsb1sb1diffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = Hsb1sb1diffhandcoupling(2);

     coupling = couplingLL*pow(cos(theta),2) + couplingRR*pow(sin(theta),2) - 2*couplingLR*cos(theta)*sin(theta);
        
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecaysbottom2sbottom2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for H->sbottom2 antisbottom2
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaysbottom2sbottom2\n");
      errorflag = -1;
    }  

     DoubleVector Hsb2sb2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     Hsb2sb2samehandcoupling(i) = 0;
     }

     Hsb2sb2samehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = Hsb2sb2samehandcoupling(2);
     couplingRR = Hsb2sb2samehandcoupling(4);

     DoubleVector Hsb2sb2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     Hsb2sb2diffhandcoupling(i) = 0;
     }

     Hsb2sb2diffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = Hsb2sb2diffhandcoupling(2);

     coupling = couplingLL*pow(sin(theta),2) + couplingRR*pow(cos(theta),2) + 2*couplingLR*cos(theta)*sin(theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgsHamplitudedecaysbottom1sbottom2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double theta) ///calculates partial width for H->sbottom1 antisbottom2 or sbottom2 antisbottom1 as they are the same
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaysbottom1sbottom2\n");
      errorflag = -1;
    }  

     DoubleVector Hsb1sb2samehandcoupling(4);
     for (int i=1; i<=4; i++) {
     Hsb1sb2samehandcoupling(i) = 0;
     }

     Hsb1sb2samehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gp, alpha, beta, mtop, mbottom);
     couplingLL = Hsb1sb2samehandcoupling(2);
     couplingRR = Hsb1sb2samehandcoupling(4);

     DoubleVector Hsb1sb2diffhandcoupling(2);
     for (int i=1; i<=2; i++) {
     Hsb1sb2diffhandcoupling(i) = 0;
     }

     Hsb1sb2diffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
     couplingLR = Hsb1sb2diffhandcoupling(2);

     coupling = couplingLL*sin(theta)*cos(theta) - couplingRR*cos(theta)*sin(theta) + couplingLR*cos(2*theta);
       
    amplitudeW = 3*pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecaystau1stau1 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtau, double greekmu, double Atau, double theta) ///calculates partial width for h->stau1 antistau1
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtau); 
  DoubleVector higgshsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtau, double greekmu, double Atau);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaystau1stau1\n");
      errorflag = -1;
    }  

     DoubleVector hstau1stau1samehandcoupling(3);
     for (int i=1; i<=3; i++) {
     hstau1stau1samehandcoupling(i) = 0;
     }

     hstau1stau1samehandcoupling = higgshsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mtau);
     couplingLL = hstau1stau1samehandcoupling(2);
     couplingRR = hstau1stau1samehandcoupling(3);

     DoubleVector hstau1stau1diffhandcoupling(1);
     for (int i=1; i<=1; i++) {
     hstau1stau1diffhandcoupling(i) = 0;
     }

     hstau1stau1diffhandcoupling = higgshsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
     couplingLR = hstau1stau1diffhandcoupling(1);

     coupling = couplingLL*pow(sin(theta),2) + couplingRR*pow(cos(theta),2) + 2*couplingLR*cos(theta)*sin(theta);

     amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgshamplitudedecaystau2stau2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtau, double greekmu, double Atau, double theta) ///calculates partial width for h->stau2 antistau2
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtau); 
  DoubleVector higgshsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtau, double greekmu, double Atau);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaystau2stau2\n");
      errorflag = -1;
    }  

     DoubleVector hstau2stau2samehandcoupling(3);
     for (int i=1; i<=3; i++) {
     hstau2stau2samehandcoupling(i) = 0;
     }

     hstau2stau2samehandcoupling = higgshsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mtau);
     couplingLL = hstau2stau2samehandcoupling(2);
     couplingRR = hstau2stau2samehandcoupling(3);

     DoubleVector hstau2stau2diffhandcoupling(1);
     for (int i=1; i<=1; i++) {
     hstau2stau2diffhandcoupling(i) = 0;
     }

     hstau2stau2diffhandcoupling = higgshsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
     couplingLR = hstau2stau2diffhandcoupling(1);

     coupling = couplingLL*pow(cos(theta),2) + couplingRR*pow(sin(theta),2) - 2*couplingLR*cos(theta)*sin(theta);

     amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}

double higgshamplitudedecaystau1stau2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtau, double greekmu, double Atau, double theta) ///calculates partial width for h->stau1 antistau2 or h->stau2 antistau1 as these widths have the same value
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgshsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtau); 
  DoubleVector higgshsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtau, double greekmu, double Atau);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecaystau1stau2\n");
      errorflag = -1;
    }  

     DoubleVector hstau1stau2samehandcoupling(3);
     for (int i=1; i<=3; i++) {
     hstau1stau2samehandcoupling(i) = 0;
     }

     hstau1stau2samehandcoupling = higgshsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mtau);
     couplingLL = hstau1stau2samehandcoupling(2);
     couplingRR = hstau1stau2samehandcoupling(3);

     DoubleVector hstau1stau2diffhandcoupling(1);
     for (int i=1; i<=1; i++) {
     hstau1stau2diffhandcoupling(i) = 0;
     }

     hstau1stau2diffhandcoupling = higgshsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
     couplingLR = hstau1stau2diffhandcoupling(1);

     coupling = -couplingLL*cos(theta)*sin(theta) + couplingRR*sin(theta)*cos(theta) + couplingLR*cos(2*theta);
     amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecaystau1stau1 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtau, double greekmu, double Atau, double theta) ///calculates partial width for H->stau1 antistau1
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtau); 
  DoubleVector higgsHsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtau, double greekmu, double Atau);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaystau1stau1\n");
      errorflag = -1;
    }  

     DoubleVector Hstau1stau1samehandcoupling(3);
     for (int i=1; i<=3; i++) {
     Hstau1stau1samehandcoupling(i) = 0;
     }

     Hstau1stau1samehandcoupling = higgsHsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mtau);
     couplingLL = Hstau1stau1samehandcoupling(2);
     couplingRR = Hstau1stau1samehandcoupling(3);

     DoubleVector Hstau1stau1diffhandcoupling(1);
     for (int i=1; i<=1; i++) {
     Hstau1stau1diffhandcoupling(i) = 0;
     }

     Hstau1stau1diffhandcoupling = higgsHsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
     couplingLR = Hstau1stau1diffhandcoupling(1);

     coupling = couplingLL*pow(sin(theta),2) + couplingRR*pow(cos(theta),2) + 2*couplingLR*cos(theta)*sin(theta);

     amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecaystau2stau2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtau, double greekmu, double Atau, double theta) ///calculates partial width for H->stau2 antistau2
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtau); 
  DoubleVector higgsHsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtau, double greekmu, double Atau);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaystau2stau2\n");
      errorflag = -1;
    } 

     DoubleVector Hstau2stau2samehandcoupling(3);
     for (int i=1; i<=3; i++) {
     Hstau2stau2samehandcoupling(i) = 0;
     }

     Hstau2stau2samehandcoupling = higgsHsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mtau);
     couplingLL = Hstau2stau2samehandcoupling(2);
     couplingRR = Hstau2stau2samehandcoupling(3);

     DoubleVector Hstau2stau2diffhandcoupling(1);
     for (int i=1; i<=1; i++) {
     Hstau2stau2diffhandcoupling(i) = 0;
     }

     Hstau2stau2diffhandcoupling = higgsHsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
     couplingLR = Hstau2stau2diffhandcoupling(1);

     coupling = couplingLL*pow(cos(theta),2) + couplingRR*pow(sin(theta),2) - 2*couplingLR*cos(theta)*sin(theta);

     amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgsHamplitudedecaystau1stau2 (double m1, double m2, double m3, double g, double gp, double alpha, double beta, double mWboson, double mtau, double greekmu, double Atau, double theta) ///calculates partial width for H->stau1 antistau2 or H->stau2 antistau1 as these widths have the same value
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, couplingLL=0, couplingRR=0, couplingLR = 0;
  DoubleVector higgsHsleptonsamehandcouplings(double mWboson, double g, double gp, double alpha, double beta, double mtau); 
  DoubleVector higgsHsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtau, double greekmu, double Atau);
  
  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHamplitudedecaystau1stau2\n");
      errorflag = -1;
    } 

     DoubleVector Hstau1stau2samehandcoupling(3);
     for (int i=1; i<=3; i++) {
     Hstau1stau2samehandcoupling(i) = 0;
     }

     Hstau1stau2samehandcoupling = higgsHsleptonsamehandcouplings (mWboson, g, gp, alpha, beta, mtau);
     couplingLL = Hstau1stau2samehandcoupling(2);
     couplingRR = Hstau1stau2samehandcoupling(3);

     DoubleVector Hstau1stau2diffhandcoupling(1);
     for (int i=1; i<=1; i++) {
     Hstau1stau2diffhandcoupling(i) = 0;
     }

     Hstau1stau2diffhandcoupling = higgsHsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
     couplingLR = Hstau1stau2diffhandcoupling(1);

     coupling = -couplingLL*cos(theta)*sin(theta) + couplingRR*sin(theta)*cos(theta) + couplingLR*cos(2*theta);

    amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgsAamplitudedecaysfermions (double m1, double m2, double m3, double g, double mWboson, double mf, double greekmu, double Asf, double beta, char uord) ///calculates partial width for A->sfermion1 sfermion2, these sfermions must be of the same type, note can't have decays to sfermion1 and sfermion 1 or to sfermion2 and sfermion2 by CP conservation, also note there's no dependence on sfermion mixing angle in these decays, mf is the mass of the corresponding fermion. char uord tells it whether we have up type (so Asf*cot(beta)) or down type (so Asf*tan(beta)). Finally note that the extra factor of three from colour for squarks is added above by multiplying the answer this function gives by 3
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0;  

  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
      }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecaysfermions\n");
      errorflag = -1;
    } 
    
    if(uord == 'u') {
      coupling = g*mf/(2*mWboson)*(greekmu + Asf/(tan(beta)));
    }
    else if (uord == 'd') {
      coupling = g*mf/(2*mWboson)*(greekmu + Asf*tan(beta));
    }
    else {
      throw("problem: uord must be u or d in higgsAamplitudedecaysfermions\n");
      errorflag = -1;
    }    
    amplitudeW = pow(coupling,2)/(16*PI*m1)*lambda;
  }
  return amplitudeW;
}


double higgsAamplitudedecaysfermionsNMSSM (double m1, double m2, double m3, double g, double mWboson, double mf, double Asf, double beta, double lam, double mueff, DoubleMatrix & CPOMix, char uord, int pseudoscalar) ///mf here should be runmf and mWboson should be runmw
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, coupling=0, fq = 0;  

  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
      }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecaysfermionsNMSSM\n");
      errorflag = -1;
    } 

    if(uord == 'u') {
      fq = g*mf/(pow(2,0.5)*mWboson*sin(beta));
      coupling = fq/pow(2,0.5)*(Asf*CPOMix(pseudoscalar,1) + mueff*CPOMix(pseudoscalar,2) + lam*pow(2,0.5)*mWboson*cos(beta)/g*CPOMix(pseudoscalar,3));
    }
    else if (uord == 'd') {
      fq = g*mf/(pow(2,0.5)*mWboson*cos(beta));
      coupling = fq/pow(2,0.5)*(mueff*CPOMix(pseudoscalar,1) + Asf*CPOMix(pseudoscalar,2) + lam*pow(2,0.5)*mWboson*sin(beta)/g*CPOMix(pseudoscalar,3));
    } 
    else {
      throw("problem: uord must be u or d in higgsAamplitudedecaysfermionsNMSSM\n");
    }    
    amplitudeW = 1/(16*PI*m1)*lambda*pow(coupling,2);
  }

  return amplitudeW;
}


double higgsHplusamplitudedecayquarkantiquark (double m1, double m2, double m3, double g, double mWboson, double beta, DoubleMatrix & VCKM, int quark, int antiquark) ///calculates partial width for H+ ->quark1 antiquark2, this is the same as H- -> antiquark1 quark2, note the up type quark (quark1) is m2, the down type quark (quark2) is m3, the int quark is 1,2,3 (u,c,t) and int antiquark is 1,2,3 (d,s,b) then this selects VCKM matrix element VCKM(quark, antiquark)
{
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, massbetacombination=0, CKM=0;  

  if (fabs(m1) < fabs(m2) +fabs(m3)){
    amplitudeW = 0;
      }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHplusamplitudedecayquarkantiquark\n");
      errorflag = -1;
    } 
    CKM = VCKM(quark,antiquark);

    massbetacombination = (pow(m3*tan(beta),2) + pow(m2/(tan(beta)),2))*(pow(m1,2) - pow(m2,2) - pow(m3,2)) - 4*pow(m2*m3,2);
    
    amplitudeW = 3*GFosqrt2*pow(CKM,2)/(4*PI*m1)*massbetacombination*lambda;

  }
  return amplitudeW;
}



double higgsHplusamplitudedecayneutralinochargino (double m1, double m2, double m3, double g, double gp, double beta, double thetaL, double thetaR, DoubleMatrix & mixNeut, int neutralino,  int chargino) /// Calculates the partial width for decays of the charged H+ higgs to a neutralino and a chragino Wtilda+ where neutralino is j in T&B whilst chargino is i
{
  
  double amplitudeW, squareplus, squareminus, lambda, A1=0, A2=0, A3=0, A4=0,a=0, b=0;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHplusamplitudedecayneutralinochargino\n");
      errorflag = -1;
    } 

    A1 = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*sin(thetaR) - g*mixNeut(neutralino,4)*cos(thetaR);
    A2 = -1/(pow(2,0.5))*(-g*mixNeut(neutralino,2) - gp*mixNeut(neutralino,1))*-cos(thetaR) - g*mixNeut(neutralino,4)*sin(thetaR);
    A3 = 1/(pow(2,0.5))*(g*mixNeut(neutralino,2) + gp*mixNeut(neutralino,1))*sin(thetaL) + g*mixNeut(neutralino,3)*cos(thetaL);
    A4 = -1/(pow(2,0.5))*(-g*mixNeut(neutralino,2) - gp*mixNeut(neutralino,1))*-cos(thetaL) + g*mixNeut(neutralino,3)*sin(thetaL);

    
    if (chargino == 1) {
      a = 0.5*(-cos(beta)*A2 + sin(beta)*A4);
      b = 0.5*(-cos(beta)*A2 - sin(beta)*A4);
    }
     
    else if (chargino == 2) {
      a = 0.5*(-cos(beta)*A1 + sin(beta)*A3);
      b = 0.5*(-cos(beta)*A1 - sin(beta)*A3);
    }
    else {
      throw("problem: chargino must be 1 or 2 in higgsHplusamplitudedecayneutralinochargino\n");
    } 
    amplitudeW = 1/(8*PI*fabs(m1))*lambda*((pow(a,2)+pow(b,2))*(pow(m1,2)-pow(m2,2)-pow(m3,2)) - 2*(pow(a,2)-pow(b,2))*m2*m3);
  }
  return amplitudeW;
}



double higgsHplusamplitudedecayWbosonhiggsh (double m1, double m2, double m3, double g, double alpha, double beta) /// Calculates the partial width for a charged Higgs boson H+ to decay to a Wboson and a neutral light scalar higgs (i.e. the SM-like higgs) h, m2 must be the W boson mass
{
  
  double amplitudeW, squareplus, squareminus, lambda;
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    amplitudeW = 0;
  }

  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHplusamplitudedecayWbosonhiggsh\n");
      errorflag = -1;
    } 
    
    // amplitudeW = pow(g,2)*pow(cos(beta-alpha),2)*pow(m1,3)/(64*PI*pow(m2,2))*pow(lambda,3);
    amplitudeW = GFosqrt2*pow(cos(beta-alpha),2)*pow(m1,3)/(8*PI)*pow(lambda,3);
  }
  return amplitudeW;
}


DoubleVector higgsHplusamplitudedecaysquarksquark (double m1, double m2, double m3, double g, double beta, double mWboson, double mup, double mdown, double greekmu, double Aup, double Adown) ///calculates partial width for Hplus->squarki antisquarkj where i,j are each L/R so no mixing, i.e. first two generations of squarks
{
  double squareplus=0, squareminus=0, lambda=0; 
  DoubleVector higgsHplussquarkcouplings (double mWboson, double g, double beta, double mup, double mdown, double greekmu, double Au, double Ad);
  DoubleVector amplitudeW(4);
  for (int i=1; i<=4; i++) {
    amplitudeW(i) = 0;
  }    
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    for(int i=1; i<=4; i++) {
      amplitudeW(i) = 0;
    }
  }
  
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHplusamplitudedecaysquarksquark\n");
      errorflag = -1;
    } 

     DoubleVector Hplussquarksquarkcoupling(4);
     for (int i=1; i<=4; i++) {
     Hplussquarksquarkcoupling(i) = 0;
     }

     Hplussquarksquarkcoupling = higgsHplussquarkcouplings (mWboson, g, beta, mup, mdown, greekmu, Aup, Adown);
     
     amplitudeW(1) = pow(Hplussquarksquarkcoupling(1),2)*3/(16*PI*m1)*lambda;
     amplitudeW(2) = pow(Hplussquarksquarkcoupling(2),2)*3/(16*PI*m1)*lambda;
     amplitudeW(3) = pow(Hplussquarksquarkcoupling(3),2)*3/(16*PI*m1)*lambda;
     amplitudeW(4) = pow(Hplussquarksquarkcoupling(4),2)*3/(16*PI*m1)*lambda;

  }
  return amplitudeW;
}


DoubleVector higgsHplusamplitudedecaysquarksquarkmix (double m1, double m2, double m3, double g, double beta, double mWboson, double mtop, double mbottom, double greekmu, double Atop, double Abottom, double thetatop, double thetabottom) ///calculates partial width for Hplus->squarki antisquarkj where i,j are each 1/2 so mixing included, i.e. third generations of squarks
{
  double squareplus=0, squareminus=0, lambda=0, coupling11=0, coupling22=0, coupling12=0, coupling21=0; 
  DoubleVector higgsHplussquarkcouplings (double mWboson, double g, double beta, double mtop, double mbottom, double greekmu, double At, double Ab);
  DoubleVector amplitudeW(4);
  for (int i=1; i<=4; i++) {
    amplitudeW(i) = 0;
  }    
  
  if (fabs(m1) < fabs(m2) +fabs(m3)) {
    for(int i=1; i<=4; i++) {
      amplitudeW(i) = 0;
    }
  }
  else { 
    squareplus = 1 - pow((m2+m3)/m1,2);
    squareminus = 1 - pow((m2-m3)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsHplusamplitudedecaysquarksquarkmix\n");
      errorflag = -1;
    } 

     DoubleVector Hplussquarksquarkcoupling(4);
     for (int i=1; i<=4; i++) {
     Hplussquarksquarkcoupling(i) = 0;
     }

     Hplussquarksquarkcoupling = higgsHplussquarkcouplings (mWboson, g, beta, mtop, mbottom, greekmu, Atop, Abottom);
     
     coupling11 = Hplussquarksquarkcoupling(1)*cos(thetatop)*cos(thetabottom) + Hplussquarksquarkcoupling(2)*sin(thetatop)*sin(thetabottom) - Hplussquarksquarkcoupling(3)*cos(thetatop)*sin(thetabottom) - Hplussquarksquarkcoupling(4)*sin(thetatop)*cos(thetabottom);
     coupling22 = Hplussquarksquarkcoupling(1)*sin(thetatop)*sin(thetabottom) + Hplussquarksquarkcoupling(2)*cos(thetatop)*cos(thetabottom) + Hplussquarksquarkcoupling(3)*sin(thetatop)*cos(thetabottom) + Hplussquarksquarkcoupling(4)*cos(thetatop)*sin(thetabottom);
     coupling12 = Hplussquarksquarkcoupling(1)*cos(thetatop)*sin(thetabottom) - Hplussquarksquarkcoupling(2)*sin(thetatop)*cos(thetabottom) + Hplussquarksquarkcoupling(3)*cos(thetatop)*cos(thetabottom) - Hplussquarksquarkcoupling(4)*sin(thetatop)*sin(thetabottom);
     coupling21 = Hplussquarksquarkcoupling(1)*sin(thetatop)*cos(thetabottom) - Hplussquarksquarkcoupling(2)*cos(thetatop)*sin(thetabottom) - Hplussquarksquarkcoupling(3)*sin(thetatop)*sin(thetabottom) + Hplussquarksquarkcoupling(4)*cos(thetatop)*cos(thetabottom);

     amplitudeW(1) = pow(coupling11,2)*3/(16*PI*m1)*lambda;
     amplitudeW(2) = pow(coupling22,2)*3/(16*PI*m1)*lambda;
     amplitudeW(3) = pow(coupling12,2)*3/(16*PI*m1)*lambda;
     amplitudeW(4) = pow(coupling21,2)*3/(16*PI*m1)*lambda;

  }
  return amplitudeW;
}

double higgsesamplitudedecaygammagammatotal(double m1, double g, double gprime, double alphaEmrun, double mWboson, double polemw, double alpha, double beta, double mtop, double mbottom, double mcharm, double mtau, double mHpm, double mstop1, double mstop2, double msbottom1, double msbottom2, double mstau1, double mstau2, double mchargino1, double mchargino2, double thetaL, double thetaR, double thetat, double thetab, double thetatau, double greekmu, double Atop, double Abottom, double Atau, char higgstype) /// function that calculates the partial width for h->gamma gamma at 1-loop (forbidden at tree-level)
{
  double prefactor=0, Itr=0, Iti=0, Ist1r=0, Ist1i=0, Ist2r=0, Ist2i=0, Ibr=0, Ibi=0, Isb1r=0, Isb1i=0, Isb2r=0, Isb2i=0, Icr=0, Ici=0, Itaur=0, Itaui=0, Istau1r=0, Istau1i=0, Istau2r=0, Istau2i=0, IWr=0, IWi=0, IHpmr=0, IHpmi=0, Ichar1r=0, Ichar1i=0, Ichar2r=0, Ichar2i=0, matelemmodsquare=0, amplitudeW=0;
  DoubleVector higgsmatrixelementgammagammaviatops (double m1, double mtop, double alpha, double beta, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviastops (double m1, double mstop1, double mstop2, double mtop, double mbottom, double mWboson, double thetat, double g, double gprime, double alpha, double beta, double greekmu, double Atop, double Abottom, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviabottoms (double m1, double mbottom, double alpha, double beta, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviasbottoms (double m1, double msbottom1, double msbottom2, double mbottom, double mtop, double mWboson, double thetab, double g, double gprime, double alpha, double beta, double Atop, double Abottom, double greekmu, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviastaus (double m1, double mstau1, double mstau2, double mtau, double mWboson, double thetatau, double g, double gprime, double alpha, double beta, double greekmu, double Atau, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviaWbosons (double m1, double mWboson, double alpha, double beta, double g, double gprime, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviaHpms (double m1, double mHpm, double mWboson, double alpha, double beta, double g, double gprime, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviachargino1s (double m1, double mchargino1, double mWboson, double alpha, double beta, double thetaL, double thetaR, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviachargino2s (double m1, double mchargino2, double mWboson, double alpha, double beta, double thetaL, double thetaR, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviacharms (double m1, double mcharm, double alpha, double beta, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviataus (double m1, double mtau, double alpha, double beta, char higgstype);

  Itr = higgsmatrixelementgammagammaviatops (m1, mtop, alpha, beta, higgstype)(1);
  Iti = higgsmatrixelementgammagammaviatops (m1, mtop, alpha, beta, higgstype)(2);
  Ist1r = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(1);
  Ist1i = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(2);
  Ist2r = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(3);
  Ist2i = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(4);
  Ibr = higgsmatrixelementgammagammaviabottoms (m1, mbottom, alpha, beta, higgstype)(1);
  Ibi = higgsmatrixelementgammagammaviabottoms (m1, mbottom, alpha, beta, higgstype)(2);
  Isb1r = -higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(1);
  Isb1i = -higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(2);
  Isb2r = -higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(3);
  Isb2i = -higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(4);
  Icr = higgsmatrixelementgammagammaviacharms (m1, mcharm, alpha, beta, higgstype)(1);
  Ici = higgsmatrixelementgammagammaviacharms (m1, mcharm, alpha, beta, higgstype)(2);
  Itaur = higgsmatrixelementgammagammaviataus (m1, mtau, alpha, beta, higgstype)(1);
  Itaui = higgsmatrixelementgammagammaviataus (m1, mtau, alpha, beta, higgstype)(2);
  Istau1r = -higgsmatrixelementgammagammaviastaus (m1, mstau1, mstau2, mtau, mWboson, thetatau, g, gprime, alpha, beta, greekmu, Atau, higgstype)(1);
  Istau1i = -higgsmatrixelementgammagammaviastaus (m1, mstau1, mstau2, mtau, mWboson, thetatau, g, gprime, alpha, beta, greekmu, Atau, higgstype)(2);
  Istau2r = -higgsmatrixelementgammagammaviastaus (m1, mstau1, mstau2, mtau, mWboson, thetatau, g, gprime, alpha, beta, greekmu, Atau, higgstype)(3);
  Istau2i = -higgsmatrixelementgammagammaviastaus (m1, mstau1, mstau2, mtau, mWboson, thetatau, g, gprime, alpha, beta, greekmu, Atau, higgstype)(4);
  IWr = higgsmatrixelementgammagammaviaWbosons (m1, polemw, alpha, beta, g, gprime, higgstype)(1);
  IWi = higgsmatrixelementgammagammaviaWbosons (m1, polemw, alpha, beta, g, gprime, higgstype)(2);
  IHpmr = higgsmatrixelementgammagammaviaHpms (m1, mHpm, mWboson, alpha, beta, g, gprime, higgstype)(1);
  IHpmi = higgsmatrixelementgammagammaviaHpms (m1, mHpm, mWboson, alpha, beta, g, gprime, higgstype)(2);
  Ichar1r = higgsmatrixelementgammagammaviachargino1s (m1, mchargino1, mWboson, alpha, beta, thetaL, thetaR, higgstype)(1);
  Ichar1i = higgsmatrixelementgammagammaviachargino1s (m1, mchargino1, mWboson, alpha, beta, thetaL, thetaR, higgstype)(2);
  Ichar2r = higgsmatrixelementgammagammaviachargino2s (m1, mchargino2, mWboson, alpha, beta, thetaL, thetaR, higgstype)(1);
  Ichar2i = higgsmatrixelementgammagammaviachargino2s (m1, mchargino2, mWboson, alpha, beta, thetaL, thetaR, higgstype)(2);

  DoubleVector matelemsum(2);
  matelemsum(1) = Itr + Ist1r + Ist2r + Ibr + Isb1r + Isb2r + Icr + Itaur + Istau1r + Istau2r + IWr + IHpmr + Ichar1r + Ichar2r;
  matelemsum(2) = Iti + Ist1i + Ist2i + Ibi + Isb1i + Isb2i + Ici + Itaui + Istau1i + Istau2i + IWi + IHpmi + Ichar1i + Ichar2i;
  
  prefactor = GFosqrt2*pow(alphaEmrun,2)*pow(m1,3)/(128*pow(PI,3));
  // *ffout << "Itr = " << Itr << endl; *ffout << " Ist1r = " << Ist1r << endl; *ffout<< " Ist2r = " << Ist2r << endl; *ffout<< " Ibr = " << Ibr << endl; *ffout<< " Isb1r = " << Isb1r << endl; *ffout<< " Isb2r = " << Isb2r << endl; *ffout << "Icr = " << Icr << endl; *ffout << "Itaur = " << Itaur << endl; *ffout << "Istau1r = "<< Istau1r << endl; *ffout << "Istau2r = "<< Istau2r << endl; *ffout << "IWr = " << IWr << endl; *ffout << "IHpmr = " << IHpmr << endl; *ffout << "Ichar1r = " << Ichar1r << endl; *ffout << "Ichar2r = " << Ichar2r << endl;
  // *ffout << "Iti = " << Iti << endl; *ffout << " Ist1i = " << Ist1i << endl; *ffout<< " Ist2i = " << Ist2i << endl; *ffout<< " Ibi = " << Ibi << endl; *ffout<< " Isb1i = " << Isb1i << endl; *ffout<< " Isb2i = " << Isb2i << endl; *ffout << "Ici = " << Ici << endl; *ffout << "Itaui = " << Itaui << endl; *ffout << "Istau1i = "<< Istau1i << endl; *ffout << "Istau2i = "<< Istau2i << endl; *ffout << "IWi = " << IWi << endl; *ffout << "IHpmi = " << IHpmi << endl; *ffout << "Ichar1i = " << Ichar1i << endl; *ffout << "Ichar2i = " << Ichar2i << endl;
  // *ffout << "prefactor = " << prefactor << std::endl;
  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
  if (matelemmodsquare != matelemmodsquare) {
    throw("nan in matelemmodsquare in higgsesamplitudedecaygammagammatotal\n");
    errorflag = -1;
    // ffout << "Itr = " << Itr << endl; fout << " Ist1r = " << Ist1r << endl; fout<< " Ist2r = " << Ist2r << endl; fout<< " Ibr = " << Ibr << endl; fout<< " Isb1r = " << Isb1r << endl; fout<< " Isb2r = " << Isb2r << endl; fout << "Icr = " << Icr << endl; fout << "Itaur = " << Itaur << endl; fout << "Istau1r = "<< Istau1r << endl; fout << "Istau2r = "<< Istau2r << endl; fout << "IWr = " << IWr << endl; fout << "IHpmr = " << IHpmr << endl; fout << "Ichar1r = " << Ichar1r << endl; fout << "Ichar2r = " << Ichar2r << endl;
    // ffout << "Iti = " << Iti << endl; fout << " Ist1i = " << Ist1i << endl; fout<< " Ist2i = " << Ist2i << endl; fout<< " Ibi = " << Ibi << endl; fout<< " Isb1i = " << Isb1i << endl; fout<< " Isb2i = " << Isb2i << endl; fout << "Ici = " << Ici << endl; fout << "Itaui = " << Itaui << endl; fout << "Istau1i = "<< Istau1i << endl; fout << "Istau2i = "<< Istau2i << endl; fout << "IWi = " << IWi << endl; fout << "IHpmi = " << IHpmi << endl; fout << "Ichar1i = " << Ichar1i << endl; fout << "Ichar2i = " << Ichar2i << endl;
    // ffout << "prefactor = " << prefactor << endl;
  }
  amplitudeW = prefactor*matelemmodsquare;
     
  return amplitudeW;
 
}

DoubleVector higgsmatrixelementgammagammaviatops (double m1, double mtop, double alpha, double beta, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for tops in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1over2(2), It(2);
  double Rt=0;
  for (int i=1; i<=3; i++) {
    f(i) = 0;
  }

  for (int j=1; j<=2; j++) {
    F1over2(j) = 0;
    It(j) = 0;
  }
    
  f = foftau(mtop, m1);
  if (higgstype == 'h')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rt = cos(alpha)/sin(beta);
    }
  else if (higgstype == 'H')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rt = sin(alpha)/sin(beta);
    }
  else if (higgstype == 'A')
    {
      F1over2(1) = -2*f(3)*f(1);
      F1over2(2) = -2*f(3)*f(2);
      Rt = 1/(tan(beta));
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviatops\n");
    errorflag = -1;
  }
   
  It(1) = 3*4./9*Rt*F1over2(1);
  It(2) = 3*4./9*Rt*F1over2(2);
    return It;
}

DoubleVector higgsmatrixelementgammagammaviastops (double m1, double mstop1, double mstop2, double mtop, double mbottom, double mWboson, double thetat, double g, double gprime, double alpha, double beta,double greekmu, double Atop, double Abottom, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for stop1s and for stop2s in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f1(3), f2(3), F01(2), F02(2), Ist1(2), Ist2(2), Istopsboth(4);
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gprime, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gprime, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  double Rst1=0, Rst2=0, RstL=0, RstR=0, RstLR=0, RstL1=0, RstL2=0, RstR1=0, RstR2=0, RstLR1=0, RstLR2=0;

  for (int i=1; i<=3;i++) {
    f1(i) = 0;
    f2(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F01(j) = 0;
    F02(j) = 0;
    Ist1(j) = 0;
    Ist2(j) = 0;
  }
  for (int k=1; k<=4; k++) {
    Istopsboth(k) = 0;
  }

  DoubleVector ststsamehandcoupling(4);
  for (int i=1; i<=4; i++) {
  ststsamehandcoupling(i) = 0;
  }

  DoubleVector ststdiffhandcoupling(2);
  for (int i=1; i<=2; i++) {
  ststdiffhandcoupling(i) = 0;
  }
  
  f1 = foftau(mstop1, m1);
  f2 = foftau(mstop2, m1);
  if (higgstype == 'h')
    {
      ststsamehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gprime, alpha, beta, mtop, mbottom);
      RstL = ststsamehandcoupling(1);
      RstL1 = RstL*mWboson/(g*pow(mstop1,2));
      RstL2 = RstL*mWboson/(g*pow(mstop2,2));
      RstR = ststsamehandcoupling(3);
      RstR1 = RstR*mWboson/(g*pow(mstop1,2));
      RstR2 = RstR*mWboson/(g*pow(mstop2,2));
      ststdiffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
      RstLR = ststdiffhandcoupling(1);
      RstLR1 = RstLR*mWboson/(g*pow(mstop1,2));
      RstLR2 = RstLR*mWboson/(g*pow(mstop2,2));
      Rst1 = RstL1*pow(cos(thetat),2) + RstR1*pow(sin(thetat),2) - 2*RstLR1*cos(thetat)*sin(thetat);
      Rst2 = RstL2*pow(sin(thetat),2) + RstR2*pow(cos(thetat),2) + 2*RstLR2*cos(thetat)*sin(thetat);
    }
  else if (higgstype == 'H')
    {
      ststsamehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gprime, alpha, beta, mtop, mbottom);
      RstL = ststsamehandcoupling(1);
      RstL1 = RstL*mWboson/(g*pow(mstop1,2));
      RstL2 = RstL*mWboson/(g*pow(mstop2,2));
      RstR = ststsamehandcoupling(3);
      RstR1 = RstR*mWboson/(g*pow(mstop1,2));
      RstR2 = RstR*mWboson/(g*pow(mstop2,2));
      ststdiffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
      RstLR = ststdiffhandcoupling(1);
      RstLR1 = RstLR*mWboson/(g*pow(mstop1,2));
      RstLR2 = RstLR*mWboson/(g*pow(mstop2,2));
      Rst1 = RstL1*pow(cos(thetat),2) + RstR1*pow(sin(thetat),2) - 2*RstLR1*cos(thetat)*sin(thetat);
      Rst2 = RstL2*pow(sin(thetat),2) + RstR2*pow(cos(thetat),2) + 2*RstLR2*cos(thetat)*sin(thetat);
    }
  else if (higgstype == 'A')
    {
      RstL=0;
      RstR=0;
      Rst1 = cos(thetat)*RstL + sin(thetat)*RstR;
      Rst2 = -sin(thetat)*RstL + cos(thetat)*RstR;
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviastops\n");
    errorflag = -1;
  }
  
  F01(1) = f1(3)*(1-f1(3)*f1(1));
  F01(2) = f1(3)*(-f1(3)*f1(2));
  F02(1) = f2(3)*(1-f2(3)*f2(1));
  F02(2) = f2(3)*(-f2(3)*f2(2));

  Ist1(1) = 3*4./9*Rst1*F01(1);
  Ist1(2) = 3*4./9*Rst1*F01(2);
  Ist2(1) = 3*4./9*Rst2*F02(1);
  Ist2(2) = 3*4./9*Rst2*F02(2);
  Istopsboth(1) = Ist1(1);
  Istopsboth(2) = Ist1(2);
  Istopsboth(3) = Ist2(1);
  Istopsboth(4) = Ist2(2);
  return Istopsboth;
}  



DoubleVector higgsmatrixelementgammagammaviabottoms (double m1, double mbottom, double alpha, double beta, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for bottoms in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1over2(2), Ib(2);
  double Rb=0;
  for (int i=1; i<=3;i++) {
    f(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F1over2(j) = 0;
    Ib(j) = 0;
  }
    
  f = foftau(mbottom, m1);
  if (higgstype == 'h')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rb = -sin(alpha)/cos(beta);
    }
  else if (higgstype == 'H')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rb = cos(alpha)/cos(beta);
    }
  else if (higgstype == 'A')
    {
      F1over2(1) = -2*f(3)*f(1);
      F1over2(2) = -2*f(3)*f(2);
      Rb = tan(beta);
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviabottoms\n");
    errorflag = -1;
  }   
  Ib(1) = 3*1./9*Rb*F1over2(1);
  Ib(2) = 3*1./9*Rb*F1over2(2);
  return Ib;
}  


 DoubleVector higgsmatrixelementgammagammaviasbottoms (double m1, double msbottom1, double msbottom2, double mbottom, double mtop, double mWboson, double thetab, double g, double gprime, double alpha, double beta, double Atop, double Abottom, double greekmu, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for sbottom1s and for sbottom2s in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f1(3), f2(3), F01(2), F02(2), Isb1(2), Isb2(2), Isbottomsboth(4);
  DoubleVector higgshsquarksamehandcouplings(double mWboson, double g, double gprime, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  DoubleVector higgsHsquarksamehandcouplings(double mWboson, double g, double gprime, double alpha, double beta, double mtop, double mbottom);
  DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mtop, double mbottom, double greekmu, double Atop, double Abottom);
  double Rsb1=0, Rsb2=0, RsbL=0, RsbR=0, RsbLR=0, RsbL1=0, RsbL2=0, RsbR1=0, RsbR2=0, RsbLR1=0, RsbLR2=0;
  for (int i=1; i<=3;i++) {
    f1(i) = 0;
    f2(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F01(j) = 0;
    F02(j) = 0;
    Isb1(j) = 0;
    Isb2(j) = 0;
  }
  for (int k=1; k<=4; k++) {
    Isbottomsboth(k) = 0;
  }

  DoubleVector sbsbsamehandcoupling(4);
  for (int i=1; i<=4; i++) {
  sbsbsamehandcoupling(i) = 0;
  }

  DoubleVector sbsbdiffhandcoupling(2);
  for (int i=1; i<=2; i++) {
  sbsbdiffhandcoupling(i) = 0;
  }
  

  f1 = foftau(msbottom1, m1);
  f2 = foftau(msbottom2, m1);

  if (higgstype == 'h')
    {
      sbsbsamehandcoupling = higgshsquarksamehandcouplings (mWboson, g, gprime, alpha, beta, mtop, mbottom);
      RsbL = sbsbsamehandcoupling(2);
      RsbL1 = RsbL*mWboson/(g*pow(msbottom1,2));
      RsbL2 = RsbL*mWboson/(g*pow(msbottom2,2));
      RsbR = sbsbsamehandcoupling(4);
      RsbR1 = RsbR*mWboson/(g*pow(msbottom1,2));
      RsbR2 = RsbR*mWboson/(g*pow(msbottom2,2));
      sbsbdiffhandcoupling = higgshsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
      RsbLR = sbsbdiffhandcoupling(2);
      RsbLR1 = RsbLR*mWboson/(g*pow(msbottom1,2));
      RsbLR2 = RsbLR*mWboson/(g*pow(msbottom2,2));
      Rsb1 = RsbL1*pow(cos(thetab),2) + RsbR1*pow(sin(thetab),2) - 2*RsbLR1*cos(thetab)*sin(thetab);
      Rsb2 = RsbL2*pow(sin(thetab),2) + RsbR2*pow(cos(thetab),2) + 2*RsbLR2*cos(thetab)*sin(thetab);
    }
  else if (higgstype == 'H')
    {
      sbsbsamehandcoupling = higgsHsquarksamehandcouplings (mWboson, g, gprime, alpha, beta, mtop, mbottom);
      RsbL = sbsbsamehandcoupling(2);
      RsbL1 = RsbL*mWboson/(g*pow(msbottom1,2));
      RsbL2 = RsbL*mWboson/(g*pow(msbottom2,2));
      RsbR = sbsbsamehandcoupling(4);
      RsbR1 = RsbR*mWboson/(g*pow(msbottom1,2));
      RsbR2 = RsbR*mWboson/(g*pow(msbottom2,2));
      sbsbdiffhandcoupling = higgsHsquarkdiffhandcouplings (mWboson, g, alpha, beta, mtop, mbottom, greekmu, Atop, Abottom);
      RsbLR = sbsbdiffhandcoupling(2);
      RsbLR1 = RsbLR*mWboson/(g*pow(msbottom1,2));
      RsbLR2 = RsbLR*mWboson/(g*pow(msbottom2,2));
      Rsb1 = RsbL1*pow(cos(thetab),2) + RsbR1*pow(sin(thetab),2) - 2*RsbLR1*cos(thetab)*sin(thetab);
      Rsb2 = RsbL2*pow(sin(thetab),2) + RsbR2*pow(cos(thetab),2) + 2*RsbLR2*cos(thetab)*sin(thetab);
    }
  else if (higgstype == 'A')
    {
      RsbL=0;
      RsbR=0;
      Rsb1 = cos(thetab)*RsbL + sin(thetab)*RsbR;
      Rsb2 = -sin(thetab)*RsbL + cos(thetab)*RsbR;
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviasbottoms\n");
    errorflag = -1;
  }  
  F01(1) = f1(3)*(1-f1(3)*f1(1));
  F01(2) = f1(3)*(-f1(3)*f1(2));
  F02(1) = f2(3)*(1-f2(3)*f2(1));
  F02(2) = f2(3)*(-f2(3)*f2(2));

  Isb1(1) = 3*1./9*Rsb1*F01(1);
  Isb1(2) = 3*1./9*Rsb1*F01(2);
  Isb2(1) = 3*1./9*Rsb2*F02(1);
  Isb2(2) = 3*1./9*Rsb2*F02(2);
  Isbottomsboth(1) = Isb1(1);
  Isbottomsboth(2) = Isb1(2);
  Isbottomsboth(3) = Isb2(1);
  Isbottomsboth(4) = Isb2(2);
  return Isbottomsboth;
}  

DoubleVector higgsmatrixelementgammagammaviacharms (double m1, double mcharm, double alpha, double beta, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for charms in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1over2(2), Ic(2);
  double Rc=0;
  for (int i=1; i<=3; i++) {
    f(i) = 0;
  }

  for (int j=1; j<=2; j++) {
    F1over2(j) = 0;
    Ic(j) = 0;
  }
    
  f = foftau(mcharm, m1);
  if (higgstype == 'h')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rc = cos(alpha)/sin(beta);
    }
  else if (higgstype == 'H')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rc = sin(alpha)/sin(beta);
    }
  else if (higgstype == 'A')
    {
      F1over2(1) = -2*f(3)*f(1);
      F1over2(2) = -2*f(3)*f(2);
      Rc = 1/(tan(beta));
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviacharms\n");
    errorflag = -1;
  }
  Ic(1) = 3*4./9*Rc*F1over2(1);
  Ic(2) = 3*4./9*Rc*F1over2(2);
  return Ic;
}

DoubleVector higgsmatrixelementgammagammaviataus (double m1, double mtau, double alpha, double beta, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for taus in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1over2(2), Itau(2);
  double Rtau=0;
  for (int i=1; i<=3;i++) {
    f(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F1over2(j) = 0;
    Itau(j) = 0;
  }
    
  f = foftau(mtau, m1);
  if (higgstype == 'h')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rtau = -sin(alpha)/cos(beta);
    }
  else if (higgstype == 'H')
    {
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
      Rtau = cos(alpha)/cos(beta);
    }
  else if (higgstype == 'A')
    {
      F1over2(1) = -2*f(3)*f(1);
      F1over2(2) = -2*f(3)*f(2);
      Rtau = tan(beta);
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviataus\n");
    errorflag = -1;
  }  
  Itau(1) = 1*Rtau*F1over2(1);
  Itau(2) = 1*Rtau*F1over2(2);
  return Itau;
}  

DoubleVector higgsmatrixelementgammagammaviastaus (double m1, double mstau1, double mstau2, double mtau, double mWboson, double thetatau, double g, double gprime, double alpha, double beta, double greekmu, double Atau, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for stau1s and for stau2s in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f1(3), f2(3), F01(2), F02(2), Istau1(2), Istau2(2), Istausboth(4);
  DoubleVector higgshsleptonsamehandcouplings(double mWboson, double g, double gprime, double alpha, double beta, double mel);
  DoubleVector higgshsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mel, double greekmu, double Ae);
  DoubleVector higgsHsleptonsamehandcouplings(double mWboson, double g, double gprime, double alpha, double beta, double mel);
  DoubleVector higgsHsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mel, double greekmu, double Ae);
  double Rstau1=0, Rstau2=0, RstauL=0, RstauR=0, RstauLR=0, RstauL1=0, RstauL2=0, RstauR1=0, RstauR2=0, RstauLR1=0, RstauLR2=0;
  
  for (int i=1; i<=3;i++) {
    f1(i) = 0;
    f2(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F01(j) = 0;
    F02(j) = 0;
    Istau1(j) = 0;
    Istau2(j) = 0;
  }
  for (int k=1; k<=4; k++) {
    Istausboth(k) = 0;
  }
  
  DoubleVector staustausamehandcoupling(3);
  for (int i=1; i<=3; i++) {
  staustausamehandcoupling(i) = 0;
  }

  DoubleVector staustaudiffhandcoupling(1);
  for (int i=1; i<=1; i++) {
  staustaudiffhandcoupling(i) = 0;
  }

  f1 = foftau(mstau1, m1);
  f2 = foftau(mstau2, m1);
  if (higgstype == 'h')
    {
      staustausamehandcoupling = higgshsleptonsamehandcouplings (mWboson, g, gprime, alpha, beta, mtau);
      RstauL = staustausamehandcoupling(2);
      RstauL1 = RstauL*mWboson/(g*pow(mstau1,2));
      RstauL2 = RstauL*mWboson/(g*pow(mstau2,2));
      RstauR = staustausamehandcoupling(3);
      RstauR1 = RstauR*mWboson/(g*pow(mstau1,2));
      RstauR2 = RstauR*mWboson/(g*pow(mstau2,2));
      staustaudiffhandcoupling = higgshsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
      RstauLR = staustaudiffhandcoupling(1);
      RstauLR1 = RstauLR*mWboson/(g*pow(mstau1,2));
      RstauLR2 = RstauLR*mWboson/(g*pow(mstau2,2));
      Rstau1 = RstauL1*pow(sin(thetatau),2) + RstauR1*pow(cos(thetatau),2) + 2*RstauLR1*cos(thetatau)*sin(thetatau);
      Rstau2 = RstauL2*pow(cos(thetatau),2) + RstauR2*pow(sin(thetatau),2) - 2*RstauLR2*cos(thetatau)*sin(thetatau);
    }
  else if (higgstype == 'H')
    {
      staustausamehandcoupling = higgsHsleptonsamehandcouplings (mWboson, g, gprime, alpha, beta, mtau);
      RstauL = staustausamehandcoupling(2);
      RstauL1 = RstauL*mWboson/(g*pow(mstau1,2));
      RstauL2 = RstauL*mWboson/(g*pow(mstau2,2));
      RstauR = staustausamehandcoupling(3);
      RstauR1 = RstauR*mWboson/(g*pow(mstau1,2));
      RstauR2 = RstauR*mWboson/(g*pow(mstau2,2));
      staustaudiffhandcoupling = higgsHsleptondiffhandcouplings (mWboson, g, alpha, beta, mtau, greekmu, Atau);
      RstauLR = staustaudiffhandcoupling(1);
      RstauLR1 = RstauLR*mWboson/(g*pow(mstau1,2));
      RstauLR2 = RstauLR*mWboson/(g*pow(mstau2,2));
      Rstau1 = RstauL1*pow(sin(thetatau),2) + RstauR1*pow(cos(thetatau),2) + 2*RstauLR1*cos(thetatau)*sin(thetatau);
      Rstau2 = RstauL2*pow(cos(thetatau),2) + RstauR2*pow(sin(thetatau),2) - 2*RstauLR2*cos(thetatau)*sin(thetatau);
    }
  else if (higgstype == 'A')
    {
      RstauL=0;
      RstauR=0;
      Rstau1 = sin(thetatau)*RstauL - cos(thetatau)*RstauR;
      Rstau2 = cos(thetatau)*RstauL + sin(thetatau)*RstauR;
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviastaus\n");
    errorflag = -1;
  }
  
  F01(1) = f1(3)*(1-f1(3)*f1(1));
  F01(2) = f1(3)*(-f1(3)*f1(2));
  F02(1) = f2(3)*(1-f2(3)*f2(1));
  F02(2) = f2(3)*(-f2(3)*f2(2));

  Istau1(1) = 1*Rstau1*F01(1);
  Istau1(2) = 1*Rstau1*F01(2);
  Istau2(1) = 1*Rstau2*F02(1);
  Istau2(2) = 1*Rstau2*F02(2);
  Istausboth(1) = Istau1(1);
  Istausboth(2) = Istau1(2);
  Istausboth(3) = Istau2(1);
  Istausboth(4) = Istau2(2);
  return Istausboth;
} 

DoubleVector higgsmatrixelementgammagammaviaWbosons (double m1, double mWboson, double alpha, double beta, double g, double gprime, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for W bosons in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1(2), IW(2);
  double RW=0;
  for (int i=1; i<=3;i++) {
    f(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F1(j) = 0;
    IW(j) = 0;
  }
    
  f = foftau(mWboson, m1);
  if (higgstype == 'h')
    {
      RW = sin(beta-alpha);
    }
  else if (higgstype == 'H')
    {
      RW = cos(beta-alpha);
    }
  else if (higgstype == 'A')
    {
      RW = 0;
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviaWbosons\n");
    errorflag = -1;
  }
  F1(1) = 2 + 3*f(3) + 3*f(3)*(2-f(3))*f(1);
  F1(2) = 3*f(3)*(2-f(3))*f(2);
  
  IW(1) = RW*F1(1);
  IW(2) = RW*F1(2);
  return IW;
}  

DoubleVector higgsmatrixelementgammagammaviaHpms (double m1, double mHpm, double mWboson, double alpha, double beta, double g, double gprime, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for H+-s in the loop.
{
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F0(2), IHpm(2);
  double RHpm=0, costhetaW=0;
  for (int i=1; i<=3;i++) {
    f(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F0(j) = 0;
    IHpm(j) = 0;
  }
    
  f = foftau(mHpm, m1);

  costhetaW = pow(pow(g,2)/(pow(g,2)+pow(gprime,2)),0.5);
  if (higgstype == 'h')
    {
      RHpm = sin(beta-alpha) + cos(2*beta)*sin(beta+alpha)/(2*pow(costhetaW,2));
    }
  else if (higgstype == 'H')
    {
      RHpm = cos(beta-alpha) - cos(2*beta)*cos(beta+alpha)/(2*pow(costhetaW,2));
    }
  else if (higgstype == 'A')
    {
      RHpm = 0;
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviaHpms\n");
    errorflag = -1;
  }

  F0(1) = f(3)*(1-f(3)*f(1));
  F0(2) = f(3)*(f(3)*f(2));
  
  IHpm(1) = RHpm*F0(1)*pow(mWboson/mHpm,2);
  IHpm(2) = RHpm*F0(2)*pow(mWboson/mHpm,2);
  return IHpm;

}


DoubleVector higgsmatrixelementgammagammaviachargino1s (double m1, double mchargino1, double mWboson, double alpha, double beta, double thetaL, double thetaR, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for chargino1s in the loop.
{
  DoubleVector higgsphisamecharginocouplings (double alpha, double beta, double thetaL, double thetaR);
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1over2(2), Ichargino1(2), Charcouplings(6);
  double Rchargino1=0;
  for (int i=1; i<=3;i++) {
    f(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F1over2(j) = 0;
    Ichargino1(j) = 0;
  }
  for (int k=1; k<=6;k++) {
    Charcouplings(k) = 0;
  }
  double thetaL2 = -thetaL + PI/2;
  double thetaR2 = -thetaR + PI/2;
    
  f = foftau(mchargino1, m1);
  Charcouplings = higgsphisamecharginocouplings (alpha, beta, thetaL2, thetaR2);

  if (higgstype == 'h')
    {
      Rchargino1 = pow(2,0.5)*((cos(thetaL2)*sin(thetaR2))*-sin(alpha) + (sin(thetaL2)*cos(thetaR2))*cos(alpha));
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));

    }
  else if (higgstype == 'H')
    {
      Rchargino1 = pow(2,0.5)*((cos(thetaL2)*sin(thetaR2))*cos(alpha) + (sin(thetaL2)*cos(thetaR2))*sin(alpha));
      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
    }
  else if (higgstype == 'A')
    {
      Rchargino1 = -pow(2,0.5)*(-(cos(thetaL2)*sin(thetaR2))*sin(beta) - (sin(thetaL2)*cos(thetaR2))*cos(beta));
      F1over2(1) = -2*f(3)*f(1);
      F1over2(2) = -2*f(3)*f(2);
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviachargino1s\n");
    errorflag = -1;
  }
  
  Ichargino1(1) = Rchargino1*F1over2(1)*mWboson/mchargino1;
  Ichargino1(2) = Rchargino1*F1over2(2)*mWboson/mchargino1;

  return Ichargino1;

}

DoubleVector higgsmatrixelementgammagammaviachargino2s (double m1, double mchargino2, double mWboson, double alpha, double beta, double thetaL, double thetaR, char higgstype) ///function that calculates the part of the matrix element that differs depending on the loop particles, in this case it calculates it for chargino2s in the loop.
{
  DoubleVector higgsphisamecharginocouplings (double alpha, double beta, double thetaL, double thetaR);
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector f(3), F1over2(2), Ichargino2(2), Charcouplings(6);
  double Rchargino2=0;
  for (int i=1; i<=3;i++) {
    f(i) = 0;
  }
  for (int j=1; j<=2;j++) {
    F1over2(j) = 0;
    Ichargino2(j) = 0;
  }
  for (int k=1; k<=6;k++) {
    Charcouplings(k) = 0;
  }
  double thetaL2 = -thetaL + PI/2;
  double thetaR2 = -thetaR + PI/2;
    
  f = foftau(mchargino2, m1);

  Charcouplings = higgsphisamecharginocouplings (alpha, beta, thetaL2, thetaR2);


  if (higgstype == 'h')
    {
      Rchargino2 = pow(2,0.5)*(-sin(thetaL2)*cos(thetaR2)*-sin(alpha) + (-cos(thetaL2)*sin(thetaR2))*cos(alpha));

      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));

    }
  else if (higgstype == 'H')
    {
      Rchargino2 = pow(2,0.5)*(-sin(thetaL2)*cos(thetaR2)*cos(alpha) + (-cos(thetaL2)*sin(thetaR2))*sin(alpha));

      F1over2(1) = -2*f(3)*(1+(1-f(3))*f(1));
      F1over2(2) = -2*f(3)*((1-f(3))*f(2));
    }
  else if (higgstype == 'A')
    {
      Rchargino2 = -pow(2,0.5)*(sin(thetaL2)*cos(thetaR2)*sin(beta) + cos(thetaL2)*sin(thetaR2)*cos(beta));
      F1over2(1) = -2*f(3)*f(1);
      F1over2(2) = -2*f(3)*f(2);
    }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementgammagammaviachargino2s\n");
    errorflag = -1;
  }

  Ichargino2(1) = Rchargino2*F1over2(1)*mWboson/mchargino2;

  Ichargino2(2) = Rchargino2*F1over2(2)*mWboson/mchargino2;
  return Ichargino2;

}



double higgsesamplitudedecaygluongluontotal(double m1, double g, double gs, double gprime, double mWboson, double alpha, double beta, double mtop, double mbottom, double mcharm, double mstop1, double mstop2, double msbottom1, double msbottom2, double thetat, double thetab, double greekmu, double Atop, double Abottom, double mstrange, double mscharmL, double mscharmR, double msstrangeL, double msstrangeR, double Acharm, double Astrange, double mup, double mdown, double msupL, double msupR, double msdownL, double msdownR, double Aup, double Adown, char higgstype, bool QCD) /// function that calculates the partial width for h->gluon gluon at 1-loop (forbidden at tree-level)
{
  double prefactor=0, Itr=0, Iti=0, Ist1r=0, Ist1i=0, Ist2r=0, Ist2i=0, Ibr=0, Ibi=0, Isb1r=0, Isb1i=0, Isb2r=0, Isb2i=0, Icr=0, Ici=0, IssLr = 0, IssLi = 0, IssRr = 0, IssRi = 0, IscLr = 0, IscLi = 0, IscRr = 0, IscRi = 0, IsdLr = 0, IsdLi = 0, IsdRr = 0, IsdRi = 0, IsuLr = 0, IsuLi = 0, IsuRr = 0, IsuRi = 0, matelemmodsquare=0, amplitudeW=0;
  /// Now as the only difference is in the prefactor I can use the same functions for each of the loop contributions as in the higgs to gamma gamma case.
  DoubleVector higgsmatrixelementgammagammaviatops (double m1, double mtop, double alpha, double beta, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviastops (double m1, double mstop1, double mstop2, double mtop, double mbottom, double mWboson, double thetat, double g, double gprime, double alpha, double beta, double greekmu, double Atop, double Abottom, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviabottoms (double m1, double mbottom, double alpha, double beta, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviasbottoms (double m1, double msbottom1, double msbottom2, double mbottom, double mtop, double mWboson, double thetab, double g, double gprime, double alpha, double beta, double Atop, double Abottom, double greekmu, char higgstype);
  DoubleVector higgsmatrixelementgammagammaviacharms (double m1, double mcharm, double alpha, double beta, char higgstype);

  Itr = 1* higgsmatrixelementgammagammaviatops (m1, mtop, alpha, beta, higgstype)(1);
  Iti = 1* higgsmatrixelementgammagammaviatops (m1, mtop, alpha, beta, higgstype)(2);
  Ist1r = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(1);

  Ist1i = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(2);
  Ist2r = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(3);
  Ist2i = -higgsmatrixelementgammagammaviastops (m1, mstop1, mstop2, mtop, mbottom, mWboson, thetat, g, gprime, alpha, beta, greekmu, Atop, Abottom, higgstype)(4);
  Ibr = 4*higgsmatrixelementgammagammaviabottoms (m1, mbottom, alpha, beta, higgstype)(1);
  Ibi = 4*higgsmatrixelementgammagammaviabottoms (m1, mbottom, alpha, beta, higgstype)(2);

  Isb1r = -4*higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(1);
  Isb1i = -4*higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(2);
  Isb2r = -4*higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(3);
  Isb2i = -4*higgsmatrixelementgammagammaviasbottoms (m1, msbottom1, msbottom2, mbottom, mtop, mWboson, thetab, g, gprime, alpha, beta, Atop, Abottom, greekmu, higgstype)(4);
  Icr = 1*higgsmatrixelementgammagammaviacharms (m1, mcharm, alpha, beta, higgstype)(1);
  Ici = 1*higgsmatrixelementgammagammaviacharms (m1, mcharm, alpha, beta, higgstype)(2);

  IscLr = -higgsmatrixelementgammagammaviastops (m1, mscharmL, mscharmR, mcharm, mstrange, mWboson, 0, g, gprime, alpha, beta, greekmu, Acharm, Astrange, higgstype)(1);
  IscLi = -higgsmatrixelementgammagammaviastops (m1, mscharmL, mscharmR, mcharm, mstrange, mWboson, 0, g, gprime, alpha, beta, greekmu, Acharm, Astrange, higgstype)(2);
  IscRr = -higgsmatrixelementgammagammaviastops (m1, mscharmL, mscharmR, mcharm, mstrange, mWboson, 0, g, gprime, alpha, beta, greekmu, Acharm, Astrange, higgstype)(3);
  IscRi = -higgsmatrixelementgammagammaviastops (m1, mscharmL, mscharmR, mcharm, mstrange, mWboson, 0, g, gprime, alpha, beta, greekmu, Acharm, Astrange, higgstype)(4);
  IssLr = -4*higgsmatrixelementgammagammaviasbottoms (m1, msstrangeL, msstrangeR, mstrange, mcharm, mWboson, 0, g, gprime, alpha, beta, Acharm, Astrange, greekmu, higgstype)(1);
  IssLi = -4*higgsmatrixelementgammagammaviasbottoms (m1, msstrangeL, msstrangeR, mstrange, mcharm, mWboson, 0, g, gprime, alpha, beta, Acharm, Astrange, greekmu, higgstype)(2);
  IssRr = -4*higgsmatrixelementgammagammaviasbottoms (m1, msstrangeL, msstrangeR, mstrange, mcharm, mWboson, 0, g, gprime, alpha, beta, Acharm, Astrange, greekmu, higgstype)(3);
  IssRi = -4*higgsmatrixelementgammagammaviasbottoms (m1, msstrangeL, msstrangeR, mstrange, mcharm, mWboson, 0, g, gprime, alpha, beta, Acharm, Astrange, greekmu, higgstype)(4);
  IsuLr = -higgsmatrixelementgammagammaviastops (m1, msupL, msupR, mup, mdown, mWboson, 0, g, gprime, alpha, beta, greekmu, Aup, Adown, higgstype)(1);
  IsuLi = -higgsmatrixelementgammagammaviastops (m1, msupL, msupR, mup, mdown, mWboson, 0, g, gprime, alpha, beta, greekmu, Aup, Adown, higgstype)(2);
  IsuRr = -higgsmatrixelementgammagammaviastops (m1, msupL, msupR, mup, mdown, mWboson, 0, g, gprime, alpha, beta, greekmu, Aup, Adown, higgstype)(3);
  IsuRi = -higgsmatrixelementgammagammaviastops (m1, msupL, msupR, mup, mdown, mWboson, 0, g, gprime, alpha, beta, greekmu, Aup, Adown, higgstype)(4);
  IsdLr = -4*higgsmatrixelementgammagammaviasbottoms (m1, msdownL, msdownR, mdown, mup, mWboson, 0, g, gprime, alpha, beta, Aup, Adown, greekmu, higgstype)(1);
  IsdLi = -4*higgsmatrixelementgammagammaviasbottoms (m1, msdownL, msdownR, mdown, mup, mWboson, 0, g, gprime, alpha, beta, Aup, Adown, greekmu, higgstype)(2);
  IsdRr = -4*higgsmatrixelementgammagammaviasbottoms (m1, msdownL, msdownR, mdown, mup, mWboson, 0, g, gprime, alpha, beta, Aup, Adown, greekmu, higgstype)(3);
  IsdRi = -4*higgsmatrixelementgammagammaviasbottoms (m1, msdownL, msdownR, mdown, mup, mWboson, 0, g, gprime, alpha, beta, Aup, Adown, greekmu, higgstype)(4);

  DoubleVector matelemsum(2);
  matelemsum(1) = Itr + Ist1r + Ist2r + Ibr + Isb1r + Isb2r + Icr + IscLr + IscRr + IssLr + IssRr + IsuLr + IsuRr + IsdLr + IsdRr;
  matelemsum(2) = Iti + Ist1i + Ist2i + Ibi + Isb1i + Isb2i + Ici + IscLi + IscRi + IssLi + IssRi + IsuLi + IsuRi + IsdLi + IsdRi;

  prefactor = pow(gs,4)*GFosqrt2/(128*pow(PI,5)*16)*pow(m1,3)*9./8;

  //  *ffout << "Itr = " << Itr << endl; *ffout << " Ist1r = " << Ist1r << endl; *ffout<< " Ist2r = " << Ist2r << endl; *ffout<< " Ibr = " << Ibr << endl; *ffout<< " Isb1r = " << Isb1r << endl; *ffout<< " Isb2r = " << Isb2r << endl; *ffout << "Icr = " << Icr << endl; *ffout << "IsuLr = " << IsuLr << endl; *ffout << "IsuRr = "<< IsuRr << endl; *ffout << "IsdLr = "<< IsdLr << endl; *ffout << "IsdRr = " << IsdRr << endl; *ffout << "IscLr = " << IscLr << endl; *ffout << "IscRr = " << IscRr << endl; *ffout << "IssLr = " << IssLr << endl; *ffout << "IssRr = " << IssRr << endl;
  // *ffout << "Iti = " << Iti << endl; *ffout << " Ist1i = " << Ist1i << endl; *ffout<< " Ist2i = " << Ist2i << endl; *ffout<< " Ibi = " << Ibi << endl; *ffout<< " Isb1i = " << Isb1i << endl; *ffout<< " Isb2i = " << Isb2i << endl; *ffout << "Ici = " << Ici << endl; *ffout << "IsuLi = " << IsuLi << endl; *ffout << "IsuRi = "<< IsuRi << endl; *ffout << "IsdLi = "<< IsdLi << endl; *ffout << "IsdRi = " << IsdRi << endl; *ffout << "IscLi = " << IscLi << endl; *ffout << "IscRi = " << IscRi << endl; *ffout << "IssLi = " << IssLi << endl; *ffout << "IssRi = " << IssRi << endl;

  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);

  amplitudeW = prefactor*matelemmodsquare;

  double SMTOTRE = 0, SMTOTIM = 0, SQTOTRE = 0, SQTOTIM = 0;
  SQTOTRE = Ist1r + Ist2r + Isb1r + Isb2r + IscLr + IscRr + IssLr + IssRr + IsuLr + IsuRr + IsdLr + IsdRr;
  SQTOTIM = Ist1i + Ist2i + Isb1i + Isb2i + IscLi + IscRi + IssLi + IssRi + IsuLi + IsuRi + IsdLi + IsdRi;
  SMTOTRE = matelemsum(1) - SQTOTRE; SMTOTIM = matelemsum(2) - SQTOTIM;

  if (QCD == true) {
    int NF = 0;
    if (higgstype == 'h') { NF = 5;}
    else if (higgstype == 'H' || higgstype == 'A') { NF = 6;}
    else {
      throw("Problem: higgstype must be 'h', 'H' or 'A' in higgsesamplitudedecaygluongluontotal as in MSSM!\n");
      errorflag = -1;
    }
    DoubleVector hggQCDcorrections(double amplitudeW, double alphas, int Nf, char higgs, double prefactor, double SMtotr, double SMtoti, double sqtotr, double sqtoti);
    amplitudeW = hggQCDcorrections(amplitudeW, pow(gs,2)/(4*PI), NF, higgstype, prefactor, SMTOTRE, SMTOTIM, SQTOTRE, SQTOTIM)(1);

  }
  else if (QCD == false) {
    amplitudeW = amplitudeW;
  }
      
  return amplitudeW;

}

///Function for QCD corrections to h->gg
DoubleVector hggQCDcorrections(double amplitudeW, double alphas, int Nf, char higgs, double prefactor, double SMtotr, double SMtoti, double sqtotr, double sqtoti)
{
  double amplitudeafterFQCD = 0, amplitudefromSQCD = 0, amplitude = 0, hggstargcc = 0, hggstargbb = 0;
  double fermionQCDcorrections(double amplitudeW, double alphasnow, double alphasprev, int Nf, char higgs);
  double susyQCDcorrections(double prefactor, double alphas, double totr, double toti, double sqtotr, double sqtoti);
  DoubleVector Returns(3);
  for (int i = 1; i<=3; i++) {
    Returns(i) = 0;
  }

  amplitudeafterFQCD = fermionQCDcorrections(amplitudeW,alphas,alphas,Nf,higgs);

  amplitudefromSQCD = susyQCDcorrections(prefactor, alphas, SMtotr, SMtoti, sqtotr, sqtoti);

  amplitude = amplitudeafterFQCD + amplitudefromSQCD;
  
  Returns(1) = amplitude; Returns(2) = hggstargcc; Returns(3) = hggstargbb;
  return Returns;
}

///Function for the fermionic QCD corrections to e.g. h->gg
double fermionQCDcorrections(double amplitudeW, double alphasnow, double alphasprev, int Nf, char higgs) ///alphasprev required so can multiply by ratio accounting for change in alphas effect in prefactor of hgg in gluongluontotal function above
{
  double amplitude = 0;
  if (higgs == 'h' || higgs == 'H') {
    amplitude = amplitudeW*(1+alphasnow/PI*(95./4-7./6*Nf))*pow(alphasnow/alphasprev,2);
    // *ffout << "FQCD factor = " << (1+alphasnow/PI*(95./4-7./6*Nf))*pow(alphasnow/alphasprev,2) << std::endl;
  }
  else if (higgs == 'A') {
    amplitude = amplitudeW*(1+alphasnow/PI*(97./4-7./6*Nf))*pow(alphasnow/alphasprev,2);
  }
  else {
    throw("problem: higgstype must be 'h' or 'H' or 'A' in fermionQCDcorrections as must be in MSSM\n");
    errorflag = -1;
  }
  return amplitude;
}

///Function for the susy QCD corrections to h->gg, i.e. the corrections to the squark loops
double susyQCDcorrections(double prefactor, double alphas, double SMtotr, double SMtoti, double sqtotr, double sqtoti) ///
{
  double amplitude = 0, factor = 0;
  factor = 17./6*alphas/PI; ///additional correction at NLO to squark loops
  // *ffout << "SQCD factor = " << factor << std::endl;
  amplitude = prefactor*(SMtotr*sqtotr+pow(sqtotr,2)+SMtoti*sqtoti+pow(sqtoti,2))*factor; ///Note the (SMr*sqr+pow(sqr,2)+SMi*sqi+pow(sqi,2)) is just Re[c.c. of total matrix element x matrix element part from squarks] this is the interference of the total matrix element with the squark parts of the matrix element which get extra alphas susy qcd corrections. Note amplitude here must be added to the amplitude inc FQCD corrections to get the total FQCD and SQCD corrected amplitude.

  return amplitude;
}

double higgsamplitudedecayVVstar (double m1, double mWboson, double mZboson, double g, double gp, double beta, double alpha, char Vtype, DoubleMatrix & CPEMix, bool nmssmIsIt, int higgs) ///Function that calculates higgs to VV* to Vff'bar. Formula derived as in Marciano and Keung, massless fermion limit and zero W width considered.
{
    double prefactor=0, epsilon=0, integrals=0, a=0, b=0, c=0, coupling = 0, mboson = 0, amplitudeW=0;
    double sin2thetaW = pow(gp,2)/(pow(g,2)+pow(gp,2));
    double cos2thetaW = pow(g,2)/(pow(g,2)+pow(gp,2));

    // *ffout << "g^2/(8*mW^2) = " << pow(g/mWboson,2)/8 << std::endl;
    // *ffout << "Gfosqrt2 = " << GFosqrt2 << std::endl;
    // *ffout << "mZ = "  << mZboson << std::endl;
    // *ffout << "mW/costhetaW = " << mWboson/pow(cos2thetaW,0.5) << std::endl;

  if (higgs == 1) {
    if (nmssmIsIt == false) { coupling = sin(beta-alpha);}
    else if (nmssmIsIt == true) { coupling = CPEMix(1,1)*sin(beta) + CPEMix(1,2)*cos(beta);}
  }
  else if (higgs == 2) {
     if (nmssmIsIt == false) { coupling = cos(beta-alpha);}
    else if (nmssmIsIt == true) { coupling = CPEMix(2,1)*sin(beta) + CPEMix(2,2)*cos(beta);}
  }
  else if (higgs == 2) {
    if (nmssmIsIt == false) { coupling = 0;} ///Only get H3 in NMSSM
    else if (nmssmIsIt == true) { coupling = CPEMix(3,1)*sin(beta) + CPEMix(3,2)*cos(beta);}
  }
  else {
    throw("problem: higgs must be 1 or 2 in higgsamplituddecayVVstar\n");
    errorflag = -1;
  }

  if (Vtype == 'W') { mboson = mWboson;}
  else if (Vtype == 'Z') { mboson = mZboson;}

  if(m1 < 2*mboson && m1 > mboson) {
    if (Vtype == 'W') {
	// prefactor = 3*pow(g,4)*m1/(512*pow(PI,3))*pow(coupling,2);
	// prefactor = 3*GFosqrt2*m1*pow(g*mboson,2)/(64*pow(PI,3))*pow(coupling,2);
	prefactor = pow(GFosqrt2,2)*3*pow(mboson,4)/(8*pow(PI,3))*m1*pow(coupling,2);
    }
    else if (Vtype == 'Z') {
	// prefactor = pow(g,4)*m1/(2048*pow(PI,3)*pow(cos2thetaW,2))*(7 - 40*sin2thetaW/3 + 160*pow(sin2thetaW,2)/9)*pow(coupling,2);
	// prefactor = pow(GFosqrt2,2)*m1/(32*pow(PI,3))*pow(mboson,4)*(7 - 40*sin2thetaW/3 + 160*pow(sin2thetaW,2)/9)*pow(coupling,2);
	prefactor = pow(GFosqrt2,2)*m1/(32*pow(PI,3))*pow(mWboson,4)/pow(cos2thetaW,2)*(7 - 40*sin2thetaW/3 + 160*pow(sin2thetaW,2)/9)*pow(coupling,2);

    }
    else {
      throw("problem: Vtype must be W or Z in higgsamplitudedecayVVstar\n");
      errorflag = -1;
    }
  epsilon = mboson/m1;
  a = 3*(1-8*pow(epsilon,2)+20*pow(epsilon,4))/(pow(4*pow(epsilon,2)-1,0.5))*acos((3*pow(epsilon,2)-1)/(2*pow(epsilon,3)));
  b = (1-pow(epsilon,2))*(47./2*pow(epsilon,2)-13./2+1/(pow(epsilon,2)));
  c = 3*(1-6*pow(epsilon,2)+4*pow(epsilon,4))*log(epsilon);
  integrals = a - b - c;
  amplitudeW = prefactor*integrals;
  // *ffout << Vtype << Vtype << ": " << std::endl;
  // *ffout << "prefactor = " << prefactor << std::endl;
  // *ffout << "integrals = " << integrals << std::endl;
  // *ffout << "GFosqrt2 = " << GFosqrt2 << std::endl;
  // *ffout << "g^2/(8*mboson^2) = " << pow(g/mboson,2)/8 << std::endl;
  }
  else if(m1> 2*mboson || m1< mboson) {
     throw("problem: in higgsamplitudedecayVVstar m1 either greater than 2*mboson so both on-shell, or m1 less than mboson so both off-shell, this formula is for one on-shell vector boson and one off-shell vector boson (of the same type of course)\n"); 
  }
  return amplitudeW;
}

DoubleVector higgshamplitudedecayVV(double m1, double mWboson, double mZboson, double g, double gp, double alpha, double beta, char Vtype, DoubleMatrix & CPEMix, bool nmssmIsIt) ///Function that calculates the light Higgs decays to two vector bosons, both on-shell or one off-shell
{
  DoubleVector Returns(2);
  for (int i=1; i<=2; i++) {
    Returns(i) = 0;
  }
  double higgsamplitudedecayVVstar (double m1, double mWboson, double mZboson, double g, double gp, double beta, double alpha, char Vtype , DoubleMatrix & CPEMix, bool nmssmIsIt, int higgs);
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, prefactor=0, m2=0, m3=0, massratio=0, coupling = 0;
  if (Vtype == 'W')
    {
      if (fabs(m1) < fabs(mWboson)) {
	amplitudeW = 0; ///I don't calculate cases where both are off-shell
      }
      else if (fabs(m1) < 2*fabs(mWboson)) {
	  amplitudeW = higgsamplitudedecayVVstar (m1, mWboson, mZboson, g, gp, beta, alpha, 'W', CPEMix, nmssmIsIt, 1);
	  Returns(2) = 1;
	}
      else if (fabs(m1) >= 2*fabs(mWboson)) {
	m2 = mWboson, m3 = mWboson;
	squareplus = 1 - pow(m3/m1+m2/m1,2);
	squareminus = 1 - pow(m3/m1-m2/m1,2);
	lambda = pow(squareplus*squareminus,0.5);
	if (squareplus*squareminus < 0) {
	  throw("lambda will give nan in higgshamplitudedecayVV for W\n");
	  errorflag = -1;
	} 
	// prefactor = pow(g,2)*pow(m1,3)/(64*PI*pow(mWboson,2));
	prefactor = GFosqrt2*pow(m1,3)/(8*PI);
	massratio = 4*pow(mWboson/m1,2);
	if (nmssmIsIt == false) { coupling = sin(beta-alpha);}
	else if (nmssmIsIt == true) { coupling = CPEMix(1,1)*sin(beta) + CPEMix(1,2)*cos(beta);}
	amplitudeW = lambda*prefactor*(1-massratio + 3./4*pow(massratio,2))*pow(coupling,2);
	Returns(2) = 2;
      }

    }
    else if (Vtype == 'Z') {
      if (fabs(m1) < fabs(mZboson)) {
	amplitudeW = 0; ///I don't calculate cases where both are off-shell
      }
      else if (fabs(m1) < 2*fabs(mZboson)) {
	  amplitudeW = higgsamplitudedecayVVstar (m1, mWboson, mZboson, g, gp, beta, alpha, 'Z', CPEMix, nmssmIsIt, 1);
	  Returns(2) = 1;
      }
      else if (fabs(m1) >= 2*fabs(mZboson)) {
	m2 = mZboson, m3 = mZboson;
	squareplus = 1 - pow(m3/m1+m2/m1,2);
	squareminus = 1 - pow(m3/m1-m2/m1,2);
	lambda = pow(squareplus*squareminus,0.5);
	if (squareplus*squareminus < 0) {
	  throw("lambda will give nan in higgshamplitudedecayVV for Z\n");
	  errorflag = -1;
	} 
	// prefactor = pow(g,2)*pow(m1,3)/(128*PI*pow(mWboson,2));	
	prefactor = GFosqrt2*pow(m1,3)/(16*PI);
	massratio = 4*pow(mZboson/m1,2);
	if (nmssmIsIt == false) { coupling = sin(beta-alpha);}
	else if (nmssmIsIt == true) { coupling = CPEMix(1,1)*sin(beta) + CPEMix(1,2)*cos(beta);}
	amplitudeW = lambda*prefactor*(1-massratio + 3./4*pow(massratio,2))*pow(coupling,2);
	Returns(2) = 2;
      }
    }
    else {
      throw("problem: Vtype must be W or Z in higgshamplitudedecayVV\n");
      errorflag = -1;
    }
  Returns(1) = amplitudeW;
  return Returns;
}
 

DoubleVector higgsHamplitudedecayVV(double m1, double mWboson, double mZboson, double g, double gp, double alpha, double beta, char Vtype, DoubleMatrix & CPEMix, bool nmssmIsIt) ///Function that calculates the Heavy Higgs decays to two vector bosons, assuming both are on-shell.
{
  DoubleVector Returns(2);
  for (int i=1; i<=2; i++) {
    Returns(i) = 0;
  }
  double higgsamplitudedecayVVstar (double m1, double mWboson, double mZboson, double g, double gp, double beta, double alpha, char Vtype , DoubleMatrix & CPEMix, bool nmssmIsIt, int higgs);
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, prefactor=0, m2=0, m3=0, massratio=0, coupling = 0;
  if (Vtype == 'W')
    {
      if (fabs(m1) < fabs(mWboson)) {
	amplitudeW = 0;
      }
      else if (fabs(m1) < 2*fabs(mWboson)) {
	  amplitudeW = higgsamplitudedecayVVstar (m1, mWboson, mZboson, g, gp, beta, alpha, 'W', CPEMix, nmssmIsIt, 2);
	  Returns(2) = 1;
	}
      else if (fabs(m1) >= 2*fabs(mWboson)) {
	m2 = mWboson, m3 = mWboson;
	squareplus = 1 - pow(m3/m1+m2/m1,2);
	squareminus = 1 - pow(m3/m1-m2/m1,2);
	lambda = pow(squareplus*squareminus,0.5);
	if (squareplus*squareminus < 0) {
	  throw("lambda will give nan in higgsHamplitudedecayVV for W\n");
	  errorflag = -1;
	} 
	// prefactor = pow(g,2)*pow(m1,3)/(64*PI*pow(mWboson,2));
	prefactor = GFosqrt2*pow(m1,3)/(8*PI);
	massratio = 4*pow(mWboson/m1,2);
	if (nmssmIsIt == false) { coupling = cos(beta-alpha);}
	else if (nmssmIsIt == true) { coupling = CPEMix(2,1)*sin(beta) + CPEMix(2,2)*cos(beta);}
	amplitudeW = lambda*prefactor*(1-massratio + 3./4*pow(massratio,2))*pow(coupling,2);
	Returns(2) = 2;
      }

    }
    else if (Vtype == 'Z') {
      if (fabs(m1) < fabs(mZboson)) {
	amplitudeW = 0;
      }
      else if (fabs(m1) < 2*fabs(mZboson)) {
	  amplitudeW = higgsamplitudedecayVVstar (m1, mWboson, mZboson, g, gp, beta, alpha, 'Z', CPEMix, nmssmIsIt, 2);
	Returns(2) = 1;
      }
      else if (fabs(m1) >= 2*fabs(mZboson)) {
	m2 = mZboson, m3 = mZboson;
	squareplus = 1 - pow(m3/m1+m2/m1,2);
	squareminus = 1 - pow(m3/m1-m2/m1,2);
	lambda = pow(squareplus*squareminus,0.5);
	if (squareplus*squareminus < 0) {
	  throw("lambda will give nan in higgsHamplitudedecayVV for Z\n");
	  errorflag = -1;
	} 
	// prefactor = pow(g,2)*pow(m1,3)/(128*PI*pow(mWboson,2));	
	prefactor = GFosqrt2*pow(m1,3)/(16*PI);
	massratio = 4*pow(mZboson/m1,2);
	if (nmssmIsIt == false) { coupling = cos(beta-alpha);}
	else if (nmssmIsIt == true) { coupling = CPEMix(2,1)*sin(beta) + CPEMix(2,2)*cos(beta);}
	amplitudeW = lambda*prefactor*(1-massratio + 3./4*pow(massratio,2))*pow(coupling,2);
	Returns(2) = 2;
      }
    }
    else {
      throw("problem: Vtype must be W or Z in higgsHamplitudedecayVV\n");
      errorflag = -1;
    }
  Returns(1) = amplitudeW;
   return Returns;
}

DoubleVector higgsH3amplitudedecayVVNMSSM(double m1, double mWboson, double mZboson, double g, double gp, double alpha, double beta, char Vtype, DoubleMatrix & CPEMix, bool nmssmIsIt) ///Function that calculates the Heavy Higgs decays to two vector bosons, assuming both are on-shell.
{
  DoubleVector Returns(2);
  for (int i=1; i<=2; i++) {
    Returns(i) = 0;
  }
  double higgsamplitudedecayVVstar (double m1, double mWboson, double mZboson, double g, double gp, double beta, double alpha, char Vtype , DoubleMatrix & CPEMix, bool nmssmIsIt, int higgs);
  double amplitudeW=0, squareplus=0, squareminus=0, lambda=0, prefactor=0, m2=0, m3=0, massratio=0, coupling = 0;
  if (Vtype == 'W')
    {
      if (fabs(m1) < fabs(mWboson)) {
	amplitudeW = 0;
      }
      else if (fabs(m1) < 2*fabs(mWboson)) {
	  amplitudeW = higgsamplitudedecayVVstar (m1, mWboson, mZboson, g, gp, beta, alpha, 'W', CPEMix, nmssmIsIt, 2);
	  Returns(2) = 1;
	}
      else if (fabs(m1) >= 2*fabs(mWboson)) {
	m2 = mWboson, m3 = mWboson;
	squareplus = 1 - pow(m3/m1+m2/m1,2);
	squareminus = 1 - pow(m3/m1-m2/m1,2);
	lambda = pow(squareplus*squareminus,0.5);
	if (squareplus*squareminus < 0) {
	  throw("lambda will give nan in higgsH3amplitudedecayVVNMSSM for W\n");
	  errorflag = -1;
	} 
	prefactor = GFosqrt2*pow(m1,3)/(8*PI);
	massratio = 4*pow(mWboson/m1,2);
	if (nmssmIsIt == false) { coupling = 0;} ///Only get H3 in NMSSM
	else if (nmssmIsIt == true) { coupling = CPEMix(3,1)*sin(beta) + CPEMix(3,2)*cos(beta);}
	amplitudeW = lambda*prefactor*(1-massratio + 3./4*pow(massratio,2))*pow(coupling,2);
	Returns(2) = 2;
      }

    }
    else if (Vtype == 'Z') {
      if (fabs(m1) < fabs(mZboson)) {
	amplitudeW = 0;
      }
      else if (fabs(m1) < 2*fabs(mZboson)) {
	  amplitudeW = higgsamplitudedecayVVstar (m1, mWboson, mZboson, g, gp, beta, alpha, 'Z', CPEMix, nmssmIsIt, 2);
	  Returns(2) = 1;
      }
      else if (fabs(m1) >= 2*fabs(mZboson)) {
	m2 = mZboson, m3 = mZboson;
	squareplus = 1 - pow(m3/m1+m2/m1,2);
	squareminus = 1 - pow(m3/m1-m2/m1,2);
	lambda = pow(squareplus*squareminus,0.5);
	if (squareplus*squareminus < 0) {
	  throw("lambda will give nan in higgsH3amplitudedecayVVNMSSM for Z\n");
	  errorflag = -1;
	} 
	prefactor = GFosqrt2*pow(m1,3)/(16*PI);	
	massratio = 4*pow(mZboson/m1,2);
	if (nmssmIsIt == false) { coupling = 0;} ///Only get H3 in NMSSM
	else if (nmssmIsIt == true) { coupling = CPEMix(3,1)*sin(beta) + CPEMix(3,2)*cos(beta);}
	amplitudeW = lambda*prefactor*(1-massratio + 3./4*pow(massratio,2))*pow(coupling,2);
	Returns(2) = 2;
      }
    }
    else {
      throw("problem: Vtype must be W or Z in higgsH3amplitudedecayVV\n");
      errorflag = -1;
    }
  Returns(1) = amplitudeW;

  return Returns;
}


double higgsesamplitudedecayZbosonphotontotal(double m1, double mZboson, double g, double gprime, double alphaEmrun, double polemw, double runmw, double alpha, double beta, double mtop, double mbottom, double mcharm, double mstrange, double mstop1, double mstop2, double msbottom1, double msbottom2, double mHplus, double thetat, double thetab, double greekmu, double Atop, double Abottom, char higgstype) /// function that calculates the partial width for h->Z gamma at 1-loop (forbidden at tree-level)
{
  double prefactor=0, Itr=0, Iti=0, Ibr=0, Ibi=0, Icr=0, Ici=0, Isr=0, Isi=0, IWr=0, IWi=0, IHpr=0, IHpi=0, matelemmodsquare=0, amplitudeW=0;
 
  if (m1 < mZboson) {
    amplitudeW = 0;
  }
  else {
 
     DoubleVector higgsmatrixelementZgammaviafermions (double m1, double mferm, double mZboson, double mWboson, double alpha, double beta, double g, double gprime, double Qferm, double I3ferm, char fermtype, char higgstype);
     DoubleVector higgsmatrixelementZgammaviaWbosons (double m1, double mWboson, double mZboson, double alpha, double beta, double g, double gprime, char higgstype);
     DoubleVector higgsmatrixelementZgammaviaHplus (double m1, double mWboson, double mZboson, double mHplus, double alpha, double beta, double g, double gprime, char higgstype);

     Itr = 1* higgsmatrixelementZgammaviafermions (m1, mtop, mZboson, polemw, alpha, beta, g, gprime, 2./3, 1./2, 'u', higgstype)(1);
     Iti = 1* higgsmatrixelementZgammaviafermions (m1, mtop, mZboson, polemw, alpha, beta, g, gprime, 2./3, 1./2, 'u', higgstype)(2);

     Ibr = 1* higgsmatrixelementZgammaviafermions (m1, mbottom, mZboson, polemw, alpha, beta, g, gprime, -1./3, -1./2, 'd', higgstype)(1);
     Ibi = 1* higgsmatrixelementZgammaviafermions (m1, mbottom, mZboson, polemw, alpha, beta, g, gprime, -1./3, -1./2, 'd', higgstype)(2);

     Icr = 1* higgsmatrixelementZgammaviafermions (m1, mcharm, mZboson, polemw, alpha, beta, g, gprime, 2./3, 1./2, 'u', higgstype)(1);
     Ici = 1* higgsmatrixelementZgammaviafermions (m1, mcharm, mZboson, polemw, alpha, beta, g, gprime, 2./3, 1./2, 'u', higgstype)(2);
     Isr = 1* higgsmatrixelementZgammaviafermions (m1, mstrange, mZboson, polemw, alpha, beta, g, gprime, -1./3, -1./2, 'd', higgstype)(1);
     Isi = 1* higgsmatrixelementZgammaviafermions (m1, mstrange, mZboson, polemw, alpha, beta, g, gprime, -1./3, -1./2, 'd', higgstype)(2);
     IWr = higgsmatrixelementZgammaviaWbosons (m1, polemw, mZboson, alpha, beta, g, gprime, higgstype)(1);
     IWi = higgsmatrixelementZgammaviaWbosons (m1, polemw, mZboson, alpha, beta, g, gprime, higgstype)(2);
     IHpr = higgsmatrixelementZgammaviaHplus (m1, polemw, mZboson, mHplus, alpha, beta, g, gprime, higgstype)(1);
     IHpi = higgsmatrixelementZgammaviaHplus (m1, polemw, mZboson, mHplus, alpha, beta, g, gprime, higgstype)(2);  
        
     DoubleVector matelemsum(2);
     matelemsum(1) = Itr + Ibr + Icr + Isr + IWr + IHpr;
     matelemsum(2) = Iti + Ibi + Ici + Isi + IWi + IHpi;
     prefactor = pow(m1,3)/(64*pow(PI,3))*pow(1-pow(mZboson/m1,2),3)*GFosqrt2*pow(alphaEmrun,2);
         
     matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
     amplitudeW = prefactor*matelemmodsquare;
     
  }
  return amplitudeW;
}

DoubleVector higgsmatrixelementZgammaviafermions (double m1, double mferm, double mZboson, double mWboson, double alpha, double beta, double g, double gprime, double Qferm, double I3ferm, char fermtype, char higgstype) ///Calculates contribution of fermion loop to higgs to Z gamma decay
{
  double sinthetaW=0, costhetaW=0, Rhf=0, factor1=0, Integral1r=0, Integral1i=0, Integral2r=0, Integral2i=0;
  DoubleVector amplitude(2);
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector goftau(double mpart, double mcomp);
  DoubleVector ftau(3), flambda(3), gtau(3), glambda(3);
  for (int i=1; i<=3;i++) {
    ftau(i) = 0;
    flambda(i) = 0;
    gtau(i) = 0;
    glambda(i) = 0;
  }
  for (int i=1; i<=2;i++) {
    amplitude(i) = 0;
  }
  costhetaW = mWboson/mZboson;
  sinthetaW = pow(1 - pow(costhetaW,2),0.5);
  factor1 = -2*Qferm*(I3ferm-2*Qferm*pow(sinthetaW,2));
  if (higgstype == 'h') {
    if (fermtype == 'u') {
      Rhf = cos(alpha)/(sin(beta));
    }
    else if (fermtype == 'd') {
      Rhf = -sin(alpha)/cos(beta);
      }
    else {
      throw("problem: fermtype must be u or d in higgsmatrixelementZgammaviafermions\n");
      errorflag = -1;
    }
  }
  else if (higgstype == 'H') {
    if (fermtype == 'u') {
      Rhf = sin(alpha)/(sin(beta));
    }
    else if (fermtype == 'd') {
      Rhf = cos(alpha)/(cos(beta));
    }
    else {
      throw("problem: fermtype must be u or d in higgsmatrixelementZgammaviafermions\n");
      errorflag = -1;
    }
  }
  else if (higgstype == 'A') {
    if (fermtype == 'u') {
      Rhf = 1/tan(beta);
    }
    else if (fermtype == 'd') {
      Rhf = tan(beta);
    }
    else {
      throw("problem: fermtype must be u or d in higgsmatrixelementZgammaviafermions\n");
      errorflag = -1;
    }
  }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementZgammaviafermions\n");
    errorflag = -1;
  }
  ftau = foftau(mferm, m1);
  flambda = foftau(mferm, mZboson);
  gtau = goftau(mferm, m1);
  glambda = goftau (mferm, mZboson); 
  if (higgstype == 'h' || higgstype == 'H') {
    Integral1r = ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3))) + pow(ftau(3)*flambda(3),2)/(2*pow((ftau(3)-flambda(3)),2))*(ftau(1)-flambda(1)) + pow(ftau(3),2)*flambda(3)/(pow(ftau(3)-flambda(3),2))*(gtau(1)-glambda(1));
    Integral1i = pow(ftau(3)*flambda(3),2)/(2*pow((ftau(3)-flambda(3)),2))*(ftau(2)-flambda(2)) + pow(ftau(3),2)*flambda(3)/(pow(ftau(3)-flambda(3),2))*(gtau(2)-glambda(2));
  }
  else if (higgstype == 'A') {
    Integral1r = 0;
    Integral1i = 0;
  }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementZgammaviafermions\n");
    errorflag = -1;
  }
  Integral2r = -ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3)))*(ftau(1)-flambda(1));
  Integral2i = -ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3)))*(ftau(2)-flambda(2));  
  
  amplitude(1) = 3*Rhf*factor1/(sinthetaW*costhetaW)*(Integral1r-Integral2r);
  amplitude(2) = 3*Rhf*factor1/(sinthetaW*costhetaW)*(Integral1i-Integral2i);
  return amplitude;
}

DoubleVector higgsmatrixelementZgammaviaWbosons (double m1, double mWboson, double mZboson, double alpha, double beta, double g, double gprime, char higgstype) ///Calculates contribution of W boson loop to higgs to Z gamma decay
{
  double tanthetaW=0, RhW=0, factor1=0, factor2=0, Integral1r=0, Integral1i=0, Integral2r=0, Integral2i=0;
  DoubleVector amplitude(2);
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector goftau(double mpart, double mcomp);
  DoubleVector ftau(3), flambda(3), gtau(3), glambda(3);
  for (int i=1; i<=3;i++) {
    ftau(i) = 0;
    flambda(i) = 0;
    gtau(i) = 0;
    glambda(i) = 0;
  }
  for (int i=1; i<=2;i++) {
    amplitude(i) = 0;
  }
  tanthetaW = pow((1-pow((mWboson/mZboson),2))/(pow(mWboson/mZboson,2)),0.5);
  if (higgstype == 'h') {
    RhW = sin(beta-alpha);
    }
  else if (higgstype == 'H') {
    RhW = cos(beta-alpha);
  }
  else if (higgstype == 'A') {
    RhW = 0;
  }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementZgammaviaWbosons\n");
    errorflag = -1;
  }
  ftau = foftau(mWboson, m1);
  flambda = foftau(mWboson, mZboson);
  gtau = goftau(mWboson, m1);
  glambda = goftau (mWboson, mZboson); 
  
  factor1 = 4*(3-pow(tanthetaW,2));
  factor2 = (1+2/ftau(3))*pow(tanthetaW,2) - (5+2/ftau(3));

  Integral1r = ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3))) + pow(ftau(3)*flambda(3),2)/(2*pow((ftau(3)-flambda(3)),2))*(ftau(1)-flambda(1)) + pow(ftau(3),2)*flambda(3)/(pow(ftau(3)-flambda(3),2))*(gtau(1)-glambda(1));
  Integral1i =pow(ftau(3)*flambda(3),2)/(2*pow((ftau(3)-flambda(3)),2))*(ftau(2)-flambda(2)) + pow(ftau(3),2)*flambda(3)/(pow(ftau(3)-flambda(3),2))*(gtau(2)-glambda(2));
  Integral2r = -ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3)))*(ftau(1)-flambda(1));
  Integral2i = -ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3)))*(ftau(2)-flambda(2));
  amplitude(1) = -RhW*1/tanthetaW*(factor1*Integral2r + factor2*Integral1r);
  amplitude(2) = -RhW*1/tanthetaW*(factor1*Integral2i + factor2*Integral1i);

  return amplitude;
}

DoubleVector higgsmatrixelementZgammaviaHplus (double m1, double mWboson, double mZboson, double mHplus, double alpha, double beta, double g, double gprime, char higgstype) ///Calculates contribution of charged higgs boson loop to higgs to Z gamma decay
{
  double sinthetaW=0, costhetaW=0, RhHplus=0, factor1=0, Integral1r=0, Integral1i=0;
  DoubleVector amplitude(2);
  DoubleVector foftau(double mpart, double mcomp);
  DoubleVector goftau(double mpart, double mcomp);
  DoubleVector ftau(3), flambda(3), gtau(3), glambda(3);
  for (int i=1; i<=3;i++) {
    ftau(i) = 0;
    flambda(i) = 0;
    gtau(i) = 0;
    glambda(i) = 0;
  }
  for (int i=1; i<=2;i++) {
    amplitude(i) = 0;
  }
  costhetaW = mWboson/mZboson;
  sinthetaW = pow(1 - pow(costhetaW,2),0.5);
  if (higgstype == 'h') {
    RhHplus = sin(beta-alpha) + cos(2*beta)*sin(beta+alpha)/(2*pow(costhetaW,2));
    }
  else if (higgstype == 'H') {
    RhHplus = -(cos(beta-alpha) - cos(2*beta)*cos(beta+alpha)/(2*pow(costhetaW,2)));
  }
  else if (higgstype == 'A') {
    RhHplus =0;
  }
  else {
    throw("problem: higgstype must be h or H or A in higgsmatrixelementZgammaviaHplus\n");
    errorflag = -1;
  }
  ftau = foftau(mHplus, m1);
  flambda = foftau(mHplus, mZboson);
  gtau = goftau(mHplus, m1);
  glambda = goftau (mHplus, mZboson); 
  
  factor1 = 1 - 2*pow(sinthetaW,2);

  Integral1r = ftau(3)*flambda(3)/(2*(ftau(3)-flambda(3))) + pow(ftau(3)*flambda(3),2)/(2*pow((ftau(3)-flambda(3)),2))*(ftau(1)-flambda(1)) + pow(ftau(3),2)*flambda(3)/(pow(ftau(3)-flambda(3),2))*(gtau(1)-glambda(1));
  Integral1i = pow(ftau(3)*flambda(3),2)/(2*pow((ftau(3)-flambda(3)),2))*(ftau(2)-flambda(2)) + pow(ftau(3),2)*flambda(3)/(pow(ftau(3)-flambda(3),2))*(gtau(2)-glambda(2));
  
  amplitude(1) = RhHplus*factor1/(costhetaW*sinthetaW)*Integral1r*pow(mWboson/mHplus,2);
  amplitude(2) = RhHplus*factor1/(costhetaW*sinthetaW)*Integral1i*pow(mWboson/mHplus,2);
  
  return amplitude;
}

	  
/// Decays to gravitinos

double gluinoamplitudedecaygravitino (double m1, double mgrav, double MPlreduced, int gravonoff, int gluNLSP) /// Function that calculates the decays to gravitinos of gluinos if int gravonoff == 1, otherwise decays to gravitinos are off
{
  double amplitudeW = 0;
  if (gluNLSP == 0) { amplitudeW = 0;}
  else if (gluNLSP == 1) {
    if(gravonoff == 0) { amplitudeW=0;}
    else if (gravonoff == 1 && fabs(m1) > mgrav) { ///Comment this line, last line and line 3 below this out if always want decays to gravitinos output
      amplitudeW =  pow(fabs(m1),5)/(48*PI*pow(mgrav*MPlreduced,2));
    }
  }
  return amplitudeW;
}

double squarkamplitudedecaygravitino(double m1, double mgrav, double mquark, double MPlreduced, int gravonoff, int squNLSP) /// Function that calculates the decays to gravitinos of squark if int gravonoff == 1, otherwise decays to gravitinos are off
{
  double amplitudeW = 0;
  if (squNLSP == 0) { amplitudeW = 0;}
  else if (squNLSP == 1) {
    if(gravonoff == 0) { amplitudeW=0;}
    else if (gravonoff == 1 && fabs(m1) > mgrav) { ///Comment this line, last line and line 3 below this out if always want decays to gravitinos output
      amplitudeW =  pow(pow(m1,2)-pow(mquark,2),4)/(48*PI*pow(m1,3)*pow(MPlreduced*mgrav,2));
    }
  }
  return amplitudeW;
}

double neutralinoamplitudedecayphotongravitino(double m1, double mgrav, double MPlreduced, DoubleMatrix & mixNeut, double g, double gp, int neutralino, int gravonoff, int neutNLSP)  /// Function that calculates the decays to gravitino and photon of a neutralino if int gravonoff == 1, otherwise decays to gravitinos are off
{
  double amplitudeW = 0, coupling = 0, costhetaW = 0, sinthetaW = 0;
  if (neutNLSP == 0) { amplitudeW =0;}
  else if (neutNLSP == 1) {
    if(gravonoff == 0) { amplitudeW=0;}
    else if (gravonoff == 1 && fabs(m1) > mgrav) { ///Comment this line, last line and line 3 below this out if always want decays to gravitinos output
      costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
      sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
      coupling = mixNeut(neutralino,1)*costhetaW + mixNeut(neutralino,2)*sinthetaW;
      amplitudeW =  pow(coupling,2)*pow(fabs(m1),5)/(48*PI*pow(MPlreduced*mgrav,2));
    }
  }
  return amplitudeW;
}

double neutralinoamplitudedecayZgravitino(double m1, double mZ, double mgrav, double MPlreduced, DoubleMatrix & mixNeut, double g, double gp, double beta, int neutralino, int gravonoff, int neutNLSP)  /// Function that calculates the decays to gravitino and Z boson of a neutralino if int gravonoff == 1, otherwise decays to gravitinos are off
{
  double amplitudeW = 0, coupling = 0, costhetaW = 0, sinthetaW = 0;
  if (neutNLSP == 0 || fabs(m1) < mZ + mgrav) { amplitudeW = 0;}
  else if (neutNLSP == 1) {
    if(gravonoff == 0) { amplitudeW=0;}
    else if (gravonoff == 1) { ///Comment this line, last line and line 3 below this out if always want decays to gravitinos output
      costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));
      sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
      coupling = 2*pow((mixNeut(neutralino,1)*sinthetaW - mixNeut(neutralino,2)*costhetaW),2)+ pow((mixNeut(neutralino,4)*sin(beta) - mixNeut(neutralino,3)*cos(beta)),2);

      amplitudeW =  coupling*pow(pow(m1,2)-pow(mZ,2),4)/(96*PI*pow(MPlreduced*mgrav,2)*pow(fabs(m1),3));
    }
  }
  return amplitudeW;
}

double neutralinoamplitudedecayphigravitino(double m1, double mphi, double mgrav, double MPlreduced, DoubleMatrix & mixNeut, double alpha, double beta, int neutralino, int gravonoff, char phi, int neutNLSP)  /// Function that calculates the decays to gravitino and Z boson of a neutralino if int gravonoff == 1, otherwise decays to gravitinos are off
{
  double amplitudeW = 0, coupling = 0;
  if (neutNLSP == 0 || fabs(m1) < mphi) { amplitudeW = 0;}
  else if (neutNLSP == 1) {
    if(gravonoff == 0) { amplitudeW=0;}
    else if (gravonoff == 1 && fabs(m1) > mgrav) { ///Comment this line, last line and line 3 below this out if always want decays to gravitinos output
    if (phi =='h') {
      coupling = 1/(pow(6,0.5)*MPlreduced*mgrav)*(mixNeut(neutralino,4)*cos(alpha) - mixNeut(neutralino,3)*sin(alpha));
    }
    else if (phi =='H') {
      coupling = 1/(pow(6,0.5)*MPlreduced*mgrav)*(mixNeut(neutralino,4)*sin(alpha)+mixNeut(neutralino,3)*cos(alpha));
    }
    else if (phi == 'A') {
      coupling = 1/(pow(6,0.5)*MPlreduced*mgrav)*(mixNeut(neutralino,4)*cos(beta)+mixNeut(neutralino,3)*sin(beta));
    }
    else {  throw("problem: phi must be h or H or A in neutralinoamplitudedecayphigravitino\n");  }
    amplitudeW =  pow(coupling,2)/(16*PI*pow(fabs(m1),3))*pow((pow(m1,2)-pow(mphi,2)),4);
    }
  }
  return amplitudeW;
}


///Functions that calculate the couplings:

DoubleVector squarkmixcharginocouplings (double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb)
{
  DoubleVector couplings(16);
  for (int i=1; i<=16; i++) { couplings(i) = 0;}

  double fu=0, fd=0, AprimeuW1=0, AprimedW1=0, BW1=0, BprimeW1=0, sq1AprimeW1=0, sq1ch1B1=0, sq1ch1combo=0, sq1ch1angular1=0, sq1ch1angular2=0, sq1ch1B2=0, AprimeuW2=0, AprimedW2=0, BW2=0, BprimeW2=0, sq1AprimeW2=0, sq1ch2B1=0, sq1ch2B2=0, sq1ch2combo=0, sq1ch2angular1=0, sq1ch2angular2=0, sq2AprimeW1=0, sq2ch1B1=0, sq2ch1B2=0, sq2ch1combo=0, sq2ch1angular1=0, sq2ch1angular2=0, sq2AprimeW2=0, sq2ch2B1=0, sq2ch2B2=0, sq2ch2combo=0, sq2ch2angular1=0, sq2ch2angular2=0;

  fu = g*runmt/(pow(2,0.5)*mWboson*sin(beta));
  fd = g*runmb/(pow(2,0.5)*mWboson*cos(beta));
  AprimeuW1 = -g*sin(gammaL);
  AprimedW1 = -g*sin(gammaR);
  BW1 = -fu*cos(gammaR);
  BprimeW1 = -fd*cos(gammaL);
  
    if (torb == 1 ) {
      sq1AprimeW1 = AprimedW1;
      sq1ch1B1 = BW1;
      sq1ch1B2 = BprimeW1;
    }
    else if (torb == 2) {
      sq1AprimeW1 = AprimeuW1;
      sq1ch1B1 = BprimeW1;
      sq1ch1B2 = BW1;
    }
    else {
      throw("problem: torb must be 1 or 2 in squarkmixcharginocouplings\n");
      errorflag = -1;
    }
    AprimeuW2 = -g*cos(gammaL);
    AprimedW2 = -g*cos(gammaR);
    BW2 = fu*sin(gammaR);
    BprimeW2 = fd*sin(gammaL);
    if (torb == 1 ) {
      sq1AprimeW2 = AprimedW2;
      sq1ch2B1 = BW2;
      sq1ch2B2 = BprimeW2;
    }
    else if (torb == 2) {
      sq1AprimeW2 = AprimeuW2;
      sq1ch2B1 = BprimeW2;
      sq1ch2B2 = BW2;
    }
    else {
      throw("problem: torb must be 1 or 2 in squarkmixcharginocouplings\n");
      errorflag = -1;
    }
    
    if (torb == 1 ) {
      sq2AprimeW1 = AprimedW1;
      sq2ch1B1 = BW1;
      sq2ch1B2 = BprimeW1;
    }
    else if (torb == 2) {
      sq2AprimeW1 = AprimeuW1;
      sq2ch1B1 = BprimeW1;
      sq2ch1B2 = BW1;
    }
    else {
      throw("problem: torb must be 1 or 2 in squarkmixcharginocouplings\n");
      errorflag = -1;
    }

    if (torb == 1 ) {
      sq2AprimeW2 = AprimedW2;
      sq2ch2B1 = BW2;
      sq2ch2B2 = BprimeW2;
    }
    else if (torb == 2) {
      sq2AprimeW2 = AprimeuW2;
      sq2ch2B1 = BprimeW2;
      sq2ch2B2 = BW2;
    }
    else {
      throw("problem: torb must be 1 or 2 in squarkmixcharginocouplings\n");
      errorflag = -1;
    }
		
    sq1ch1combo = sq1AprimeW1*cos(theta)-sq1ch1B1*sin(theta);
    sq1ch1angular1 = pow(sq1ch1combo,2) + pow(sq1ch1B2*cos(theta),2);
    sq1ch1angular2 = 4*sq1ch1combo*sq1ch1B2*cos(theta);

    sq1ch2combo = sq1AprimeW2*cos(theta)-sq1ch2B1*sin(theta);
    sq1ch2angular1 = pow(sq1ch2combo,2) + pow(sq1ch2B2*cos(theta),2);
    sq1ch2angular2 = 4*sq1ch2combo*sq1ch2B2*cos(theta);

    sq2ch1combo = sq2AprimeW1*sin(theta)+sq2ch1B1*cos(theta);
    sq2ch1angular1 = pow(sq2ch1combo,2) + pow(sq2ch1B2*sin(theta),2);
    sq2ch1angular2 = 4*sq2ch1combo*sq2ch1B2*sin(theta);

    sq2ch2combo = sq2AprimeW2*sin(theta) + sq2ch2B1*cos(theta);
    sq2ch2angular1 = pow(sq2ch2combo,2) + pow(sq2ch2B2*sin(theta),2);
    sq2ch2angular2 = 4*sq2ch2combo*sq2ch2B2*sin(theta);

    couplings(1) = sq1ch1angular1; couplings(2) = sq1ch1angular2; couplings(3) = sq1ch2angular1; couplings(4) = sq1ch2angular2; couplings(5) = sq2ch1angular1; couplings(6) = sq2ch1angular2; couplings(7) = sq2ch2angular1; couplings(8) = sq2ch2angular2; couplings(9) = sq1ch1combo; couplings(10) = sq1ch2combo; couplings(11) = sq1ch1B2*cos(theta); couplings(12) = sq1ch2B2*cos(theta); couplings(13) = sq2ch1combo; couplings(14) = sq2ch2combo; couplings(15) = sq2ch1B2*sin(theta); couplings(16) = sq2ch2B2*sin(theta);
    return couplings;
}

DoubleVector higgsphisamecharginocouplings (double alpha, double beta, double thetaL, double thetaR) /// calculates the couplings of a neutral higgs (h,H,A) to Wtildai Wtildai - i.e. to two charginos of the same type (mass)
{
  DoubleVector Scoupling(6);
  for (int i=1; i<=6; i++) {
    Scoupling(i) = 0;
  }
  DoubleVector Sih(2), SiH(2), SiA(2);
  for (int i=1; i<=2; i++) {
    Scoupling(i) = 0;
  }

  Sih(1) = 0.5*(-sin(alpha)*sin(thetaR)*cos(thetaL) + cos(alpha)*sin(thetaL)*cos(thetaR));
  Sih(2) = 0.5*(sin(alpha)*cos(thetaR)*sin(thetaL) - cos(alpha)*cos(thetaL)*sin(thetaR));
  SiH(1) = 0.5*(cos(alpha)*sin(thetaR)*cos(thetaL) + sin(alpha)*sin(thetaL)*cos(thetaR));
  SiH(2) = -0.5*(cos(alpha)*cos(thetaR)*sin(thetaL) + sin(alpha)*cos(thetaL)*sin(thetaR));
  SiA(1) = 0.5*(sin(thetaR)*cos(thetaL)*sin(beta) + sin(thetaL)*cos(thetaR)*cos(beta));
  SiA(2) = -0.5*(cos(thetaR)*sin(thetaL)*sin(beta) + cos(thetaL)*sin(thetaR)*cos(beta));
 
  Scoupling(1) = Sih(1); Scoupling(2) = Sih(2); Scoupling(3) = SiH(1); Scoupling(4) = SiH(2); Scoupling(5) = SiA(1); Scoupling(6) = SiA(2);
  return Scoupling;
}

DoubleVector higgsphidifcharginocouplings (double alpha, double beta, double thetaL, double thetaR) /// calculates the couplings of a netural higgs (h,H,A) to Wtildai Wtildaj - i.e. to two charginos of different type (mass)
{
  DoubleVector SPcoupling(6);
  for (int i=1; i<=6; i++) {
    SPcoupling(i) = 0;
  }
  double Sh=0, Ph=0, SH=0, PH=0, SA=0, PA=0;  

  Sh = 0.5*(sin(thetaR)*sin(thetaL)*sin(alpha) + cos(thetaL)*cos(thetaR)*cos(alpha) - sin(thetaL)*sin(thetaR)*cos(alpha) - cos(thetaL)*cos(thetaR)*sin(alpha ));
  Ph = 0.5*(-sin(thetaR)*sin(thetaL)*sin(alpha) - cos(thetaL)*cos(thetaR)*cos(alpha) - sin(thetaL)*sin(thetaR)*cos(alpha) - cos(thetaL)*cos(thetaR)*sin(alpha ));
  SH = 0.5*(-sin(thetaR)*sin(thetaL)*cos(alpha) + cos(thetaL)*cos(thetaR)*sin(alpha) - sin(thetaL)*sin(thetaR)*sin(alpha) + cos(thetaL)*cos(thetaR)*cos(alpha));
  PH = 0.5*(sin(thetaR)*sin(thetaL)*cos(alpha) - cos(thetaL)*cos(thetaR)*sin(alpha) - sin(thetaL)*sin(thetaR)*sin(alpha) + cos(thetaL)*cos(thetaR)*cos(alpha));
  SA = 0.5*(-sin(thetaR)*sin(thetaL)*sin(beta) + cos(thetaL)*cos(thetaR)*cos(beta) + sin(thetaL)*sin(thetaR)*cos(beta) - cos(thetaL)*cos(thetaR)*sin(beta));
  PA = 0.5*(sin(thetaR)*sin(thetaL)*sin(beta) - cos(thetaL)*cos(thetaR)*cos(beta) + sin(thetaL)*sin(thetaR)*cos(beta) - cos(thetaL)*cos(thetaR)*sin(beta));
 
  SPcoupling(1) = Sh; SPcoupling(2) = Ph; SPcoupling(3) = SH; SPcoupling(4) = PH; SPcoupling(5) = SA; SPcoupling(6) = PA;
  return SPcoupling;
}
 
DoubleVector higgshsquarksamehandcouplings (double mWboson, double g, double gp, double alpha, double beta, double mupq, double mdownq) /// calculates the couplings of light scalar higgs h to two squarks of same handedness
{
  DoubleVector hsqsqcoupling(4);
  for (int i=1; i<=4; i++) {
    hsqsqcoupling(i) = 0;
  }
  double huLuL=0, huRuR=0, hdLdL=0, hdRdR=0;  
  huLuL = g*(mWboson*(0.5 - pow(gp/g,2)/6)*sin(alpha+beta) - pow(mupq,2)*cos(alpha)/(mWboson*sin(beta)));
  hdLdL = g*(mWboson*(-0.5 - pow(gp/g,2)/6)*sin(alpha+beta) + pow(mdownq,2)*sin(alpha)/(mWboson*cos(beta)));
  huRuR = g*(2*mWboson/3*pow(gp/g,2)*sin(alpha+beta) - pow(mupq,2)*cos(alpha)/(mWboson*sin(beta)));
  hdRdR = g*(-mWboson/3*pow(gp/g,2)*sin(alpha+beta) + pow(mdownq,2)*sin(alpha)/(mWboson*cos(beta)));
  hsqsqcoupling(1) = huLuL; hsqsqcoupling(2) = hdLdL; hsqsqcoupling(3) = huRuR; hsqsqcoupling(4) = hdRdR; 
  return hsqsqcoupling;
}    

DoubleVector higgshsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mupq, double mdownq, double greekmu, double Aup, double Adown) /// calculates the couplings of light scalar higgs h to two squarks of different handedness
{
  DoubleVector hsqsqcoupling(2);
  for (int i=1; i<=2; i++) {
    hsqsqcoupling(i) = 0;
  }
  double huLuR=0, hdLdR=0;
  huLuR = g*mupq/(2*mWboson*sin(beta))*(greekmu*sin(alpha) + Aup*cos(alpha));
  hdLdR = g*mdownq/(2*mWboson*cos(beta))*(-greekmu*cos(alpha) - Adown*sin(alpha));

  hsqsqcoupling(1) = huLuR; hsqsqcoupling(2) = hdLdR; 
  return hsqsqcoupling;
}    

DoubleVector higgsHsquarksamehandcouplings (double mWboson, double g, double gp, double alpha, double beta, double mupq, double mdownq) /// calculates the couplings of heavy scalar higgs H to two squarks of same handedness
{
  DoubleVector Hsqsqcoupling(4);
  for (int i=1; i<=4; i++) {
    Hsqsqcoupling(i) = 0;
  }
  double HuLuL=0, HuRuR=0, HdLdL=0, HdRdR=0;  
  HuLuL = g*(-mWboson*(0.5 - pow(gp/g,2)/6)*cos(alpha+beta) - pow(mupq,2)*sin(alpha)/(mWboson*sin(beta)));
  HdLdL = g*(mWboson*(0.5 + pow(gp/g,2)/6)*cos(alpha+beta) - pow(mdownq,2)*cos(alpha)/(mWboson*cos(beta)));
  HuRuR = g*(-2*mWboson/3*pow(gp/g,2)*cos(alpha+beta) - pow(mupq,2)*sin(alpha)/(mWboson*sin(beta)));
  HdRdR = g*(mWboson/3*pow(gp/g,2)*cos(alpha+beta) - pow(mdownq,2)*cos(alpha)/(mWboson*cos(beta)));
 
  Hsqsqcoupling(1) = HuLuL; Hsqsqcoupling(2) = HdLdL; Hsqsqcoupling(3) = HuRuR; Hsqsqcoupling(4) = HdRdR; 
  return Hsqsqcoupling;
}    

DoubleVector higgsHsquarkdiffhandcouplings (double mWboson, double g, double alpha, double beta, double mupq, double mdownq, double greekmu, double Aup, double Adown) /// calculates the couplings of heavy scalar higgs H to two squarks of different handedness
{
  DoubleVector Hsqsqcoupling(2);
  for (int i=1; i<=2; i++) {
    Hsqsqcoupling(2) = 0;
  }
  double HuLuR=0, HdLdR=0;
  HuLuR = g*mupq/(2*mWboson*sin(beta))*(-greekmu*cos(alpha) + Aup*sin(alpha));
  HdLdR = g*mdownq/(2*mWboson*cos(beta))*(-greekmu*sin(alpha) + Adown*cos(alpha));
  
  Hsqsqcoupling(1) = HuLuR; Hsqsqcoupling(2) = HdLdR; 
  return Hsqsqcoupling;
}    

DoubleVector higgshsleptonsamehandcouplings (double mWboson, double g, double gp, double alpha, double beta, double mel) /// calculates the couplings of light scalar higgs h to two sleptons of same handedness
{
  DoubleVector hslslcoupling(3);
  for (int i=1; i<=3; i++) {
    hslslcoupling(3) = 0;
  }
  double hnuLnuL=0, heLeL=0, heReR=0;  
  hnuLnuL = g*(mWboson*(0.5 + pow(gp/g,2)/2)*sin(alpha+beta));
  heLeL = g*(mWboson*(-0.5 + pow(gp/g,2)/2)*sin(alpha+beta) + pow(mel,2)*sin(alpha)/(mWboson*cos(beta)));
  heReR = g*(-mWboson*pow(gp/g,2)*sin(alpha+beta) + pow(mel,2)*sin(alpha)/(mWboson*cos(beta)));
 
  hslslcoupling(1) = hnuLnuL; hslslcoupling(2) = heLeL; hslslcoupling(3) = heReR; 
  return hslslcoupling;
}    
  
DoubleVector higgshsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mel, double greekmu, double Ae) /// calculates the couplings of light scalar higgs h to two sleptons of different handedness
{
  DoubleVector hslslcoupling(1);
  for (int i=1; i<=1; i++) {
    hslslcoupling(1) = 0;
  }
  double heLeR=0;
  heLeR = g*mel/(2*mWboson*cos(beta))*(-greekmu*cos(alpha) - Ae*sin(alpha));
  
  hslslcoupling(1) = heLeR;
  return hslslcoupling;
}    

DoubleVector higgsHsleptonsamehandcouplings (double mWboson, double g, double gp, double alpha, double beta, double mel) /// calculates the couplings of heavy scalar higgs H to two sleptons of same handedness
{
  DoubleVector Hslslcoupling(3);
  for (int i=1; i<=3; i++) {
    Hslslcoupling(3) = 0;
  }
  double HnuLnuL=0, HeLeL=0, HeReR=0;  
  HnuLnuL = g*(-mWboson*(0.5 + pow(gp/g,2)/2)*cos(alpha+beta));
  HeLeL = g*(mWboson*(0.5 - pow(gp/g,2)/2)*cos(alpha+beta) - pow(mel,2)*cos(alpha)/(mWboson*cos(beta)));
  HeReR = g*(mWboson*pow(gp/g,2)*cos(alpha+beta) - pow(mel,2)*cos(alpha)/(mWboson*cos(beta)));
 
  Hslslcoupling(1) = HnuLnuL; Hslslcoupling(2) = HeLeL; Hslslcoupling(3) = HeReR; 
  return Hslslcoupling;
}    

DoubleVector higgsHsleptondiffhandcouplings (double mWboson, double g, double alpha, double beta, double mel, double greekmu, double Ae) /// calculates the couplings of heavy scalar higgs H to two sleptons of different handedness
{
  DoubleVector Hslslcoupling(1);
  for (int i=1; i<=1; i++) {
    Hslslcoupling(i) = 0;
  }
  double HeLeR=0;
  HeLeR = g*mel/(2*mWboson*cos(beta))*(-greekmu*sin(alpha) + Ae*cos(alpha));
  
  Hslslcoupling(1) = HeLeR;
  return Hslslcoupling;
}  

DoubleVector higgsHplussquarkcouplings (double mWboson, double g, double beta, double mup, double mdown, double greekmu, double Au, double Ad) /// calculates the couplings of charged scalar higgs H+ to two squarks
{
  DoubleVector Hplussqsqcoupling(4);
  for (int i=1; i<=4; i++) {
    Hplussqsqcoupling(i) = 0;
  }
  double HplusuLdL=0, HplusuRdR=0, HplusuLdR=0, HplusuRdL=0; 
  HplusuLdL = g/(pow(2,0.5))*(-mWboson*sin(2*beta) + (pow(mdown,2)*tan(beta)+pow(mup,2)/(tan(beta)))/mWboson);
  HplusuRdR = (g*mup*mdown*(tan(beta) + 1/(tan(beta))))/(pow(2,0.5)*mWboson);
  HplusuLdR = -g*mdown/(pow(2,0.5)*mWboson)*(Ad*tan(beta) + greekmu);
  HplusuRdL = -g*mup/(pow(2,0.5)*mWboson)*(Au/(tan(beta)) + greekmu);
  
  Hplussqsqcoupling(1) = HplusuLdL;
  Hplussqsqcoupling(2) = HplusuRdR;
  Hplussqsqcoupling(3) = HplusuLdR;
  Hplussqsqcoupling(4) = HplusuRdL;
  
  return Hplussqsqcoupling;
}      


DoubleVector foftau(double mpart, double mcomp) ///f(tau) function for use in h->gamma gamma or Z gamma
{
  double tau=0, fr=0, fi=0, etap=0, etam=0;
  DoubleVector f(3);
  for (int i=1; i<=3; i++) {
    f(i) =0;
  }
  tau = 4*pow(mpart/mcomp,2);
  if (tau >=1) {
    fr = pow((asin(1/pow(tau,0.5))),2);
    fi = 0;
  }
  else if (tau<1) {
    etap = 1 + pow(1-tau,0.5);
    etam = 1 - pow(1-tau,0.5);
    if (etap/etam < 0) {
      throw("problem: log will give nan as etap/etam < 0\n");
      errorflag = -1;
    }
    if (etam == 0) {
      throw("problem: will get inf as etam = 0 so etap/etam = inf\n");
      errorflag = -1;
    }
    fr = -0.25*pow(log(etap/etam),2)+0.25*pow(PI,2);
    fi = 0.5*PI*log(etap/etam);
  }
  f(1)=fr;
  f(2)=fi;
  f(3)=tau;
  return f;
}

DoubleVector goftau(double mpart, double mcomp) ///g(tau) function for use in h->Z gamma
{
  double tau=0, gr=0, gi=0, etap=0, etam=0;
  DoubleVector g(3);
  for (int i=1; i<=3; i++) {
    g(i) =0;
  }
  tau = 4*pow(mpart/mcomp,2);
  if (tau >=1) {
    gr = pow(tau-1,0.5)*((asin(1/pow(tau,0.5))));
    gi = 0;
  }
  else if (tau<1) {
    etap = 1 + pow(1-tau,0.5);
    etam = 1 - pow(1-tau,0.5);
    if (etap/etam < 0) {
      throw("problem: log will give nan as etap/etam < 0\n");
      errorflag = -1;
    }
    if (etam == 0) {
      throw("problem: will get inf as etam = 0 so etap/etam = inf\n");
      errorflag = -1;
    }
    gr = 0.5*pow(1-tau,0.5)*(log(etap/etam));
    gi = 0.5*pow(1-tau,0.5)*-PI;
  }
  g(1)=gr;
  g(2)=gi;
  g(3)=tau;
  return g;
}

///Integrand functions for 1->3 decays

double Zfunc(double m1, double mq, double m, double Etbarmax, double Etbarmin) ///required in many of the 1->3 integrals
{
  double Z = 0;
  Z = (pow(m1,2)+pow(mq,2)-2*fabs(m1)*Etbarmax - pow(m,2))/(pow(m1,2)+pow(mq,2)-2*fabs(m1)*Etbarmin-pow(m,2));
  if (Z <=0) {
    *ffout << "May have nan issue if do log(Z) as Z<=0! See Zfunc used in 1->3 decays" << endl;
    errorflag = -1;
  }
  return Z;
}

DoubleVector Etbarmaxmin (double m1, double m2, double massq, double Et) ///required for many of the 1->3 integrals, this gives E max and min of t bar for given Et therefore different to overall limits of integration on Et which are Etmax, Etmin
{
  DoubleVector Etbarsupremum(2);
  double pt=0, zet=0, A=0, B=0;
  pt = pow(pow(Et,2)-pow(massq,2),0.5);
  zet = 2*pow(massq,2)+pow(m1,2)-pow(m2,2)-2*fabs(m1)*Et;
  A = pow(m1,2)+pow(massq,2)-2*fabs(m1)*Et;
  B = (pow(pt*zet,2)-4*pow(pt*massq,2)*A);
  if ( B < 0) {
    B = 0; /// B may become very very small and negative at the tails of this squareroot, this causes problems as we get sqrt(-ve) therefore set B to 0 here as it's very small anyway so has negligible effect on the overall answer.
  }
 
  Etbarsupremum(1) = (zet*(fabs(m1)-Et)+pow(B,0.5))/(2*A); ///Etbarmax
  Etbarsupremum(2) = (zet*(fabs(m1)-Et)-pow(B,0.5))/(2*A); ///Etbarmin
  if (Etbarsupremum(1) != Etbarsupremum(1) || Etbarsupremum(2) != Etbarsupremum(2)) {
    *ffout << "problem: Etbar gives nan! See Etbarmaxmin used in 1->3 decays" << endl; 
     errorflag = -1;
  }
    return Etbarsupremum;
}


DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et) ///function required for gluino 3 body decays to chargino and q q'bar, mass1 is gluino mass, mass2 is top mass, mass3 is bottom mass, mass4 is chargino mass
{
  DoubleVector Ebbar(2);
  for (int i=1; i<=2; i++) { Ebbar(i)=0;}
  double pt = 0, squareplus = 0, squareminus = 0, lambda = 0, A = 0;
  pt = pow(pow(Et,2)-pow(mass2,2),0.5);
  A = pow(mass1,2)+pow(mass2,2)-2*Et*fabs(mass1);
  squareplus = A - pow(mass3+fabs(mass4),2);
  squareminus = A - pow(mass3-fabs(mass4),2);

  if (squareplus < 0 && fabs(squareplus) < 1e-8) {
    squareplus = 0; ///Avoid issues of finite precision meaning you get a very small negative squareplus at Amin (smin) rather than 0, this can cause issues when you take the squareroot of lambda, giving a nan
  }

  lambda = pow(squareplus*squareminus,0.5);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in Ebbarmaxmin used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  Ebbar(1) = ((pow(mass1,2)+pow(mass2,2)-2*fabs(mass1)*Et-pow(mass3,2)-pow(mass4,2))*(fabs(mass1)-Et) + pt*lambda)/(2*(pow(mass1,2)+pow(mass2,2)-2*Et*fabs(mass1))); ///I have -pow(mass3,2) here whereas T&B have + pow(mass3,2), I have changed the sign to agree with SPheno, note however this actually makes negligible difference due to the smallness of the b mass
  Ebbar(2) = ((pow(mass1,2)+pow(mass2,2)-2*fabs(mass1)*Et-pow(mass3,2)-pow(mass4,2))*(fabs(mass1)-Et) - pt*lambda)/(2*(pow(mass1,2)+pow(mass2,2)-2*Et*fabs(mass1))); ///I have -pow(mass3,2) here whereas T&B have + pow(mass3,2), I have changed the sign to agree with SPheno, note however this actually makes negligible difference due to the smallness of the b mass

  return Ebbar;
}

 double Xfunc (double mass1, double mass2, double mass3, double mass4, double mass5, double Et) ///required for gluino 3 body decays to chargino and q q'bar, mass1 is gluino mass, mass2 is top mass, mass3 is bottom mass, mass4 is chargino mass, mass5 is the sbottom mass
{
  double X=0;
  DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et);
  DoubleVector Ebbar(2);
  for (int i=1; i<=2; i++) { Ebbar(i)=0;}
  Ebbar = Ebbarmaxmin (mass1, mass2, mass3, mass4, Et);
  X = (pow(mass5,2)+2*Ebbar(1)*fabs(mass1)-pow(mass1,2))/(pow(mass5,2)+2*Ebbar(2)*fabs(mass1)-pow(mass1,2));
  return X;
}


///Functions for 1->3 decays via dgauss:
double gluinoamplitudedecaydgausscharginoqqpbarfirsttwogen (double mgluino, double mchargino, double mquark, double mquarkp, double msqL, double msqpL, double g, double thetaL, double thetaR, double alphas, int charg, bool onetothree)
{
  double amplitudeW=0, Au=0, Ad=0, psiu=0, psid=0, phiI=0, upper=0;
  upper = (pow(mgluino,2)-2*mquark*fabs(mchargino)-pow(mchargino,2))/(2*mgluino);

  if (onetothree == false) {
    amplitudeW = 0;
  }
  else if (onetothree == true) {
    
    if(mgluino < mchargino+mquark+mquarkp) {
      amplitudeW = 0;
    }
    else if (mgluino > msqL + mquark || mgluino > msqpL + mquarkp) {
	amplitudeW = 0; /// 1->3 decay not relevant here if one to two decay open
      }

    else {
      if (charg == 1) /// chargino1 decaying
      {
	Ad = g*sin(thetaR); 
	Au = g*sin(thetaL);
      }
    else if (charg == 2) ///chargino2 decaying
      {
	Ad = g*cos(thetaR);
	Au = g*cos(thetaL);
      }
    else {
      throw("problem: charg must be 1 or 2 in gluinoamplitudedecaydgausscharginoqqpbarfirsttwogen\n");
      errorflag = -1;
    }
      m1 = mgluino, m2 = msqL, m3 = msqL, m4 = mchargino, mq = mquark;
      psiu = dgauss(gpsitildadgauss,mquark,upper,accuracy)*1/(pow(PI,2)*m1);
      m1 = mgluino, m2 = msqpL, m3 = msqpL, m4 = mchargino, mq = mquarkp;
      psid = dgauss(gpsitildadgauss,mquark,upper,accuracy)*1/(pow(PI,2)*m1);
      m1 = mgluino, m2 = msqL, m3 = msqpL, m4 = mchargino, mq = mquark; ///Note mq isn't important really for these modes as they are first two gen quarks
      phiI = dgauss(gphitildadgauss,mq,upper,accuracy)*1/(pow(PI,2)*m1);
      
      amplitudeW = alphas/(16*pow(PI,2))*(pow(Ad,2)*psiu + pow(Au,2)*psid + 2*Au*Ad*phiI);
    }
  }
  return amplitudeW;
}

///Function that runs alphas to desired scale using 1-loop renormalisation group equations, inc. MSSM gluinos and squarks (hence 2/3 not 2/7)
double alphasrun (double mu, double mu0, double alphasmu0) {
  double alphasmu = (2*PI/3)/(2*PI/(3*alphasmu0) + log(mu/mu0)); ///MSSM
  // double alphasmu = (2*PI/7)/(2*PI/(7*alphasmu0) + log(mu/mu0)); ///SM
  return alphasmu;
}

///Function that mimics hdecay's ALPHAS running with the link to Lambda QCD
double alphasrunlambdaQCD (double mu, double LAMBDA, double Nf) {
  double alphasmu2 = 12*PI/((33-2*Nf)*log(pow(mu/LAMBDA,2)))*(1 - ((6*(153-19*Nf)/pow(33-2*Nf,2))*log(log(pow(mu/LAMBDA,2)))/log(pow(mu/LAMBDA,2))));
  return alphasmu2;
}

///Function that runs alpha to desired scale using 1-loop renormalisation group equations, inc. MSSM particles hence 1 rather than -19/6 of SM
double alpharun (double mu, double mu0, double alphamu0) {
  double alphamu = (2*PI)/(2*PI/(alphamu0) - log(mu/mu0)); ///MSSM
  // double alphamu = (12*PI)/19/(12*PI/(19*alphamu0) + log(mu/mu0)); ///SM
  return alphamu;
}


// Outputs a space before if greater than zero, a minus otherwise, also outputs spaces after depending on no. of digits in PDG code
// Useful for outputting negative numbers in rows, Tom Cridge added to output PDG codes with no. of space depending on length of PDG (usually 1 or 2 for SM particles whereas 7 for SUSY particles -  therefore output 5 extra spaces for SM)
void printRowPDG(ostream & fout, double x) {

  /// make it return a character when you've worked out the equivalent of printf

  double underflow = 1.0e-120;
  if (fabs(x) < underflow) x = 0.0; /// Traps -0.0
  if (x >= 0.0) fout << " " << x;
  else fout << x;
  if (fabs(x)<10) fout << "      ";
  else if (fabs(x)<100) fout << "     ";
  else {}
}


void OutputNoPWs(ostream & fout, Particle & P, double BRTol) ///Outputs the decay table into the leshouchesOutput file with no PWs (partial widths) given, just branching ratios
 {
   fout << left << setw(6) << "#" << setw(12) << "PDG" << setw(18) << "Width" << endl;
   fout << "DECAY " << setw(12) << fixed << setprecision(0) << P.PDG << setw(12) << scientific << setprecision(8) <<  P.total_width << "   " << "# " << P.name << " decays" << endl;
   if (P.three_width/P.total_width < BRTol) {
     fout << left << setw(6) << "#" << setw(18) << "BR" << setw(6) << "NDA" << setw(12) << left << "PDG1" << setw(10) << " PDG2" << setw(15) << "Comments" << endl;
     for (int k=0; k<P.No_of_Decays; k++) {
       if( P.Array_Decays[k][2] != 0 && P.Array_Decays[k][5] > BRTol && P.Array_Decays[k][2] > 0) {
	 fout << left << setw(6) << " " << setw(18) << scientific << setprecision(8) << P.Array_Decays[k][5] << setprecision(0) << setw(6) << fixed << P.Array_Decays[k][3];  printRowPDG(fout, P.Array_Decays[k][0]); fout << "   "; printRowPDG(fout, P.Array_Decays[k][1]); fout << "   " << left << setprecision(0) << setw(15) << P.Array_Comments[k] << endl;
       }
     }
   }
   else {
     fout << left << setw(6) << "#" << setw(18) << "BR" << setw(8) << "NDA" << setw(12) << left << " PDG1" << setw(10) << " PDG2" << setw(12) << " PDG3 " << setw(15) << "Comments" << endl;
     for (int k=0; k<P.No_of_Decays; k++) {
       if( P.Array_Decays[k][2] != 0 && P.Array_Decays[k][5] > BRTol && P.Array_Decays[k][2] > 0) {
	 fout << left << setw(6) << " " << setw(18) << scientific << setprecision(8) << P.Array_Decays[k][5] << setprecision(0) << setw(6) << fixed << P.Array_Decays[k][3] << setw(2) << " ";  printRowPDG(fout, P.Array_Decays[k][0]); fout << "    "; printRowPDG(fout,P.Array_Decays[k][1]); fout << "    "; printRowPDG(fout,P.Array_Decays[k][4]); fout << "   " << left << setprecision(0) << setw(15) << P.Array_Comments[k] << endl;
       }
     }
   }
   fout << "#" << endl;
 }


void OutputYesPWs(ostream & fout, Particle & P, double BRTol) ///Outputs the decay table into the leshouchesOutput file with PWs (partial widths) given after the comments column so as not to affect SLHA form
 {
   fout << left << setw(6) << "#" << setw(12) << "PDG" << setw(18) << "Width" << endl;
   fout << "DECAY " << setw(12) << fixed << setprecision(0) << P.PDG << setw(12) << scientific << setprecision(8) <<  P.total_width << "   " << "# " << P.name << " decays" << endl;

   if (P.three_width/P.total_width < BRTol || P.three_width == 0) {
     fout << left << setw(6) << "# " << setw(20) << "BR " << setw(6) << "NDA " << setw(12) << "PDG1 " << setw(9) << "PDG2" << setw(15) << "Comments" << setw(18) << "PW" << endl;
     for (int k=0; k<P.No_of_Decays; k++) {
       if( P.Array_Decays[k][2] != 0 && P.Array_Decays[k][5] > BRTol && P.Array_Decays[k][2] > 0) {
     	 fout << left << setw(6) << " " << setprecision(8) << P.Array_Decays[k][5] << setprecision(0) << setw(6) << fixed << " " << P.Array_Decays[k][3] << setw(4) << " ";  printRowPDG(fout, P.Array_Decays[k][0]); fout << "    "; printRowPDG(fout,P.Array_Decays[k][1]); fout << "    "; fout << left << setprecision(0) << setw(15) << P.Array_Comments[k] << "    " << scientific << setprecision(8) << setw(18) << P.Array_Decays[k][2] << endl;
       }
     }
     fout << "#" << endl; 
   }
   else {
     fout << left << setw(6) << "# " << setw(20) << "BR" << setw(6) << "NDA" << setw(12) << "PDG1 " << setw(9) << "PDG2" << setw(12) << "PDG3" << setw(15) << "Comments" << "PW" << endl;
     for (int k=0; k<P.No_of_Decays; k++) {
       if( P.Array_Decays[k][2] != 0 && P.Array_Decays[k][5] > BRTol && P.Array_Decays[k][2] > 0) {
     	 fout << left << setw(6) << " " << setprecision(8) << P.Array_Decays[k][5] << setprecision(0) << setw(8) << fixed << " " << P.Array_Decays[k][3] << setw(2) << " ";  printRowPDG(fout, P.Array_Decays[k][0]); fout << "    "; printRowPDG(fout,P.Array_Decays[k][1]); fout << "    "; printRowPDG(fout,P.Array_Decays[k][4]); fout << "   " << left << setprecision(0) << setw(15) << P.Array_Comments[k] << "    "<< setw(18) << scientific << setprecision(8) << P.Array_Decays[k][2] << endl;
       }
     }
     fout << "#" << endl; 
   }
 }


double fdgauss(double x) {
  return x * x;
}

double gpsitildadgauss(double Et) {
  double gpsitildadgauss = 0, pt = 0, squareplus = 0, squareminus = 0, lambda = 0, A = 0;
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  pt = pow(pow(Et,2)-pow(mq,2),0.5);
  squareplus = A - pow(fabs(m4)+mq,2);
  squareminus = A - pow(fabs(m4)-mq,2);
  if (squareplus <0) ///< this can happen erronesouly at very end of range due to finite precision used, squareplus should actually then be very very small and +ve
    { squareplus = 0;} ///< set to zero to avoid nan problem in lambda, note that given squareplus very very very small anyway here this should not affect the accuracy of the integral
  lambda = pow(squareplus*squareminus,0.5);
  if (lambda != lambda) {
    *ffout << "problem: nan in lambda in gpsitildadgauss used in 1->3 decays\n" << endl;
    errorflag = -1;
  }
  gpsitildadgauss = pow(PI,2)*fabs(m1)*pt*Et*lambda/(A)*(pow(m1,2)-pow(m4,2)-2*fabs(m1)*Et)/((A-pow(m2,2))*(A-pow(m3,2)));

  return gpsitildadgauss;
}


double gphitildadgauss(double Et) {
  double gphitildadgauss = 0, A = 0, Z=0;
  DoubleVector Etbarmaxmin (double m1, double m2, double massq, double Et);
  double Zfunc(double m1, double mq, double m, double Etbarmax, double Etbarmin);
  DoubleVector Etbar(2);
  for (int i=1; i<=2; i++) { Etbar(i) = 0;}
  Etbar = Etbarmaxmin(m1, m4, mq, Et);
  Z = Zfunc(m1, mq, m3, Etbar(1), Etbar(2));
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  gphitildadgauss = 0.5*pow(PI,2)*fabs(m1)*fabs(m4)/(A-pow(m2,2))*(-(Etbar(1)-Etbar(2)) - (pow(m4,2)-pow(mq,2)+2*Et*fabs(m1)-pow(m3,2))/(2*fabs(m1))*log(Z));
  return gphitildadgauss;
}


double gxsidgauss (double Et)
{
  double gxsidgauss = 0, Z=0, A=0;
  double Zfunc(double m1, double mq, double m, double Etbarmax, double Etbarmin);
  DoubleVector Etbarmaxmin (double m1, double m2, double massq, double Et);
  DoubleVector Etbar(2);
  //fout << "m1 = " << m1 << " m2 = " << m2 << " m3 = " << m3 << " m4 = " << m4 << " mq = " << mq << endl;
  for (int i=1; i<=2; i++) { Etbar(i) = 0;}
  Etbar = Etbarmaxmin(m1, m4, mq, Et);
  Z = Zfunc(m1,mq,m3,Etbar(1),Etbar(2));
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  gxsidgauss = 0.5*pow(PI,2)/(A-pow(m2,2))*((Etbar(1)-Etbar(2))-(pow(m1,2)-pow(mq,2)-2*fabs(m1)*Et+pow(m3,2))/(2*m1)*log(Z));
  return gxsidgauss;
}


double grhodgauss (double Et)
{
  double grhodgauss = 0, Z=0;
  double Zfunc(double m1, double mq, double m, double Etbarmax, double Etbarmin);
  DoubleVector Etbar(2);
  //fout << "m1 = " << m1 << " m2 = " << m2 << " m3 = " << m3 << " m4 = " << m4 << " mq = " << mq << endl;
  for (int i=1; i<=2; i++) { Etbar(i) = 0;}
  DoubleVector Etbarmaxmin (double m1, double m2, double massq, double Et);
  Etbar = Etbarmaxmin(m1, m4, mq, Et);
  Z = Zfunc(m1,mq,m3,Etbar(1),Etbar(2));
  grhodgauss = -pow(PI,2)/(2*fabs(m1))*1/(pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et-pow(m2,2))*log(Z);
  return grhodgauss;
}


double gchidgauss (double Et) {
  double gchidgauss = 0, pt=0, A=0, squareplus=0, squareminus=0, lambda=0;
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  squareplus = A - pow((fabs(m4) + mq),2);
  squareminus = A - pow((fabs(m4) - mq),2);
  if (squareplus < 0 && fabs(squareplus) < 1e-8) {
    squareplus = 0; ///avoid numerical error giving a negative and hence a nan for lambda at upper boundary of integration range
  }
  lambda = pow(squareplus*squareminus,0.5);
  if (lambda != lambda) {
    *ffout << "problem: nan in lambda in gchidgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  pt = pow(pow(Et,2) - pow(mq,2),0.5);
  if (pt != pt) {
    *ffout << "problem: nan in pt in gchidgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gchidgauss = pow(PI,2)*fabs(m1)*pt*Et*lambda/A*1/((pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et-pow(m2,2))*(pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et-pow(m3,2)));
  return gchidgauss;
}


double gzetadgauss (double Et)
{
  double gzetadgauss = 0, A=0;
  DoubleVector Etbar(2);
  for (int i=1; i<=2; i++) { Etbar(i) = 0;}
  DoubleVector Etbarmaxmin (double m1, double m2, double massq, double Et);
  Etbar = Etbarmaxmin(m1, m4, mq, Et);
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  gzetadgauss = pow(PI,2)*(Etbar(1)-Etbar(2))/((A-pow(m2,2))*(A-pow(m3,2)));
  return gzetadgauss;
}


double gXdgauss (double Et)
{
  double gXdgauss = 0, pt=0, A=0, B=0, squareplus=0, squareminus=0, lambda=0;
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  B = pow(m1,2)-pow(m4,2)-2*fabs(m1)*Et;
  pt = pow(pow(Et,2) - pow(mq,2),0.5);
  squareplus = A - pow((fabs(m4) + mq),2);
  squareminus = A - pow((fabs(m4) - mq),2);
  if (squareplus < 0 && fabs(squareplus) < 1e-9) {
    squareplus = 0; ///avoid numerical error giving a negative and hence a nan for lambda at upper boundary of integration range
  }
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gXdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  lambda = pow(squareplus*squareminus,0.5);
  gXdgauss = 0.5*pow(PI,2)*pt*B/A*lambda*1/((pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et-pow(m2,2))*(pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et-pow(m3,2)));
  return gXdgauss;
}


double gYdgauss (double Et)
{
  double gYdgauss = 0, A=0, Z=0;
  double Zfunc(double m1, double mq, double m, double Etbarmax, double Etbarmin);
  DoubleVector Etbar(2);
  for (int i=1; i<=2; i++) { Etbar(i) = 0;}
  DoubleVector Etbarmaxmin(double m1, double m2, double massq, double Et);
  Etbar = Etbarmaxmin(m1, m4, mq, Et);
  Z = Zfunc(m1,mq,m3,Etbar(1),Etbar(2));
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  gYdgauss = 0.5*pow(PI,2)*1/(A-pow(m2,2))*((Etbar(1)-Etbar(2))*A + 1/(2*fabs(m1))*(pow(m1,2)*pow(m4,2)-pow(m1,2)*pow(m3,2)+pow(mq,4)+2*fabs(m1)*Et*pow(m3,2)-pow(m3,2)*pow(mq,2))*log(Z));
  return gYdgauss;
}


double gchiprimedgauss (double Et)
{
  double gchiprimedgauss = 0, A=0, Z=0;
  DoubleVector Etbar(2);
  for (int i=1; i<=2; i++) { Etbar(i) = 0;}
  DoubleVector Etbarmaxmin(double m1, double m2, double massq, double Et);
  Etbar = Etbarmaxmin(m1, m4, mq, Et);
  double Zfunc(double m1, double mq, double m, double Etbarmax, double Etbarmin);
  Z = Zfunc(m1,mq,m2,Etbar(1),Etbar(2));
  A = pow(m1,2)+pow(mq,2)-2*fabs(m1)*Et;
  gchiprimedgauss = -0.5*pow(PI,2)*Et/(A-pow(m3,2))*log(Z);
  return gchiprimedgauss;
}



double gG1dgauss(double Et) ///m1 = mgluino, m2 = mstopi, m6 = mtop, m8 = mcharginoj
{
  double gG1dgauss = 0, A=0, pt=0;
  pt = pow(pow(Et,2)-pow(m6,2),0.5);
  A = pow(m1,2)+pow(m6,2)-2*fabs(m1)*Et;
  gG1dgauss = fabs(m1)*pt*Et*pow((A-pow(m8,2)),2)/(pow(A-pow(m2,2),2)*A);
  return gG1dgauss;
}


double gG4dgauss(double Et) ///m1 = mgluino, m2 = mstopi, m4 = msbottomi, m6 = mtop, m7 = mbottom , m8 = mcharginoj
{
  double gG4dgauss = 0, A=0, X=0, Ebbarmax=0, Ebbarmin=0;
  DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et);
  double Xfunc (double mass1, double mass2, double mass3, double mass4, double mass5, double Et);
  Ebbarmax = Ebbarmaxmin (m1, m6, m7, m8, Et)(1);
  Ebbarmin = Ebbarmaxmin (m1, m6, m7, m8, Et)(2);
  X = Xfunc(m1, m6, m7, m8, m4, Et);
  A = pow(m1,2)+pow(m6,2)-2*fabs(m1)*Et;
  gG4dgauss = (m1)*(m8)*1/(A-pow(m2,2))*((Ebbarmax-Ebbarmin) - (pow(m4,2)+pow(m6,2)-2*Et*fabs(m1)-pow(m8,2))/(2*fabs(m1))*log(X));
  return gG4dgauss;
}


double gG5dgauss(double Et) ///m1 = mgluino, m2 = mstopi, m4 = msbottomi, m6 = mtop, m7 = mbottom , m8 = mcharginoj
{
  double gG5dgauss = 0, A=0, X=0;
  DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et);
  double Xfunc (double mass1, double mass2, double mass3, double mass4, double mass5, double Et);
  X = Xfunc(m1, m6, m7, m8, m4, Et);
  A = pow(m1,2)+pow(m6,2)-2*fabs(m1)*Et;
  gG5dgauss = (fabs(m1)/m1)*m6/2*(A-pow(m8,2))/(A-pow(m2,2))*log(X);
  return gG5dgauss;
}


double gG6dgauss(double Et) ///m1 = mgluino, m2 = mstopi, m4 = msbottomi, m6 = mtop, m7 = mbottom , m8 = mcharginoj
{
  double gG6dgauss = 0, A=0, X=0, Ebbarmax=0, Ebbarmin=0;
  DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et);
  double Xfunc (double mass1, double mass2, double mass3, double mass4, double mass5, double Et);
  Ebbarmax = Ebbarmaxmin (m1, m6, m7, m8, Et)(1);
  Ebbarmin = Ebbarmaxmin (m1, m6, m7, m8, Et)(2);
  X = Xfunc(m1, m6, m7, m8, m4, Et);
  A = pow(m1,2)+pow(m6,2)-2*fabs(m1)*Et;
  gG6dgauss = 0.5/(A-pow(m2,2))*((fabs(m1)*(A-pow(m8,2))-(pow(m4,2)-pow(m1,2))/fabs(m1)*-A)*log(X) + 2*(-A)*(Ebbarmax-Ebbarmin));
  return gG6dgauss;
}


double gG7dgauss(double Et)
{
  double gG7dgauss = 0, A=0, X=0, Ebbarmax=0, Ebbarmin=0;
  DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et);
  double Xfunc (double mass1, double mass2, double mass3, double mass4, double mass5, double Et);
  Ebbarmax = Ebbarmaxmin (m1, m6, m7, m8, Et)(1);
  Ebbarmin = Ebbarmaxmin (m1, m6, m7, m8, Et)(2);
  X = Xfunc(m1, m6, m7, m8, m4, Et);
  A = pow(m1,2)+pow(m6,2)-2*fabs(m1)*Et;
  gG7dgauss = 0.5*(m8)*m6*1/(A-pow(m2,2))*(2*(Ebbarmax-Ebbarmin)-(pow(m4,2)-pow(m1,2))/fabs(m1)*log(X));
  return gG7dgauss;
}


double gG8dgauss(double Et)
{
  double gG8dgauss = 0, A=0, Ebbarmax=0, Ebbarmin=0;
  DoubleVector Ebbarmaxmin (double mass1, double mass2, double mass3, double mass4, double Et);
  Ebbarmax = Ebbarmaxmin (m1, m6, m7, m8, Et)(1);
  Ebbarmin = Ebbarmaxmin (m1, m6, m7, m8, Et)(2);
  A = pow(m1,2)+pow(m6,2)-2*fabs(m1)*Et;
  gG8dgauss = ((m1))*m6*(A-pow(m8,2))*(Ebbarmax-Ebbarmin)/((A-pow(m2,2))*(A-pow(m3,2)));
  return gG8dgauss;
}


double gG2dgauss(double Ebbar)
{ 
  double gG2dgauss = 0, A=0, squareplus=0, squareminus=0, lambda=0;
  A = pow(m1,2)+pow(m7,2)-2*fabs(m1)*Ebbar;
  squareplus = A - pow((m8)+m6,2);
  squareminus = A - pow((m8)-m6,2);
  lambda = pow(squareplus*squareminus,0.5);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gG2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gG2dgauss = fabs(m1)*pow(Ebbar,2)*lambda*(A-pow(m6,2)-pow(m8,2))/(pow(A-pow(m4,2),2)*A);
  return gG2dgauss;
}


double gG3dgauss(double Ebbar)
{
  double gG3dgauss = 0, A=0, squareplus=0, squareminus=0, lambda=0;
  A = pow(m1,2)+pow(m7,2)-2*fabs(m1)*Ebbar;
  squareplus = A - pow((m8)+m6,2);
  squareminus = A - pow((m8)-m6,2);
  lambda = pow(squareplus*squareminus,0.5);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gG3dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gG3dgauss = pow(Ebbar,2)*lambda*4*fabs(m1)*fabs(m8)*fabs(m6)/(pow(A-pow(m4,2),2)*A);
  return gG3dgauss;
}


double gZdgauss(double E) ///m1 = mZi, m4 = mZj, m2 = mstop1, m3 = mstop2, mq = mt, MZboson = mz
{
  double gZdgauss = 0, Bf=0, D=0, F=0, G=0, H=0;
  Bf = pow(1-4*pow(mq,2)/(pow(m1,2)+pow(m4,2)-2*E*fabs(m1)),0.5);
  D = pow(m1,2)+pow(m4,2)-pow(MZboson,2)-2*E*fabs(m1);
  F = pow(m1,2)+pow(m4,2)-2*fabs(m1)*fabs(m4);
  G = pow(E,2)+pow(m4,2) + Bf/3*(pow(E,2)-pow(m4,2));
  H = fabs(m4)*(fabs(m1)/m1)*(pow(m1,2)+pow(m4,2)-2*pow(mq,2));
  gZdgauss = Bf*pow(pow(E,2)-pow(m4,2),0.5)/(pow(D,2))*(E*F-fabs(m1)*G+H);

  return gZdgauss;
}


double ghHdgauss (double E) ///m1 = mZi, m4 = mZj, m2 = mstop1, m3 = mstop2, mq = mt, MZboson = mz
{
   double ghHdgauss = 0, Bf=0, D=0, F=0, G=0, Xijh=0, XijH=0, Xjih=0, XjiH=0, H=0;
   Bf = pow(1-4*pow(mq,2)/(pow(m1,2)+pow(m4,2)-2*E*m1),0.5);
   D = pow(m1,2)+pow(m4,2)-2*E*m1-2*pow(mq,2);
   F = pow(m1,2)+pow(m4,2)-2*m1*E-pow(mh,2);
   G = pow(m1,2)+pow(m4,2)-2*m1*E-pow(mH,2);
   H = pow(E,2) - pow(m4,2);
   
   Xjih = -0.5*(fabs(m1)/m1)*(fabs(m4)/m4)*(NeutMIX(neutralinoj,3)*-sin(alphamix)-NeutMIX(neutralinoj,4)*cos(alphamix))*(g1*-NeutMIX(neutralinoi,2)-g2*-NeutMIX(neutralinoi,1));
   XjiH = -0.5*(fabs(m1)/m1)*(fabs(m4)/m4)*(NeutMIX(neutralinoj,3)*cos(alphamix)-NeutMIX(neutralinoj,4)*sin(alphamix))*(g1*-NeutMIX(neutralinoi,2)-g2*-NeutMIX(neutralinoi,1));
   Xijh = -0.5*(fabs(m1)/m1)*(fabs(m4)/m4)*(NeutMIX(neutralinoi,3)*-sin(alphamix)-NeutMIX(neutralinoi,4)*cos(alphamix))*(g1*-NeutMIX(neutralinoj,2)-g2*-NeutMIX(neutralinoj,1));
   XijH = -0.5*(fabs(m1)/m1)*(fabs(m4)/m4)*(NeutMIX(neutralinoi,3)*cos(alphamix)-NeutMIX(neutralinoi,4)*sin(alphamix))*(g1*-NeutMIX(neutralinoj,2)-g2*-NeutMIX(neutralinoj,1));
   ghHdgauss = fabs(m1)*Bf*pow(H,0.5)*D*(E+fabs(m4)*(fabs(m1)/m1))*pow(((-sin(alphamix)*(Xjih+Xijh))/F + cos(alphamix)*(XjiH+XijH)/G),2);
   
   return ghHdgauss;
}


double gAdgauss(double E) ///m1 = mZi, m4 = mZj, m2 = mstop1, m3 = mstop2, mq = mt
{
  double gAdgauss = 0, Bf=0, D=0, F=0;
  Bf = pow(1-4*pow(mq,2)/(pow(m1,2)+pow(m4,2)-2*E*m1),0.5);
  D = pow(m1,2)+pow(m4,2)-2*E*m1-2*pow(mq,2);
  F = pow(m1,2)+pow(m4,2)-2*m1*E-pow(mA,2);
  gAdgauss = fabs(m1)*Bf*pow(pow(E,2)-pow(m4,2),0.5)*D*(E-fabs(m4)*(fabs(m1)/m1))/pow(F,2);
  return gAdgauss;
}

double gZsfdgauss(double s) ///m2 = msfi where i is the sfermion contribution interference with Z you are considering
{
  double gZsfintegral = 0, EQ=0, Q=0, Qprime=0, musquared=0, B=0, C=0, D=0, F=0, G=0, H=0;
  EQ = (s + pow(m1,2)-pow(m4,2))/(2*m1);
  Q = pow(pow(EQ,2)-s,0.5);
  Qprime = Q*pow(1-4*pow(mq,2)/s,0.5);
  musquared = s + pow(m2,2) - pow(m4,2)- pow(mq,2);
  B = m1*EQ+pow(m2,2)-pow(m1,2)-s-pow(mq,2);
  C = pow(m2,2)-pow(m4,2)-pow(mq,2);
  D = pow(m2,2)-pow(m1,2)-pow(mq,2);
  F = fabs(m1)*fabs(m4)*(s-2*pow(mq,2));
  G = m1*(EQ+Qprime)-musquared;
  H = m1*(EQ-Qprime)-musquared;
  gZsfintegral = pow(PI,2)/2*1/fabs(m1)*1/(s-pow(MZboson,2))*(-0.5*Qprime*B-1/(4*m1)*(C*D + F)*log(G/H));
  
  return gZsfintegral;
}

double gJdgauss (double s)
{
  double gJdgauss = 0, EQ=0, Q=0, Qprime=0, musquared=0, B=0, G=0, H=0;
  EQ = (s + pow(m1,2)-pow(m4,2))/(2*m1);
  Q = pow(pow(EQ,2)-s,0.5);
  Qprime = Q*pow(1-4*pow(mq,2)/s,0.5);
  musquared = s + pow(m2,2) - pow(m4,2)- pow(mq,2);
  B = s*pow(m2,2)-pow(mq,2)*(pow(m1,2)+pow(m4,2))+pow(-1,AorhorH)*fabs(m1)*fabs(m4)*(s-2*pow(mq,2));
  G = m1*(EQ+Qprime)-musquared;
  H = m1*(EQ-Qprime)-musquared;
  gJdgauss = 1/(s-pow(mphi,2))*(0.5*s*Qprime + B/(4*m1)*log(G/H));
  return gJdgauss;
}	

double gneutineutjffZ1dgauss(double s) ///m1 = mneuti, m4 = mneutj, mq = mf, MZboson = mZboson
{
  double Z1dgauss = 0, lambda1 = 0, lambda2 = 0, squareplus1 = 0, squareminus1 = 0;
  squareplus1 = s - pow(fabs(m1)+fabs(m4),2);
  squareminus1 = s - pow(fabs(m1)-fabs(m4),2);
  if (squareminus1 > 0 && fabs(squareminus1) < 1e-9) { 
    squareminus1 = 0; ///Set to 0 to avoid numerical precision causing a very small but positive squareminus1 at smax when it should be exactly 0, this can cause problems as it would make lambda1 the sqrt of a negative number (as squareplus1 is negative), avoid this by setting to 0
  }
  if (squareplus1*squareminus1 < 0) {
    *ffout << "problem: lambda1 will give nan in gneutineutjffZ1dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  lambda1 = pow(squareplus1*squareminus1,0.5);
  lambda2 = pow(s*(s-4*pow(mq,2)),0.5);    
  Z1dgauss = 1/(3*pow(s,2)*pow(s-pow(MZboson,2),2))*(-2*pow(s,4) + (pow(m1,2) + pow(m4,2) + 2*pow(mq,2))*pow(s,3) + (pow(pow(m1,2)-pow(m4,2),2) - 2*(pow(m1,2)+pow(m4,2))*2*pow(mq,2))*pow(s,2) + 2*pow(mq,2)*pow(pow(m1,2)-pow(m4,2),2)*s)*1/s*lambda1*lambda2;
  return Z1dgauss;
}

double gneutineutjffZ2dgauss(double s)
{
  double Z2dgauss = 0, lambda1 = 0, lambda2 = 0, squareplus1 = 0, squareminus1 = 0;
  squareplus1 = s - pow(fabs(m1)+fabs(m4),2);
  squareminus1 = s - pow(fabs(m1)-fabs(m4),2);
  if (squareminus1 > 0 && fabs(squareminus1) < 1e-9) { 
    squareminus1 = 0; ///Set to 0 to avoid numerical precision causing a very small but positive squareminus1 at smax when it should be exactly 0, this can cause problems as it would make lambda1 the sqrt of a negative number (as squareplus1 is negative), avoid this by setting to 0
  }
  if (squareplus1*squareminus1 < 0) {
    *ffout << "problem: lambda1 will give nan in gneutineutjffZ2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  lambda1 = pow(squareplus1*squareminus1,0.5);
  lambda2 = pow(s*(s-4*pow(mq,2)),0.5);    
  Z2dgauss = 1/(s*pow(s-pow(MZboson,2),2))*lambda1*lambda2*(s-2*pow(mq,2));
  return Z2dgauss;
}

double gneutineutjffZ3dgauss(double s)
{
  double Z3dgauss = 0, lambda1 = 0, lambda2 = 0, squareplus1 = 0, squareminus1 = 0;
  squareplus1 = s - pow(fabs(m1)+fabs(m4),2);
  squareminus1 = s - pow(fabs(m1)-fabs(m4),2);
  if (squareminus1 > 0 && fabs(squareminus1) < 1e-9) { 
    squareminus1 = 0; ///Set to 0 to avoid numerical precision causing a very small but positive squareminus1 at smax when it should be exactly 0, this can cause problems as it would make lambda1 the sqrt of a negative number (as squareplus1 is negative), avoid this by setting to 0
  }
  if (squareplus1*squareminus1 < 0) {
    *ffout << "problem: lambda1 will give nan in gneutineutjffZ3dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  lambda1 = pow(squareplus1*squareminus1,0.5);
  lambda2 = pow(s*(s-4*pow(mq,2)),0.5);    
  Z3dgauss = 1/(s*pow(s-pow(MZboson,2),2))*lambda1*lambda2*(-s+pow(m1,2)+pow(m4,2));
  return Z3dgauss;
}

double gneutineutjffZ4dgauss(double s)
{
  double Z4dgauss = 0, lambda1 = 0, lambda2 = 0, squareplus1 = 0, squareminus1 = 0;
  squareplus1 = s - pow(fabs(m1)+fabs(m4),2);
  squareminus1 = s - pow(fabs(m1)-fabs(m4),2);
  if (squareminus1 > 0 && fabs(squareminus1) < 1e-9) { 
    squareminus1 = 0; ///Set to 0 to avoid numerical precision causing a very small but positive squareminus1 at smax when it should be exactly 0, this can cause problems as it would make lambda1 the sqrt of a negative number (as squareplus1 is negative), avoid this by setting to 0
  }
  if (squareplus1*squareminus1 < 0) {
    *ffout << "problem: lambda1 will give nan in gneutineutjffZ4dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  lambda1 = pow(squareplus1*squareminus1,0.5);
  lambda2 = pow(s*(s-4*pow(mq,2)),0.5);    
  Z4dgauss = 1/(s*pow(s-pow(MZboson,2),2))*lambda1*lambda2;
  return Z4dgauss;
}


double gintegralhdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl
{
  double gintegralhdgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*m1*E;
  gintegralhdgauss = (pow(pow(E,2)-pow(m4,2),0.5)*pow(s-4*pow(mq,2),0.5))/(pow(s,0.5)*pow(s-pow(mh,2),2))*(E-fabs(m4))*(s-4*pow(mq,2));

  return gintegralhdgauss;
}

double gintegralHdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mH = mhiggsH
{
  double gintegralHdgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*m1*E;
  gintegralHdgauss = (pow(pow(E,2)-pow(m4,2),0.5)*pow(s-4*pow(mq,2),0.5))/(pow(s,0.5)*pow(s-pow(mH,2),2))*(E-fabs(m4))*(s-4*pow(mq,2));
   
  return gintegralHdgauss;
}


double gintegralh1dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl
{
  double gintegralh1dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralh1dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)/(pow(s,0.5)*pow(s-pow(mh,2),2));
  return gintegralh1dgauss;
}

double gintegralh2dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl
{
  double gintegralh2dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralh2dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*(s-2*pow(mq,2))/(pow(s,0.5)*pow(s-pow(mh,2),2));

  return gintegralh2dgauss;
}


double gintegralh3dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl
{
  double gintegralh3dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralh3dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*2*fabs(m1)*E/(pow(s,0.5)*pow(s-pow(mh,2),2));
  return gintegralh3dgauss;
}


double gintegralh4dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl
{
  double gintegralh4dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralh4dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*2*fabs(m1)*E*(s-2*pow(mq,2))/(pow(s,0.5)*pow(s-pow(mh,2),2));
  return gintegralh4dgauss;
}

double gintegralH1dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mH = mhiggsH
{
  double gintegralH1dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralH1dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)/(pow(s,0.5)*pow(s-pow(mH,2),2));
  return gintegralH1dgauss;
}

double gintegralH2dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mH = mhiggsH
{
  double gintegralH2dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralH2dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*(s-2*pow(mq,2))/(pow(s,0.5)*pow(s-pow(mH,2),2));
  return gintegralH2dgauss;
}


double gintegralH3dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mH = mhiggsH
{
  double gintegralH3dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralH3dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*2*fabs(m1)*E/(pow(s,0.5)*pow(s-pow(mH,2),2));
  return gintegralH3dgauss;
}


double gintegralH4dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl
{
  double gintegralH4dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralH4dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*2*fabs(m1)*E*(s-2*pow(mq,2))/(pow(s,0.5)*pow(s-pow(mH,2),2));
  return gintegralH4dgauss;
}


double gintegralhH1dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl, mH = mhiggsH
{
  double gintegralhH1dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralhH1dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)/(pow(s,0.5)*(s-pow(mh,2))*(s-pow(mH,2)));
  return gintegralhH1dgauss;
}

double gintegralhH2dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl, mH = mhiggsH
{
  double gintegralhH2dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralhH2dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*(s-2*pow(mq,2))/(pow(s,0.5)*(s-pow(mh,2))*(s-pow(mH,2)));
  return gintegralhH2dgauss;
}


double gintegralhH3dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl, mH = mhiggsH
{
  double gintegralhH3dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralhH3dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*2*fabs(m1)*E/(pow(s,0.5)*(s-pow(mh,2))*(s-pow(mH,2)));
  return gintegralhH3dgauss;
}


double gintegralhH4dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mh = mhiggsl, mH = mhiggsH
{
  double gintegralhH4dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralhH4dgauss = 2*fabs(m1)*pow(s-4*pow(mq,2),0.5)*pow(pow(E,2)-pow(m4,2),0.5)*2*fabs(m1)*2*fabs(m1)*E*(s-2*pow(mq,2))/(pow(s,0.5)*(s-pow(mh,2))*(s-pow(mH,2)));
  return gintegralhH4dgauss;
}

double gintegralA1dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mA = mhiggsA
{
  double gintegralA1dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralA1dgauss = 4*pow(m1,2)*pow(pow(E,2)-pow(m4,2),0.5)*pow(s-4*pow(mq,2),0.5)/(pow(s,0.5)*pow(s-pow(mA,2),2));
  return gintegralA1dgauss;
}


double gintegralA2dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mA = mhiggsA
{
  double gintegralA2dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralA2dgauss = 4*pow(m1,2)*pow(pow(E,2)-pow(m4,2),0.5)*pow(s-4*pow(mq,2),0.5)*(s-2*pow(mq,2))/(pow(s,0.5)*pow(s-pow(mA,2),2));
  return gintegralA2dgauss;
}


double gintegralA3dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mA = mhiggsA
{
  double gintegralA3dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralA3dgauss = 4*pow(m1,2)*pow(pow(E,2)-pow(m4,2),0.5)*pow(s-4*pow(mq,2),0.5)*2*fabs(m1)*E/(pow(s,0.5)*pow(s-pow(mA,2),2));
  return gintegralA3dgauss;
}


double gintegralA4dgauss (double E) ///m1 = mZi, m4 = mZj, mq = mt, MZboson = mz, mA = mhiggsA
{
  double gintegralA4dgauss = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegralA4dgauss = 4*pow(m1,2)*pow(pow(E,2)-pow(m4,2),0.5)*pow(s-4*pow(mq,2),0.5)*2*fabs(m1)*E*(s-2*pow(mq,2))/(pow(s,0.5)*pow(s-pow(mA,2),2));
  return gintegralA4dgauss;
}

double gintegral1Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral1Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral1Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  gintegral1Zsfdgauss = 1/(s-pow(MZboson,2))*(-2*fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5) - (pow(m2,2)-pow(mq,2)+pow(m4,2) - 2*fabs(m1)*E)*log(logarg));
  
  return gintegral1Zsfdgauss;
}

double gintegral2Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral2Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral2Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }  
  gintegral2Zsfdgauss = 1/(s-pow(MZboson,2))*(2*fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5) + (pow(m2,2)+pow(m1,2)- 2*fabs(m1)*E - pow(mq,2))*log(logarg));
   
  return gintegral2Zsfdgauss;
}

double gintegral3Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral3Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral3Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  gintegral3Zsfdgauss = 1/(s-pow(MZboson,2))*((pow(m1,2) + 2*pow(mq,2) + pow(m4,2) -1.5*pow(m2,2) - 0.5*(pow(mq,2) + fabs(m1)*E + fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5)))*(pow(mq,2) + fabs(m1)*E + fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5)-pow(m2,2)) - (pow(m1,2) + 2*pow(mq,2) + pow(m4,2) -1.5*pow(m2,2) - 0.5*(pow(mq,2) + fabs(m1)*E - fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5)))*(pow(mq,2) + fabs(m1)*E - fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5)-pow(m2,2)) + (pow(m1,2) + pow(mq,2) - pow(m2,2))*(pow(m2,2)-pow(mq,2)-pow(m4,2))*log(logarg));
   
  return gintegral3Zsfdgauss;
}

double gintegral4Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral4Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral4Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  
  gintegral4Zsfdgauss = 1/(s-pow(MZboson,2))*(2*fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5) + (pow(m2,2)-pow(mq,2)-pow(m4,2))*log(logarg));
  return gintegral4Zsfdgauss;
}    

double gintegral5Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral5Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral5Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  
  gintegral5Zsfdgauss = -1/(s-pow(MZboson,2))*(2*fabs(m1)*pow(1-4*pow(mq,2)/s,0.5)*pow(pow(E,2)-pow(m4,2),0.5) + (pow(m2,2)-pow(mq,2)-pow(m1,2))*log(logarg));
  return gintegral5Zsfdgauss;
}

double gintegral6Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral6Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral6Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  
  gintegral6Zsfdgauss = 1/(s-pow(MZboson,2))*(s- 2*pow(mq,2))*log(logarg);
  return gintegral6Zsfdgauss;
}

double gintegral7Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral7Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral7Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  
  gintegral7Zsfdgauss = 1/(s-pow(MZboson,2))*(2*fabs(m1)*E)*log(logarg);
  return gintegral7Zsfdgauss;
}

double gintegral8Zsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, MZboson = mz, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral8Zsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral8Zsfdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  gintegral8Zsfdgauss = 1/(s-pow(MZboson,2))*log(logarg);
  return gintegral8Zsfdgauss;
}



double gintegral1hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral1hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral1hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral1hsfdgauss = 2/(s-pow(mh,2))*(2*s*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2)*s - pow(mq,2)*(pow(m1,2)+pow(m4,2)))*log(logarg));
  
  return gintegral1hsfdgauss;
}


double gintegral2hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral2hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral2hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral2hsfdgauss = -1/(s-pow(mh,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) + pow(m4,2) -2*fabs(m1)*E - pow(mq,2))*log(logarg));
     
  return gintegral2hsfdgauss;
}



double gintegral3hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral3hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral3hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral3hsfdgauss = 1/(s-pow(mh,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) + pow(m1,2) -2*fabs(m1)*E - pow(mq,2))*log(logarg));
     
  return gintegral3hsfdgauss;
}



double gintegral4hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral4hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral4hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral4hsfdgauss = 1/(s-pow(mh,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) - pow(mq,2) - pow(m4,2))*log(logarg));
     
  return gintegral4hsfdgauss;
}


double gintegral5hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral5hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral5hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral5hsfdgauss = -1/(s-pow(mh,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) - pow(mq,2) - pow(m1,2))*log(logarg));
     
  return gintegral5hsfdgauss;
}


double gintegral6hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral6hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral6hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral6hsfdgauss = 1/(s-pow(mh,2))*(s-2*pow(mq,2))*log(logarg);
     
  return gintegral6hsfdgauss;
}


double gintegral7hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral7hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral7hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral7hsfdgauss = 1/(s-pow(mh,2))*(2*fabs(m1)*E)*log(logarg);
     
  return gintegral7hsfdgauss;
}


double gintegral8hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral8hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral8hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral8hsfdgauss = 1/(s-pow(mh,2))*log(logarg);
     
  return gintegral8hsfdgauss;
}


double gintegral1Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral1Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral1Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral1Hsfdgauss = 2/(s-pow(mH,2))*(2*s*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2)*s - pow(mq,2)*(pow(m1,2)+pow(m4,2)))*log(logarg));
   
   return gintegral1Hsfdgauss;
}


double gintegral2Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral2Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral2Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral2Hsfdgauss = -1/(s-pow(mH,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) + pow(m4,2) -2*fabs(m1)*E - pow(mq,2))*log(logarg));
     
  return gintegral2Hsfdgauss;
}



double gintegral3Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral3Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral3Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral3Hsfdgauss = 1/(s-pow(mH,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) + pow(m1,2) -2*fabs(m1)*E - pow(mq,2))*log(logarg));
     
  return gintegral3Hsfdgauss;
}



double gintegral4Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral4Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral4Hsfdgauss used in 1->3 decay" << endl;
     errorflag = -1;
  }

  gintegral4Hsfdgauss = 1/(s-pow(mH,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) - pow(mq,2) - pow(m4,2))*log(logarg));
     
  return gintegral4Hsfdgauss;
}


double gintegral5Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral5Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral5Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral5Hsfdgauss = -1/(s-pow(mH,2))*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5) + (pow(m2,2) - pow(mq,2) - pow(m1,2))*log(logarg));
     
  return gintegral5Hsfdgauss;
}


double gintegral6Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral6Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral6Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral6Hsfdgauss = 1/(s-pow(mH,2))*(s-2*pow(mq,2))*log(logarg);
     
  return gintegral6Hsfdgauss;
}


double gintegral7Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral7Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral7Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral7Hsfdgauss = 1/(s-pow(mH,2))*(2*fabs(m1)*E)*log(logarg);
     
  return gintegral7Hsfdgauss;
}


double gintegral8Hsfdgauss (double E) ///m1 = mZi, m4 = mZj, mq = mf, mhiggsl = mh, m2 = msfi where i is the sfermion index you're considering for that interference (i = 1,2)
{
  double gintegral8Hsfdgauss = 0, logarg=0, EQ = 0, Qprime = 0, musquared = 0, s=0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  musquared = s + pow(m2,2) - pow(m4,2) - pow(mq,2);
  EQ = (s+pow(m1,2) - pow(m4,2))/(2*fabs(m1));
  Qprime = pow(pow(EQ,2) - s,0.5)*pow(1 - 4*pow(mq,2)/s,0.5);
  logarg = (fabs(m1)*(EQ + Qprime)-musquared)/(fabs(m1)*(EQ - Qprime) - musquared); ///argument of the log
  if (logarg < 0) {
    *ffout << "Problem: will get nan as logarg < 0 in gintegral8Hsfdgauss used in 1->3 decays" << endl; 
    errorflag = -1;
  }

  gintegral8Hsfdgauss = 1/(s-pow(mH,2))*log(logarg);
     
  return gintegral8Hsfdgauss;
}


double gintegral1ZAdgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, m2 = msfi, MZboson = mz
{
  double gintegral1ZAdgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegral1ZAdgauss = 1/((s-pow(MZboson,2))*(s-pow(mA,2)))*2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)*(pow(m1,2) - fabs(m1)*E);
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gintegral1ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gintegral1ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  return gintegral1ZAdgauss;
}

double gintegral2ZAdgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, m2 = msfi, MZboson = mz
{
  double gintegral2ZAdgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegral2ZAdgauss = -1/((s-pow(MZboson,2))*(s-pow(mA,2)))*2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)*(pow(m4,2) - fabs(m1)*E);
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gintegral2ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gintegral2ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  return gintegral2ZAdgauss;
}

double gintegral3ZAdgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, m2 = msfi, MZboson = mz
{
  double gintegral3ZAdgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegral3ZAdgauss = 1/((s-pow(MZboson,2))*(s-pow(mA,2)))*2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)*(pow(m1,2)-fabs(m1)*E);
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gintegral3ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gintegral3ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  return gintegral3ZAdgauss;
}

double gintegral4ZAdgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, m2 = msfi, MZboson = mz
{
  double gintegral4ZAdgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gintegral4ZAdgauss = -1/((s-pow(MZboson,2))*(s-pow(mA,2)))*2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)*(pow(m4,2) - fabs(m1)*E);
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gintegral4ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gintegral4ZAdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  return gintegral4ZAdgauss;
}

double gneutineutjffgA1dgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, MZboson = mz
{
  double gneutineutjffgA1dgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gneutineutjffgA1dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)/((s-pow(MZboson,2))*(s-pow(mA,2)));
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gneutineutjffgA1dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gneutineutjffgA1dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }  

  return gneutineutjffgA1dgauss;
}

double gneutineutjffgA2dgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, MZboson = mz
{
  double gneutineutjffgA2dgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gneutineutjffgA2dgauss = 2*fabs(m1)*(s-2*pow(mq,2))*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)/((s-pow(MZboson,2))*(s-pow(mA,2)));
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gneutineutjffgA2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gneutineutjffgA2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }  
  
  return gneutineutjffgA2dgauss;
}

double gneutineutjffgA3dgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, MZboson = mz
{
  double gneutineutjffgA3dgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gneutineutjffgA3dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)*2*fabs(m1)*E/((s-pow(MZboson,2))*(s-pow(mA,2)));
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gneutineutjffgA3dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gneutineutjffgA3dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }  
  
  return gneutineutjffgA3dgauss;
}

double gneutineutjffgA4dgauss(double E) /// m1 = mZi, m4 = mZj, mq = mf, mA = mhiggsA, MZboson = mz
{
  double gneutineutjffgA4dgauss = 0, s = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  gneutineutjffgA4dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(1-4*pow(mq,2)/s,0.5)*(s-2*pow(mq,2))*2*fabs(m1)*E/((s-pow(MZboson,2))*(s-pow(mA,2)));
  if (pow(E,2)-pow(m4,2)<0) {
    *ffout << "problem: pow(E,2)-pow(m4,2)< 0 so sqrt gives nan in gneutineutjffgA4dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  if (1-4*pow(mq,2)/s<0) {
    *ffout << "problem: 1-4*pow(mq,2)/s< 0 so sqrt gives nan in gneutineutjffgA4dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  
  
  return gneutineutjffgA4dgauss;
}


double gneuticharjffpW1dgauss(double E) ///m1 = mZi, m2 = mWj, m3 = mf, m4 = mfp, MWboson = mw
{
  double gneuticharjffpW1dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW1dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffpW1dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*(-2*pow(s,4) + (pow(m1,2) + pow(m2,2) + pow(m3,2) + pow(m4,2))*pow(s,3) + (pow(pow(m1,2)-pow(m2,2),2) + pow(pow(m3,2)-pow(m4,2),2) - 2*(pow(m1,2)+pow(m2,2))*(pow(m3,2)+pow(m4,2)))*pow(s,2) + ((pow(m1,2)+pow(m2,2))*pow(pow(m3,2)-pow(m4,2),2) + (pow(m3,2)+pow(m4,2))*pow(pow(m1,2)-pow(m2,2),2))*s - 2*pow(pow(m1,2)-pow(m2,2),2)*pow(pow(m3,2)-pow(m4,2),2))*1/(3*pow(s,2))*1/(pow(s-pow(MWboson,2),2));
  return gneuticharjffpW1dgauss;
}

double gneuticharjffpW2dgauss(double E) ///m1 = mZi, m2 = mWj, m3 = mf, m4 = mfp, MWboson = mw
{
  double gneuticharjffpW2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }   
  gneuticharjffpW2dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*(s-pow(m3,2)-pow(m4,2))/(pow(s-pow(MWboson,2),2));

  return gneuticharjffpW2dgauss;
}


double gneuticharjffpHpm1dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mHpm;
{
  double gneuticharjffpHpm1dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHpm1dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffpHpm1dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)/(pow(s-pow(m5,2),2));
  return gneuticharjffpHpm1dgauss;
}

double gneuticharjffpHpm2dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mHpm;
{
  double gneuticharjffpHpm2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHpm2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffpHpm2dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*(s-pow(m3,2)-pow(m4,2))/(pow(s-pow(m5,2),2));
  return gneuticharjffpHpm2dgauss;
}

double gneuticharjffpHpm3dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mHpm;
{
  double gneuticharjffpHpm3dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHpm3dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffpHpm3dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*2*fabs(m1)*E/(pow(s-pow(m5,2),2));
  return gneuticharjffpHpm3dgauss;
}

double gneuticharjffpHpm4dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mHpm;
{
  double gneuticharjffpHpm4dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHpm4dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffpHpm4dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*2*fabs(m1)*E*(s-pow(m3,2)-pow(m4,2))/(pow(s-pow(m5,2),2));

  return gneuticharjffpHpm4dgauss;
}


double gneuticharjffp1sf1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1, m6 = msf2
{
  double gneuticharjffp1sf1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  
  if (squareplus < 0 && fabs(squareplus/s) < 1e-1) {squareplus = 0;} ///Avoid small negative values of squareplus at upper boundary where theoretically s = 0 exactly.
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp1sf1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffp1sf1sf2dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp1sf1sf2dgauss;
}

double gneuticharjffp2sf1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1, m6 = msf2
{
  double gneuticharjffp2sf1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);

  if (squareplus < 0 && fabs(squareplus/s) < 1e-1) {squareplus = 0;} ///Avoid small negative values of squareplus at upper boundary where theoretically s = 0 exactly.
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp2sf1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffp2sf1sf2dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*(s-pow(m3,2)-pow(m4,2))/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp2sf1sf2dgauss;
}
 
double gneuticharjffp3sf1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1, m6 = msf2
{
  double gneuticharjffp3sf1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);

  if (squareplus < 0 && fabs(squareplus/s) < 1e-1) {squareplus = 0;} ///Avoid small negative values of squareplus at upper boundary where theoretically s = 0 exactly.
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp3sf1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffp3sf1sf2dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*2*fabs(m1)*E/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp3sf1sf2dgauss;
} 

double gneuticharjffp4sf1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1, m6 = msf2
{
  double gneuticharjffp4sf1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);

  if (squareplus < 0 && fabs(squareplus/s) < 1e-1) {squareplus = 0;} ///Avoid small negative values of squareplus at upper boundary where theoretically s = 0 exactly.
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp4sf1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  gneuticharjffp4sf1sf2dgauss = 2*fabs(m1)/s*pow(squareplus*squareminus,0.5)*pow(pow(E,2)-pow(m2,2),0.5)*2*fabs(m1)*E*(s-pow(m3,2)-pow(m4,2))/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp4sf1sf2dgauss;
}
 

double gneuticharjffp1sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp1sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp1sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp1sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }

  gneuticharjffp1sfp1sf2dgauss = (2*(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5) + (pow(m6,2)*s - pow(m1,2)*pow(m3,2) - pow(m2,2)*pow(m4,2))*log(Z)))/(s-pow(m5,2));
  return gneuticharjffp1sfp1sf2dgauss;
}

double gneuticharjffp2sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp2sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp2sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp2sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  
  gneuticharjffp2sfp1sf2dgauss = -(2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s + (pow(m6,2)-2*fabs(m1)*E + pow(m4,2)-pow(m3,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp2sfp1sf2dgauss;
}

double gneuticharjffp3sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp3sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp3sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp3sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp3sfp1sf2dgauss = (2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s + (pow(m6,2)+pow(m1,2)-2*fabs(m1)*E-pow(m2,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp3sfp1sf2dgauss;
}

double gneuticharjffp4sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp4sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3- m2,2);
 if (squareplus*squareminus < 0) {
   *ffout << "problem: lambda will give nan in gneuticharjffp4sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp4sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp4sfp1sf2dgauss = (2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s + (pow(m6,2)-pow(m3,2)-pow(m4,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp4sfp1sf2dgauss;
}

double gneuticharjffp5sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp5sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
 if (squareplus*squareminus < 0) {
   *ffout << "problem: lambda will give nan in gneuticharjffp5sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp5sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp5sfp1sf2dgauss = (-2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - (pow(m6,2)-pow(m1,2)-pow(m2,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp5sfp1sf2dgauss;
}

double gneuticharjffp6sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp6sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp6sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp6sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp6sfp1sf2dgauss = log(Z)*(s-pow(m2,2)-pow(m3,2))/(s-pow(m5,2));
  return gneuticharjffp6sfp1sf2dgauss;
}

double gneuticharjffp7sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp7sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
 if (squareplus*squareminus < 0) {
   *ffout << "problem: lambda will give nan in gneuticharjffp7sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 

  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp7sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp7sfp1sf2dgauss = log(Z)*2*fabs(m1)*E/(s-pow(m5,2));
  return gneuticharjffp7sfp1sf2dgauss;
}

double gneuticharjffp8sfp1sf2dgauss(double E) ///m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2
{
  double gneuticharjffp8sfp1sf2dgauss = 0, s = 0, squareplus = 0, squareminus = 0, numerator = 0, denominator = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp8sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  numerator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s + 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  denominator = 0.5*(pow(m2,2)+pow(m3,2)+2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s - 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s - 2*pow(m6,2));
  Z = numerator/denominator;
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp8sfp1sf2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp8sfp1sf2dgauss = log(Z)/(s-pow(m5,2));
  return gneuticharjffp8sfp1sf2dgauss;
}


double gneuticharjffp1WHpmdgauss(double E) /// m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHpm
{
  double gneuticharjffp1WHpmdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0;
  s= pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp1WHpmdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = 2*fabs(m1)*E + pow(m3,2) + pow(m4,2) - (pow(m1,2)-pow(m2,2))*(pow(m3,2)-pow(m4,2))/s;
  B = 2*fabs(m1)/s*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5);
  gneuticharjffp1WHpmdgauss = (-0.5*(A*B) + (pow(m1,2)+pow(m3,2))*B)/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp1WHpmdgauss;
}

double gneuticharjffp2WHpmdgauss(double E) /// m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHpm
{
  double gneuticharjffp2WHpmdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0;
  s= pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp2WHpmdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = 2*fabs(m1)*E + pow(m3,2) + pow(m4,2) - (pow(m1,2)-pow(m2,2))*(pow(m3,2)-pow(m4,2))/s;
  B = 2*fabs(m1)/s*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5);
  
  gneuticharjffp2WHpmdgauss = (0.5*(A*B) - (pow(m2,2)+pow(m4,2))*B)/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp2WHpmdgauss;
}

double gneuticharjffp3WHpmdgauss(double E) /// m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHpm
{
  double gneuticharjffp3WHpmdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0;
  s= pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp3WHpmdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = 2*fabs(m1)*E + pow(m3,2) + pow(m4,2) - (pow(m1,2)-pow(m2,2))*(pow(m3,2)-pow(m4,2))/s;
  B = 2*fabs(m1)/s*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5);
  gneuticharjffp3WHpmdgauss = (0.5*(A*B)+(pow(m1,2)-2*fabs(m1)*E-pow(m3,2))*B)/((s-pow(m5,2))*(s-pow(m6,2)));

  return gneuticharjffp3WHpmdgauss;
}

double gneuticharjffp4WHpmdgauss(double E) /// m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHpm
{
  double gneuticharjffp4WHpmdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0;
  s= pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp4WHpmdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = 2*fabs(m1)*E + pow(m3,2) + pow(m4,2) - (pow(m1,2)-pow(m2,2))*(pow(m3,2)-pow(m4,2))/s;
  B = 2*fabs(m1)/s*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5);
  
  gneuticharjffp4WHpmdgauss = (-0.5*(A*B)-(pow(m2,2)-2*fabs(m1)*E-pow(m4,2))*B)/((s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp4WHpmdgauss;
}

double gneuticharjffpW1Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW1Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW1Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW1Sfpdgauss used in 1->3 decays"<<endl;
    errorflag = -1;
  }
  gneuticharjffpW1Sfpdgauss = (-B - (pow(m6,2)+pow(m4,2)-2*fabs(m1)*E-pow(m3,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffpW1Sfpdgauss;
}

double gneuticharjffpW2Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW2Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW2Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW2Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffpW2Sfpdgauss = (B + (pow(m6,2)+pow(m1,2)-2*fabs(m1)*E-pow(m2,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffpW2Sfpdgauss;
}

double gneuticharjffpW3Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW3Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW3Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW3Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffpW3Sfpdgauss = ((pow(m1,2)+pow(m3,2)+pow(m2,2)+pow(m4,2)-1.5*pow(m6,2)-0.25*(A+B))*(0.5*(A+B)-pow(m6,2)) - (pow(m1,2)+pow(m3,2)+pow(m2,2)+pow(m4,2)-1.5*pow(m6,2)-0.25*(A-B))*(0.5*(A-B)-pow(m6,2)) + (pow(m1,2)+pow(m2,2)-pow(m6,2))*(pow(m6,2)-pow(m3,2)-pow(m4,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffpW3Sfpdgauss;
}


double gneuticharjffpW4Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW4Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW4Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW4Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffpW4Sfpdgauss = (B + (pow(m6,2)-pow(m3,2)-pow(m4,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffpW4Sfpdgauss;
}

double gneuticharjffpW5Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW5Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW5Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW5Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }  
  gneuticharjffpW5Sfpdgauss = (-B - (pow(m6,2)-pow(m1,2)-pow(m2,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffpW5Sfpdgauss;
}

double gneuticharjffpW6Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW6Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW6Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW6Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffpW6Sfpdgauss = (s-pow(m2,2)-pow(m3,2))*log(Z)/(s-pow(m5,2));
  return gneuticharjffpW6Sfpdgauss;
}

double gneuticharjffpW7Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW7Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW7Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW7Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }  
  gneuticharjffpW7Sfpdgauss = 2*fabs(m1)*E*log(Z)/(s-pow(m5,2));
  return gneuticharjffpW7Sfpdgauss;
}

double gneuticharjffpW8Sfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp
{
  double gneuticharjffpW8Sfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m2+m3,2);
  squareminus = s - pow(m2-m3,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpW8Sfpdgauss used in 1->3 decays"<< endl;
    errorflag = -1;
  } 
  A = pow(m2,2) + pow(m3,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (A + B - 2*pow(m6,2))/(A - B - 2*pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffpW8Sfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffpW8Sfpdgauss = log(Z)/(s-pow(m5,2));
  return gneuticharjffpW8Sfpdgauss;
}

double gneuticharjffpHg1dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHP
{
  double gneuticharjffpHg1dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHg1dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gneuticharjffpHg1dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffpHg1dgauss;
}

double gneuticharjffpHg2dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHP
{
  double gneuticharjffpHg2dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHg2dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }   
  gneuticharjffpHg2dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)*(s-pow(m3,2)-pow(m4,2))/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffpHg2dgauss;
}

double gneuticharjffpHg3dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHP
{
  double gneuticharjffpHg3dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHg3dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gneuticharjffpHg3dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)*2*fabs(m1)*E/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffpHg3dgauss;
}

double gneuticharjffpHg4dgauss(double E) ///m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHP
{
  double gneuticharjffpHg4dgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffpHg4dgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gneuticharjffpHg4dgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)*2*fabs(m1)*E*(s-pow(m3,2)-pow(m4,2))/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffpHg4dgauss;
}


double gneuticharjffp1gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp1gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp1gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp1gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp1gsfpdgauss = 2*(s*B + (pow(m6,2)*s - pow(m1,2)*pow(m3,2) - pow(m2,2)*pow(m4,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp1gsfpdgauss;
}

double gneuticharjffp2gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp2gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp2gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp2gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp2gsfpdgauss = (-B - (pow(m6,2) + pow(m4,2) - 2*fabs(m1)*E - pow(m3,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp2gsfpdgauss;
}

double gneuticharjffp3gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp3gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp3gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp3gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp3gsfpdgauss = (B + (pow(m6,2)+pow(m1,2)-2*fabs(m1)*E - pow(m2,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp3gsfpdgauss;
}

double gneuticharjffp4gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp4gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp4gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp4gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp4gsfpdgauss = (B + (pow(m6,2)-pow(m3,2)-pow(m4,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp4gsfpdgauss;
}

double gneuticharjffp5gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp5gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp5gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp5gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp5gsfpdgauss = (-B-(pow(m6,2)-pow(m1,2)-pow(m2,2))*log(Z))/(s-pow(m5,2));
  return gneuticharjffp5gsfpdgauss;
}

double gneuticharjffp6gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp6gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp6gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp6gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp6gsfpdgauss = (s-pow(m2,2)-pow(m3,2))*log(Z)/(s-pow(m5,2));
  return gneuticharjffp6gsfpdgauss;
}

double gneuticharjffp7gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp7gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp7gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp5gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp7gsfpdgauss = 2*fabs(m1)*E*log(Z)/(s-pow(m5,2));
  return gneuticharjffp7gsfpdgauss;
}

double gneuticharjffp8gsfpdgauss(double E) ///m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1
{
  double gneuticharjffp8gsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0, A = 0, B = 0, Z = 0;
  s = pow(m1,2) + pow(m4,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m2,2);
  squareminus = s - pow(m3-m2,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp8gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  A = pow(m3,2) + pow(m2,2) + 2*fabs(m1)*E + (pow(m1,2)-pow(m4,2))*(pow(m3,2)-pow(m2,2))/s;
  B = 2*fabs(m1)*pow(pow(E,2)-pow(m4,2),0.5)*pow(squareplus*squareminus,0.5)/s;
  Z = (0.5*(A+B)-pow(m6,2))/(0.5*(A-B)-pow(m6,2));
  if (Z < 0) {
    *ffout << "problem: Z<0 will give log(Z) as nan in gneuticharjffp8gsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  }
  gneuticharjffp8gsfpdgauss = log(Z)/(s-pow(m5,2));
  return gneuticharjffp8gsfpdgauss;
}

double gneuticharjffp1sfpsfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = -mf, m4 = charginoj, m5 = msfp1, m6 = msfp2
{
  double gneuticharjffp1sfpsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp1sfpsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gneuticharjffp1sfpsfpdgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp1sfpsfpdgauss;
}

double gneuticharjffp2sfpsfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = -mf, m4 = charginoj, m5 = msfp1, m6 = msfp2
{
  double gneuticharjffp2sfpsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp2sfpsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gneuticharjffp2sfpsfpdgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)*(s-pow(m3,2)-pow(m4,2))/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp2sfpsfpdgauss;
}

double gneuticharjffp3sfpsfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = -mf, m4 = charginoj, m5 = msfp1, m6 = msfp2
{
  double gneuticharjffp3sfpsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp3sfpsfpdgauss used in 1->3 decays" << endl;
    errorflag = -1;
  } 
  gneuticharjffp3sfpsfpdgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)*2*fabs(m1)*E/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp3sfpsfpdgauss;
}

double gneuticharjffp4sfpsfpdgauss(double E) /// m1 = mneutralinoi, m2 = mfp, m3 = -mf, m4 = charginoj, m5 = msfp1, m6 = msfp2
{
  double gneuticharjffp4sfpsfpdgauss = 0, s = 0, squareplus = 0, squareminus = 0;
  s = pow(m1,2) + pow(m2,2) - 2*fabs(m1)*E;
  squareplus = s - pow(m3+m4,2);
  squareminus = s - pow(m3-m4,2);
  if (squareplus*squareminus < 0) {
    *ffout << "problem: lambda will give nan in gneuticharjffp4sfpsfpdgauss used in 1->3 decays " << endl;
    errorflag = -1;
  } 
  
  gneuticharjffp4sfpsfpdgauss = 2*fabs(m1)*pow(pow(E,2)-pow(m2,2),0.5)*pow(squareplus*squareminus,0.5)*2*fabs(m1)*E*(s-pow(m3,2)-pow(m4,2))/(s*(s-pow(m5,2))*(s-pow(m6,2)));
  return gneuticharjffp4sfpsfpdgauss;
}


double gluinoamplitudedecaydgaussneutralinoqqpbarfirsttwogen (double mgluino, double mneutralino, double msqL, double msqR, double mquark, double g, double gp, DoubleMatrix & mixNeut, double alphas, char uord, int neut, bool onetothree)/// m1 is mgluino, m2 is neutralinoi mass, m3 is sqL mass, m4 is sqR mass, m5 is quark mass but assumed zero in calculation here, just used to check allowed for now; char uord tells us if the quark is u type 'u' or d type 'd', int neut tells us which neutralino it is
{
  double amplitudeW=0, phiL=0, phiR=0, psiL=0, psiR=0, A = 0, B = 0, from = 0, upper = 0;
  int i = neut;
  from = mquark;
  upper = (pow(mgluino,2)-2*mquark*fabs(mneutralino)-pow(mneutralino,2))/(2*mgluino);
  if(onetothree == false)
    {
      amplitudeW = 0;
    }
  else if (onetothree == true)
    {  
      if(mgluino < fabs(mneutralino) + 2*mquark) {
      	amplitudeW =0; 
      }
      else if (mgluino > msqL + mquark || mgluino > msqR + mquark) {
      	amplitudeW = 0; /// 1->3 decay not relevant here if one to two decay open
      }
      else {
	if ( uord == 'u') {
	  A = 1/(pow(2,0.5))*(g*-mixNeut(i,2)+gp/3*-mixNeut(i,1));
	  B = 4/(3*pow(2,0.5))*gp*-mixNeut(i,1);
	}
	else if (uord == 'd') {
	  A = 1/(pow(2,0.5))*(-g*-mixNeut(i,2) + gp/3*-mixNeut(i,1));
	  B = -2/(3*pow(2,0.5))*gp*-mixNeut(i,1);
	}
	else {
	  throw("problem: uord must be u or d in gluinoamplitudedecaydgaussneutralinoqqbarfirsttwogen");
	  errorflag = -1;
	}

	m1 = mgluino; mq = mquark; m4 = mneutralino; m2 = msqL; m3 = msqL;
	
	psiL = dgauss(gpsitildadgauss,from,upper,accuracy)*1/(pow(PI,2)*m1);
	phiL = dgauss(gphitildadgauss,from,upper,accuracy)*1/(pow(PI,2)*m1);
	m1 = mgluino; mq = mquark; m4 = mneutralino; m2 = msqR; m3 = msqR;
	
	psiR = dgauss(gpsitildadgauss,from,upper,accuracy)*1/(pow(PI,2)*m1);
	phiR = dgauss(gphitildadgauss,from,upper,accuracy)*1/(pow(PI,2)*m1);

	if ((mneutralino > 0 && mgluino > 0) || (mneutralino < 0 && mgluino < 0)) {
	  amplitudeW = alphas/(8*pow(PI,2))*(pow(A,2)*(psiL + phiL) + pow(B,2)*(psiR + phiR));
	}
	else if ((mneutralino < 0 || mgluino < 0) && mneutralino*mgluino<0) {
	  amplitudeW = alphas/(8*pow(PI,2))*(pow(A,2)*(psiL - phiL) + pow(B,2)*(psiR - phiR));
	}

      }
    }
  return amplitudeW;
}



double gluinoamplitudedecaydgaussneutralinottbar (double mgluino, double mst1, double mst2, double mneutralino, double mt, double mWboson, double g, double gp, double thetat, double beta, double alphas, DoubleMatrix & mixNeut, double runmt, int neutralino, bool onetothree, char torb) ///calculates PW for gluino -> neutralino + q qbar pair where q are t 
{
  double amplitudeW=0, Gammast1=0, Gammast2=0, Gammast1st2=0;
  double AtZ=0, BtZ=0, ft=0, from=0, upper=0;

  from = mt;
  upper = (pow(mgluino,2)-2*mt*fabs(mneutralino)-pow(mneutralino,2))/(2*mgluino);
  double gs = pow(alphas*4*PI,0.5);

  if (fabs(mgluino) < fabs(mneutralino) + 2*mt || fabs(mgluino)> mst1 + mt || fabs(mgluino) > mst2 + mt || onetothree == false) { amplitudeW = 0;}
  else {
    if (torb == 't') {
      ft = g*runmt/(pow(2,0.5)*mWboson*sin(beta));
    }
    
    else if (torb == 'b') {
      ft = g*runmt/(pow(2,0.5)*mWboson*cos(beta));
    }
    else {
      throw("problem: torb be t or b in gluinoamplitudedecaydgaussneutralinottbar");
      errorflag = -1;
    }

    double psiLLst1=0, chiLLst1=0, phiLLst1=0, rhoLLst1=0, xsiLLst1=0;
    
    m1 = mgluino, mq = mt, m2 = mst1, m3 = mst1, m4 = mneutralino;

    psiLLst1 = dgauss(gpsitildadgauss,from,upper,accuracy);
    phiLLst1 = dgauss(gphitildadgauss,from,upper,accuracy);
    chiLLst1 = dgauss(gchidgauss,from,upper,accuracy);
    rhoLLst1 = dgauss(grhodgauss,from,upper,accuracy);
    xsiLLst1 = dgauss(gxsidgauss,from,upper,accuracy);
 
 
    double zetaL1R1st1=0, XL1R1st1=0;
    zetaL1R1st1 = dgauss(gzetadgauss,from,upper,accuracy);
    XL1R1st1 = dgauss(gXdgauss,from,upper,accuracy);
   
    double YL1R2st1=0;
    YL1R2st1 = dgauss(gYdgauss,from,upper,accuracy);
        
    double psiLLst2=0, chiLLst2=0, phiLLst2=0, rhoLLst2=0, xsiLLst2=0;

    m1 = mgluino, mq = mt, m2 = mst2, m3 = mst2, m4 = mneutralino;
    psiLLst2 = dgauss(gpsitildadgauss,from,upper,accuracy);
    phiLLst2 = dgauss(gphitildadgauss,from,upper,accuracy);
    chiLLst2 = dgauss(gchidgauss,from,upper,accuracy); 
    rhoLLst2 = dgauss(grhodgauss,from,upper,accuracy);
    xsiLLst2 = dgauss(gxsidgauss,from,upper,accuracy);
 
    double zetaL1R1st2=0, XL1R1st2=0;
    zetaL1R1st2 = dgauss(gzetadgauss,from,upper,accuracy);
    XL1R1st2 = dgauss(gXdgauss,from,upper,accuracy);
    
   
    double YL1R2st2=0;
    YL1R2st2 = dgauss(gYdgauss,from,upper,accuracy);

 
    double phitildaLLst1st2=0, rhotildaLLst1st2=0, xsiLLst1st2=0;
    m1 = mgluino, mq = mt, m2 = mst1, m3 = mst2, m4 = mneutralino;
    phitildaLLst1st2 = dgauss(gphitildadgauss,from,upper,accuracy);
    rhotildaLLst1st2 = dgauss(grhodgauss,from,upper,accuracy);
    xsiLLst1st2 = dgauss(gxsidgauss,from,upper,accuracy);

 
    double zetaLRst1st2=0, XLRst1st2=0, YLRst1st2=0, chiprimeLRst1st2=0;
    zetaLRst1st2 = dgauss(gzetadgauss,from,upper,accuracy);
    XLRst1st2 = dgauss(gXdgauss,from,upper,accuracy);
    YLRst1st2 = dgauss(gYdgauss,from,upper,accuracy);
    chiprimeLRst1st2 = dgauss(gchiprimedgauss,from,upper,accuracy);
    
 
 
    Complex ast1alpha1(0.0,0.0), ast1beta1(0.0,0.0), ast2alpha1(0.0,0.0), ast2beta1(0.0,0.0), aAtZ(0.0,0.0), aBtZ(0.0,0.0), aft(0.0,0.0);
    ast1alpha1 = Complex(1.0,2.0);
    double pm = 0;
    
    if (torb == 't') {

      AtZ = g/(pow(2,0.5))*(-mixNeut(neutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(neutralino,1));
      BtZ = (4./3)*gp/(pow(2,0.5))*(-mixNeut(neutralino,1));

      if (mneutralino >=0) {
	ast1alpha1 = Complex(AtZ*cos(thetat) - ft*mixNeut(neutralino,4)*sin(thetat),0.0);
	ast1beta1 = Complex(ft*mixNeut(neutralino,4)*cos(thetat) + BtZ*sin(thetat),0.0);
	ast2alpha1 = Complex(AtZ*sin(thetat)+ft*mixNeut(neutralino,4)*cos(thetat),0.0);
	ast2beta1 = Complex(ft*mixNeut(neutralino,4)*sin(thetat)-BtZ*cos(thetat),0.0);
	pm = 1;
      } 
      
      if (mneutralino < 0)
	{
	  ast1alpha1 = Complex(0,-(AtZ*cos(thetat) - ft*mixNeut(neutralino,4)*sin(thetat)));
	  ast1beta1 = Complex(0,-(ft*mixNeut(neutralino,4)*cos(thetat) + BtZ*sin(thetat)));
	  ast2alpha1 = Complex(0,-(AtZ*sin(thetat)+ft*mixNeut(neutralino,4)*cos(thetat)));
	  ast2beta1 = Complex(0,-(ft*mixNeut(neutralino,4)*sin(thetat)-BtZ*cos(thetat)));
	  pm = -1;
	}
      
    }

    else if (torb == 'b') {

      AtZ = g/(pow(2,0.5))*(mixNeut(neutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(neutralino,1));
      BtZ = (2./3)*gp/(pow(2,0.5))*(mixNeut(neutralino,1));

      if (mneutralino >=0) {
	ast1alpha1 = Complex(AtZ*cos(thetat) - ft*mixNeut(neutralino,3)*sin(thetat),0.0);
	ast1beta1 = Complex(ft*mixNeut(neutralino,3)*cos(thetat) + BtZ*sin(thetat),0.0);
	ast2alpha1 = Complex(AtZ*sin(thetat)+ft*mixNeut(neutralino,3)*cos(thetat),0.0);
	ast2beta1 = Complex(ft*mixNeut(neutralino,3)*sin(thetat)-BtZ*cos(thetat),0.0);
	pm = 1;
      } 
      
      if (mneutralino < 0)
	{
	  ast1alpha1 = Complex(0,-(AtZ*cos(thetat) - ft*mixNeut(neutralino,3)*sin(thetat)));
	  ast1beta1 = Complex(0,-(ft*mixNeut(neutralino,3)*cos(thetat) + BtZ*sin(thetat)));
	  ast2alpha1 = Complex(0,-(AtZ*sin(thetat)+ft*mixNeut(neutralino,3)*cos(thetat)));
	  ast2beta1 = Complex(0,-(ft*mixNeut(neutralino,3)*sin(thetat)-BtZ*cos(thetat)));
	  pm = -1;
	}
    }
    else {
      throw("problem: torb be t or b in gluinoamplitudedecaydgaussneutralinottbar");
      errorflag = -1;
    }    
   
      ///Note the effect of the complex couplings and the pm factors for negative masses cancel out as the couplings always appear in pairs so multiplying them gives an extra minus sign when they are purely imaginary, but this extra minus sign is cancelled out by the extra minus sign in the pm factor. Therefore really the additional minus signs come from the fact I've used the neutralino mass itself throughout my calculation (rather than its absolute value) which therefore naturally introduces additional minus signs.
    
    Complex aGammast1 = Complex(0.0,0.0), aextraGammast1 = Complex(0.0,0.0);

    aGammast1 = (ast1alpha1*ast1alpha1+ast1beta1*ast1beta1)*psiLLst1*pm + 4*pm*mt*mneutralino*chiLLst1*ast1alpha1*ast1beta1 - 4*sin(thetat)*cos(thetat)*(ast1alpha1*ast1alpha1 + ast1beta1*ast1beta1)*mgluino*mt*XL1R1st1*pm - 8*pm*sin(thetat)*cos(thetat)*(ast1alpha1*ast1beta1)*mgluino*mt*mt*mneutralino*zetaL1R1st1 - 2*pm*sin(thetat)*cos(thetat)*ast1alpha1*ast1beta1*YL1R2st1 + pm*(ast1alpha1*ast1alpha1*pow(cos(thetat),2) + ast1beta1*ast1beta1*pow(sin(thetat),2))*phiLLst1 - pm*2*mt*mt*sin(thetat)*cos(thetat)*ast1alpha1*ast1beta1*xsiLLst1 + pm*mgluino*mt*ast1alpha1*ast1beta1*xsiLLst1 - pm*mgluino*mt*ast1alpha1*ast1beta1*pow(mneutralino,2)*rhoLLst1 + pm*mgluino*mt*mt*mneutralino*(pow(sin(thetat),2)*ast1alpha1*ast1alpha1 + pow(cos(thetat),2)*ast1beta1*ast1beta1)*rhoLLst1;
    
    Gammast1 = aGammast1.real();

    double extraGammast1 = 0;
    aextraGammast1 = -pm*mneutralino*mt*sin(thetat)*cos(thetat)*(ast1alpha1*ast1alpha1 + ast1beta1*ast1beta1)*pow(mgluino,2)*rhoLLst1 + pm*mneutralino*mt*sin(thetat)*cos(thetat)*(ast1alpha1*ast1alpha1 + ast1beta1*ast1beta1)*xsiLLst1;
    extraGammast1 = aextraGammast1.real();

    Complex aGammast2 = Complex(0.0,0.0), aextraGammast2 = Complex(0.0,0.0);
    aGammast2 = pm*(ast2alpha1*ast2alpha1 + ast2beta1*ast2beta1)*psiLLst2 + 4*pm*mt*mneutralino*chiLLst2*ast2alpha1*ast2beta1 + 4*mgluino*mt*sin(thetat)*cos(thetat)*(ast2alpha1*ast2alpha1 + ast2beta1*ast2beta1)*XL1R1st2*pm + 8*pm*sin(thetat)*cos(thetat)*ast2alpha1*ast2beta1*mgluino*pow(mt,2)*mneutralino*zetaL1R1st2 + pm*2*sin(thetat)*cos(thetat)*ast2alpha1*ast2beta1*YL1R2st2 + pm*(pow(sin(thetat),2)*ast2alpha1*ast2alpha1 + pow(cos(thetat),2)*ast2beta1*ast2beta1)*phiLLst2 + pm*xsiLLst2*(2*pow(mt,2)*sin(thetat)*cos(thetat)*ast2alpha1*ast2beta1 + mgluino*mt*ast2alpha1*ast2beta1) + pm*rhoLLst2*(-mgluino*mt*pow(mneutralino,2)*ast2alpha1*ast2beta1) + pm*rhoLLst2*mgluino*mneutralino*pow(mt,2)*(pow(cos(thetat),2)*ast2alpha1*ast2alpha1 + pow(sin(thetat),2)*ast2beta1*ast2beta1);
    Gammast2 = aGammast2.real();

    double extraGammast2 = 0;
    // extraGammast2 = pow(PI,2)/(8*pow(mgluino*gs,2))*(8*pow(mgluino*gs/PI,2)*(rhoLLst2*pow(mgluino,2)*mneutralino*mt*sin(thetat)*cos(thetat)*(pow(st2alpha1,2)+pow(st2beta1,2)) + mneutralino*mt*sin(thetat)*cos(thetat)*(pow(st2alpha1,2) + pow(st2beta1,2))*xsiLLst2)); /// Note no chiprime term whereas Spheno has a chiprime term -> missing term relative to T&B
    aextraGammast2 = pm*(xsiLLst2*-mneutralino*mt*sin(thetat)*cos(thetat)*(ast2alpha1*ast2alpha1 + ast2beta1*ast2beta1) + rhoLLst2*pow(mgluino,2)*mneutralino*mt*sin(thetat)*cos(thetat)*(ast2alpha1*ast2alpha1 + ast2beta1*ast2beta1));
    extraGammast2 = aextraGammast2.real();

    Complex aGammast1st2 = Complex(0.0,0.0), aextraGammast1st2 = Complex(0.0,0.0);
    aGammast1st2 = pow(PI,2)/(8*pow(mgluino*gs,2))*(32*pow(mgluino*gs/PI,2)*pm*mgluino*mt*(pow(cos(thetat),2)-pow(sin(thetat),2))*(ast1alpha1*ast2alpha1 + ast1beta1*ast2beta1)*XLRst1st2 + 32*pm*pow(mgluino*gs/PI,2)*mgluino*pow(mt,2)*mneutralino*(ast1alpha1*ast2beta1 + ast1beta1*ast2alpha1)*(pow(cos(thetat),2)-pow(sin(thetat),2))*zetaLRst1st2 + pm*16*pow(mgluino*gs/PI,2)*(ast1beta1*ast2alpha1*pow(cos(thetat),2) - pow(sin(thetat),2)*ast2beta1*ast1alpha1)*YLRst1st2 + 16*pm*pow(mgluino*gs/PI,2)*sin(thetat)*cos(thetat)*(ast1alpha1*ast2alpha1 - ast1beta1*ast2beta1)*phitildaLLst1st2 + 16*pm*pow(mgluino*gs/PI,2)*mt*mneutralino*(ast1alpha1*ast2alpha1 - ast1beta1*ast2beta1)*chiprimeLRst1st2 + pm*16*pow(mgluino*gs/PI,2)*pow(mt,2)*(pow(cos(thetat),2)*ast1alpha1*ast2beta1 - pow(sin(thetat),2)*ast1beta1*ast2alpha1)*xsiLLst1st2 + 16*pm*pow(mgluino*gs/PI,2)*mgluino*pow(mt,2)*mneutralino*(ast1beta1*ast2beta1-ast1alpha1*ast2alpha1)*sin(thetat)*cos(thetat)*rhotildaLLst1st2);

    Gammast1st2 =  aGammast1st2.real(); ///Gammast1st2 terms as from T&B but with sign change for X term and also the factor of -(cos^2(thetat)-sin^2(thetat))(st1alpha1*st2alpha1+st1beta1*st2beta1) T&B has in the chiprime term has been changed to (cos^2(thetat)+sin^2(thetat))(st1alpha1*st2alpha1 - st1beta1*st2beta1) = 1*(st1alpha1*st2alpha1 - st1beta1*st2beta1), in order in both cases to agree with SPHENO
    double extraGammast1st2 = 0; 
    aextraGammast1st2 = (pow(PI,2)/(8*pow(mgluino*gs,2))*(-32*pm*pow(mgluino*gs/PI,2)*sin(thetat)*cos(thetat)*mgluino*mt*(ast1alpha1*ast2beta1-ast1beta1*ast2alpha1)*chiprimeLRst1st2 -16*pm*pow(mgluino*gs/PI,2)*sin(thetat)*cos(thetat)*mgluino*mt*(ast1alpha1*ast2beta1 - ast1beta1*ast2alpha1)*xsiLLst1st2 + 16*pm*pow(mgluino*gs/PI,2)*mt*mneutralino*(pow(sin(thetat),2)*ast1alpha1*ast2alpha1 - pow(cos(thetat),2)*ast1beta1*ast2beta1)*xsiLLst1st2 + 16*pm*pow(mgluino*gs/PI,2)*pow(mgluino,3)*mt*(ast1alpha1*ast2beta1-ast1beta1*ast2alpha1)*sin(thetat)*cos(thetat)*rhotildaLLst1st2 - 16*pm*pow(mgluino*gs/PI,2)*pow(mgluino,2)*mt*mneutralino*(pow(sin(thetat),2)*ast1alpha1*ast2alpha1 - pow(cos(thetat),2)*ast1beta1*ast2beta1)*rhotildaLLst1st2)); ///Extra terms SPHENO has in Gammast1st2 not present in T&B

    extraGammast1st2 = aextraGammast1st2.real();

    amplitudeW = (alphas)/(8*pow(PI,4)*mgluino)*(Gammast1+Gammast2+Gammast1st2+extraGammast1+extraGammast2+extraGammast1st2);
  }

  return amplitudeW;
}




double gluinoamplitudedecaydgausschartbbar (double mgluino, double mst1, double mst2, double msb1, double msb2, double mtop, double mbottom, double mchar, double alphas, double thetat, double thetab, double MWboson, double g, double gp, double gammaL, double gammaR, double beta, double runmt, double runmb, int chargino, bool onetothree)
{
  double Gammast1 = 0, Gammast2 = 0, Gammast1st2 = 0 , Gammasb1 =0, Gammasb2 = 0, Gammast1sb1 = 0, Gammast1sb2 = 0, Gammast2sb1 = 0, Gammast2sb2 = 0, from = 0, upper = 0, fromb = 0, upperb = 0, amplitudeW = 0, sumsquarest1 = 0, sumsquarest2 = 0, sumsquaresb1 = 0, sumsquaresb2 = 0, alphasb1ch = 0, alphasb2ch = 0, alphast1ch = 0, alphast2ch = 0, betasb1ch = 0, betasb2ch = 0, betast1ch = 0, betast2ch = 0;

  DoubleVector squarkmixcharginocouplings(double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, double mch1, double mch2, int torb);

  if (mgluino > mbottom + msb1 || mgluino > mbottom + msb2 || mgluino > mtop + mst1 || mgluino > mtop + mst2 || mgluino < mtop + mbottom + mchar || onetothree == false) {amplitudeW = 0;}
  else {
    from = mtop;
    upper = (pow(mgluino,2)+pow(mtop,2)-pow(fabs(mchar)+mbottom,2))/(2*mgluino);
    fromb = mbottom;
    upperb = (pow(mgluino,2)-pow(mtop+fabs(mchar),2))/(2*mgluino);
  
    DoubleVector couplingst(16);
    DoubleVector couplingsb(16);

    for (int i=1; i<=16; i++) {
      couplingst(i) = 0;
      couplingsb(i) = 0;
    }

    // couplingst = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,1);
    // couplingsb = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,2);

    if (chargino == 1) {
      sumsquarest1 = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,1)(1);
      sumsquarest2 = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,1)(5);
      sumsquaresb1 = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,2)(1);
      sumsquaresb2 = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,2)(5);
      alphast1ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,1)(9);
      alphast2ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,1)(13);
      betast1ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,1)(11);
      betast2ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,1)(15);
      alphasb1ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,2)(9);
      alphasb2ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,2)(13);
      betasb1ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,2)(11);
      betasb2ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,mchar,0,2)(15);
    }

    else if (chargino == 2) {
      sumsquarest1 = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,1)(3);
      sumsquarest2 = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,1)(7);
      sumsquaresb1 = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,2)(3);
      sumsquaresb2 = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,2)(7);
      alphast1ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,1)(10);
      alphast2ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,1)(14);
      betast1ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,1)(12);
      betast2ch = squarkmixcharginocouplings(g,thetat,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,1)(16);
      alphasb1ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,2)(10);
      alphasb2ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,2)(14);
      betasb1ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,2)(12);
      betasb2ch = squarkmixcharginocouplings(g,thetab,beta,gammaL,gammaR,runmt,runmb,MWboson,0,mchar,2)(16);
    }
    else {
      throw("problem: chargino must be 1 or 2 in gluinoamplitudedecaydgausschartbbar");
      errorflag = -1;
    }
    double G1st1 = 0, G1st2 = 0, G2sb1 = 0, G2sb2 = 0, G3sb1 = 0, G3sb2 = 0, G4st1sb1 = 0, G4st1sb2 = 0, G4st2sb1 = 0, G4st2sb2 = 0, G5st1sb1 = 0, G5st1sb2 = 0, G5st2sb1 = 0, G5st2sb2 = 0, G6st1sb1 = 0, G6st1sb2 = 0, G6st2sb1 = 0,G6st2sb2 = 0, G7st1sb1 = 0, G7st1sb2 = 0, G7st2sb1 = 0, G7st2sb2 = 0, G8st1 = 0, G8st2 = 0, G8st1st2 = 0;

    m1 = mgluino, m2 = mst1, m3 = mst1, m6 = mtop, m8 = mchar;
    G1st1 = dgauss(gG1dgauss,from,upper,accuracy);
    G8st1 = dgauss(gG8dgauss,from,upper,accuracy);
    
    Gammast1 = sumsquarest1*(G1st1 - sin(2*thetat)*G8st1); ///Different to T&B, they have + sin(2*thetat)*G8, I follow SPheno
    
    m1 = mgluino, m2 = mst2, m3 = mst2, m6 = mtop, m8 = mchar;
    G1st2 = dgauss(gG1dgauss,from,upper,accuracy);
    G8st2 = dgauss(gG8dgauss,from,upper,accuracy);

    Gammast2 = sumsquarest2*(G1st2 + sin(2*thetat)*G8st2); ///Different to T&B, they have - sin(2*thetat)*G8, I follow SPheno
   
    m1 = mgluino, m2 = mst1, m3 = mst2, m6 = mtop, m8 = mchar;
    G8st1st2 = dgauss(gG8dgauss,from,upper,accuracy);

    Gammast1st2 = 2*(alphast1ch*alphast2ch+betast1ch*betast2ch)*cos(2*thetat)*G8st1st2; ///Global minus sign difference cf T&B, I follow SPheno    
    
    m1 = mgluino, m4 = msb1, m6 = mtop, m7 = mbottom, m8 = mchar;
    G2sb1 = dgauss(gG2dgauss,fromb,upperb,accuracy);
    G3sb1 = dgauss(gG3dgauss,fromb,upperb,accuracy);

    Gammasb1 = sumsquaresb1*G2sb1 + alphasb1ch*betasb1ch*G3sb1; ///Different to T&B, they have - alphasb1ch*betasb1ch*G3sb1, I follow SPheno
    
    m1 = mgluino, m4 = msb2, m6 = mtop, m7 = mbottom, m8 = mchar;
    G2sb2 = dgauss(gG2dgauss,fromb,upperb,accuracy);
    G3sb2 = dgauss(gG3dgauss,fromb,upperb,accuracy);

    Gammasb2 = sumsquaresb2*G2sb2 + alphasb2ch*betasb2ch*G3sb2; ///Different to T&B, they have - alphasb2ch*betasb2ch*G3sb2, I follow SPheno
    ///Taken mb -> 0 limit in squared matrix element (but not in phase space) so no sb1sb2 interference term
    
    m1 = mgluino, m2 = mst1, m4 = msb1, m6 = mtop, m7 = mbottom , m8 = mchar;
    G4st1sb1 = dgauss(gG4dgauss,from,upper,accuracy);
    G5st1sb1 = dgauss(gG5dgauss,from,upper,accuracy);
    G6st1sb1 = dgauss(gG6dgauss,from,upper,accuracy);
    G7st1sb1 = dgauss(gG7dgauss,from,upper,accuracy);
    
    Gammast1sb1 = (cos(thetat)*sin(thetab)*alphasb1ch*betast1ch+sin(thetat)*cos(thetab)*betasb1ch*alphast1ch)*G6st1sb1 - (cos(thetat)*cos(thetab)*alphasb1ch*alphast1ch + sin(thetat)*sin(thetab)*betasb1ch*betast1ch)*G4st1sb1 - (cos(thetat)*cos(thetab)*betasb1ch*alphast1ch + sin(thetat)*sin(thetab)*alphasb1ch*betast1ch)*G5st1sb1 + (cos(thetat)*sin(thetab)*betasb1ch*betast1ch + sin(thetat)*cos(thetab)*alphasb1ch*alphast1ch)*G7st1sb1; ///The sign in front of the G7st1sb1 and G5st1sb1 terms has been changed from that given in Baer and Tata in order to agree with SPheno.
    
    m1 = mgluino, m2 = mst1, m4 = msb2, m6 = mtop, m7 = mbottom, m8 = mchar;
    G4st1sb2 = dgauss(gG4dgauss,from,upper,accuracy);
    G5st1sb2 = dgauss(gG5dgauss,from,upper,accuracy);
    G6st1sb2 = dgauss(gG6dgauss,from,upper,accuracy);
    G7st1sb2 = dgauss(gG7dgauss,from,upper,accuracy);

    Gammast1sb2 = (cos(thetat)*-cos(thetab)*alphasb2ch*betast1ch+sin(thetat)*sin(thetab)*betasb2ch*alphast1ch)*G6st1sb2 - (cos(thetat)*sin(thetab)*alphasb2ch*alphast1ch - sin(thetat)*cos(thetab)*betasb2ch*betast1ch)*G4st1sb2 - (cos(thetat)*sin(thetab)*betasb2ch*alphast1ch - sin(thetat)*cos(thetab)*alphasb2ch*betast1ch)*G5st1sb2 + (cos(thetat)*-cos(thetab)*betasb2ch*betast1ch + sin(thetat)*sin(thetab)*alphasb2ch*alphast1ch)*G7st1sb2; ///The sign in front of the G7st1sb1 and G5st1sb1 terms has been changed from that given in Baer and Tata in order to agree with SPheno.

    
    m1 = mgluino, m2 = mst2, m4 = msb1, m6 = mtop, m7 = mbottom, m8 = mchar;
    G4st2sb1 = dgauss(gG4dgauss,from,upper,accuracy);
    G5st2sb1 = dgauss(gG5dgauss,from,upper,accuracy);
    G6st2sb1 = dgauss(gG6dgauss,from,upper,accuracy);
    G7st2sb1 = dgauss(gG7dgauss,from,upper,accuracy);

    Gammast2sb1 = (sin(thetat)*sin(thetab)*alphasb1ch*betast2ch-cos(thetat)*cos(thetab)*betasb1ch*alphast2ch)*G6st2sb1 - (sin(thetat)*cos(thetab)*alphasb1ch*alphast2ch - cos(thetat)*sin(thetab)*betasb1ch*betast2ch)*G4st2sb1 - (sin(thetat)*cos(thetab)*betasb1ch*alphast2ch - cos(thetat)*sin(thetab)*alphasb1ch*betast2ch)*G5st2sb1 + (sin(thetat)*sin(thetab)*betasb1ch*betast2ch - cos(thetat)*cos(thetab)*alphasb1ch*alphast2ch)*G7st2sb1; ///The sign in front of the G7st1sb1 and G5st1sb1 terms has been changed from that given in Baer and Tata in order to agree with SPheno.

    m1 = mgluino, m2 = mst2, m4 = msb2, m6 = mtop, m7 = mbottom, m8 = mchar;
    G4st2sb2 = dgauss(gG4dgauss,from,upper,accuracy);
    G5st2sb2 = dgauss(gG5dgauss,from,upper,accuracy);
    G6st2sb2 = dgauss(gG6dgauss,from,upper,accuracy);
    G7st2sb2 = dgauss(gG7dgauss,from,upper,accuracy);
    
    Gammast2sb2 = (sin(thetat)*-cos(thetab)*alphasb2ch*betast2ch-cos(thetat)*sin(thetab)*betasb2ch*alphast2ch)*G6st2sb2 - (sin(thetat)*sin(thetab)*alphasb2ch*alphast2ch + cos(thetat)*cos(thetab)*betasb2ch*betast2ch)*G4st2sb2 - (sin(thetat)*sin(thetab)*betasb2ch*alphast2ch + cos(thetat)*cos(thetab)*alphasb2ch*betast2ch)*G5st2sb2 + (sin(thetat)*-cos(thetab)*betasb2ch*betast2ch - cos(thetat)*sin(thetab)*alphasb2ch*alphast2ch)*G7st2sb2; ///The sign in front of the G7st1sb1 and G5st1sb1 terms has been changed from that given in Baer and Tata in order to agree with SPheno.

    amplitudeW = alphas/(16*pow(PI,2)*mgluino)*(Gammast1 + Gammast2 + Gammast1st2 + Gammasb1 + Gammasb2 + Gammast1sb1 + Gammast2sb1 + Gammast1sb2 + Gammast2sb2);
  }
  
  return amplitudeW;
}


double neutralinoamplitudedecaydgaussneutralinoffbar (double mneutralinoi, double msf1, double msf2, double mZboson, double mhiggsl, double mhiggsH, double mhiggsA, double mneutralinoj, double mf, double alphas, double thetaq, double mWboson, double g, double gp, double alpha, double beta, double runmq, DoubleMatrix & mixNeut, int ineutralino, int jneutralino, bool onetothree, char uordornuorl)
{
  double GammaZ = 0, Gammahsf1 = 0, Gammahsf2 = 0, GammaHsf1 = 0, GammaHsf2 = 0, GammaAsf1 = 0, GammaAsf2 = 0, GammaZsf1 = 0, GammaZsf2 = 0, amplitudeW = 0;

  DoubleVector squarkmixcharginocouplings(double g, double theta, double beta, double gammaL, double gammaR, double runmt, double runmb, double mWboson, int torb);

  if (fabs(mneutralinoi) > mf + msf1 || fabs(mneutralinoi) > mf + msf2 || fabs(mneutralinoi) > fabs(mneutralinoj) + mhiggsl || fabs(mneutralinoi) > fabs(mneutralinoj) + mhiggsH || fabs(mneutralinoi) > fabs(mneutralinoj) + mhiggsA || fabs(mneutralinoi) > fabs(mneutralinoj) + mZboson || fabs(mneutralinoi) < fabs(mneutralinoj) + mf + mf || onetothree == false) {
    amplitudeW = 0;
  }
  else {

    double from = 0, to = 0, fromz = 0, toz = 0, fq = 0, AZi = 0, BZi = 0, sf1alpha1Zi = 0, sf1beta1Zi = 0, sf2alpha1Zi = 0, sf2beta1Zi = 0, AZj = 0, BZj = 0, sf1alpha1Zj = 0, sf1beta1Zj = 0, sf2alpha1Zj = 0, sf2beta1Zj = 0, alphaf = 0, betaf = 0, XijA = 0, XjiA = 0, Wij = 0, Xijh = 0, Xjih = 0, XijH = 0, XjiH = 0, Nc = 0, trigofalphah = 0, trigofalphaH = 0, Aq = 0 , goldstoneffcoup = 0;
        
    from = mf;
    to = (pow(mneutralinoi,2) - 2*mf*fabs(mneutralinoj) - pow(mneutralinoj,2))/(2*fabs(mneutralinoi));

    double ri = 0, rj = 0;
    if (mneutralinoi >= 0) { ri = 1;}
    else if (mneutralinoi < 0) { ri = -1;} ///correction factor for negative masses
    if (mneutralinoj >= 0) { rj = 1;}
    else if (mneutralinoj < 0) { rj = -1;} ///correction factor for negative masses
    
    if (uordornuorl == 'u') {
      fq = g*runmq/(pow(2,0.5)*mWboson*sin(beta));
      AZi = g/(pow(2,0.5))*(-mixNeut(ineutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(ineutralino,1));
      BZi = (4./3)*gp/(pow(2,0.5))*(-mixNeut(ineutralino,1));
      sf1alpha1Zi = AZi*cos(thetaq) - fq*mixNeut(ineutralino,4)*sin(thetaq);
      sf1beta1Zi = fq*mixNeut(ineutralino,4)*cos(thetaq) + BZi*sin(thetaq);
      sf2alpha1Zi = (AZi*sin(thetaq)+fq*mixNeut(ineutralino,4)*cos(thetaq));
      sf2beta1Zi = fq*mixNeut(ineutralino,4)*sin(thetaq)-BZi*cos(thetaq);
      AZj = g/(pow(2,0.5))*(-mixNeut(jneutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(jneutralino,1));
      BZj = (4./3)*gp/(pow(2,0.5))*(-mixNeut(jneutralino,1));
      sf1alpha1Zj = AZj*cos(thetaq) - fq*mixNeut(jneutralino,4)*sin(thetaq);
      sf1beta1Zj = fq*mixNeut(jneutralino,4)*cos(thetaq) + BZj*sin(thetaq);
      sf2alpha1Zj = (AZj*sin(thetaq)+fq*mixNeut(jneutralino,4)*cos(thetaq));
      sf2beta1Zj = fq*mixNeut(jneutralino,4)*sin(thetaq)-BZj*cos(thetaq);
      alphaf =-5*gp/(g*12) + 0.25*(g/gp);
      betaf = -0.25*(gp/g + g/gp);
      Nc = 3;
      trigofalphah = cos(alpha);
      trigofalphaH = sin(alpha);
      Aq = g*runmq/(mWboson*tan(beta));
      goldstoneffcoup = -fq*sin(beta)/sqrt(2);
    }
    
    else if (uordornuorl == 'd') {
      fq = g*runmq/(pow(2,0.5)*mWboson*cos(beta));
      AZi = g/(pow(2,0.5))*(mixNeut(ineutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(ineutralino,1));
      BZi = (2./3)*gp/(pow(2,0.5))*(mixNeut(ineutralino,1));
      sf1alpha1Zi = AZi*cos(thetaq) - fq*mixNeut(ineutralino,3)*sin(thetaq);
      sf1beta1Zi = fq*mixNeut(ineutralino,3)*cos(thetaq) + BZi*sin(thetaq);
      sf2alpha1Zi = (AZi*sin(thetaq)+fq*mixNeut(ineutralino,3)*cos(thetaq));
      sf2beta1Zi = fq*mixNeut(ineutralino,3)*sin(thetaq)-BZi*cos(thetaq);
      AZj = g/(pow(2,0.5))*(mixNeut(jneutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(jneutralino,1));
      BZj = (2./3)*gp/(pow(2,0.5))*(mixNeut(jneutralino,1));
      sf1alpha1Zj = AZj*cos(thetaq) - fq*mixNeut(jneutralino,3)*sin(thetaq);
      sf1beta1Zj = fq*mixNeut(jneutralino,3)*cos(thetaq) + BZj*sin(thetaq);
      sf2alpha1Zj = (AZj*sin(thetaq)+fq*mixNeut(jneutralino,3)*cos(thetaq));
      sf2beta1Zj = fq*mixNeut(jneutralino,3)*sin(thetaq)-BZj*cos(thetaq);
      alphaf = gp/(g*12) - 0.25*(g/gp);
      betaf = 0.25*(gp/g + g/gp);
      Nc = 3;
      trigofalphah = -sin(alpha);
      trigofalphaH = cos(alpha);
      Aq = g*runmq*tan(beta)/(mWboson);
      goldstoneffcoup = fq*cos(beta)/sqrt(2);
    }

    else if (uordornuorl == 'n') {
      fq = 0;
      AZi = g/(pow(2,0.5))*(-mixNeut(ineutralino,2)) + gp/(pow(2,0.5))*(mixNeut(ineutralino,1));
      BZi = 0;
      sf1alpha1Zi = AZi*cos(thetaq) - fq*mixNeut(ineutralino,4)*sin(thetaq);
      sf1beta1Zi = fq*mixNeut(ineutralino,4)*cos(thetaq) + BZi*sin(thetaq);
      sf2alpha1Zi = (AZi*sin(thetaq)+fq*mixNeut(ineutralino,4)*cos(thetaq));
      sf2beta1Zi = fq*mixNeut(ineutralino,4)*sin(thetaq)-BZi*cos(thetaq);
      AZj = g/(pow(2,0.5))*(-mixNeut(jneutralino,2)) + gp/(pow(2,0.5))*(mixNeut(jneutralino,1));
      BZj = 0;
      sf1alpha1Zj = AZj*cos(thetaq) - fq*mixNeut(jneutralino,4)*sin(thetaq);
      sf1beta1Zj = fq*mixNeut(jneutralino,4)*cos(thetaq) + BZj*sin(thetaq);
      sf2alpha1Zj = (AZj*sin(thetaq)+fq*mixNeut(jneutralino,4)*cos(thetaq));
      sf2beta1Zj = fq*mixNeut(jneutralino,4)*sin(thetaq)-BZj*cos(thetaq);
      alphaf = 0.25*(gp/g + g/gp);
      betaf = -0.25*(gp/g + g/gp);
      Nc = 1;
      trigofalphah = cos(alpha);
      trigofalphaH = sin(alpha);
      Aq = g*runmq/(tan(beta)*mWboson);
      goldstoneffcoup = -fq*sin(beta)/sqrt(2);
    }

    else if (uordornuorl == 'l') {
      fq = g*runmq/(pow(2,0.5)*mWboson*cos(beta));
      AZi = g/(pow(2,0.5))*(mixNeut(ineutralino,2)) + gp/(pow(2,0.5))*(mixNeut(ineutralino,1));
      BZi = pow(2,0.5)*gp*mixNeut(ineutralino,1);
      sf1alpha1Zi = AZi*cos(thetaq) - fq*mixNeut(ineutralino,3)*sin(thetaq);
      sf1beta1Zi = fq*mixNeut(ineutralino,3)*cos(thetaq) + BZi*sin(thetaq);
      sf2alpha1Zi = (AZi*sin(thetaq)+fq*mixNeut(ineutralino,3)*cos(thetaq));
      sf2beta1Zi = fq*mixNeut(ineutralino,3)*sin(thetaq)-BZi*cos(thetaq);
      AZj = g/(pow(2,0.5))*(mixNeut(jneutralino,2)) + gp/(pow(2,0.5))*(mixNeut(jneutralino,1));
      BZj = pow(2,0.5)*gp*mixNeut(jneutralino,1);
      sf1alpha1Zj = AZj*cos(thetaq) - fq*mixNeut(jneutralino,3)*sin(thetaq);
      sf1beta1Zj = fq*mixNeut(jneutralino,3)*cos(thetaq) + BZj*sin(thetaq);
      sf2alpha1Zj = (AZj*sin(thetaq)+fq*mixNeut(jneutralino,3)*cos(thetaq));
      sf2beta1Zj = fq*mixNeut(jneutralino,3)*sin(thetaq)-BZj*cos(thetaq);

      alphaf = 0.75*gp/g - 0.25*g/gp;
      betaf = 0.25*(gp/g + g/gp);
      Nc = 1;
      trigofalphah = -sin(alpha);
      trigofalphaH = cos(alpha);
      Aq = g*runmq*tan(beta)/(mWboson);
      goldstoneffcoup = fq*cos(beta)/sqrt(2);
    }
    else {
      throw("problem: uordornuorl must be u or d or n or l in neutralinoamplitudedecaydgaussneutralinoffbar");
      errorflag = -1;
    }

    double YZisf1sf1Zj = 0, YZisf2sf2Zj = 0, psitildaZisf1sf2Zj = 0, phitildaZisf1sf2Zj = 0, YZisf1sf2Zj = 0;

    m1 = mneutralinoi, m2 = msf1, m3 = msf1, m4 = mneutralinoj, mq = mf;
    YZisf1sf1Zj = dgauss(gYdgauss,from,to,accuracy);

    m1 = mneutralinoi, m2 = msf2, m3 = msf2, m4 = mneutralinoj, mq = mf;
    YZisf2sf2Zj = dgauss(gYdgauss,from,to,accuracy);

    m1 = mneutralinoi, m2 = msf1, m3 = msf2, m4 = mneutralinoj, mq = mf;
    psitildaZisf1sf2Zj = dgauss(gpsitildadgauss,from,to,accuracy);
    phitildaZisf1sf2Zj = dgauss(gphitildadgauss,from,to,accuracy);
    YZisf1sf2Zj = dgauss(gYdgauss,from,to,accuracy);

    fromz = fabs(mneutralinoj);
    toz = (pow(mneutralinoi,2) + pow(mneutralinoj,2) - 4*pow(mf,2))/(2*fabs(mneutralinoi));
    
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, g1 = g, g2 = gp, NeutMIX = mixNeut, neutralinoi = ineutralino, neutralinoj = jneutralino, alphamix = alpha,mq = mf;

    Wij = 0.25*pow(pow(g,2)+pow(gp,2),0.5)*(mixNeut(ineutralino,4)*mixNeut(jneutralino,4) - mixNeut(ineutralino,3)*mixNeut(jneutralino,3));
    double sinthetaW = 0;
    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));

    double intZ1 = 0, intZ2 = 0, intZ3 = 0, intZ4 = 0, sminz = 0, smaxz = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson;
    sminz = 4*pow(mf,2);
    smaxz = pow(fabs(mneutralinoi)-fabs(mneutralinoj),2);
    intZ1 = dgauss(gneutineutjffZ1dgauss,sminz,smaxz,accuracy);
    intZ2 = dgauss(gneutineutjffZ2dgauss,sminz,smaxz,accuracy);
    intZ3 = dgauss(gneutineutjffZ3dgauss,sminz,smaxz,accuracy);
    intZ4 = dgauss(gneutineutjffZ4dgauss,sminz,smaxz,accuracy);

    GammaZ = 64*pow(g*sinthetaW,2)*pow(Wij,2)*(-4*fabs(mneutralinoi)*fabs(mneutralinoj)*pow(mf,2)*(pow(alphaf,2)-pow(betaf,2))*intZ4*-rj*ri + pow(mf,2)*(pow(alphaf,2)-pow(betaf,2))*intZ3 - fabs(mneutralinoi)*fabs(mneutralinoj)*(pow(alphaf,2) + pow(betaf,2))*intZ2*-rj*ri + 0.5*(pow(alphaf,2) + pow(betaf,2))*intZ1);

    ///First sf t sf u msf1-msf1, msf1-msf2, msf2-msf2 components:
     m1 = mneutralinoi, m2 = msf1, m3 = msf1, m4 = mneutralinoj, mq = mf;
     double xsiZisf1sf1Zj = 0, rhotildaZisf1sf1Zj = 0, chiprimeZisf1sf1Zj = 0, phitildaZisf1sf1Zj = 0, psitildaZisf1sf1Zj = 0, zetaZisf1sf1Zj = 0, XZisf1sf1Zj = 0, chitildaZisf1sf1Zj = 0;
    phitildaZisf1sf1Zj = dgauss(gphitildadgauss,from,to,accuracy);
    psitildaZisf1sf1Zj = dgauss(gpsitildadgauss,from,to,accuracy);
    YZisf1sf1Zj = dgauss(gYdgauss,from,to,accuracy);
    xsiZisf1sf1Zj = dgauss(gxsidgauss,from,to,accuracy);
    rhotildaZisf1sf1Zj = dgauss(grhodgauss,from,to,accuracy);
    chiprimeZisf1sf1Zj = dgauss(gchiprimedgauss,from,to,accuracy);
    zetaZisf1sf1Zj = dgauss(gzetadgauss,from,to,accuracy);
    XZisf1sf1Zj = dgauss(gXdgauss,from,to,accuracy);
    chitildaZisf1sf1Zj = dgauss(gchidgauss,from,to,accuracy);

    m1 = mneutralinoi, m2 = msf2, m3 = msf2, m4 = mneutralinoj, mq = mf;
    double xsiZisf2sf2Zj = 0, rhotildaZisf2sf2Zj = 0, chiprimeZisf2sf2Zj = 0, phitildaZisf2sf2Zj = 0, psitildaZisf2sf2Zj = 0, zetaZisf2sf2Zj = 0, XZisf2sf2Zj = 0, chitildaZisf2sf2Zj = 0;
    phitildaZisf2sf2Zj = dgauss(gphitildadgauss,from,to,accuracy);
    psitildaZisf2sf2Zj = dgauss(gpsitildadgauss,from,to,accuracy);
    YZisf2sf2Zj = dgauss(gYdgauss,from,to,accuracy);
    xsiZisf2sf2Zj = dgauss(gxsidgauss,from,to,accuracy);
    rhotildaZisf2sf2Zj = dgauss(grhodgauss,from,to,accuracy);
    chiprimeZisf2sf2Zj = dgauss(gchiprimedgauss,from,to,accuracy);
    zetaZisf2sf2Zj = dgauss(gzetadgauss,from,to,accuracy);
    XZisf2sf2Zj = dgauss(gXdgauss,from,to,accuracy);
    chitildaZisf2sf2Zj = dgauss(gchidgauss,from,to,accuracy);

    m1 = mneutralinoi, m2 = msf1, m3 = msf2, m4 = mneutralinoj, mq = mf;

    double xsiZisf1sf2Zj = 0, rhotildaZisf1sf2Zj = 0, chiprimeZisf1sf2Zj = 0, zetaZisf1sf2Zj = 0, XZisf1sf2Zj = 0, chitildaZisf1sf2Zj = 0;
    xsiZisf1sf2Zj = dgauss(gxsidgauss,from,to,accuracy);
    rhotildaZisf1sf2Zj = dgauss(grhodgauss,from,to,accuracy);
    chiprimeZisf1sf2Zj = dgauss(gchiprimedgauss,from,to,accuracy);
    zetaZisf1sf2Zj = dgauss(gzetadgauss,from,to,accuracy);
    XZisf1sf2Zj = dgauss(gXdgauss,from,to,accuracy);
    chitildaZisf1sf2Zj = dgauss(gchidgauss,from,to,accuracy);

    double Gammasftsfumsf1msf2 = 0, Gammasftsfumsf1msf1 = 0, Gammasftsfumsf2msf2 = 0;
    Gammasftsfumsf1msf1 = -2*(8*(sf1alpha1Zi*sf1beta1Zi*sf1beta1Zj*sf1alpha1Zj + sf1beta1Zi*sf1alpha1Zi*sf1alpha1Zj*sf1beta1Zj)*pow(mneutralinoi/PI,2)*YZisf1sf1Zj*ri -(sf1alpha1Zi*sf1alpha1Zi*sf1alpha1Zj*sf1alpha1Zj + sf1beta1Zi*sf1beta1Zi*sf1beta1Zj*sf1beta1Zj)*8*pow(mneutralinoi/PI,2)*phitildaZisf1sf1Zj*ri*rj + (sf1beta1Zi*sf1alpha1Zi*sf1beta1Zj*sf1alpha1Zj + sf1alpha1Zi*sf1beta1Zi*sf1alpha1Zj*sf1beta1Zj)*pow(mf,2)*8*pow(mneutralinoi/PI,2)*xsiZisf1sf1Zj*ri -((sf1alpha1Zi*sf1alpha1Zi*sf1beta1Zj*sf1alpha1Zj + sf1beta1Zi*sf1beta1Zi*sf1alpha1Zj*sf1beta1Zj)*fabs(mneutralinoi)*mf)*(8*pow(mneutralinoi/PI,2)*xsiZisf1sf1Zj - 4*pow(mneutralinoi/PI,2)*(pow(mneutralinoi,2)+pow(mneutralinoj,2))*rhotildaZisf1sf1Zj*ri + 8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf1Zj) + fabs(mneutralinoj)*rj*mf*(sf1beta1Zi*sf1alpha1Zi*sf1alpha1Zj*sf1alpha1Zj + sf1alpha1Zi*sf1beta1Zi*sf1beta1Zj*sf1beta1Zj)*(-8*pow(mneutralinoi/PI,2)*xsiZisf1sf1Zj + 8*pow(mneutralinoi,4)/pow(PI,2)*rhotildaZisf1sf1Zj*ri - 8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf1Zj) - (sf1beta1Zi*sf1beta1Zi*sf1beta1Zj*sf1alpha1Zj + sf1alpha1Zi*sf1alpha1Zi*sf1alpha1Zj*sf1beta1Zj)*fabs(mneutralinoi)*ri*mf*(4*pow(mneutralinoi/PI,2)*(pow(mneutralinoi,2)-pow(mneutralinoj,2))*rhotildaZisf1sf1Zj - 8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf1Zj) + (sf1alpha1Zi*sf1beta1Zi*sf1alpha1Zj*sf1alpha1Zj + sf1beta1Zi*sf1alpha1Zi*sf1beta1Zj*sf1beta1Zj)*mf*fabs(mneutralinoj)*rj*ri*8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf1Zj -2*(sf1beta1Zi*sf1beta1Zi*sf1alpha1Zj*sf1alpha1Zj  + sf1alpha1Zi*sf1alpha1Zi*sf1beta1Zj*sf1beta1Zj)*pow(mf,2)*ri*rj*fabs(mneutralinoi)*fabs(mneutralinoj)*4*pow(mneutralinoi/PI,2)*rhotildaZisf1sf1Zj);

    Gammasftsfumsf2msf2 = -2*(8*(sf2alpha1Zi*sf2beta1Zi*sf2beta1Zj*sf2alpha1Zj + sf2beta1Zi*sf2alpha1Zi*sf2alpha1Zj*sf2beta1Zj)*pow(mneutralinoi/PI,2)*YZisf2sf2Zj*ri -(sf2alpha1Zi*sf2alpha1Zi*sf2alpha1Zj*sf2alpha1Zj + sf2beta1Zi*sf2beta1Zi*sf2beta1Zj*sf2beta1Zj)*8*pow(mneutralinoi/PI,2)*phitildaZisf2sf2Zj*ri*rj + (sf2beta1Zi*sf2alpha1Zi*sf2beta1Zj*sf2alpha1Zj + sf2alpha1Zi*sf2beta1Zi*sf2alpha1Zj*sf2beta1Zj)*pow(mf,2)*8*pow(mneutralinoi/PI,2)*xsiZisf2sf2Zj*ri -((sf2alpha1Zi*sf2alpha1Zi*sf2beta1Zj*sf2alpha1Zj + sf2beta1Zi*sf2beta1Zi*sf2alpha1Zj*sf2beta1Zj)*fabs(mneutralinoi)*mf)*(8*pow(mneutralinoi/PI,2)*xsiZisf2sf2Zj - 4*pow(mneutralinoi/PI,2)*(pow(mneutralinoi,2)+pow(mneutralinoj,2))*rhotildaZisf2sf2Zj*ri + 8*pow(mneutralinoi/PI,2)*chiprimeZisf2sf2Zj) + fabs(mneutralinoj)*rj*mf*(sf2beta1Zi*sf2alpha1Zi*sf2alpha1Zj*sf2alpha1Zj + sf2alpha1Zi*sf2beta1Zi*sf2beta1Zj*sf2beta1Zj)*(-8*pow(mneutralinoi/PI,2)*xsiZisf2sf2Zj + 8*pow(mneutralinoi,4)/pow(PI,2)*rhotildaZisf2sf2Zj*ri - 8*pow(mneutralinoi/PI,2)*chiprimeZisf2sf2Zj) - (sf2beta1Zi*sf2beta1Zi*sf2beta1Zj*sf2alpha1Zj + sf2alpha1Zi*sf2alpha1Zi*sf2alpha1Zj*sf2beta1Zj)*fabs(mneutralinoi)*ri*mf*(4*pow(mneutralinoi/PI,2)*(pow(mneutralinoi,2)-pow(mneutralinoj,2))*rhotildaZisf2sf2Zj - 8*pow(mneutralinoi/PI,2)*chiprimeZisf2sf2Zj) + (sf2alpha1Zi*sf2beta1Zi*sf2alpha1Zj*sf2alpha1Zj + sf2beta1Zi*sf2alpha1Zi*sf2beta1Zj*sf2beta1Zj)*mf*fabs(mneutralinoj)*rj*ri*8*pow(mneutralinoi/PI,2)*chiprimeZisf2sf2Zj -2*(sf2beta1Zi*sf2beta1Zi*sf2alpha1Zj*sf2alpha1Zj  + sf2alpha1Zi*sf2alpha1Zi*sf2beta1Zj*sf2beta1Zj)*pow(mf,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*ri*rj*4*pow(mneutralinoi/PI,2)*rhotildaZisf2sf2Zj);

    Gammasftsfumsf1msf2 = -2*(8*(sf1alpha1Zi*sf2beta1Zi*sf1beta1Zj*sf2alpha1Zj + sf1beta1Zi*sf2alpha1Zi*sf1alpha1Zj*sf2beta1Zj)*pow(mneutralinoi/PI,2)*YZisf1sf2Zj -(sf1alpha1Zi*sf2alpha1Zi*sf1alpha1Zj*sf2alpha1Zj + sf1beta1Zi*sf2beta1Zi*sf1beta1Zj*sf2beta1Zj)*8*pow(mneutralinoi/PI,2)*phitildaZisf1sf2Zj*ri*rj + (sf1beta1Zi*sf2alpha1Zi*sf1beta1Zj*sf2alpha1Zj + sf1alpha1Zi*sf2beta1Zi*sf1alpha1Zj*sf2beta1Zj)*pow(mf,2)*8*pow(mneutralinoi/PI,2)*xsiZisf1sf2Zj*ri -((sf1alpha1Zi*sf2alpha1Zi*sf1beta1Zj*sf2alpha1Zj + sf1beta1Zi*sf2beta1Zi*sf1alpha1Zj*sf2beta1Zj)*fabs(mneutralinoi)*mf)*(8*pow(mneutralinoi/PI,2)*xsiZisf1sf2Zj - 4*pow(mneutralinoi/PI,2)*(pow(mneutralinoi,2)+pow(mneutralinoj,2))*rhotildaZisf1sf2Zj*ri + 8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf2Zj) + fabs(mneutralinoj)*rj*mf*(sf1beta1Zi*sf2alpha1Zi*sf1alpha1Zj*sf2alpha1Zj + sf1alpha1Zi*sf2beta1Zi*sf1beta1Zj*sf2beta1Zj)*(-8*pow(mneutralinoi/PI,2)*xsiZisf1sf2Zj + 8*pow(mneutralinoi,4)/pow(PI,2)*rhotildaZisf1sf2Zj*ri - 8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf2Zj) - (sf1beta1Zi*sf2beta1Zi*sf1beta1Zj*sf2alpha1Zj + sf1alpha1Zi*sf2alpha1Zi*sf1alpha1Zj*sf2beta1Zj)*fabs(mneutralinoi)*ri*mf*(4*pow(mneutralinoi/PI,2)*(pow(mneutralinoi,2)-pow(mneutralinoj,2))*rhotildaZisf1sf2Zj - 8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf2Zj) + (sf1alpha1Zi*sf2beta1Zi*sf1alpha1Zj*sf2alpha1Zj + sf1beta1Zi*sf2alpha1Zi*sf1beta1Zj*sf2beta1Zj)*mf*fabs(mneutralinoj)*rj*8*pow(mneutralinoi/PI,2)*chiprimeZisf1sf2Zj -2*(sf1beta1Zi*sf2beta1Zi*sf1alpha1Zj*sf2alpha1Zj  + sf1alpha1Zi*sf2alpha1Zi*sf1beta1Zj*sf2beta1Zj)*pow(mf,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*ri*rj*4*pow(mneutralinoi/PI,2)*rhotildaZisf1sf2Zj);

    ///sf sf diag contribution 2x as t and u same
    double Gammasf1sf1diag = 0, Gammasf2sf2diag = 0;
    Gammasf1sf1diag = (pow(sf1alpha1Zi,2)+pow(sf1beta1Zi,2))*(pow(sf1alpha1Zj,2)+pow(sf1beta1Zj,2))*8*pow(mneutralinoi/PI,2)*psitildaZisf1sf1Zj + rj*4*(pow(sf1alpha1Zi,2)+pow(sf1beta1Zi,2))*sf1alpha1Zj*sf1beta1Zj*mf*fabs(mneutralinoj)*8*pow(mneutralinoi/PI,2)*chitildaZisf1sf1Zj - ri*4*(pow(sf1alpha1Zj,2)+pow(sf1beta1Zj,2))*sf1alpha1Zi*sf1beta1Zi*fabs(mneutralinoi)*mf*8*pow(mneutralinoi/PI,2)*XZisf1sf1Zj - ri*rj*16*sf1alpha1Zi*sf1beta1Zi*sf1alpha1Zj*sf1beta1Zj*fabs(mneutralinoi)*pow(mf,2)*fabs(mneutralinoj)*4*pow(mneutralinoi/PI,2)*zetaZisf1sf1Zj;
    Gammasf2sf2diag = (pow(sf2alpha1Zi,2)+pow(sf2beta1Zi,2))*(pow(sf2alpha1Zj,2)+pow(sf2beta1Zj,2))*8*pow(mneutralinoi/PI,2)*psitildaZisf2sf2Zj + rj*4*(pow(sf2alpha1Zi,2)+pow(sf2beta1Zi,2))*sf2alpha1Zj*sf2beta1Zj*mf*fabs(mneutralinoj)*8*pow(mneutralinoi/PI,2)*chitildaZisf2sf2Zj - 4*ri*(pow(sf2alpha1Zj,2)+pow(sf2beta1Zj,2))*sf2alpha1Zi*sf2beta1Zi*fabs(mneutralinoi)*mf*8*pow(mneutralinoi/PI,2)*XZisf2sf2Zj - ri*rj*16*sf2alpha1Zi*sf2beta1Zi*sf2alpha1Zj*sf2beta1Zj*fabs(mneutralinoi)*pow(mf,2)*fabs(mneutralinoj)*4*pow(mneutralinoi/PI,2)*zetaZisf2sf2Zj;

    ///sf sf non diag 2x as t and u same
    double Gammasfsfnondiag = 0;
    Gammasfsfnondiag = 16*pow(mneutralinoi/PI,2)*((sf1beta1Zi*sf2beta1Zi + sf1alpha1Zi*sf2alpha1Zi)*(sf1alpha1Zj*sf2alpha1Zj + sf2beta1Zj*sf1beta1Zj)*psitildaZisf1sf2Zj + rj*2*(sf1beta1Zi*sf2beta1Zi + sf1alpha1Zi*sf2alpha1Zi)*(sf2alpha1Zj*sf1beta1Zj + sf1alpha1Zj*sf2beta1Zj)*mf*fabs(mneutralinoj)*chitildaZisf1sf2Zj - ri*2*(sf1alpha1Zi*sf2beta1Zi + sf2alpha1Zi*sf1beta1Zi)*(sf1alpha1Zj*sf2alpha1Zj + sf2beta1Zj*sf1beta1Zj)*fabs(mneutralinoi)*mf*XZisf1sf2Zj - ri*rj*2*(sf1alpha1Zi*sf2beta1Zi + sf2alpha1Zi*sf1beta1Zi)*(sf2alpha1Zj*sf1beta1Zj + sf1alpha1Zj*sf2beta1Zj)*pow(mf,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*zetaZisf1sf2Zj);
   
    double Gammasftot = 0;
    Gammasftot = 2*Gammasf1sf1diag + 2*Gammasf2sf2diag + 2*Gammasfsfnondiag +Gammasftsfumsf1msf1 + Gammasftsfumsf2msf2 + 2*Gammasftsfumsf1msf2;

    double Gammah = 0, GammaH = 0, GammahHinterf = 0, integralh1 = 0, integralh2 = 0, integralh3 = 0, integralh4 =0, integralH1 = 0, integralH2 = 0, integralH3 = 0, integralH4 = 0, integralhH1 = 0, integralhH2 = 0, integralhH3 = 0, integralhH4 = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, g1 = g, g2 = gp, NeutMIX = mixNeut, neutralinoi = ineutralino, neutralinoj = jneutralino, alphamix = alpha,mq = mf;

    integralh1 = dgauss(gintegralh1dgauss,fromz,toz,accuracy);
    integralh2 = dgauss(gintegralh2dgauss,fromz,toz,accuracy);
    integralh3 = dgauss(gintegralh3dgauss,fromz,toz,accuracy);
    integralh4 = dgauss(gintegralh4dgauss,fromz,toz,accuracy);

    integralH1 = dgauss(gintegralH1dgauss,fromz,toz,accuracy);
    integralH2 = dgauss(gintegralH2dgauss,fromz,toz,accuracy);
    integralH3 = dgauss(gintegralH3dgauss,fromz,toz,accuracy);
    integralH4 = dgauss(gintegralH4dgauss,fromz,toz,accuracy);

    integralhH1 = dgauss(gintegralhH1dgauss,fromz,toz,accuracy);
    integralhH2 = dgauss(gintegralhH2dgauss,fromz,toz,accuracy);
    integralhH3 = dgauss(gintegralhH3dgauss,fromz,toz,accuracy);
    integralhH4 = dgauss(gintegralhH4dgauss,fromz,toz,accuracy);

    Gammah = (2*pow(Xijh + Xjih,2)*pow(fq*trigofalphah,2)*(integralh4 -2*pow(mq,2)*integralh3 +rj*2*mneutralinoi*fabs(mneutralinoj)*integralh2 - rj*4*mneutralinoi*fabs(mneutralinoj)*pow(mq,2)*integralh1));
    
    GammaH = (2*pow(XijH+ XjiH,2)*pow(fq*trigofalphaH,2)*(integralH4 - 2*pow(mq,2)*integralH3 +rj*2*mneutralinoi*fabs(mneutralinoj)*integralH2 - rj*4*mneutralinoi*fabs(mneutralinoj)*pow(mq,2)*integralH1));

    GammahHinterf = 2*2*(Xijh + Xjih)*(XijH + XjiH)*pow(fq,2)*trigofalphah*trigofalphaH*(integralhH4 - 2*pow(mq,2)*integralhH3 + 2*ri*rj*fabs(mneutralinoi)*fabs(mneutralinoj)*integralhH2 - 4*ri*rj*fabs(mneutralinoi)*fabs(mneutralinoj)*pow(mq,2)*integralhH1);

    ///Pseudoscalar A contribution:

    double GammaA = 0;
    double integralA1 = 0, integralA2 = 0, integralA3 = 0, integralA4 = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, g1 = g, g2 = gp, NeutMIX = mixNeut, neutralinoi = ineutralino, neutralinoj = jneutralino, alphamix = alpha,mq = mf;

    integralA1 = dgauss(gintegralA1dgauss,fromz,toz,accuracy);
    integralA2 = dgauss(gintegralA2dgauss,fromz,toz,accuracy);
    integralA3 = dgauss(gintegralA3dgauss,fromz,toz,accuracy);
    integralA4 = dgauss(gintegralA4dgauss,fromz,toz,accuracy);

    GammaA = pow(XijA + XjiA,2)*pow(Aq,2)*(integralA4 + 2*pow(mq,2)*integralA3 + 2*fabs(mneutralinoi)*fabs(mneutralinoj)*integralA2*-rj*ri + 4*pow(mq,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*integralA1*-rj*ri);

    double Gammagoldstone = 0; ///Have an additional pseudoscalar goldstone with mass of Z due to being in Feynman gauge, to add in the longitudinal polarisation of the Z
    double integralgoldstone1 = 0, integralgoldstone2 = 0, integralgoldstone3 = 0, integralgoldstone4 = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, g1 = g, g2 = gp, NeutMIX = mixNeut, neutralinoi = ineutralino, neutralinoj = jneutralino, alphamix = alpha,mq = mf;
    mA = mZboson; ///set so can use same integrals as for pseudoscalar A boson but now with Z mass

    double goldstoneneutineutjcoup = 0;
    goldstoneneutineutjcoup = -0.5*((gp*mixNeut(neutralinoi,1)-g*mixNeut(neutralinoi,2))*(mixNeut(neutralinoj,3)*-cos(beta) - mixNeut(neutralinoj,4)*sin(beta)) + (gp*mixNeut(neutralinoj,1)-g*mixNeut(neutralinoj,2))*(mixNeut(neutralinoi,3)*-cos(beta) - mixNeut(neutralinoi,4)*sin(beta)));

    integralgoldstone1 = dgauss(gintegralA1dgauss,fromz,toz,accuracy);
    integralgoldstone2 = dgauss(gintegralA2dgauss,fromz,toz,accuracy);
    integralgoldstone3 = dgauss(gintegralA3dgauss,fromz,toz,accuracy);
    integralgoldstone4 = dgauss(gintegralA4dgauss,fromz,toz,accuracy);

    Gammagoldstone = pow(goldstoneneutineutjcoup,2)*pow(goldstoneffcoup,2)*4*(integralgoldstone4 + 2*pow(mq,2)*integralgoldstone3 + 2*fabs(mneutralinoi)*fabs(mneutralinoj)*integralgoldstone2*-rj*ri + 4*pow(mq,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*integralgoldstone1*-rj*ri);

    double coupcombo1Zsf1 = 0, coupcombo2Zsf1 = 0, coupcombo3Zsf1 = 0, coupcombo4Zsf1 = 0, coupcombo5Zsf1 = 0, coupcombo6Zsf1 = 0, coupcombo7Zsf1 = 0, coupcombo8Zsf1 = 0; 
    coupcombo1Zsf1 = -2*2*Wij*g*sinthetaW*(-sf1alpha1Zi*(alphaf-betaf)*sf1beta1Zj + sf1beta1Zi*(alphaf+betaf)*sf1alpha1Zj)*mf*fabs(mneutralinoi);
    coupcombo2Zsf1 = 2*2*Wij*g*sinthetaW*(-sf1alpha1Zi*(alphaf+betaf)*sf1beta1Zj + sf1beta1Zi*(alphaf-betaf)*sf1alpha1Zj)*mf*fabs(mneutralinoj)*-ri*rj;
    coupcombo3Zsf1 = -2*2*Wij*g*sinthetaW*(sf1beta1Zi*(alphaf+betaf)*sf1beta1Zj - sf1alpha1Zi*(alphaf - betaf)*sf1alpha1Zj)*ri;
    coupcombo4Zsf1 = -4*2*Wij*g*sinthetaW*(-sf1alpha1Zi*(alphaf+betaf)*sf1beta1Zj + sf1beta1Zi*(alphaf-betaf)*sf1alpha1Zj)*fabs(mneutralinoi)*mf;
    coupcombo5Zsf1 = 4*2*Wij*g*sinthetaW*(-sf1alpha1Zi*(alphaf-betaf)*sf1beta1Zj + sf1beta1Zi*(alphaf+betaf)*sf1alpha1Zj)*mf*fabs(mneutralinoj)*-ri*rj;
    coupcombo6Zsf1 = 2*2*Wij*g*sinthetaW*(sf1beta1Zi*(alphaf+betaf)*sf1beta1Zj - sf1alpha1Zi*(alphaf-betaf)*sf1alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj;
    coupcombo7Zsf1 = -2*2*Wij*g*sinthetaW*(sf1beta1Zi*(alphaf-betaf)*sf1beta1Zj - sf1alpha1Zi*(alphaf+betaf)*sf1alpha1Zj)*pow(mf,2)*ri;
    coupcombo8Zsf1 = 8*2*Wij*g*sinthetaW*(sf1beta1Zi*(alphaf-betaf)*sf1beta1Zj - sf1alpha1Zi*(alphaf+betaf)*sf1alpha1Zj)*pow(mf,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj;

    double integral1Zsf1 = 0, integral2Zsf1 = 0, integral3Zsf1 = 0, integral4Zsf1 = 0, integral5Zsf1 = 0, integral6Zsf1 = 0, integral7Zsf1 = 0, integral8Zsf1 = 0, integral1Zsf2 = 0, integral2Zsf2 = 0, integral3Zsf2 = 0, integral4Zsf2 = 0, integral5Zsf2 = 0, integral6Zsf2 = 0, integral7Zsf2 = 0, integral8Zsf2 = 0;

    double fromzsfE = 0, tozsfE = 0;
    fromzsfE = fabs(mneutralinoj);
    tozsfE = (pow(mneutralinoi,2) + pow(mneutralinoj,2) - 4*pow(mf,2))/(2*fabs(mneutralinoi));
    
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, m2 = msf1;
    integral1Zsf1 = 2*fabs(m1)*dgauss(gintegral1Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2Zsf1 = 2*fabs(m1)*dgauss(gintegral2Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3Zsf1 = 2*fabs(m1)*dgauss(gintegral3Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4Zsf1 = 2*fabs(m1)*dgauss(gintegral4Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5Zsf1 = 2*fabs(m1)*dgauss(gintegral5Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6Zsf1 = 2*fabs(m1)*dgauss(gintegral6Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7Zsf1 = 2*fabs(m1)*dgauss(gintegral7Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8Zsf1 = 2*fabs(m1)*dgauss(gintegral8Zsfdgauss,fromzsfE,tozsfE,accuracy);

    GammaZsf1 = (coupcombo1Zsf1*integral1Zsf1 + coupcombo2Zsf1*integral2Zsf1 + coupcombo3Zsf1*integral3Zsf1 + coupcombo4Zsf1*integral4Zsf1 + coupcombo5Zsf1*integral5Zsf1 + coupcombo6Zsf1*integral6Zsf1 + coupcombo7Zsf1*integral7Zsf1 + coupcombo8Zsf1*integral8Zsf1)*ri;

    double coupcombo1Zsf2 = 0, coupcombo2Zsf2 = 0, coupcombo3Zsf2 = 0, coupcombo4Zsf2 = 0, coupcombo5Zsf2 = 0, coupcombo6Zsf2 = 0, coupcombo7Zsf2 = 0, coupcombo8Zsf2 = 0;
    coupcombo1Zsf2 = 2*2*Wij*g*sinthetaW*(-sf2alpha1Zi*(alphaf-betaf)*sf2beta1Zj + sf2beta1Zi*(alphaf+betaf)*sf2alpha1Zj)*mf*fabs(mneutralinoi);
    coupcombo2Zsf2 = -2*2*Wij*g*sinthetaW*(-sf2alpha1Zi*(alphaf+betaf)*sf2beta1Zj + sf2beta1Zi*(alphaf-betaf)*sf2alpha1Zj)*mf*fabs(mneutralinoj)*-ri*rj;
    coupcombo3Zsf2 = 2*2*Wij*g*sinthetaW*(sf2beta1Zi*(alphaf+betaf)*sf2beta1Zj - sf2alpha1Zi*(alphaf - betaf)*sf2alpha1Zj)*ri;
    coupcombo4Zsf2 = 4*2*Wij*g*sinthetaW*(-sf2alpha1Zi*(alphaf+betaf)*sf2beta1Zj + sf2beta1Zi*(alphaf-betaf)*sf2alpha1Zj)*fabs(mneutralinoi)*mf;
    coupcombo5Zsf2 = -4*2*Wij*g*sinthetaW*(-sf2alpha1Zi*(alphaf-betaf)*sf2beta1Zj + sf2beta1Zi*(alphaf+betaf)*sf2alpha1Zj)*mf*fabs(mneutralinoj)*-ri*rj;
    coupcombo6Zsf2 =  -2*2*Wij*g*sinthetaW*(sf2beta1Zi*(alphaf+betaf)*sf2beta1Zj - sf2alpha1Zi*(alphaf-betaf)*sf2alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj;
    coupcombo7Zsf2 = 2*2*Wij*g*sinthetaW*(sf2beta1Zi*(alphaf-betaf)*sf2beta1Zj - sf2alpha1Zi*(alphaf+betaf)*sf2alpha1Zj)*pow(mf,2)*ri;
    coupcombo8Zsf2 = -8*2*Wij*g*sinthetaW*(sf2beta1Zi*(alphaf-betaf)*sf2beta1Zj - sf2alpha1Zi*(alphaf+betaf)*sf2alpha1Zj)*pow(mf,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj;

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, m2 = msf2;
    integral1Zsf2 = 2*fabs(m1)*dgauss(gintegral1Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2Zsf2 = 2*fabs(m1)*dgauss(gintegral2Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3Zsf2 = 2*fabs(m1)*dgauss(gintegral3Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4Zsf2 = 2*fabs(m1)*dgauss(gintegral4Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5Zsf2 = 2*fabs(m1)*dgauss(gintegral5Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6Zsf2 = 2*fabs(m1)*dgauss(gintegral6Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7Zsf2 = 2*fabs(m1)*dgauss(gintegral7Zsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8Zsf2 = 2*fabs(m1)*dgauss(gintegral8Zsfdgauss,fromzsfE,tozsfE,accuracy);

    GammaZsf2 = (coupcombo1Zsf2*integral1Zsf2 + coupcombo2Zsf2*integral2Zsf2 + coupcombo3Zsf2*integral3Zsf2 + coupcombo4Zsf2*integral4Zsf2 + coupcombo5Zsf2*integral5Zsf2 + coupcombo6Zsf2*integral6Zsf2 + coupcombo7Zsf2*integral7Zsf2 + coupcombo8Zsf2*integral8Zsf2)*ri;

    double coupcombo1hsf1 = 0, coupcombo2hsf1 = 0, coupcombo3hsf1 = 0, coupcombo4hsf1 = 0, coupcombo5hsf1 = 0, coupcombo6hsf1 = 0, coupcombo7hsf1 = 0, coupcombo8hsf1 = 0, coupcombo1Hsf1 = 0, coupcombo2Hsf1 = 0, coupcombo3Hsf1 = 0, coupcombo4Hsf1 = 0, coupcombo5Hsf1 = 0, coupcombo6Hsf1 = 0, coupcombo7Hsf1 = 0, coupcombo8Hsf1 = 0, coupcombo1hsf2 = 0, coupcombo2hsf2 = 0, coupcombo3hsf2 = 0, coupcombo4hsf2 = 0, coupcombo5hsf2 = 0, coupcombo6hsf2 = 0, coupcombo7hsf2 = 0, coupcombo8hsf2 = 0, coupcombo1Hsf2 = 0, coupcombo2Hsf2 = 0, coupcombo3Hsf2 = 0, coupcombo4Hsf2 = 0, coupcombo5Hsf2 = 0, coupcombo6Hsf2 = 0, coupcombo7Hsf2 = 0, coupcombo8Hsf2 = 0;

    coupcombo1hsf1 = 0.5*(Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*-ri*rj;
    coupcombo2hsf1 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo3hsf1 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*mq*fabs(mneutralinoj)*ri;
    coupcombo4hsf1 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(-sf1beta1Zi*sf1beta1Zj - sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo5hsf1 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*-mq*fabs(mneutralinoj)*ri;
    coupcombo6hsf1 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(-sf1alpha1Zi*sf1beta1Zj - sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj);
    coupcombo7hsf1 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*-pow(mq,2)*-ri*rj;
    coupcombo8hsf1 = 2*(Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*pow(mq,2)*fabs(mneutralinoj);

    coupcombo1Hsf1 = 0.5*(XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*-ri*rj;
    coupcombo2Hsf1 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo3Hsf1 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*mq*fabs(mneutralinoj)*ri;
    coupcombo4Hsf1 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(-sf1beta1Zi*sf1beta1Zj - sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo5Hsf1 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*-mq*fabs(mneutralinoj)*ri;
    coupcombo6Hsf1 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(-sf1alpha1Zi*sf1beta1Zj - sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj);
    coupcombo7Hsf1 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*-pow(mq,2)*-ri*rj;
    coupcombo8Hsf1 = 2*(XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*pow(mq,2)*fabs(mneutralinoj);

    coupcombo1hsf2 = 0.5*(Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*-ri*rj;
    coupcombo2hsf2 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo3hsf2 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*mq*fabs(mneutralinoj)*ri;
    coupcombo4hsf2 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(-sf2beta1Zi*sf2beta1Zj - sf2alpha1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo5hsf2 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*-mq*fabs(mneutralinoj)*ri;
    coupcombo6hsf2 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(-sf2alpha1Zi*sf2beta1Zj - sf2beta1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj);
    coupcombo7hsf2 = (Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*-pow(mq,2)*-ri*rj;
    coupcombo8hsf2 = 2*(Xijh+Xjih)*fq*trigofalphah/(pow(2,0.5))*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*pow(mq,2)*fabs(mneutralinoj);

    coupcombo1Hsf2 = 0.5*(XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*-ri*rj;
    coupcombo2Hsf2 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo3Hsf2 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*mq*fabs(mneutralinoj)*ri;
    coupcombo4Hsf2 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(-sf2beta1Zi*sf2beta1Zj - sf2alpha1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*mq*-rj;
    coupcombo5Hsf2 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*-mq*fabs(mneutralinoj)*ri;
    coupcombo6Hsf2 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(-sf2alpha1Zi*sf2beta1Zj - sf2beta1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj);
    coupcombo7Hsf2 = (XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*-pow(mq,2)*-ri*rj;
    coupcombo8Hsf2 = 2*(XijH+XjiH)*fq*trigofalphaH/(pow(2,0.5))*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*pow(mq,2)*fabs(mneutralinoj);
    
    double integral1hsf1 = 0, integral2hsf1 = 0, integral3hsf1 = 0, integral4hsf1 = 0, integral5hsf1 = 0, integral6hsf1 = 0, integral7hsf1 = 0, integral8hsf1 = 0, integral1hsf2 = 0, integral2hsf2 = 0, integral3hsf2 = 0, integral4hsf2 = 0, integral5hsf2 = 0, integral6hsf2 = 0, integral7hsf2 = 0, integral8hsf2 = 0, integral1Hsf1 = 0, integral2Hsf1 = 0, integral3Hsf1 = 0, integral4Hsf1 = 0, integral5Hsf1 = 0, integral6Hsf1 = 0, integral7Hsf1 = 0, integral8Hsf1 = 0, integral1Hsf2 = 0, integral2Hsf2 = 0, integral3Hsf2 = 0, integral4Hsf2 = 0, integral5Hsf2 = 0, integral6Hsf2 = 0, integral7Hsf2 = 0, integral8Hsf2 = 0;

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, m2 = msf1;
    integral1hsf1 = 2*fabs(m1)*dgauss(gintegral1hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2hsf1 = 2*fabs(m1)*dgauss(gintegral2hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3hsf1 = 2*fabs(m1)*dgauss(gintegral3hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4hsf1 = 2*fabs(m1)*dgauss(gintegral4hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5hsf1 = 2*fabs(m1)*dgauss(gintegral5hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6hsf1 = 2*fabs(m1)*dgauss(gintegral6hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7hsf1 = 2*fabs(m1)*dgauss(gintegral7hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8hsf1 = 2*fabs(m1)*dgauss(gintegral8hsfdgauss,fromzsfE,tozsfE,accuracy);

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, m2 = msf1;
    integral1Hsf1 = 2*fabs(m1)*dgauss(gintegral1Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2Hsf1 = 2*fabs(m1)*dgauss(gintegral2Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3Hsf1 = 2*fabs(m1)*dgauss(gintegral3Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4Hsf1 = 2*fabs(m1)*dgauss(gintegral4Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5Hsf1 = 2*fabs(m1)*dgauss(gintegral5Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6Hsf1 = 2*fabs(m1)*dgauss(gintegral6Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7Hsf1 = 2*fabs(m1)*dgauss(gintegral7Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8Hsf1 = 2*fabs(m1)*dgauss(gintegral8Hsfdgauss,fromzsfE,tozsfE,accuracy);

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, m2 = msf2;
    integral1hsf2 = 2*fabs(m1)*dgauss(gintegral1hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2hsf2 = 2*fabs(m1)*dgauss(gintegral2hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3hsf2 = 2*fabs(m1)*dgauss(gintegral3hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4hsf2 = 2*fabs(m1)*dgauss(gintegral4hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5hsf2 = 2*fabs(m1)*dgauss(gintegral5hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6hsf2 = 2*fabs(m1)*dgauss(gintegral6hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7hsf2 = 2*fabs(m1)*dgauss(gintegral7hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8hsf2 = 2*fabs(m1)*dgauss(gintegral8hsfdgauss,fromzsfE,tozsfE,accuracy);

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mhiggsl, mH = mhiggsH, mA = mhiggsA, m2 = msf2;
    integral1Hsf2 = 2*fabs(m1)*dgauss(gintegral1Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2Hsf2 = 2*fabs(m1)*dgauss(gintegral2Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3Hsf2 = 2*fabs(m1)*dgauss(gintegral3Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4Hsf2 = 2*fabs(m1)*dgauss(gintegral4Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5Hsf2 = 2*fabs(m1)*dgauss(gintegral5Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6Hsf2 = 2*fabs(m1)*dgauss(gintegral6Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7Hsf2 = 2*fabs(m1)*dgauss(gintegral7Hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8Hsf2 = 2*fabs(m1)*dgauss(gintegral8Hsfdgauss,fromzsfE,tozsfE,accuracy);

    Gammahsf1 = coupcombo1hsf1*integral1hsf1+coupcombo2hsf1*integral2hsf1+coupcombo3hsf1*integral3hsf1+coupcombo4hsf1*integral4hsf1+coupcombo5hsf1*integral5hsf1+coupcombo6hsf1*integral6hsf1+coupcombo7hsf1*integral7hsf1+coupcombo8hsf1*integral8hsf1;
    GammaHsf1 = coupcombo1Hsf1*integral1Hsf1+coupcombo2Hsf1*integral2Hsf1+coupcombo3Hsf1*integral3Hsf1+coupcombo4Hsf1*integral4Hsf1+coupcombo5Hsf1*integral5Hsf1+coupcombo6Hsf1*integral6Hsf1+coupcombo7Hsf1*integral7Hsf1+coupcombo8Hsf1*integral8Hsf1;
    Gammahsf2 = coupcombo1hsf2*integral1hsf2+coupcombo2hsf2*integral2hsf2+coupcombo3hsf2*integral3hsf2+coupcombo4hsf2*integral4hsf2+coupcombo5hsf2*integral5hsf2+coupcombo6hsf2*integral6hsf2+coupcombo7hsf2*integral7hsf2+coupcombo8hsf2*integral8hsf2;
    GammaHsf2 = coupcombo1Hsf2*integral1Hsf2+coupcombo2Hsf2*integral2Hsf2+coupcombo3Hsf2*integral3Hsf2+coupcombo4Hsf2*integral4Hsf2+coupcombo5Hsf2*integral5Hsf2+coupcombo6Hsf2*integral6Hsf2+coupcombo7Hsf2*integral7Hsf2+coupcombo8Hsf2*integral8Hsf2;
    
    double coupcombo1Asf1 = 0, coupcombo2Asf1 = 0, coupcombo3Asf1 = 0, coupcombo4Asf1 = 0, coupcombo5Asf1 = 0, coupcombo6Asf1 = 0, coupcombo7Asf1 = 0, coupcombo8Asf1 = 0, coupcombo1Asf2 = 0, coupcombo2Asf2 = 0, coupcombo3Asf2 = 0, coupcombo4Asf2 = 0, coupcombo5Asf2 = 0, coupcombo6Asf2 = 0, coupcombo7Asf2 = 0, coupcombo8Asf2 = 0;  
    
    coupcombo1Asf1 = 0.5*(XijA + XjiA)*Aq/2*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*ri;
    coupcombo2Asf1 = -(XijA + XjiA)*Aq/2*fabs(mneutralinoi)*mq*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj);
    coupcombo3Asf1 = (XijA + XjiA)*Aq/2*(-sf1beta1Zi*sf1beta1Zj - sf1alpha1Zi*sf1alpha1Zj)*mq*fabs(mneutralinoj)*-ri*rj;
    coupcombo4Asf1 = (XijA + XjiA)*Aq/2*(-sf1beta1Zi*sf1beta1Zj - sf1alpha1Zi*sf1alpha1Zj)*mq*fabs(mneutralinoi);
    coupcombo5Asf1 = -(XijA + XjiA)*Aq/2*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*mq*fabs(mneutralinoj)*-ri*rj;
    coupcombo6Asf1 = (XijA + XjiA)*Aq/2*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj;
    coupcombo7Asf1 = (XijA + XjiA)*Aq/2*pow(mq,2)*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*ri;
    coupcombo8Asf1 = (XijA + XjiA)*Aq*fabs(mneutralinoi)*pow(mq,2)*fabs(mneutralinoj)*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*-rj;

    coupcombo1Asf2 = 0.5*(XijA + XjiA)*Aq/2*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*ri;
    coupcombo2Asf2 = -(XijA + XjiA)*Aq/2*fabs(mneutralinoi)*mq*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj);
    coupcombo3Asf2 = (XijA + XjiA)*Aq/2*(-sf2beta1Zi*sf2beta1Zj - sf2alpha1Zi*sf2alpha1Zj)*mq*fabs(mneutralinoj)*-ri*rj;
    coupcombo4Asf2 = (XijA + XjiA)*Aq/2*(-sf2beta1Zi*sf2beta1Zj - sf2alpha1Zi*sf2alpha1Zj)*mq*fabs(mneutralinoi);
    coupcombo5Asf2 = -(XijA + XjiA)*Aq/2*(sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*sf2alpha1Zj)*mq*fabs(mneutralinoj)*-ri*rj;
    coupcombo6Asf2 = (XijA + XjiA)*Aq/2*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj;
    coupcombo7Asf2 = (XijA + XjiA)*Aq/2*pow(mq,2)*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*ri;
    coupcombo8Asf2 = (XijA + XjiA)*Aq*fabs(mneutralinoi)*pow(mq,2)*fabs(mneutralinoj)*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj)*-rj;

    double integral1Asf1 = 0, integral2Asf1 = 0, integral3Asf1 = 0, integral4Asf1 = 0, integral5Asf1 = 0, integral6Asf1 = 0, integral7Asf1 = 0, integral8Asf1 = 0, integral1Asf2 = 0, integral2Asf2 = 0, integral3Asf2 = 0, integral4Asf2 = 0, integral5Asf2 = 0, integral6Asf2 = 0, integral7Asf2 = 0, integral8Asf2 = 0; 

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mhiggsA, m2 = msf1; ///here set mh = mA as using the integrands written for h with mh -> mA
    integral1Asf1 = 2*fabs(m1)*dgauss(gintegral1hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2Asf1 = 2*fabs(m1)*dgauss(gintegral2hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3Asf1 = 2*fabs(m1)*dgauss(gintegral3hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4Asf1 = 2*fabs(m1)*dgauss(gintegral4hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5Asf1 = 2*fabs(m1)*dgauss(gintegral5hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6Asf1 = 2*fabs(m1)*dgauss(gintegral6hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7Asf1 = 2*fabs(m1)*dgauss(gintegral7hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8Asf1 = 2*fabs(m1)*dgauss(gintegral8hsfdgauss,fromzsfE,tozsfE,accuracy);

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mhiggsA, m2 = msf2; ///here set mh = mA as using the integrands written for h with mh -> mA
    integral1Asf2 = 2*fabs(m1)*dgauss(gintegral1hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2Asf2 = 2*fabs(m1)*dgauss(gintegral2hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3Asf2 = 2*fabs(m1)*dgauss(gintegral3hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4Asf2 = 2*fabs(m1)*dgauss(gintegral4hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5Asf2 = 2*fabs(m1)*dgauss(gintegral5hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6Asf2 = 2*fabs(m1)*dgauss(gintegral6hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7Asf2 = 2*fabs(m1)*dgauss(gintegral7hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8Asf2 = 2*fabs(m1)*dgauss(gintegral8hsfdgauss,fromzsfE,tozsfE,accuracy);

    GammaAsf1 = coupcombo1Asf1*integral1Asf1 + coupcombo2Asf1*integral2Asf1 + coupcombo3Asf1*integral3Asf1 + coupcombo4Asf1*integral4Asf1+ coupcombo5Asf1*integral5Asf1 + coupcombo6Asf1*integral6Asf1 + coupcombo7Asf1*integral7Asf1 + coupcombo8Asf1*integral8Asf1;

    GammaAsf2 = coupcombo1Asf2*integral1Asf2 + coupcombo2Asf2*integral2Asf2 + coupcombo3Asf2*integral3Asf2 + coupcombo4Asf2*integral4Asf2+ coupcombo5Asf2*integral5Asf2 + coupcombo6Asf2*integral6Asf2 + coupcombo7Asf2*integral7Asf2 + coupcombo8Asf2*integral8Asf2;

    ///Goldstone - sf interference:
    double Gammagsf1 = 0, Gammagsf2 = 0;

    double coupcombo1gsf1 = 0, coupcombo2gsf1 = 0, coupcombo3gsf1 = 0, coupcombo4gsf1 = 0, coupcombo5gsf1 = 0, coupcombo6gsf1 = 0, coupcombo7gsf1 = 0, coupcombo8gsf1 = 0; 
    coupcombo1gsf1 = 0.5*goldstoneneutineutjcoup*goldstoneffcoup*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj);
    coupcombo2gsf1 = -goldstoneneutineutjcoup*goldstoneffcoup*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*mf*ri;
    coupcombo3gsf1 = goldstoneneutineutjcoup*goldstoneffcoup*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*mf*fabs(mneutralinoj)*rj;
    coupcombo4gsf1 = -goldstoneneutineutjcoup*goldstoneffcoup*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*mf*ri;
    coupcombo5gsf1 = goldstoneneutineutjcoup*goldstoneffcoup*(sf1beta1Zi*sf1beta1Zj + sf1alpha1Zi*sf1alpha1Zj)*fabs(mneutralinoj)*mf*rj;
    coupcombo6gsf1 = goldstoneneutineutjcoup*goldstoneffcoup*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj*ri;
    coupcombo7gsf1 = goldstoneneutineutjcoup*goldstoneffcoup*(sf1alpha1Zi*sf1beta1Zj + sf1beta1Zi*sf1alpha1Zj)*pow(mf,2);
    coupcombo8gsf1 = 2*goldstoneneutineutjcoup*goldstoneffcoup*(-sf1alpha1Zi*sf1beta1Zj - sf1beta1Zi*sf1alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*pow(mf,2)*rj*ri;

    double integral1gsf1 = 0, integral2gsf1 = 0, integral3gsf1 = 0, integral4gsf1 = 0, integral5gsf1 = 0, integral6gsf1 = 0, integral7gsf1 = 0, integral8gsf1 = 0, integral1gsf2 = 0, integral2gsf2 = 0, integral3gsf2 = 0, integral4gsf2 = 0, integral5gsf2 = 0, integral6gsf2 = 0, integral7gsf2 = 0, integral8gsf2 = 0; 

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mZboson, m2 = msf1; ///here set mh = mZ as using the integrands written for h with mh -> mA -> mZ
    integral1gsf1 = 2*fabs(m1)*dgauss(gintegral1hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2gsf1 = 2*fabs(m1)*dgauss(gintegral2hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3gsf1 = 2*fabs(m1)*dgauss(gintegral3hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4gsf1 = 2*fabs(m1)*dgauss(gintegral4hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5gsf1 = 2*fabs(m1)*dgauss(gintegral5hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6gsf1 = 2*fabs(m1)*dgauss(gintegral6hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7gsf1 = 2*fabs(m1)*dgauss(gintegral7hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8gsf1 = 2*fabs(m1)*dgauss(gintegral8hsfdgauss,fromzsfE,tozsfE,accuracy);

    Gammagsf1 = (coupcombo1gsf1*integral1gsf1 + coupcombo2gsf1*integral2gsf1 + coupcombo3gsf1*integral3gsf1 + coupcombo4gsf1*integral4gsf1 + coupcombo5gsf1*integral5gsf1 + coupcombo6gsf1*integral6gsf1 + coupcombo7gsf1*integral7gsf1 + coupcombo8gsf1*integral8gsf1);

    double coupcombo1gsf2 = 0, coupcombo2gsf2 = 0, coupcombo3gsf2 = 0, coupcombo4gsf2 = 0, coupcombo5gsf2 = 0, coupcombo6gsf2 = 0, coupcombo7gsf2 = 0, coupcombo8gsf2 = 0; 
    coupcombo1gsf2 = 0.5*goldstoneneutineutjcoup*goldstoneffcoup*(sf2alpha1Zi*sf2beta1Zj + sf2beta1Zi*sf2alpha1Zj);
    coupcombo2gsf2 = -goldstoneneutineutjcoup*goldstoneffcoup*(-sf2beta1Zi*-sf2beta1Zj + -sf2alpha1Zi*-sf2alpha1Zj)*fabs(mneutralinoi)*-mf*-ri;
    coupcombo3gsf2 = -goldstoneneutineutjcoup*goldstoneffcoup*(-sf2beta1Zi*sf2beta1Zj + sf2alpha1Zi*-sf2alpha1Zj)*mf*fabs(mneutralinoj)*rj;
    coupcombo4gsf2 = -goldstoneneutineutjcoup*goldstoneffcoup*(-sf2beta1Zi*-sf2beta1Zj - sf2alpha1Zi*-sf2alpha1Zj)*fabs(mneutralinoi)*mf*ri;
    coupcombo5gsf2 = goldstoneneutineutjcoup*goldstoneffcoup*(-sf2beta1Zi*-sf2beta1Zj - sf2alpha1Zi*-sf2alpha1Zj)*fabs(mneutralinoj)*-mf*-rj;
    coupcombo6gsf2 = goldstoneneutineutjcoup*goldstoneffcoup*(-sf2alpha1Zi*-sf2beta1Zj - sf2beta1Zi*-sf2alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-rj*ri;
    coupcombo7gsf2 = goldstoneneutineutjcoup*goldstoneffcoup*(-sf2alpha1Zi*-sf2beta1Zj - sf2beta1Zi*-sf2alpha1Zj)*pow(mf,2);
    coupcombo8gsf2 = 2*goldstoneneutineutjcoup*goldstoneffcoup*(sf2alpha1Zi*-sf2beta1Zj + sf2beta1Zi*-sf2alpha1Zj)*fabs(mneutralinoi)*fabs(mneutralinoj)*-pow(mf,2)*-rj*ri;

    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mh = mZboson, m2 = msf2; ///here set mh = mZ as using the integrands written for h with mh -> mA -> mZ
    integral1gsf2 = 2*fabs(m1)*dgauss(gintegral1hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral2gsf2 = 2*fabs(m1)*dgauss(gintegral2hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral3gsf2 = 2*fabs(m1)*dgauss(gintegral3hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral4gsf2 = 2*fabs(m1)*dgauss(gintegral4hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral5gsf2 = 2*fabs(m1)*dgauss(gintegral5hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral6gsf2 = 2*fabs(m1)*dgauss(gintegral6hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral7gsf2 = 2*fabs(m1)*dgauss(gintegral7hsfdgauss,fromzsfE,tozsfE,accuracy);
    integral8gsf2 = 2*fabs(m1)*dgauss(gintegral8hsfdgauss,fromzsfE,tozsfE,accuracy);

    Gammagsf2 = (coupcombo1gsf2*integral1gsf2 + coupcombo2gsf2*integral2gsf2 + coupcombo3gsf2*integral3gsf2 + coupcombo4gsf2*integral4gsf2 + coupcombo5gsf2*integral5gsf2 + coupcombo6gsf2*integral6gsf2 + coupcombo7gsf2*integral7gsf2 + coupcombo8gsf2*integral8gsf2);

    double coupcombo1ZA = 0, coupcombo2ZA = 0, coupcombo3ZA = 0, coupcombo4ZA = 0;
    coupcombo1ZA = 4*Wij*(XijA+XjiA)*Aq*g*sinthetaW*betaf*fabs(mneutralinoj)*mq*-ri*rj;
    coupcombo2ZA = 4*Wij*(XijA+XjiA)*Aq*g*sinthetaW*betaf*fabs(mneutralinoi)*mq;
    coupcombo3ZA = 4*Wij*(XijA+XjiA)*Aq*g*sinthetaW*betaf*mq*fabs(mneutralinoj)*-ri*rj;
    coupcombo4ZA = 4*Wij*(XijA+XjiA)*Aq*g*sinthetaW*betaf*fabs(mneutralinoi)*mq;
    
    double integral1ZA = 0, integral2ZA = 0, integral3ZA = 0, integral4ZA = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mA = mhiggsA, m2 = msf1, MZboson = mZboson;
    integral1ZA = 2*fabs(m1)*dgauss(gintegral1ZAdgauss,fromzsfE,tozsfE,accuracy);
    integral2ZA = 2*fabs(m1)*dgauss(gintegral2ZAdgauss,fromzsfE,tozsfE,accuracy);
    integral3ZA = 2*fabs(m1)*dgauss(gintegral3ZAdgauss,fromzsfE,tozsfE,accuracy);
    integral4ZA = 2*fabs(m1)*dgauss(gintegral4ZAdgauss,fromzsfE,tozsfE,accuracy);

    double GammaZA = 0;
    
    GammaZA = coupcombo1ZA*integral1ZA + coupcombo2ZA*integral2ZA + coupcombo3ZA*integral3ZA + coupcombo4ZA*integral4ZA;

    double coupcombo1Zg = 0, coupcombo2Zg = 0, coupcombo3Zg = 0, coupcombo4Zg = 0;
    coupcombo1Zg = 8*Wij*goldstoneffcoup*goldstoneneutineutjcoup*g*sinthetaW*betaf*fabs(mneutralinoj)*mq*-rj;
    coupcombo2Zg = 8*Wij*goldstoneffcoup*goldstoneneutineutjcoup*g*sinthetaW*betaf*fabs(mneutralinoi)*mq*ri;
    coupcombo3Zg = 8*Wij*goldstoneffcoup*goldstoneneutineutjcoup*g*sinthetaW*betaf*fabs(mneutralinoj)*mq*-rj;
    coupcombo4Zg = 8*Wij*goldstoneffcoup*goldstoneneutineutjcoup*g*sinthetaW*betaf*fabs(mneutralinoi)*mq*ri;
    
    double integral1Zg = 0, integral2Zg = 0, integral3Zg = 0, integral4Zg = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, mA = mZboson, m2 = msf1, MZboson = mZboson;
    integral1Zg = 2*fabs(m1)*dgauss(gintegral1ZAdgauss,fromzsfE,tozsfE,accuracy);
    integral2Zg = 2*fabs(m1)*dgauss(gintegral2ZAdgauss,fromzsfE,tozsfE,accuracy);
    integral3Zg = 2*fabs(m1)*dgauss(gintegral3ZAdgauss,fromzsfE,tozsfE,accuracy);
    integral4Zg = 2*fabs(m1)*dgauss(gintegral4ZAdgauss,fromzsfE,tozsfE,accuracy);

    double GammaZg = 0;
    
    GammaZg = coupcombo1Zg*integral1Zg + coupcombo2Zg*integral2Zg + coupcombo3Zg*integral3Zg + coupcombo4Zg*integral4Zg;

    ///Goldstone-A interference
    double GammagA = 0;

    ///Coupling combos:
    double coupcombogA1 = 0, coupcombogA2 = 0, coupcombogA3 = 0, coupcombogA4 = 0;
    coupcombogA1 = -2*goldstoneneutineutjcoup*(XijA+XjiA)*ri;
    coupcombogA2 = 2*goldstoneneutineutjcoup*(XijA+XjiA)*rj;
    coupcombogA3 = -goldstoneffcoup*Aq;
    coupcombogA4 = goldstoneffcoup*Aq;

    double integralgA1 = 0, integralgA2 = 0, integralgA3 = 0, integralgA4 = 0;
    m1 = mneutralinoi, m4 = mneutralinoj, mq = mf, MZboson = mZboson, mA = mhiggsA;
    integralgA1 = 2*fabs(m1)*dgauss(gneutineutjffgA1dgauss,fromz,toz,accuracy);
    integralgA2 = 2*fabs(m1)*dgauss(gneutineutjffgA2dgauss,fromz,toz,accuracy);
    integralgA3 = 2*fabs(m1)*dgauss(gneutineutjffgA3dgauss,fromz,toz,accuracy);
    integralgA4 = 2*fabs(m1)*dgauss(gneutineutjffgA4dgauss,fromz,toz,accuracy);
    
    GammagA = coupcombogA1*coupcombogA3*integralgA4 - 2*coupcombogA1*coupcombogA4*pow(mq,2)*integralgA3 + 2*coupcombogA2*coupcombogA3*fabs(mneutralinoi)*fabs(mneutralinoj)*integralgA2 -4*coupcombogA2*coupcombogA4*pow(mq,2)*fabs(mneutralinoi)*fabs(mneutralinoj)*integralgA1;

    amplitudeW = Nc/(512*pow(PI,3)*pow(fabs(mneutralinoi),3))*(GammaZ + Gammah + GammaH + GammaA + GammahHinterf + Gammasftot - 4*Gammahsf1 - 4*Gammahsf2 - 4*GammaHsf1 - 4*GammaHsf2 - 4*GammaAsf1 - 4*GammaAsf2 + 4*GammaZsf1 - 4*GammaZsf2 - 4*GammaZA + 2*GammagA - 4*GammaZg + Gammagoldstone - 4*Gammagsf1 -4*Gammagsf2);
    
}
  
  return amplitudeW;
}

double neutralinoamplitudedecaycharginoffprimebar (double mneutralinoi, double msfp1, double msfp2, double msf1, double msf2, double mWboson, double mHP, double mcharginoj, double mfp, double mf, double thetaqp, double thetaq, double g, double gp, double alpha, double beta, double thetaL2, double thetaR2, double runmqp, double runmq, DoubleMatrix & mixNeut, int ineutralino, int jchargino, bool onetothree, char qorl, char norc) {
  
  double amplitudeW = 0;

  if (fabs(mneutralinoi) > msf1 + mf || fabs(mneutralinoi) > msf2 + mf || fabs(mneutralinoi) > msfp1 + mfp || fabs(mneutralinoi) > msfp2 + mfp || fabs(mneutralinoi) > fabs(mcharginoj) + mHP ||fabs(mneutralinoi) > fabs(mcharginoj) + mWboson || fabs(mneutralinoi) < fabs(mcharginoj) + mf + mfp || onetothree == false){
    amplitudeW = 0;
  }

  else{
    double GammaW = 0, GammaHpm = 0, Gammagoldstone = 0, Gammasfp1 = 0, Gammasfp2 = 0, Gammasf1 = 0, Gammasf2 = 0, Gammasfp1sf1 = 0, Gammasfp1sf2 = 0, Gammasfp2sf1 = 0, Gammasfp2sf2 = 0, GammaWHpm = 0, GammaWgoldstone = 0, GammaWSfp1 = 0, GammaWSfp2 = 0, GammaWSf1 = 0, GammaWSf2 = 0, GammaHgoldstone = 0, Gammagsfp1 = 0, Gammagsfp2 = 0, GammaHpmsfp1 = 0, GammaHpmsfp2 = 0, Gammagsf1 = 0, Gammagsf2 = 0, GammaHpmsf1 = 0, GammaHpmsf2 = 0, Gammasfpsfp = 0;

    double charneutWcoupL = 0, charneutWcoupR = 0, coupHpmcharneutL = 0, coupHpmcharneutR = 0, coupHpm1charneutL = 0, coupHpm1charneutR = 0, coupHpm2charneutL = 0, coupHpm2charneutR = 0, fd = 0, fu = 0, coupHpm1ffpd = 0, coupHpm1ffpu = 0, coupHpm2ffpd = 0, coupHpm2ffpu = 0;
    fu = g*runmqp/(pow(2,0.5)*sin(beta)*mWboson); ///Just usual yukawa for up type
    fd = g*runmq/(pow(2,0.5)*cos(beta)*mWboson); ///Just usual yukawa for down type
    double ri = 0, rj = 0, rc = 0;
    if (mneutralinoi >= 0) { ri = 1;}
    else if (mneutralinoi < 0) { ri = -1;} ///correction factor for negative masses
    if (mcharginoj >= 0) { rj = 1;}
    else if (mcharginoj < 0) { rj = -1;} ///correction factor for negative masses
    if (norc == 'n') { rc = 1;}
    else if (norc == 'c') { rc = -1;} ///correction factor for if it's chargino -> neutralino fp fbar rather than neutralino -> chargino fpbar f

    if ( jchargino == 1) {
      charneutWcoupL = g*(sin(thetaL2)*mixNeut(ineutralino,2) + cos(thetaL2)*mixNeut(ineutralino,3)/(pow(2,0.5)));
      charneutWcoupR = g*(sin(thetaR2)*mixNeut(ineutralino,2) - cos(thetaR2)*mixNeut(ineutralino,4)/(pow(2,0.5)));
      coupHpmcharneutL = (g*sin(thetaR2)*mixNeut(ineutralino,4) + cos(thetaR2)/(pow(2,0.5))*(gp*mixNeut(ineutralino,1)+g*mixNeut(ineutralino,2)));
      coupHpmcharneutR = (g*sin(thetaL2)*mixNeut(ineutralino,3) - cos(thetaL2)/(pow(2,0.5))*(gp*mixNeut(ineutralino,1)+g*mixNeut(ineutralino,2)));
    }

    else if ( jchargino == 2) {
      charneutWcoupL = g*(cos(thetaL2)*mixNeut(ineutralino,2) - sin(thetaL2)*mixNeut(ineutralino,3)/(pow(2,0.5)));
      charneutWcoupR = g*(cos(thetaR2)*mixNeut(ineutralino,2) + sin(thetaR2)*mixNeut(ineutralino,4)/(pow(2,0.5)));
      coupHpmcharneutL = (g*cos(thetaR2)*mixNeut(ineutralino,4) - sin(thetaR2)/(pow(2,0.5))*(gp*mixNeut(ineutralino,1)+g*mixNeut(ineutralino,2)));
      coupHpmcharneutR = (g*cos(thetaL2)*mixNeut(ineutralino,3) + sin(thetaL2)/(pow(2,0.5))*(gp*mixNeut(ineutralino,1)+g*mixNeut(ineutralino,2)));
    }
    else {
      throw("problem: jchargino must be 1 or 2 in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double AZiu = 0, BZiu = 0, sf1alpha1Ziu = 0, sf1beta1Ziu = 0, sf2alpha1Ziu = 0, sf2beta1Ziu = 0;
    double AZid = 0, BZid = 0, sf1alpha1Zid = 0, sf1beta1Zid = 0, sf2alpha1Zid = 0, sf2beta1Zid = 0;
    double Nc = 0;
    
    if (qorl == 'q') {
      AZiu = g/(pow(2,0.5))*(-mixNeut(ineutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(ineutralino,1));
      BZiu = (4./3)*gp/(pow(2,0.5))*(-mixNeut(ineutralino,1));
      sf1alpha1Ziu = AZiu*cos(thetaqp)*rj*-rc*ri - fu*mixNeut(ineutralino,4)*sin(thetaqp);
      sf1beta1Ziu = rc*fu*mixNeut(ineutralino,4)*cos(thetaqp) - BZiu*sin(thetaqp);
      sf2alpha1Ziu = -ri*fu*mixNeut(ineutralino,4)*cos(thetaqp) + rc*AZiu*sin(thetaqp);
      sf2beta1Ziu = -BZiu*cos(thetaqp)*rj*-rc*ri + fu*mixNeut(ineutralino,4)*sin(thetaqp);

      AZid = g/(pow(2,0.5))*(mixNeut(ineutralino,2)) + gp/(3*pow(2,0.5))*(-mixNeut(ineutralino,1));
      BZid = (2./3)*gp/(pow(2,0.5))*(mixNeut(ineutralino,1));
      sf1alpha1Zid = AZid*cos(thetaq)*rj*-rc*ri - fd*mixNeut(ineutralino,4)*sin(thetaq);
      sf1beta1Zid = fd*mixNeut(ineutralino,3)*cos(thetaq) - ri*BZid*sin(thetaq);
      sf2alpha1Zid = fd*mixNeut(ineutralino,3)*cos(thetaq)*rc - rc*ri*AZid*sin(thetaq);
      sf2beta1Zid = -BZid*cos(thetaq)*rj*-rc*ri + fd*mixNeut(ineutralino,4)*sin(thetaq);
            
      Nc = 3;
    }
    else if (qorl == 'l') {
      AZiu = g/(pow(2,0.5))*(-mixNeut(ineutralino,2)) + gp/(pow(2,0.5))*(mixNeut(ineutralino,1));
      BZiu = 0;
      sf1alpha1Ziu = AZiu*cos(thetaqp)*rj*-rc*ri - fu*mixNeut(ineutralino,4)*sin(thetaqp);
      sf1beta1Ziu = -rc*fu*mixNeut(ineutralino,4)*cos(thetaqp) - BZiu*sin(thetaqp);
      sf2alpha1Ziu = 0; ///No snuR exists so only one sfp contribution
      sf2beta1Ziu = 0; ///No snuR exists so only one sfp contribution
         
      AZid = g/(pow(2,0.5))*(mixNeut(ineutralino,2)) + gp/(pow(2,0.5))*(mixNeut(ineutralino,1));
      BZid = pow(2,0.5)*gp*mixNeut(ineutralino,1);
      sf1alpha1Zid = AZid*cos(thetaq)*rj*-rc*ri - fd*mixNeut(ineutralino,3)*sin(thetaq);
      sf1beta1Zid = fd*mixNeut(ineutralino,3)*cos(thetaq) - ri*BZid*sin(thetaq);
      sf2alpha1Zid = fd*mixNeut(ineutralino,3)*cos(thetaq)*rc - rc*ri*AZid*sin(thetaq);
      sf2beta1Zid = -BZid*cos(thetaq)*rj*-rc*ri + fd*mixNeut(ineutralino,3)*sin(thetaq);

      Nc = 1;
    }
    else {
      throw("problem: qorl must be q or l in neutralinoamplitudedecaycharginoffprimebar");
    }

    ///GammaW
    double intW1 = 0, intW2 = 0, from = 0, to = 0;
    from = fabs(mcharginoj);
    to = 1/(2*fabs(mneutralinoi))*(pow(mneutralinoi,2)+pow(mcharginoj,2)-pow(mf,2)-pow(mfp,2)-2*mf*mfp);
    m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, MWboson = mWboson;
    intW1 = 2*fabs(m1)*dgauss(gneuticharjffpW1dgauss,from,to,accuracy);
    intW2 = 2*fabs(m1)*dgauss(gneuticharjffpW2dgauss,from,to,accuracy);
    GammaW = -8*charneutWcoupL*charneutWcoupR*pow(g,2)/2*fabs(mneutralinoi)*fabs(mcharginoj)*intW2*ri*rj + 2*(pow(charneutWcoupL,2)+pow(charneutWcoupR,2))*pow(g,2)/2*intW1;

    double coupcombo1Hpm1 = 0, coupcombo2Hpm1 = 0, coupcombo3Hpm1 = 0, coupcombo4Hpm1 = 0, int1Wpm = 0, int2Wpm = 0, int3Wpm = 0, int4Wpm = 0;
    double coupcombo1Hpm2 = 0, coupcombo2Hpm2 = 0, coupcombo3Hpm2 = 0, coupcombo4Hpm2 = 0, int1Hpm = 0, int2Hpm = 0, int3Hpm = 0, int4Hpm = 0;
    ///Hpm1 contribution (W+ goldstone):
    coupHpm1charneutL = coupHpmcharneutL*sin(beta);
    coupHpm1charneutR = coupHpmcharneutR*-cos(beta);

    coupHpm1ffpu = fu*sin(beta);
    coupHpm1ffpd = fd*-cos(beta);

    coupcombo1Hpm1 = pow(coupHpm1charneutL,2) + pow(coupHpm1charneutR,2);
    coupcombo2Hpm1 = coupHpm1charneutL*coupHpm1charneutR*ri;
    coupcombo3Hpm1 = pow(coupHpm1ffpu,2) + pow(coupHpm1ffpd,2);
    coupcombo4Hpm1 = coupHpm1ffpu*coupHpm1ffpd;

    m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson;
    int1Wpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm1dgauss,from,to,accuracy);
    int2Wpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm2dgauss,from,to,accuracy);
    int3Wpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm3dgauss,from,to,accuracy);
    int4Wpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm4dgauss,from,to,accuracy);   

    ///Hpm2 contribution (Actual Hpm):
    coupHpm2charneutL = coupHpmcharneutL*cos(beta);
    coupHpm2charneutR = coupHpmcharneutR*sin(beta);
 
    coupHpm2ffpu = fu*cos(beta);
    coupHpm2ffpd = fd*sin(beta);

    coupcombo1Hpm2 = pow(coupHpm2charneutL,2) + pow(coupHpm2charneutR,2);
    coupcombo2Hpm2 = coupHpm2charneutL*coupHpm2charneutR*ri;
    coupcombo3Hpm2 = pow(coupHpm2ffpu,2) + pow(coupHpm2ffpd,2);
    coupcombo4Hpm2 = coupHpm2ffpu*coupHpm2ffpd;

    m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mHP;
    int1Hpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm1dgauss,from,to,accuracy);
    int2Hpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm2dgauss,from,to,accuracy);
    int3Hpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm3dgauss,from,to,accuracy);
    int4Hpm = 2*fabs(m1)*dgauss(gneuticharjffpHpm4dgauss,from,to,accuracy);  
  
    Gammagoldstone = coupcombo1Hpm1*coupcombo3Hpm1*int4Wpm - 4*coupcombo1Hpm1*coupcombo4Hpm1*int3Wpm*mf*mfp + 4*coupcombo2Hpm1*coupcombo3Hpm1*int2Wpm*fabs(mneutralinoi)*fabs(mcharginoj)*rj - 16*coupcombo2Hpm1*coupcombo4Hpm1*int1Wpm*mf*mfp*fabs(mneutralinoi)*fabs(mcharginoj)*rj;

    GammaHpm = coupcombo1Hpm2*coupcombo3Hpm2*int4Hpm - 4*coupcombo1Hpm2*coupcombo4Hpm2*int3Hpm*mf*mfp + 4*coupcombo2Hpm2*coupcombo3Hpm2*int2Hpm*fabs(mneutralinoi)*fabs(mcharginoj)*rj - 16*coupcombo2Hpm2*coupcombo4Hpm2*int1Hpm*mf*mfp*fabs(mneutralinoi)*fabs(mcharginoj)*rj;
 
    ///Sfp Sfp diagonal (Remember fp is u-type fermion)

    double alphasfp1char = 0, betasfp1char = 0, alphasf1char = 0, betasf1char = 0, alphasfp2char = 0, betasfp2char = 0, alphasf2char = 0, betasf2char = 0;

    if (jchargino == 1) {
      alphasfp1char = -g*sin(thetaR2)*cos(thetaqp) + fu*cos(thetaR2)*sin(thetaqp);
      betasfp1char = -fd*cos(thetaL2)*cos(thetaqp)*rc;
      alphasf1char = -g*sin(thetaL2)*cos(thetaq) + fd*cos(thetaL2)*rc*sin(thetaq);
      betasf1char = -fu*cos(thetaR2)*cos(thetaq);
      alphasfp2char = rc*g*sin(thetaR2)*sin(thetaqp) + fu*cos(thetaR2)*-cos(thetaqp);
      betasfp2char = -fd*cos(thetaL2)*sin(thetaqp)*rc;
      alphasf2char = -fd*cos(thetaL2)*cos(thetaq) + g*sin(thetaL2)*sin(thetaq);
      betasf2char = -fu*cos(thetaR2)*sin(thetaq);
    }
    else if (jchargino == 2) {
      alphasfp1char = -g*cos(thetaR2)*cos(thetaqp) - fu*sin(thetaR2)*sin(thetaqp);
      betasfp1char = fd*sin(thetaL2)*cos(thetaqp)*rc;
      alphasf1char = -g*cos(thetaL2)*cos(thetaq) - fd*sin(thetaL2)*rc*sin(thetaq);
      betasf1char = fu*sin(thetaR2)*cos(thetaq);
      alphasfp2char = rc*g*cos(thetaR2)*sin(thetaqp) - fu*sin(thetaR2)*-cos(thetaq);
      betasfp2char = fd*sin(thetaL2)*sin(thetaqp)*rc;
      alphasf2char = fd*sin(thetaL2)*cos(thetaq) + g*cos(thetaL2)*sin(thetaq);
      betasf2char = fu*sin(thetaR2)*sin(thetaq);
    }
    else {
      throw("problem: jchargino must be 1 or 2 in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double coupcombo1sfp1 = 0, coupcombo2sfp1 = 0, coupcombo3sfp1 = 0, coupcombo4sfp1 = 0;
    coupcombo1sfp1 = pow(sf1alpha1Ziu,2) + pow(sf1beta1Ziu,2);
    coupcombo2sfp1 = -sf1alpha1Ziu*sf1beta1Ziu*ri;
    coupcombo3sfp1 = pow(alphasfp1char,2) + pow(betasfp1char,2);
    coupcombo4sfp1 = -alphasfp1char*betasfp1char;

    double Eupper = 0;
    Eupper = 1/(2*fabs(mneutralinoi))*(pow(mneutralinoi,2) + pow(mfp,2) - pow(mf,2) - pow(mcharginoj,2) -2*mf*fabs(mcharginoj));
    double int1sfp1 = 0, int2sfp1 = 0, int3sfp1 = 0, int4sfp1 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = msfp1;
    int1sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm1dgauss,mfp,Eupper,accuracy);
    int2sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm2dgauss,mfp,Eupper,accuracy);
    int3sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm3dgauss,mfp,Eupper,accuracy);
    int4sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm4dgauss,mfp,Eupper,accuracy);

    Gammasfp1 = coupcombo1sfp1*coupcombo3sfp1*int4sfp1 + 4*coupcombo1sfp1*coupcombo4sfp1*-mf*fabs(mcharginoj)*int3sfp1 + 4*coupcombo2sfp1*coupcombo3sfp1*fabs(mneutralinoi)*mfp*int2sfp1 + 16*coupcombo2sfp1*coupcombo4sfp1*fabs(mneutralinoi)*mfp*-mf*fabs(mcharginoj)*int1sfp1;

    double coupcombo1sfp2 = 0, coupcombo2sfp2 = 0, coupcombo3sfp2 = 0, coupcombo4sfp2 = 0;
    coupcombo1sfp2 = pow(sf2alpha1Ziu,2) + pow(sf2beta1Ziu,2);
    coupcombo2sfp2 = sf2alpha1Ziu*sf2beta1Ziu;
    coupcombo3sfp2 = pow(alphasfp2char,2) + pow(betasfp2char,2);
    coupcombo4sfp2 = alphasfp2char*betasfp2char;

    double int1sfp2 = 0, int2sfp2 = 0, int3sfp2 = 0, int4sfp2 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = msfp2;
    int1sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm1dgauss,mfp,Eupper,accuracy);
    int2sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm2dgauss,mfp,Eupper,accuracy);
    int3sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm3dgauss,mfp,Eupper,accuracy);
    int4sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm4dgauss,mfp,Eupper,accuracy);

    Gammasfp2 = coupcombo1sfp2*coupcombo3sfp2*int4sfp2 + 4*coupcombo1sfp2*coupcombo4sfp2*-mf*fabs(mcharginoj)*int3sfp2*rc + 4*coupcombo2sfp2*coupcombo3sfp2*fabs(mneutralinoi)*mfp*int2sfp2*rc + 16*coupcombo2sfp2*coupcombo4sfp2*fabs(mneutralinoi)*mfp*-mf*fabs(mcharginoj)*int1sfp2;

    ///Sf Sf diagonal
    double coupcombo1sf1 = 0, coupcombo2sf1 = 0, coupcombo3sf1 = 0, coupcombo4sf1 = 0;
    coupcombo1sf1 = pow(sf1alpha1Zid,2) + pow(sf1beta1Zid,2);
    coupcombo2sf1 = -ri*sf1alpha1Zid*sf1beta1Zid;
    coupcombo3sf1 = pow(alphasf1char,2) + pow(betasf1char,2);
    coupcombo4sf1 = -alphasf1char*betasf1char*rj;

    double Eupper2 = 0;
    Eupper2 = 1/(2*fabs(mneutralinoi))*(pow(mneutralinoi,2) + pow(mf,2) - pow(mfp,2) - pow(mcharginoj,2) -2*mfp*fabs(mcharginoj));
    double int1sf1 = 0, int2sf1 = 0, int3sf1 = 0, int4sf1 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1;
    int1sf1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm1dgauss,mf,Eupper2,accuracy);
    int2sf1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm2dgauss,mf,Eupper2,accuracy);
    int3sf1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm3dgauss,mf,Eupper2,accuracy);
    int4sf1 = 2*fabs(m1)*dgauss(gneuticharjffpHpm4dgauss,mf,Eupper2,accuracy);

    Gammasf1 = coupcombo1sf1*coupcombo3sf1*int4sf1 + 4*coupcombo1sf1*coupcombo4sf1*-mfp*fabs(mcharginoj)*int3sf1*rc*rj + 4*coupcombo2sf1*coupcombo3sf1*fabs(mneutralinoi)*mf*int2sf1*rc + 16*coupcombo2sf1*coupcombo4sf1*fabs(mneutralinoi)*mf*-mfp*fabs(mcharginoj)*rj*int1sf1;

    double coupcombo1sf2 = 0, coupcombo2sf2 = 0, coupcombo3sf2 = 0, coupcombo4sf2 = 0;
    coupcombo1sf2 = pow(sf2alpha1Zid,2) + pow(sf2beta1Zid,2);
    coupcombo2sf2 = sf2alpha1Zid*sf2beta1Zid;
    coupcombo3sf2 = pow(alphasf2char,2) + pow(betasf2char,2);
    coupcombo4sf2 = alphasf2char*betasf2char*rc;

    double int1sf2 = 0, int2sf2 = 0, int3sf2 = 0, int4sf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf2;
    int1sf2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm1dgauss,mf,Eupper2,accuracy);
    int2sf2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm2dgauss,mf,Eupper2,accuracy);
    int3sf2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm3dgauss,mf,Eupper2,accuracy);
    int4sf2 = 2*fabs(m1)*dgauss(gneuticharjffpHpm4dgauss,mf,Eupper2,accuracy);

    Gammasf2 = coupcombo1sf2*coupcombo3sf2*int4sf2 + 4*coupcombo1sf2*coupcombo4sf2*-mfp*fabs(mcharginoj)*int3sf2*rc + 4*coupcombo2sf2*coupcombo3sf2*fabs(mneutralinoi)*mf*int2sf2*rc + 16*coupcombo2sf2*coupcombo4sf2*fabs(mneutralinoi)*mf*-mfp*fabs(mcharginoj)*int1sf2;

    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1, m6 = msf2;
    ///Sfp t sf u interference
    ///Sfp 1 sf 2
    
    double coupcombo1sfp1sf2 = 0, coupcombo2sfp1sf2 = 0, coupcombo3sfp1sf2 = 0, coupcombo4sfp1sf2 = 0, coupcombo5sfp1sf2 = 0, coupcombo6sfp1sf2 = 0, coupcombo7sfp1sf2 = 0, coupcombo8sfp1sf2 = 0;
    coupcombo1sfp1sf2 = -0.5*ri*(-sf1alpha1Ziu*sf2beta1Zid*betasfp1char*alphasf2char + sf1beta1Ziu*sf2alpha1Zid*alphasfp1char*betasf2char);
    coupcombo2sfp1sf2 = fabs(mneutralinoi)*fabs(mcharginoj)*(ri*sf1alpha1Ziu*sf2alpha1Zid*alphasfp1char*alphasf2char + sf1beta1Ziu*sf2beta1Zid*betasfp1char*betasf2char);
    coupcombo3sfp1sf2 = ri*mf*mfp*(sf1beta1Ziu*sf2alpha1Zid*betasfp1char*alphasf2char - rc*sf1alpha1Ziu*sf2beta1Zid*alphasfp1char*betasf2char);
    coupcombo8sfp1sf2 = ri*2*fabs(mneutralinoi)*fabs(mcharginoj)*mf*mfp*(rc*sf1beta1Ziu*sf2beta1Zid*alphasfp1char*alphasf2char + ri*sf1alpha1Ziu*sf2alpha1Zid*betasfp1char*betasf2char);
    if (norc == 'n') {
    coupcombo4sfp1sf2 = ri*fabs(mneutralinoi)*mf*(sf1alpha1Ziu*sf2alpha1Zid*betasfp1char*alphasf2char - sf1beta1Ziu*sf2beta1Zid*alphasfp1char*betasf2char);
    coupcombo5sfp1sf2 = mfp*fabs(mcharginoj)*(ri*sf1beta1Ziu*sf2alpha1Zid*alphasfp1char*alphasf2char + sf1alpha1Ziu*sf2beta1Zid*betasfp1char*betasf2char)*rj;
    coupcombo6sfp1sf2 = -ri*fabs(mneutralinoi)*mfp*(-sf1beta1Ziu*sf2beta1Zid*betasfp1char*alphasf2char + sf1alpha1Ziu*sf2alpha1Zid*alphasfp1char*betasf2char);
    coupcombo7sfp1sf2 = fabs(mcharginoj)*mf*(ri*sf1alpha1Ziu*sf2beta1Zid*alphasfp1char*alphasf2char + sf1beta1Ziu*sf2alpha1Zid*betasfp1char*betasf2char)*rj;
    }
    else if (norc == 'c') {
      coupcombo4sfp1sf2 = -(fabs(mneutralinoi)*mf*(-rj*alphasfp1char*alphasf2char*sf1beta1Ziu*sf2alpha1Zid + betasfp1char*betasf2char*sf1alpha1Ziu*sf2beta1Zid));
      coupcombo5sfp1sf2 = -(fabs(mcharginoj)*mfp*(alphasf2char*betasfp1char*sf1alpha1Ziu*sf2alpha1Zid - rj*alphasfp1char*betasf2char*sf1beta1Ziu*sf2beta1Zid));
      coupcombo6sfp1sf2 = -(-fabs(mneutralinoi)*mfp*(-betasfp1char*betasf2char*sf1beta1Ziu*sf2alpha1Zid - alphasfp1char*alphasf2char*sf1alpha1Ziu*sf2beta1Zid));
      coupcombo7sfp1sf2 = -(-fabs(mcharginoj)*mf*(-alphasfp1char*betasf2char*sf1alpha1Ziu*sf2alpha1Zid + rj*betasfp1char*alphasf2char*sf1beta1Ziu*sf2beta1Zid));
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1sfp1sf2 = 0, int2sfp1sf2 = 0, int3sfp1sf2 = 0, int4sfp1sf2 = 0, int5sfp1sf2 = 0, int6sfp1sf2 = 0, int7sfp1sf2 = 0, int8sfp1sf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf2;
    int1sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp1sfp1sf2dgauss,mfp,Eupper,accuracy);
    int2sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp2sfp1sf2dgauss,mfp,Eupper,accuracy);
    int3sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp3sfp1sf2dgauss,mfp,Eupper,accuracy);
    int4sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp4sfp1sf2dgauss,mfp,Eupper,accuracy);
    int5sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp5sfp1sf2dgauss,mfp,Eupper,accuracy);
    int6sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp6sfp1sf2dgauss,mfp,Eupper,accuracy);
    int7sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp7sfp1sf2dgauss,mfp,Eupper,accuracy);
    int8sfp1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp8sfp1sf2dgauss,mfp,Eupper,accuracy);

    Gammasfp1sf2 = coupcombo1sfp1sf2*int1sfp1sf2 + coupcombo2sfp1sf2*int2sfp1sf2 + coupcombo3sfp1sf2*int3sfp1sf2 + coupcombo4sfp1sf2*int4sfp1sf2 + coupcombo5sfp1sf2*int5sfp1sf2 + coupcombo6sfp1sf2*int6sfp1sf2 + coupcombo7sfp1sf2*int7sfp1sf2 + coupcombo8sfp1sf2*int8sfp1sf2;

    ///Sfp 1 Sf 1 interference

    double coupcombo1sfp1sf1 = 0, coupcombo2sfp1sf1 = 0, coupcombo3sfp1sf1 = 0, coupcombo4sfp1sf1 = 0, coupcombo5sfp1sf1 = 0, coupcombo6sfp1sf1 = 0, coupcombo7sfp1sf1 = 0, coupcombo8sfp1sf1 = 0;
    coupcombo1sfp1sf1 = -0.5*(ri*sf1alpha1Ziu*sf1beta1Zid*betasfp1char*alphasf1char + sf1beta1Ziu*sf1alpha1Zid*alphasfp1char*betasf1char)*rj;
    coupcombo2sfp1sf1 = -fabs(mneutralinoi)*fabs(mcharginoj)*(sf1alpha1Ziu*sf1alpha1Zid*alphasfp1char*alphasf1char + ri*sf1beta1Ziu*sf1beta1Zid*betasfp1char*betasf1char)*ri*rj;
    coupcombo3sfp1sf1 = -rc*mf*mfp*(sf1beta1Ziu*sf1alpha1Zid*betasfp1char*alphasf1char + ri*sf1alpha1Ziu*sf1beta1Zid*alphasfp1char*betasf1char)*rj;
    coupcombo8sfp1sf1 = -2*rc*fabs(mneutralinoi)*fabs(mcharginoj)*mf*mfp*(ri*sf1beta1Ziu*sf1beta1Zid*alphasfp1char*alphasf1char + sf1alpha1Ziu*sf1alpha1Zid*betasfp1char*betasf1char)*ri*rj;
    if (norc == 'n') {
    coupcombo4sfp1sf1 = fabs(mneutralinoi)*mf*(-sf1alpha1Ziu*sf1alpha1Zid*betasfp1char*alphasf1char - ri*sf1beta1Ziu*sf1beta1Zid*alphasfp1char*betasf1char)*ri;
    coupcombo5sfp1sf1 = -mfp*fabs(mcharginoj)*(sf1beta1Ziu*sf1alpha1Zid*alphasfp1char*alphasf1char + ri*sf1alpha1Ziu*sf1beta1Zid*betasfp1char*betasf1char)*rj;
    coupcombo6sfp1sf1 = fabs(mneutralinoi)*mfp*(-ri*sf1beta1Ziu*sf1beta1Zid*betasfp1char*alphasf1char - sf1alpha1Ziu*sf1alpha1Zid*alphasfp1char*betasf1char)*ri;
    coupcombo7sfp1sf1 = -fabs(mcharginoj)*mf*(ri*sf1alpha1Ziu*sf1beta1Zid*alphasfp1char*alphasf1char + sf1beta1Ziu*sf1alpha1Zid*betasfp1char*betasf1char)*rj;
    }
    else if (norc == 'c') {
      coupcombo4sfp1sf1 = fabs(mneutralinoi)*mf*(alphasfp1char*alphasf1char*sf1beta1Ziu*sf1alpha1Zid + betasfp1char*betasf1char*sf1alpha1Ziu*sf1beta1Zid)*rj;
      coupcombo5sfp1sf1 = -fabs(mcharginoj)*mfp*(alphasf1char*betasfp1char*sf1alpha1Ziu*sf1alpha1Zid + alphasfp1char*betasf1char*sf1beta1Ziu*sf1beta1Zid)*rj;
      coupcombo6sfp1sf1 = fabs(mneutralinoi)*mfp*(-betasfp1char*betasf1char*sf1beta1Ziu*sf1alpha1Zid - alphasfp1char*alphasf1char*sf1alpha1Ziu*sf1beta1Zid)*rj;
      coupcombo7sfp1sf1 = -fabs(mcharginoj)*mf*(-alphasfp1char*betasf1char*sf1alpha1Ziu*sf1alpha1Zid - betasfp1char*alphasf1char*sf1beta1Ziu*sf1beta1Zid)*rj;
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }
    
    double int1sfp1sf1 = 0, int2sfp1sf1 = 0, int3sfp1sf1 = 0, int4sfp1sf1 = 0, int5sfp1sf1 = 0, int6sfp1sf1 = 0, int7sfp1sf1 = 0, int8sfp1sf1 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp1, m6 = msf1;
    int1sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp1sfp1sf2dgauss,mfp,Eupper,accuracy);
    int2sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp2sfp1sf2dgauss,mfp,Eupper,accuracy);
    int3sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp3sfp1sf2dgauss,mfp,Eupper,accuracy);
    int4sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp4sfp1sf2dgauss,mfp,Eupper,accuracy);
    int5sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp5sfp1sf2dgauss,mfp,Eupper,accuracy);
    int6sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp6sfp1sf2dgauss,mfp,Eupper,accuracy);
    int7sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp7sfp1sf2dgauss,mfp,Eupper,accuracy);
    int8sfp1sf1 = 2*fabs(m1)*dgauss(gneuticharjffp8sfp1sf2dgauss,mfp,Eupper,accuracy);

    Gammasfp1sf1 = coupcombo1sfp1sf1*int1sfp1sf1 + coupcombo2sfp1sf1*int2sfp1sf1 + coupcombo3sfp1sf1*int3sfp1sf1 + coupcombo4sfp1sf1*int4sfp1sf1 + coupcombo5sfp1sf1*int5sfp1sf1 + coupcombo6sfp1sf1*int6sfp1sf1 + coupcombo7sfp1sf1*int7sfp1sf1 + coupcombo8sfp1sf1*int8sfp1sf1;

    ///Sfp 2 Sf 2 interference
    
    double coupcombo1sfp2sf2 = 0, coupcombo2sfp2sf2 = 0, coupcombo3sfp2sf2 = 0, coupcombo4sfp2sf2 = 0, coupcombo5sfp2sf2 = 0, coupcombo6sfp2sf2 = 0, coupcombo7sfp2sf2 = 0, coupcombo8sfp2sf2 = 0;
    coupcombo8sfp2sf2 = -2*fabs(mneutralinoi)*fabs(mcharginoj)*mf*mfp*(sf2beta1Ziu*sf2beta1Zid*alphasfp2char*alphasf2char - sf2alpha1Ziu*sf2alpha1Zid*betasfp2char*betasf2char)*ri*rj;

    if (norc == 'n') {
      coupcombo1sfp2sf2 = 0.5*(-sf2alpha1Ziu*sf2beta1Zid*betasfp2char*alphasf2char + ri*sf2beta1Ziu*sf2alpha1Zid*alphasfp2char*betasf2char)*rj;
      coupcombo2sfp2sf2 = fabs(mneutralinoi)*fabs(mcharginoj)*(sf2alpha1Ziu*sf2alpha1Zid*alphasfp2char*alphasf2char - sf2beta1Ziu*sf2beta1Zid*betasfp2char*betasf2char)*rj;
      coupcombo3sfp2sf2 = -mf*mfp*(-ri*sf2beta1Ziu*sf2alpha1Zid*betasfp2char*alphasf2char + sf2alpha1Ziu*sf2beta1Zid*alphasfp2char*betasf2char);
      coupcombo4sfp2sf2 = -fabs(mneutralinoi)*mf*(sf2alpha1Ziu*sf2alpha1Zid*betasfp2char*alphasf2char - ri*sf2beta1Ziu*sf2beta1Zid*alphasfp2char*betasf2char)*rj;
      coupcombo5sfp2sf2 = -mfp*fabs(mcharginoj)*(sf2beta1Ziu*sf2alpha1Zid*alphasfp2char*alphasf2char + ri*rj*sf2alpha1Ziu*sf2beta1Zid*betasfp2char*betasf2char)*rj*ri;
      coupcombo6sfp2sf2 = fabs(mneutralinoi)*mfp*(ri*sf2beta1Ziu*sf2beta1Zid*betasfp2char*alphasf2char - sf2alpha1Ziu*sf2alpha1Zid*alphasfp2char*betasf2char);
      coupcombo7sfp2sf2 = fabs(mcharginoj)*mf*(sf2alpha1Ziu*sf2beta1Zid*alphasfp2char*alphasf2char - sf2beta1Ziu*sf2alpha1Zid*betasfp2char*betasf2char)*rj;
 
    }
    else if (norc == 'c') {
      coupcombo1sfp2sf2 = -0.5*(-rj*sf2alpha1Ziu*sf2beta1Zid*betasfp2char*alphasf2char - sf2beta1Ziu*sf2alpha1Zid*alphasfp2char*betasf2char);
      coupcombo2sfp2sf2 = -rj*fabs(mneutralinoi)*fabs(mcharginoj)*(sf2alpha1Ziu*sf2alpha1Zid*alphasfp2char*alphasf2char - rj*sf2beta1Ziu*sf2beta1Zid*betasfp2char*betasf2char)*ri;
      coupcombo3sfp2sf2 = mf*mfp*(-rj*sf2beta1Ziu*sf2alpha1Zid*betasfp2char*alphasf2char - sf2alpha1Ziu*sf2beta1Zid*alphasfp2char*betasf2char);
      coupcombo4sfp2sf2 = rj*fabs(mneutralinoi)*mf*(alphasfp2char*alphasf2char*sf2beta1Ziu*sf2alpha1Zid + betasfp2char*betasf2char*sf2alpha1Ziu*sf2beta1Zid);
      coupcombo5sfp2sf2 = rj*fabs(mcharginoj)*mfp*(alphasf2char*betasfp2char*sf2alpha1Ziu*sf2alpha1Zid - alphasfp2char*betasf2char*sf2beta1Ziu*sf2beta1Zid)*rj;
      coupcombo6sfp2sf2 = -rj*fabs(mneutralinoi)*mfp*(-betasfp2char*betasf2char*sf2beta1Ziu*sf2alpha1Zid - alphasfp2char*alphasf2char*sf2alpha1Ziu*sf2beta1Zid);
      coupcombo7sfp2sf2 = fabs(mcharginoj)*mf*(-alphasfp2char*betasf2char*sf2alpha1Ziu*sf2alpha1Zid + betasfp2char*alphasf2char*sf2beta1Ziu*sf2beta1Zid);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }
    
    double int1sfp2sf2 = 0, int2sfp2sf2 = 0, int3sfp2sf2 = 0, int4sfp2sf2 = 0, int5sfp2sf2 = 0, int6sfp2sf2 = 0, int7sfp2sf2 = 0, int8sfp2sf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp2, m6 = msf2;
    int1sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp1sfp1sf2dgauss,mfp,Eupper,accuracy);
    int2sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp2sfp1sf2dgauss,mfp,Eupper,accuracy);
    int3sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp3sfp1sf2dgauss,mfp,Eupper,accuracy);
    int4sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp4sfp1sf2dgauss,mfp,Eupper,accuracy);
    int5sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp5sfp1sf2dgauss,mfp,Eupper,accuracy);
    int6sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp6sfp1sf2dgauss,mfp,Eupper,accuracy);
    int7sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp7sfp1sf2dgauss,mfp,Eupper,accuracy);
    int8sfp2sf2 = 2*fabs(m1)*dgauss(gneuticharjffp8sfp1sf2dgauss,mfp,Eupper,accuracy);

    Gammasfp2sf2 = coupcombo1sfp2sf2*int1sfp2sf2 + coupcombo2sfp2sf2*int2sfp2sf2 + coupcombo3sfp2sf2*int3sfp2sf2 + coupcombo4sfp2sf2*int4sfp2sf2 + coupcombo5sfp2sf2*int5sfp2sf2 + coupcombo6sfp2sf2*int6sfp2sf2 + coupcombo7sfp2sf2*int7sfp2sf2 + coupcombo8sfp2sf2*int8sfp2sf2;

    ///Sfp 2 Sf 1 interference
    
    double coupcombo1sfp2sf1 = 0, coupcombo2sfp2sf1 = 0, coupcombo3sfp2sf1 = 0, coupcombo4sfp2sf1 = 0, coupcombo5sfp2sf1 = 0, coupcombo6sfp2sf1 = 0, coupcombo7sfp2sf1 = 0, coupcombo8sfp2sf1 = 0;
    coupcombo8sfp2sf1 = ri*rc*2*fabs(mneutralinoi)*fabs(mcharginoj)*mf*mfp*(sf2beta1Ziu*sf1beta1Zid*alphasfp2char*alphasf1char - sf2alpha1Ziu*sf1alpha1Zid*betasfp2char*betasf1char);
    if (norc == 'n') {
      coupcombo1sfp2sf1 = ri*0.5*(-sf2alpha1Ziu*sf1beta1Zid*betasfp2char*alphasf1char + sf2beta1Ziu*sf1alpha1Zid*alphasfp2char*betasf1char);
      coupcombo2sfp2sf1 = -fabs(mneutralinoi)*fabs(mcharginoj)*(sf2alpha1Ziu*sf1alpha1Zid*alphasfp2char*alphasf1char - sf2beta1Ziu*sf1beta1Zid*betasfp2char*betasf1char);
      coupcombo3sfp2sf1 = ri*mf*mfp*(-sf2beta1Ziu*sf1alpha1Zid*betasfp2char*alphasf1char + sf2alpha1Ziu*sf1beta1Zid*alphasfp2char*betasf1char);
      coupcombo4sfp2sf1 = fabs(mneutralinoi)*mf*(sf2alpha1Ziu*sf1alpha1Zid*betasfp2char*alphasf1char + ri*sf2beta1Ziu*sf1beta1Zid*alphasfp2char*betasf1char);
      coupcombo5sfp2sf1 = ri*mfp*fabs(mcharginoj)*(sf2beta1Ziu*sf1alpha1Zid*alphasfp2char*alphasf1char - sf2alpha1Ziu*sf1beta1Zid*betasfp2char*betasf1char)*rj;
      coupcombo6sfp2sf1 = -ri*fabs(mneutralinoi)*mfp*(sf2beta1Ziu*sf1beta1Zid*betasfp2char*alphasf1char + ri*sf2alpha1Ziu*sf1alpha1Zid*alphasfp2char*betasf1char);
      coupcombo7sfp2sf1 = -ri*fabs(mcharginoj)*mf*(ri*sf2alpha1Ziu*sf1beta1Zid*alphasfp2char*alphasf1char + sf2beta1Ziu*sf1alpha1Zid*betasfp2char*betasf1char)*rj;
    }
    else if (norc == 'c') {
      coupcombo1sfp2sf1 = -0.5*(-sf2alpha1Ziu*sf1beta1Zid*betasfp2char*alphasf1char - sf2beta1Ziu*sf1alpha1Zid*alphasfp2char*betasf1char);
      coupcombo2sfp2sf1 = fabs(mneutralinoi)*fabs(mcharginoj)*(sf2alpha1Ziu*sf1alpha1Zid*alphasfp2char*alphasf1char + sf2beta1Ziu*sf1beta1Zid*betasfp2char*betasf1char)*ri;
      coupcombo3sfp2sf1 = mf*mfp*(-sf2beta1Ziu*sf1alpha1Zid*betasfp2char*alphasf1char - sf2alpha1Ziu*sf1beta1Zid*alphasfp2char*betasf1char);
      coupcombo4sfp2sf1 = -fabs(mneutralinoi)*mf*(alphasfp2char*alphasf1char*sf2beta1Ziu*sf1alpha1Zid + betasfp2char*betasf1char*sf2alpha1Ziu*sf1beta1Zid);
      coupcombo5sfp2sf1 = fabs(mcharginoj)*mfp*(alphasf1char*betasfp2char*sf2alpha1Ziu*sf1alpha1Zid + alphasfp2char*betasf1char*sf2beta1Ziu*sf1beta1Zid);
      coupcombo6sfp2sf1 = -fabs(mneutralinoi)*mfp*(-betasfp2char*betasf1char*sf2beta1Ziu*sf1alpha1Zid - alphasfp2char*alphasf1char*sf2alpha1Ziu*sf1beta1Zid);
      coupcombo7sfp2sf1 = fabs(mcharginoj)*mf*(-alphasfp2char*betasf1char*sf2alpha1Ziu*sf1alpha1Zid - betasfp2char*alphasf1char*sf2beta1Ziu*sf1beta1Zid);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1sfp2sf1 = 0, int2sfp2sf1 = 0, int3sfp2sf1 = 0, int4sfp2sf1 = 0, int5sfp2sf1 = 0, int6sfp2sf1 = 0, int7sfp2sf1 = 0, int8sfp2sf1 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msfp2, m6 = msf1;
    int1sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp1sfp1sf2dgauss,mfp,Eupper,accuracy);
    int2sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp2sfp1sf2dgauss,mfp,Eupper,accuracy);
    int3sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp3sfp1sf2dgauss,mfp,Eupper,accuracy);
    int4sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp4sfp1sf2dgauss,mfp,Eupper,accuracy);
    int5sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp5sfp1sf2dgauss,mfp,Eupper,accuracy);
    int6sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp6sfp1sf2dgauss,mfp,Eupper,accuracy);
    int7sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp7sfp1sf2dgauss,mfp,Eupper,accuracy);
    int8sfp2sf1 = 2*fabs(m1)*dgauss(gneuticharjffp8sfp1sf2dgauss,mfp,Eupper,accuracy);

    Gammasfp2sf1 = coupcombo1sfp2sf1*int1sfp2sf1 + coupcombo2sfp2sf1*int2sfp2sf1 + coupcombo3sfp2sf1*int3sfp2sf1 + coupcombo4sfp2sf1*int4sfp2sf1 + coupcombo5sfp2sf1*int5sfp2sf1 + coupcombo6sfp2sf1*int6sfp2sf1 + coupcombo7sfp2sf1*int7sfp2sf1 + coupcombo8sfp2sf1*int8sfp2sf1;

    ///W-Hpm interference
    double coupcombo1WHpm = 0, coupcombo2WHpm = 0, coupcombo3WHpm = 0, coupcombo4WHpm = 0;
    coupcombo1WHpm = (charneutWcoupR*coupHpm2charneutR + charneutWcoupL*coupHpm2charneutL)*-g/(pow(2,0.5))*coupHpm2ffpu*fabs(mcharginoj)*mfp*rc;
    coupcombo2WHpm = (charneutWcoupL*coupHpm2charneutR + charneutWcoupR*coupHpm2charneutL)*g/(pow(2,0.5))*-coupHpm2ffpd*fabs(mneutralinoi)*-mf*ri*rc*rj;
    coupcombo3WHpm = (charneutWcoupR*coupHpm2charneutR + charneutWcoupL*coupHpm2charneutL)*g/(pow(2,0.5))*-coupHpm2ffpd*fabs(mcharginoj)*-mf*rc;
    coupcombo4WHpm = (charneutWcoupL*coupHpm2charneutR + charneutWcoupR*coupHpm2charneutL)*-g/(pow(2,0.5))*coupHpm2ffpu*fabs(mneutralinoi)*mfp*ri*rc*rj;

    double int1WHpm = 0, int2WHpm = 0, int3WHpm = 0, int4WHpm = 0;
    double Eupper3 = 0;
    Eupper3 = 1/(2*fabs(mneutralinoi))*(pow(mneutralinoi,2) + pow(mcharginoj,2) - pow(mf,2) - pow(mfp,2) - 2*mf*mfp);
    m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHP;
    int1WHpm = 2*fabs(m1)*dgauss(gneuticharjffp1WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);
    int2WHpm = 2*fabs(m1)*dgauss(gneuticharjffp2WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);
    int3WHpm = 2*fabs(m1)*dgauss(gneuticharjffp3WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);
    int4WHpm = 2*fabs(m1)*dgauss(gneuticharjffp4WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);

    GammaWHpm = coupcombo1WHpm*int1WHpm*rc*rj + coupcombo2WHpm*int2WHpm*rc*rj + coupcombo3WHpm*int3WHpm + coupcombo4WHpm*int4WHpm;

    ///W-goldstone interference
    double coupcombo1Wg = 0, coupcombo2Wg = 0, coupcombo3Wg = 0, coupcombo4Wg = 0;
    coupcombo1Wg = (charneutWcoupR*coupHpm1charneutR + charneutWcoupL*coupHpm1charneutL)*-g/(pow(2,0.5))*coupHpm1ffpu*fabs(mcharginoj)*mfp*rc;
    coupcombo2Wg = (charneutWcoupL*coupHpm1charneutR + charneutWcoupR*coupHpm1charneutL)*g/(pow(2,0.5))*-coupHpm1ffpd*fabs(mneutralinoi)*-mf*ri*rc*rj;
    coupcombo3Wg = (charneutWcoupR*coupHpm1charneutR + charneutWcoupL*coupHpm1charneutL)*g/(pow(2,0.5))*-coupHpm1ffpd*fabs(mcharginoj)*-mf*rc;
    coupcombo4Wg = (charneutWcoupL*coupHpm1charneutR + charneutWcoupR*coupHpm1charneutL)*-g/(pow(2,0.5))*coupHpm1ffpu*fabs(mneutralinoi)*mfp*ri*rc*rj;

    double int1Wg = 0, int2Wg = 0, int3Wg = 0, int4Wg = 0;
    Eupper3 = 1/(2*fabs(mneutralinoi))*(pow(mneutralinoi,2) + pow(mcharginoj,2) - pow(mf,2) - pow(mfp,2) - 2*mf*mfp);
    m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mWboson;
    int1Wg = 2*fabs(m1)*dgauss(gneuticharjffp1WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);
    int2Wg = 2*fabs(m1)*dgauss(gneuticharjffp2WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);
    int3Wg = 2*fabs(m1)*dgauss(gneuticharjffp3WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);
    int4Wg = 2*fabs(m1)*dgauss(gneuticharjffp4WHpmdgauss,fabs(mcharginoj), Eupper3, accuracy);

    GammaWgoldstone = coupcombo1Wg*int1Wg + coupcombo2Wg*int2Wg + coupcombo3Wg*int3Wg + coupcombo4Wg*int4Wg;
    
    ///W Sfp 1 interference
    double coupcombo1Wsfp1 = 0, coupcombo2Wsfp1 = 0, coupcombo3Wsfp1 = 0, coupcombo4Wsfp1 = 0, coupcombo5Wsfp1 = 0, coupcombo6Wsfp1 = 0, coupcombo7Wsfp1 = 0, coupcombo8Wsfp1 = 0;
    coupcombo7Wsfp1 = -2*charneutWcoupL*sf1beta1Ziu*g/(pow(2,0.5))*betasfp1char*mfp*mf;
    coupcombo8Wsfp1 = 8*charneutWcoupR*sf1beta1Ziu*g/(pow(2,0.5))*betasfp1char*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj)*ri*rj;
    coupcombo1Wsfp1 = 2*charneutWcoupL*sf1alpha1Ziu*-g/(pow(2,0.5))*betasfp1char*fabs(mneutralinoi)*mf*rj;
    coupcombo2Wsfp1 = rc*2*charneutWcoupL*-sf1beta1Ziu*g/(pow(2,0.5))*alphasfp1char*mfp*fabs(mcharginoj)*rj;
    coupcombo3Wsfp1 = rc*2*charneutWcoupR*sf1alpha1Ziu*g/(pow(2,0.5))*alphasfp1char*ri*rj;
    coupcombo4Wsfp1 = rc*ri*4*charneutWcoupR*sf1beta1Ziu*g/(pow(2,0.5))*alphasfp1char*fabs(mneutralinoi)*mfp;
    coupcombo5Wsfp1 = 4*charneutWcoupR*sf1alpha1Ziu*g/(pow(2,0.5))*betasfp1char*mf*fabs(mcharginoj)*ri;
    coupcombo6Wsfp1 = -rc*2*charneutWcoupL*sf1alpha1Ziu*g/(pow(2,0.5))*alphasfp1char*fabs(mneutralinoi)*fabs(mcharginoj);

    double intW1Sfp1 = 0, intW2Sfp1 = 0, intW3Sfp1 = 0, intW4Sfp1 = 0, intW5Sfp1 = 0, intW6Sfp1 = 0, intW7Sfp1 = 0, intW8Sfp1 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1;
    intW1Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW1Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW2Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW2Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW3Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW3Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW4Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW4Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW5Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW5Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW6Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW6Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW7Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW7Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW8Sfp1 = 2*fabs(m1)*dgauss(gneuticharjffpW8Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);

    GammaWSfp1 = coupcombo1Wsfp1*intW1Sfp1 + coupcombo2Wsfp1*intW2Sfp1 + coupcombo3Wsfp1*intW3Sfp1 + coupcombo4Wsfp1*intW4Sfp1 + coupcombo5Wsfp1*intW5Sfp1 + coupcombo6Wsfp1*intW6Sfp1 + coupcombo7Wsfp1*intW7Sfp1 + coupcombo8Wsfp1*intW8Sfp1;

    /// W Sfp 2 interference
    double coupcombo1Wsfp2 = 0, coupcombo2Wsfp2 = 0, coupcombo3Wsfp2 = 0, coupcombo4Wsfp2 = 0, coupcombo5Wsfp2 = 0, coupcombo6Wsfp2 = 0, coupcombo7Wsfp2 = 0, coupcombo8Wsfp2 = 0;
    coupcombo1Wsfp2 = rc*2*charneutWcoupL*sf2alpha1Ziu*-g/(pow(2,0.5))*betasfp2char*fabs(mneutralinoi)*-mf*rj;
    coupcombo2Wsfp2 = -ri*2*charneutWcoupL*-sf2beta1Ziu*g/(pow(2,0.5))*alphasfp2char*mfp*fabs(mcharginoj)*rj;
    coupcombo3Wsfp2 = 2*charneutWcoupR*sf2alpha1Ziu*g/(pow(2,0.5))*alphasfp2char*ri;
    coupcombo4Wsfp2 = -4*charneutWcoupR*sf2beta1Ziu*g/(pow(2,0.5))*alphasfp2char*fabs(mneutralinoi)*mfp;
    coupcombo5Wsfp2 = -rc*4*charneutWcoupR*sf2alpha1Ziu*g/(pow(2,0.5))*betasfp2char*mf*fabs(mcharginoj)*ri;
    coupcombo6Wsfp2 = -2*charneutWcoupL*sf2alpha1Ziu*g/(pow(2,0.5))*alphasfp2char*fabs(mneutralinoi)*fabs(mcharginoj)*rj;
    coupcombo7Wsfp2 = 2*charneutWcoupL*sf2beta1Ziu*g/(pow(2,0.5))*betasfp2char*mfp*mf*rj*-ri*rc;
    coupcombo8Wsfp2 = 8*charneutWcoupR*sf2beta1Ziu*g/(pow(2,0.5))*betasfp2char*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj)*rc;

    double intW1Sfp2 = 0, intW2Sfp2 = 0, intW3Sfp2 = 0, intW4Sfp2 = 0, intW5Sfp2 = 0, intW6Sfp2 = 0, intW7Sfp2 = 0, intW8Sfp2 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp2;
    intW1Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW1Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW2Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW2Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW3Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW3Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW4Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW4Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW5Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW5Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW6Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW6Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW7Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW7Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW8Sfp2 = 2*fabs(m1)*dgauss(gneuticharjffpW8Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);

    GammaWSfp2 = coupcombo1Wsfp2*intW1Sfp2 + coupcombo2Wsfp2*intW2Sfp2 + coupcombo3Wsfp2*intW3Sfp2 + coupcombo4Wsfp2*intW4Sfp2 + coupcombo5Wsfp2*intW5Sfp2 + coupcombo6Wsfp2*intW6Sfp2 + coupcombo7Wsfp2*intW7Sfp2 + coupcombo8Wsfp2*intW8Sfp2;

    ///W Sf1 interference
    double coupcombo1Wsf1 = 0, coupcombo2Wsf1 = 0, coupcombo3Wsf1 = 0, coupcombo4Wsf1 = 0, coupcombo5Wsf1 = 0, coupcombo6Wsf1 = 0, coupcombo7Wsf1 = 0, coupcombo8Wsf1 = 0;

    coupcombo6Wsf1 = 2*charneutWcoupR*sf1alpha1Zid*g/(pow(2,0.5))*alphasf1char*fabs(mneutralinoi)*fabs(mcharginoj)*-rc;
    coupcombo7Wsf1 = -2*charneutWcoupR*sf1beta1Zid*g/(pow(2,0.5))*betasf1char*mf*mfp;
    coupcombo8Wsf1 = -8*charneutWcoupL*sf1beta1Zid*g/(pow(2,0.5))*betasf1char*fabs(mneutralinoi)*mf*mfp*fabs(mcharginoj)*rj*-ri;
    if (norc == 'n') {
      coupcombo1Wsf1 = -2*charneutWcoupR*sf1alpha1Zid*-g/(pow(2,0.5))*betasf1char*fabs(mneutralinoi)*-mfp;
      coupcombo2Wsf1 = 2*charneutWcoupR*-sf1beta1Zid*g/(pow(2,0.5))*alphasf1char*mf*fabs(mcharginoj)*rj;
      coupcombo3Wsf1 = 2*charneutWcoupR*sf1alpha1Zid*g/(pow(2,0.5))*alphasf1char;
      coupcombo4Wsf1 = ri*4*charneutWcoupL*sf1beta1Zid*g/(pow(2,0.5))*alphasf1char*fabs(mneutralinoi)*mf;
      coupcombo5Wsf1 = ri*4*charneutWcoupL*sf1alpha1Zid*g/(pow(2,0.5))*betasf1char*mfp*fabs(mcharginoj)*rj;
    }
    else if (norc == 'c') {
      coupcombo1Wsf1 = 2*charneutWcoupR*alphasf1char*-g/pow(2,0.5)*sf1beta1Zid*fabs(mneutralinoi)*-mfp*ri;
      coupcombo2Wsf1 = 2*charneutWcoupR*betasf1char*-g/pow(2,0.5)*sf1alpha1Zid*mf*fabs(mcharginoj);
      coupcombo3Wsf1 = 2*charneutWcoupL*alphasf1char*-g/pow(2,0.5)*sf1alpha1Zid*ri*rj;
      coupcombo4Wsf1 = -4*charneutWcoupL*betasf1char*-g/pow(2,0.5)*sf1alpha1Zid*fabs(mneutralinoi)*mf*ri*rj;
      coupcombo5Wsf1 = -4*charneutWcoupL*alphasf1char*g/pow(2,0.5)*sf1beta1Zid*mfp*fabs(mcharginoj)*rj;
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double intW1Sf1 = 0, intW2Sf1 = 0, intW3Sf1 = 0, intW4Sf1 = 0, intW5Sf1 = 0, intW6Sf1 = 0, intW7Sf1 = 0, intW8Sf1 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mfp, m4 = mcharginoj, m5 = mWboson, m6 = msf1;
    intW1Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW1Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW2Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW2Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW3Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW3Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW4Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW4Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW5Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW5Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW6Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW6Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW7Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW7Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW8Sf1 = 2*fabs(m1)*dgauss(gneuticharjffpW8Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);

    GammaWSf1 = coupcombo1Wsf1*intW1Sf1 + coupcombo2Wsf1*intW2Sf1 + coupcombo3Wsf1*intW3Sf1 + coupcombo4Wsf1*intW4Sf1 + coupcombo5Wsf1*intW5Sf1 + coupcombo6Wsf1*intW6Sf1 + coupcombo7Wsf1*intW7Sf1 + coupcombo8Wsf1*intW8Sf1;

    ///W Sf2 interference
    double coupcombo1Wsf2 = 0, coupcombo2Wsf2 = 0, coupcombo3Wsf2 = 0, coupcombo4Wsf2 = 0, coupcombo5Wsf2 = 0, coupcombo6Wsf2 = 0, coupcombo7Wsf2 = 0, coupcombo8Wsf2 = 0;
    coupcombo6Wsf2 = 2*charneutWcoupR*sf2alpha1Zid*g/(pow(2,0.5))*alphasf2char*fabs(mneutralinoi)*fabs(mcharginoj)*rj*rc;
    coupcombo7Wsf2 = -2*charneutWcoupR*sf2beta1Zid*g/(pow(2,0.5))*betasf2char*mf*mfp*rc;
    coupcombo8Wsf2 = 8*charneutWcoupL*sf2beta1Zid*g/(pow(2,0.5))*betasf2char*fabs(mneutralinoi)*mf*mfp*fabs(mcharginoj)*rj*rc*ri;
    if (norc == 'n') {
      coupcombo1Wsf2 = -2*charneutWcoupR*sf2alpha1Zid*-g/(pow(2,0.5))*betasf2char*fabs(mneutralinoi)*-mfp;
      coupcombo2Wsf2 = -2*charneutWcoupR*-sf2beta1Zid*g/(pow(2,0.5))*alphasf2char*mf*fabs(mcharginoj)*rj;
      coupcombo3Wsf2 = -2*charneutWcoupR*sf2alpha1Zid*g/(pow(2,0.5))*alphasf2char;
      coupcombo4Wsf2 = -4*charneutWcoupL*sf2beta1Zid*g/(pow(2,0.5))*alphasf2char*fabs(mneutralinoi)*mf*ri;
      coupcombo5Wsf2 = 4*charneutWcoupL*sf2alpha1Zid*g/(pow(2,0.5))*betasf2char*mfp*fabs(mcharginoj)*rj*ri;
    }
    else if (norc == 'c') {
      coupcombo1Wsf2 = 2*charneutWcoupR*alphasf2char*-g/pow(2,0.5)*sf2beta1Zid*fabs(mneutralinoi)*mfp*ri*rj*rc;
      coupcombo2Wsf2 = 2*charneutWcoupR*betasf2char*g/pow(2,0.5)*sf2alpha1Zid*mf*fabs(mcharginoj)*rc;
      coupcombo3Wsf2 = -2*charneutWcoupL*alphasf2char*g/pow(2,0.5)*sf2alpha1Zid*ri*rc;
      coupcombo4Wsf2 = -4*charneutWcoupL*betasf2char*g/pow(2,0.5)*sf2alpha1Zid*fabs(mneutralinoi)*mf*ri*rj*rc;
      coupcombo5Wsf2 = 4*charneutWcoupL*alphasf2char*g/pow(2,0.5)*sf2beta1Zid*mfp*fabs(mcharginoj)*rc;
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double intW1Sf2 = 0, intW2Sf2 = 0, intW3Sf2 = 0, intW4Sf2 = 0, intW5Sf2 = 0, intW6Sf2 = 0, intW7Sf2 = 0, intW8Sf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mfp, m4 = mcharginoj, m5 = mWboson, m6 = msf2;
    intW1Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW1Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW2Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW2Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW3Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW3Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW4Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW4Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW5Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW5Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW6Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW6Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW7Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW7Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    intW8Sf2 = 2*fabs(m1)*dgauss(gneuticharjffpW8Sfpdgauss,fabs(mcharginoj),Eupper3,accuracy);

    GammaWSf2 = coupcombo1Wsf2*intW1Sf2 + coupcombo2Wsf2*intW2Sf2 + coupcombo3Wsf2*intW3Sf2 + coupcombo4Wsf2*intW4Sf2 + coupcombo5Wsf2*intW5Sf2 + coupcombo6Wsf2*intW6Sf2 + coupcombo7Wsf2*intW7Sf2 + coupcombo8Wsf2*intW8Sf2;

    ///H+ goldstone interference
    double coupcombo1Hg = 0, coupcombo2Hg = 0, coupcombo3Hg = 0, coupcombo4Hg = 0;
    coupcombo1Hg = coupHpm1charneutL*coupHpm2charneutL + coupHpm1charneutR*coupHpm2charneutR;
    coupcombo2Hg = (coupHpm1charneutR*coupHpm2charneutL + coupHpm1charneutL*coupHpm2charneutR)*ri*rj;
    coupcombo3Hg = coupHpm1ffpu*coupHpm2ffpu + coupHpm1ffpd*coupHpm2ffpd;
    coupcombo4Hg = coupHpm1ffpd*coupHpm2ffpu + coupHpm1ffpu*coupHpm2ffpd;

    double int1Hg = 0, int2Hg = 0, int3Hg = 0, int4Hg = 0;
    m1 = mneutralinoi, m2 = mcharginoj, m3 = mf, m4 = mfp, m5 = mWboson, m6 = mHP;
    int1Hg = 2*fabs(m1)*dgauss(gneuticharjffpHg1dgauss,fabs(mcharginoj),Eupper3,accuracy);
    int2Hg = 2*fabs(m1)*dgauss(gneuticharjffpHg2dgauss,fabs(mcharginoj),Eupper3,accuracy);
    int3Hg = 2*fabs(m1)*dgauss(gneuticharjffpHg3dgauss,fabs(mcharginoj),Eupper3,accuracy);
    int4Hg = 2*fabs(m1)*dgauss(gneuticharjffpHg4dgauss,fabs(mcharginoj),Eupper3,accuracy);

    GammaHgoldstone = coupcombo1Hg*coupcombo3Hg*int4Hg - 2*coupcombo1Hg*coupcombo4Hg*mf*mfp*int3Hg + 2*coupcombo2Hg*coupcombo3Hg*fabs(mneutralinoi)*fabs(mcharginoj)*int2Hg - 4*coupcombo2Hg*coupcombo4Hg*fabs(mneutralinoi)*fabs(mcharginoj)*mf*mfp*int1Hg*rj;
    
    ///goldstone - sfp1 interference
    double coupcombo1gsfp1 = 0, coupcombo2gsfp1 = 0, coupcombo3gsfp1 = 0, coupcombo4gsfp1 = 0, coupcombo5gsfp1 = 0, coupcombo6gsfp1 = 0, coupcombo7gsfp1 = 0, coupcombo8gsfp1 = 0; 
    if (norc == 'n') {
      coupcombo1gsfp1 = 0.5*(coupHpm1charneutR*sf1alpha1Ziu*coupHpm1ffpd*betasfp1char + coupHpm1charneutL*sf1beta1Ziu*coupHpm1ffpu*alphasfp1char);
      coupcombo2gsfp1 = (coupHpm1charneutR*sf1beta1Ziu*coupHpm1ffpu*betasfp1char + coupHpm1charneutL*sf1alpha1Ziu*coupHpm1ffpd*alphasfp1char)*fabs(mneutralinoi)*-mf;
      coupcombo3gsfp1 = (coupHpm1charneutL*-sf1beta1Ziu*coupHpm1ffpd*betasfp1char - coupHpm1charneutR*sf1alpha1Ziu*coupHpm1ffpu*alphasfp1char)*mfp*fabs(mcharginoj)*-ri;
      coupcombo4gsfp1 = (coupHpm1charneutR*-sf1beta1Ziu*coupHpm1ffpd*betasfp1char + coupHpm1charneutL*sf1alpha1Ziu*coupHpm1ffpu*-alphasfp1char)*fabs(mneutralinoi)*-mfp;
      coupcombo5gsfp1 = -(-coupHpm1charneutL*sf1beta1Ziu*coupHpm1ffpu*betasfp1char + ri*coupHpm1charneutR*sf1alpha1Ziu*coupHpm1ffpd*alphasfp1char)*mf*fabs(mcharginoj);
      coupcombo6gsfp1 = ri*(coupHpm1charneutL*sf1alpha1Ziu*coupHpm1ffpd*betasfp1char + coupHpm1charneutR*sf1beta1Ziu*coupHpm1ffpu*alphasfp1char)*fabs(mneutralinoi)*fabs(mcharginoj);
      coupcombo7gsfp1 = -(coupHpm1charneutR*sf1alpha1Ziu*coupHpm1ffpu*betasfp1char + coupHpm1charneutL*sf1beta1Ziu*coupHpm1ffpd*alphasfp1char)*mfp*mf;
      coupcombo8gsfp1 = 2*(coupHpm1charneutL*sf1alpha1Ziu*coupHpm1ffpu*betasfp1char - ri*coupHpm1charneutR*sf1beta1Ziu*coupHpm1ffpd*alphasfp1char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj);
    }
    else if (norc == 'c') {
      coupcombo1gsfp1 = -0.5*(coupHpm1charneutL*betasfp1char*coupHpm1ffpu*sf1alpha1Ziu + rj*coupHpm1charneutR*alphasfp1char*coupHpm1ffpd*sf1beta1Ziu);
      coupcombo2gsfp1 = (coupHpm1charneutL*alphasfp1char*coupHpm1ffpd*sf1alpha1Ziu + rj*coupHpm1charneutR*betasfp1char*coupHpm1ffpu*sf1beta1Ziu)*fabs(mneutralinoi)*mfp;
      coupcombo3gsfp1 = -(coupHpm1charneutR*alphasfp1char*coupHpm1ffpu*sf1alpha1Ziu + rj*coupHpm1charneutL*betasfp1char*coupHpm1ffpd*sf1beta1Ziu)*mf*fabs(mcharginoj)*rj;
      coupcombo4gsfp1 = -(coupHpm1charneutL*alphasfp1char*coupHpm1ffpu*sf1alpha1Ziu + rj*coupHpm1charneutR*betasfp1char*coupHpm1ffpd*sf1beta1Ziu)*fabs(mneutralinoi)*mf;
      coupcombo5gsfp1 = (rj*coupHpm1charneutR*alphasfp1char*coupHpm1ffpd*sf1alpha1Ziu + coupHpm1charneutL*betasfp1char*coupHpm1ffpu*sf1beta1Ziu)*mfp*fabs(mcharginoj);
      coupcombo6gsfp1 = -(rj*coupHpm1charneutR*betasfp1char*coupHpm1ffpu*sf1alpha1Ziu + coupHpm1charneutL*alphasfp1char*coupHpm1ffpd*sf1beta1Ziu)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7gsfp1 = (rj*coupHpm1charneutL*betasfp1char*coupHpm1ffpd*sf1alpha1Ziu + coupHpm1charneutR*alphasfp1char*coupHpm1ffpu*sf1beta1Ziu)*mf*mfp*rj;
      coupcombo8gsfp1 = 2*(rj*coupHpm1charneutR*betasfp1char*coupHpm1ffpd*sf1alpha1Ziu + coupHpm1charneutL*alphasfp1char*coupHpm1ffpu*sf1beta1Ziu)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1gsfp1 = 0, int2gsfp1 = 0, int3gsfp1 = 0, int4gsfp1 = 0, int5gsfp1 = 0, int6gsfp1 = 0, int7gsfp1 = 0, int8gsfp1 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp1;
    if (norc == 'n') {
      int1gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') { ///swap which integral goes with which couplingcombo
      int1gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    Gammagsfp1 = coupcombo1gsfp1*int1gsfp1 + coupcombo2gsfp1*int2gsfp1 + coupcombo3gsfp1*int3gsfp1 + coupcombo4gsfp1*int4gsfp1 + coupcombo5gsfp1*int5gsfp1 + coupcombo6gsfp1*int6gsfp1 + coupcombo7gsfp1*int7gsfp1 + coupcombo8gsfp1*int8gsfp1;

    ///goldstone - sfp2 interference
    double coupcombo1gsfp2 = 0, coupcombo2gsfp2 = 0, coupcombo3gsfp2 = 0, coupcombo4gsfp2 = 0, coupcombo5gsfp2 = 0, coupcombo6gsfp2 = 0, coupcombo7gsfp2 = 0, coupcombo8gsfp2 = 0; 
    if (norc == 'n') {
      coupcombo1gsfp2 = -0.5*(ri*coupHpm1charneutR*sf2alpha1Ziu*coupHpm1ffpd*-betasfp2char + coupHpm1charneutL*sf2beta1Ziu*coupHpm1ffpu*alphasfp2char);
      coupcombo2gsfp2 = -ri*(coupHpm1charneutR*sf2beta1Ziu*coupHpm1ffpu*-betasfp2char + coupHpm1charneutL*sf2alpha1Ziu*coupHpm1ffpd*alphasfp2char)*fabs(mneutralinoi)*mf;
      coupcombo3gsfp2 = -(coupHpm1charneutL*-sf2beta1Ziu*coupHpm1ffpd*-betasfp2char - coupHpm1charneutR*sf2alpha1Ziu*coupHpm1ffpu*alphasfp2char)*mfp*fabs(mcharginoj)*rj;
      coupcombo4gsfp2 = -(coupHpm1charneutR*-sf2beta1Ziu*coupHpm1ffpd*-betasfp2char + ri*coupHpm1charneutL*sf2alpha1Ziu*coupHpm1ffpu*-alphasfp2char)*fabs(mneutralinoi)*mfp;
      coupcombo5gsfp2 = -(coupHpm1charneutL*sf2beta1Ziu*coupHpm1ffpu*-betasfp2char - coupHpm1charneutR*sf2alpha1Ziu*coupHpm1ffpd*alphasfp2char)*mf*fabs(mcharginoj)*rj;
      coupcombo6gsfp2 = -(coupHpm1charneutL*sf2alpha1Ziu*coupHpm1ffpd*-betasfp2char + ri*coupHpm1charneutR*sf2beta1Ziu*coupHpm1ffpu*alphasfp2char)*fabs(mneutralinoi)*fabs(mcharginoj);
      coupcombo7gsfp2 = (ri*coupHpm1charneutR*sf2alpha1Ziu*coupHpm1ffpu*-betasfp2char + coupHpm1charneutL*sf2beta1Ziu*coupHpm1ffpd*alphasfp2char)*mfp*mf;
      coupcombo8gsfp2 = 2*(coupHpm1charneutL*sf2alpha1Ziu*coupHpm1ffpu*-betasfp2char + ri*coupHpm1charneutR*sf2beta1Ziu*coupHpm1ffpd*alphasfp2char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj);
    }
    else if (norc == 'c') {
      coupcombo1gsfp2 = 0.5*(coupHpm1charneutL*betasfp2char*coupHpm1ffpu*sf2alpha1Ziu*rj + coupHpm1charneutR*alphasfp2char*coupHpm1ffpd*sf2beta1Ziu);
      coupcombo2gsfp2 = -(coupHpm1charneutL*alphasfp2char*coupHpm1ffpd*sf2alpha1Ziu + rj*coupHpm1charneutR*betasfp2char*coupHpm1ffpu*sf2beta1Ziu)*fabs(mneutralinoi)*mfp*rj;
      coupcombo3gsfp2 = (coupHpm1charneutR*alphasfp2char*coupHpm1ffpu*sf2alpha1Ziu + rj*coupHpm1charneutL*betasfp2char*coupHpm1ffpd*sf2beta1Ziu)*mf*fabs(mcharginoj);
      coupcombo4gsfp2 = (coupHpm1charneutL*alphasfp2char*coupHpm1ffpu*sf2alpha1Ziu + rj*coupHpm1charneutR*betasfp2char*coupHpm1ffpd*sf2beta1Ziu)*fabs(mneutralinoi)*mf*rj;
      coupcombo5gsfp2 = -(coupHpm1charneutR*alphasfp2char*coupHpm1ffpd*sf2alpha1Ziu + rj*coupHpm1charneutL*betasfp2char*coupHpm1ffpu*sf2beta1Ziu)*mfp*fabs(mcharginoj);
      coupcombo6gsfp2 = (rj*coupHpm1charneutR*betasfp2char*coupHpm1ffpu*sf2alpha1Ziu + coupHpm1charneutL*alphasfp2char*coupHpm1ffpd*sf2beta1Ziu)*fabs(mcharginoj)*fabs(mneutralinoi)*rj;
      coupcombo7gsfp2 = -(rj*coupHpm1charneutL*betasfp2char*coupHpm1ffpd*sf2alpha1Ziu + coupHpm1charneutR*alphasfp2char*coupHpm1ffpu*sf2beta1Ziu)*mf*mfp;
      coupcombo8gsfp2 = -2*(rj*coupHpm1charneutR*betasfp2char*coupHpm1ffpd*sf2alpha1Ziu + coupHpm1charneutL*alphasfp2char*coupHpm1ffpu*sf2beta1Ziu)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi)*rj;
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1gsfp2 = 0, int2gsfp2 = 0, int3gsfp2 = 0, int4gsfp2 = 0, int5gsfp2 = 0, int6gsfp2 = 0, int7gsfp2 = 0, int8gsfp2 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mWboson, m6 = msfp2;
    if (norc == 'n') {
      int1gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') {
      int1gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    Gammagsfp2 = coupcombo1gsfp2*int1gsfp2 + coupcombo2gsfp2*int2gsfp2 + coupcombo3gsfp2*int3gsfp2 + coupcombo4gsfp2*int4gsfp2 + coupcombo5gsfp2*int5gsfp2 + coupcombo6gsfp2*int6gsfp2 + coupcombo7gsfp2*int7gsfp2 + coupcombo8gsfp2*int8gsfp2;

    ///H+ - sfp1 interference
    double coupcombo1Hpmsfp1 = 0, coupcombo2Hpmsfp1 = 0, coupcombo3Hpmsfp1 = 0, coupcombo4Hpmsfp1 = 0, coupcombo5Hpmsfp1 = 0, coupcombo6Hpmsfp1 = 0, coupcombo7Hpmsfp1 = 0, coupcombo8Hpmsfp1 = 0; 
    if (norc == 'n') {
      coupcombo1Hpmsfp1 = 0.5*(coupHpm2charneutR*sf1alpha1Ziu*coupHpm2ffpd*betasfp1char - ri*coupHpm2charneutL*sf1beta1Ziu*coupHpm2ffpu*alphasfp1char)*-ri;
      coupcombo2Hpmsfp1 = (coupHpm2charneutR*sf1beta1Ziu*coupHpm2ffpu*betasfp1char + coupHpm2charneutL*sf1alpha1Ziu*coupHpm2ffpd*alphasfp1char)*fabs(mneutralinoi)*-mf;
      coupcombo3Hpmsfp1 = (coupHpm2charneutL*-sf1beta1Ziu*coupHpm2ffpd*betasfp1char - coupHpm2charneutR*sf1alpha1Ziu*coupHpm2ffpu*alphasfp1char)*mfp*fabs(mcharginoj)*-ri;
      coupcombo4Hpmsfp1 = (-ri*coupHpm2charneutR*-sf1beta1Ziu*coupHpm2ffpd*betasfp1char + coupHpm2charneutL*sf1alpha1Ziu*coupHpm2ffpu*-alphasfp1char)*fabs(mneutralinoi)*-mfp;
      coupcombo5Hpmsfp1 = (coupHpm2charneutL*sf1beta1Ziu*coupHpm2ffpu*betasfp1char + coupHpm2charneutR*sf1alpha1Ziu*coupHpm2ffpd*alphasfp1char)*mf*fabs(mcharginoj)*-ri;
      coupcombo6Hpmsfp1 = ri*(coupHpm2charneutL*sf1alpha1Ziu*coupHpm2ffpd*betasfp1char + coupHpm2charneutR*sf1beta1Ziu*coupHpm2ffpu*alphasfp1char)*fabs(mneutralinoi)*fabs(mcharginoj);
      coupcombo7Hpmsfp1 = -(coupHpm2charneutR*sf1alpha1Ziu*coupHpm2ffpu*betasfp1char + coupHpm2charneutL*sf1beta1Ziu*coupHpm2ffpd*alphasfp1char)*mfp*mf;
      coupcombo8Hpmsfp1 = -2*ri*(coupHpm2charneutL*sf1alpha1Ziu*coupHpm2ffpu*betasfp1char + coupHpm2charneutR*sf1beta1Ziu*coupHpm2ffpd*alphasfp1char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj);
    }
    else if (norc == 'c') {
      coupcombo1Hpmsfp1 = rj*0.5*(coupHpm2charneutL*betasfp1char*coupHpm2ffpu*sf1alpha1Ziu + rj*coupHpm2charneutR*alphasfp1char*coupHpm2ffpd*sf1beta1Ziu);
      coupcombo2Hpmsfp1 = (coupHpm2charneutL*alphasfp1char*coupHpm2ffpd*sf1alpha1Ziu + rj*coupHpm2charneutR*betasfp1char*coupHpm2ffpu*sf1beta1Ziu)*fabs(mneutralinoi)*mfp;
      coupcombo3Hpmsfp1 = -(rj*coupHpm2charneutR*alphasfp1char*coupHpm2ffpu*sf1alpha1Ziu + coupHpm2charneutL*betasfp1char*coupHpm2ffpd*sf1beta1Ziu)*mf*fabs(mcharginoj);
      coupcombo4Hpmsfp1 = -(coupHpm2charneutL*alphasfp1char*coupHpm2ffpu*sf1alpha1Ziu + rj*coupHpm2charneutR*betasfp1char*coupHpm2ffpd*sf1beta1Ziu)*fabs(mneutralinoi)*mf;
      coupcombo5Hpmsfp1 = (rj*coupHpm2charneutR*alphasfp1char*coupHpm2ffpd*sf1alpha1Ziu + coupHpm2charneutL*betasfp1char*coupHpm2ffpu*sf1beta1Ziu)*mfp*fabs(mcharginoj);
      coupcombo6Hpmsfp1 = (coupHpm2charneutR*betasfp1char*coupHpm2ffpu*sf1alpha1Ziu + rj*coupHpm2charneutL*alphasfp1char*coupHpm2ffpd*sf1beta1Ziu)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7Hpmsfp1 = -(rj*coupHpm2charneutL*betasfp1char*coupHpm2ffpd*sf1alpha1Ziu + coupHpm2charneutR*alphasfp1char*coupHpm2ffpu*sf1beta1Ziu)*mf*mfp;
      coupcombo8Hpmsfp1 = -2*(coupHpm2charneutR*betasfp1char*coupHpm2ffpd*sf1alpha1Ziu + rj*coupHpm2charneutL*alphasfp1char*coupHpm2ffpu*sf1beta1Ziu)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1Hpmsfp1 = 0, int2Hpmsfp1 = 0, int3Hpmsfp1 = 0, int4Hpmsfp1 = 0, int5Hpmsfp1 = 0, int6Hpmsfp1 = 0, int7Hpmsfp1 = 0, int8Hpmsfp1 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mHP, m6 = msfp1;
    if (norc == 'n') {
      int1Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') {
      int1Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsfp1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    GammaHpmsfp1 = coupcombo1Hpmsfp1*int1Hpmsfp1 + coupcombo2Hpmsfp1*int2Hpmsfp1 + coupcombo3Hpmsfp1*int3Hpmsfp1 + coupcombo4Hpmsfp1*int4Hpmsfp1 + coupcombo5Hpmsfp1*int5Hpmsfp1 + coupcombo6Hpmsfp1*int6Hpmsfp1 + coupcombo7Hpmsfp1*int7Hpmsfp1 + coupcombo8Hpmsfp1*int8Hpmsfp1;

    ///H+ - sfp2 interference
    double coupcombo1Hpmsfp2 = 0, coupcombo2Hpmsfp2 = 0, coupcombo3Hpmsfp2 = 0, coupcombo4Hpmsfp2 = 0, coupcombo5Hpmsfp2 = 0, coupcombo6Hpmsfp2 = 0, coupcombo7Hpmsfp2 = 0, coupcombo8Hpmsfp2 = 0; 
    if (norc == 'n') {
      coupcombo1Hpmsfp2 = -0.5*(-ri*coupHpm2charneutR*sf2alpha1Ziu*coupHpm2ffpd*-betasfp2char + coupHpm2charneutL*sf2beta1Ziu*coupHpm2ffpu*alphasfp2char);
      coupcombo2Hpmsfp2 = ri*(coupHpm2charneutR*sf2beta1Ziu*coupHpm2ffpu*-betasfp2char + coupHpm2charneutL*sf2alpha1Ziu*coupHpm2ffpd*alphasfp2char)*fabs(mneutralinoi)*-mf;
      coupcombo3Hpmsfp2 = -ri*(coupHpm2charneutL*-sf2beta1Ziu*coupHpm2ffpd*-betasfp2char - ri*coupHpm2charneutR*sf2alpha1Ziu*coupHpm2ffpu*alphasfp2char)*mfp*fabs(mcharginoj);
      coupcombo4Hpmsfp2 = -(ri*coupHpm2charneutR*-sf2beta1Ziu*coupHpm2ffpd*-betasfp2char - coupHpm2charneutL*sf2alpha1Ziu*coupHpm2ffpu*-alphasfp2char)*fabs(mneutralinoi)*mfp;
      coupcombo5Hpmsfp2 = -(coupHpm2charneutL*sf2beta1Ziu*coupHpm2ffpu*-betasfp2char + coupHpm2charneutR*sf2alpha1Ziu*coupHpm2ffpd*alphasfp2char)*mf*fabs(mcharginoj)*rj;
      coupcombo6Hpmsfp2 = -(coupHpm2charneutL*sf2alpha1Ziu*coupHpm2ffpd*-betasfp2char + ri*coupHpm2charneutR*sf2beta1Ziu*coupHpm2ffpu*alphasfp2char)*fabs(mneutralinoi)*fabs(mcharginoj);
      coupcombo7Hpmsfp2 = (ri*coupHpm2charneutR*sf2alpha1Ziu*coupHpm2ffpu*-betasfp2char + coupHpm2charneutL*sf2beta1Ziu*coupHpm2ffpd*alphasfp2char)*mfp*mf;
      coupcombo8Hpmsfp2 = 2*ri*(coupHpm2charneutL*sf2alpha1Ziu*coupHpm2ffpu*-betasfp2char + coupHpm2charneutR*sf2beta1Ziu*coupHpm2ffpd*alphasfp2char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj);
    }
    else if (norc == 'c') {
      coupcombo1Hpmsfp2 = 0.5*(rj*coupHpm2charneutL*betasfp2char*coupHpm2ffpu*sf2alpha1Ziu + coupHpm2charneutR*alphasfp2char*coupHpm2ffpd*sf2beta1Ziu);
      coupcombo2Hpmsfp2 = -(rj*coupHpm2charneutL*alphasfp2char*coupHpm2ffpd*sf2alpha1Ziu + coupHpm2charneutR*betasfp2char*coupHpm2ffpu*sf2beta1Ziu)*fabs(mneutralinoi)*mfp;
      coupcombo3Hpmsfp2 = (coupHpm2charneutR*alphasfp2char*coupHpm2ffpu*sf2alpha1Ziu + rj*coupHpm2charneutL*betasfp2char*coupHpm2ffpd*sf2beta1Ziu)*mf*fabs(mcharginoj);
      coupcombo4Hpmsfp2 = (rj*coupHpm2charneutL*alphasfp2char*coupHpm2ffpu*sf2alpha1Ziu + coupHpm2charneutR*betasfp2char*coupHpm2ffpd*sf2beta1Ziu)*fabs(mneutralinoi)*mf;
      coupcombo5Hpmsfp2 = -(coupHpm2charneutR*alphasfp2char*coupHpm2ffpd*sf2alpha1Ziu + rj*coupHpm2charneutL*betasfp2char*coupHpm2ffpu*sf2beta1Ziu)*mfp*fabs(mcharginoj);
      coupcombo6Hpmsfp2 = (coupHpm2charneutR*betasfp2char*coupHpm2ffpu*sf2alpha1Ziu + rj*coupHpm2charneutL*alphasfp2char*coupHpm2ffpd*sf2beta1Ziu)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7Hpmsfp2 = -(rj*coupHpm2charneutL*betasfp2char*coupHpm2ffpd*sf2alpha1Ziu + coupHpm2charneutR*alphasfp2char*coupHpm2ffpu*sf2beta1Ziu)*mf*mfp;
      coupcombo8Hpmsfp2 = -2*(coupHpm2charneutR*betasfp2char*coupHpm2ffpd*sf2alpha1Ziu + rj*coupHpm2charneutL*alphasfp2char*coupHpm2ffpu*sf2beta1Ziu)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1Hpmsfp2 = 0, int2Hpmsfp2 = 0, int3Hpmsfp2 = 0, int4Hpmsfp2 = 0, int5Hpmsfp2 = 0, int6Hpmsfp2 = 0, int7Hpmsfp2 = 0, int8Hpmsfp2 = 0;
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = mHP, m6 = msfp2;
    if (norc == 'n') {
      int1Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') {
      int1Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsfp2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    GammaHpmsfp2 = coupcombo1Hpmsfp2*int1Hpmsfp2 + coupcombo2Hpmsfp2*int2Hpmsfp2 + coupcombo3Hpmsfp2*int3Hpmsfp2 + coupcombo4Hpmsfp2*int4Hpmsfp2 + coupcombo5Hpmsfp2*int5Hpmsfp2 + coupcombo6Hpmsfp2*int6Hpmsfp2 + coupcombo7Hpmsfp2*int7Hpmsfp2 + coupcombo8Hpmsfp2*int8Hpmsfp2;

    ///goldstone - sf1 interference
    double coupcombo1gsf1 = 0, coupcombo2gsf1 = 0, coupcombo3gsf1 = 0, coupcombo4gsf1 = 0, coupcombo5gsf1 = 0, coupcombo6gsf1 = 0, coupcombo7gsf1 = 0, coupcombo8gsf1 = 0; 
    if (norc == 'n') {
      coupcombo1gsf1 = -ri*0.5*(-ri*coupHpm1charneutR*-sf1beta1Zid*coupHpm1ffpd*-alphasf1char + coupHpm1charneutL*-sf1alpha1Zid*coupHpm1ffpu*-betasf1char);
      coupcombo2gsf1 = (coupHpm1charneutR*-sf1alpha1Zid*coupHpm1ffpu*-alphasf1char + ri*coupHpm1charneutL*-sf1beta1Zid*coupHpm1ffpd*-betasf1char)*fabs(mneutralinoi)*-mfp;
      coupcombo3gsf1 = (coupHpm1charneutL*sf1alpha1Zid*coupHpm1ffpd*-alphasf1char - ri*coupHpm1charneutR*-sf1beta1Zid*coupHpm1ffpu*-betasf1char)*mf*fabs(mcharginoj)*-ri;
      coupcombo4gsf1 = (coupHpm1charneutR*sf1alpha1Zid*coupHpm1ffpd*-alphasf1char + ri*coupHpm1charneutL*sf1beta1Zid*coupHpm1ffpu*betasf1char)*fabs(mneutralinoi)*-mf;
      coupcombo5gsf1 = (coupHpm1charneutL*-sf1alpha1Zid*coupHpm1ffpu*-alphasf1char + ri*coupHpm1charneutR*-sf1beta1Zid*coupHpm1ffpd*-betasf1char)*mfp*fabs(mcharginoj)*-ri;
      coupcombo6gsf1 = (-coupHpm1charneutL*-sf1beta1Zid*coupHpm1ffpd*-alphasf1char + ri*coupHpm1charneutR*-sf1alpha1Zid*coupHpm1ffpu*-betasf1char)*fabs(mneutralinoi)*fabs(mcharginoj)*-ri;
      coupcombo7gsf1 = (-ri*coupHpm1charneutR*-sf1beta1Zid*coupHpm1ffpu*-alphasf1char + coupHpm1charneutL*-sf1alpha1Zid*coupHpm1ffpd*-betasf1char)*mfp*mf*ri;
      coupcombo8gsf1 = -2*(ri*coupHpm1charneutL*-sf1beta1Zid*coupHpm1ffpu*-alphasf1char + coupHpm1charneutR*-sf1alpha1Zid*coupHpm1ffpd*-betasf1char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj);
    }
    else if (norc == 'c') {
      coupcombo1gsf1 = 0.5*(rj*coupHpm1charneutL*betasf1char*coupHpm1ffpu*sf1alpha1Zid + coupHpm1charneutR*alphasf1char*coupHpm1ffpd*sf1beta1Zid);
      coupcombo2gsf1 = (rj*coupHpm1charneutL*alphasf1char*coupHpm1ffpd*sf1alpha1Zid + coupHpm1charneutR*betasf1char*coupHpm1ffpu*sf1beta1Zid)*fabs(mneutralinoi)*mf;
      coupcombo3gsf1 = -(coupHpm1charneutR*alphasf1char*coupHpm1ffpu*sf1alpha1Zid + rj*coupHpm1charneutL*betasf1char*coupHpm1ffpd*sf1beta1Zid)*mfp*fabs(mcharginoj);
      coupcombo4gsf1 = -(rj*coupHpm1charneutL*alphasf1char*coupHpm1ffpu*sf1alpha1Zid + coupHpm1charneutR*betasf1char*coupHpm1ffpd*sf1beta1Zid)*fabs(mneutralinoi)*mfp;
      coupcombo5gsf1 = (coupHpm1charneutR*alphasf1char*coupHpm1ffpd*sf1alpha1Zid + rj*coupHpm1charneutL*betasf1char*coupHpm1ffpu*sf1beta1Zid)*mf*fabs(mcharginoj);
      coupcombo6gsf1 = (coupHpm1charneutR*betasf1char*coupHpm1ffpu*sf1alpha1Zid + rj*coupHpm1charneutL*alphasf1char*coupHpm1ffpd*sf1beta1Zid)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7gsf1 = -(rj*coupHpm1charneutL*betasf1char*coupHpm1ffpd*sf1alpha1Zid + coupHpm1charneutR*alphasf1char*coupHpm1ffpu*sf1beta1Zid)*mf*mfp;
      coupcombo8gsf1 = -2*(coupHpm1charneutR*betasf1char*coupHpm1ffpd*sf1alpha1Zid + rj*coupHpm1charneutL*alphasf1char*coupHpm1ffpu*sf1beta1Zid)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1gsf1 = 0, int2gsf1 = 0, int3gsf1 = 0, int4gsf1 = 0, int5gsf1 = 0, int6gsf1 = 0, int7gsf1 = 0, int8gsf1 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mfp, m4 = mcharginoj, m5 = mWboson, m6 = msf1;
    if (norc == 'n') {
      int1gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') {
      int1gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsf1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
    }

    Gammagsf1 = coupcombo1gsf1*int1gsf1 + coupcombo2gsf1*int2gsf1 + coupcombo3gsf1*int3gsf1 + coupcombo4gsf1*int4gsf1 + coupcombo5gsf1*int5gsf1 + coupcombo6gsf1*int6gsf1 + coupcombo7gsf1*int7gsf1 + coupcombo8gsf1*int8gsf1;

    ///goldstone - sf2 interference
    double coupcombo1gsf2 = 0, coupcombo2gsf2 = 0, coupcombo3gsf2 = 0, coupcombo4gsf2 = 0, coupcombo5gsf2 = 0, coupcombo6gsf2 = 0, coupcombo7gsf2 = 0, coupcombo8gsf2 = 0; 
    if (norc == 'n') {
      coupcombo1gsf2 = -0.5*(coupHpm1charneutR*-sf2beta1Zid*coupHpm1ffpd*-alphasf2char + ri*coupHpm1charneutL*-sf2alpha1Zid*coupHpm1ffpu*-betasf2char);
      coupcombo2gsf2 = -(coupHpm1charneutR*-sf2alpha1Zid*coupHpm1ffpu*-alphasf2char + ri*coupHpm1charneutL*-sf2beta1Zid*coupHpm1ffpd*-betasf2char)*fabs(mneutralinoi)*-mfp;
      coupcombo3gsf2 = (ri*coupHpm1charneutL*sf2alpha1Zid*coupHpm1ffpd*-alphasf2char - coupHpm1charneutR*-sf2beta1Zid*coupHpm1ffpu*-betasf2char)*mf*fabs(mcharginoj);
      coupcombo4gsf2 = -(coupHpm1charneutR*sf2alpha1Zid*coupHpm1ffpd*-alphasf2char + ri*coupHpm1charneutL*-sf2beta1Zid*coupHpm1ffpu*betasf2char)*fabs(mneutralinoi)*-mf;
      coupcombo5gsf2 = (ri*coupHpm1charneutL*-sf2alpha1Zid*coupHpm1ffpu*-alphasf2char + coupHpm1charneutR*-sf2beta1Zid*coupHpm1ffpd*-betasf2char)*mfp*fabs(mcharginoj);
      coupcombo6gsf2 = -(ri*coupHpm1charneutL*-sf2beta1Zid*coupHpm1ffpd*-alphasf2char + coupHpm1charneutR*-sf2alpha1Zid*coupHpm1ffpu*-betasf2char)*fabs(mneutralinoi)*fabs(mcharginoj)*rj;
      coupcombo7gsf2 = (coupHpm1charneutR*-sf2beta1Zid*coupHpm1ffpu*-alphasf2char + ri*coupHpm1charneutL*-sf2alpha1Zid*coupHpm1ffpd*-betasf2char)*mfp*mf;
      coupcombo8gsf2 = 2*(ri*coupHpm1charneutL*-sf2beta1Zid*coupHpm1ffpu*-alphasf2char + coupHpm1charneutR*-sf2alpha1Zid*coupHpm1ffpd*-betasf2char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj)*rj;
    }
    else if (norc == 'c') {
      coupcombo1gsf2 = -0.5*rj*(coupHpm1charneutL*betasf2char*coupHpm1ffpu*sf2alpha1Zid - coupHpm1charneutR*alphasf2char*coupHpm1ffpd*sf2beta1Zid);
      coupcombo2gsf2 = -(coupHpm1charneutL*alphasf2char*coupHpm1ffpd*sf2alpha1Zid - rj*coupHpm1charneutR*betasf2char*coupHpm1ffpu*sf2beta1Zid)*fabs(mneutralinoi)*mf;
      coupcombo3gsf2 = -(-rj*coupHpm1charneutR*alphasf2char*coupHpm1ffpu*sf2alpha1Zid + coupHpm1charneutL*betasf2char*coupHpm1ffpd*sf2beta1Zid)*mfp*fabs(mcharginoj);
      coupcombo4gsf2 = (coupHpm1charneutL*alphasf2char*coupHpm1ffpu*sf2alpha1Zid + rj*coupHpm1charneutR*betasf2char*coupHpm1ffpd*sf2beta1Zid)*fabs(mneutralinoi)*mfp;
      coupcombo5gsf2 = -(rj*coupHpm1charneutR*alphasf2char*coupHpm1ffpd*sf2alpha1Zid + coupHpm1charneutL*betasf2char*coupHpm1ffpu*sf2beta1Zid)*mf*fabs(mcharginoj);
      coupcombo6gsf2 = (coupHpm1charneutR*betasf2char*coupHpm1ffpu*sf2alpha1Zid + coupHpm1charneutL*alphasf2char*coupHpm1ffpd*sf2beta1Zid)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7gsf2 = -rj*(coupHpm1charneutL*betasf2char*coupHpm1ffpd*sf2alpha1Zid + coupHpm1charneutR*alphasf2char*coupHpm1ffpu*sf2beta1Zid)*mf*mfp;
      coupcombo8gsf2 = -2*(rj*coupHpm1charneutR*betasf2char*coupHpm1ffpd*sf2alpha1Zid + coupHpm1charneutL*alphasf2char*coupHpm1ffpu*sf2beta1Zid)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
    }

    double int1gsf2 = 0, int2gsf2 = 0, int3gsf2 = 0, int4gsf2 = 0, int5gsf2 = 0, int6gsf2 = 0, int7gsf2 = 0, int8gsf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mfp, m4 = mcharginoj, m5 = mWboson, m6 = msf2;
    if (norc == 'n') {
      int1gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') {
      int1gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8gsf2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
    }

    Gammagsf2 = coupcombo1gsf2*int1gsf2 + coupcombo2gsf2*int2gsf2 + coupcombo3gsf2*int3gsf2 + coupcombo4gsf2*int4gsf2 + coupcombo5gsf2*int5gsf2 + coupcombo6gsf2*int6gsf2 + coupcombo7gsf2*int7gsf2 + coupcombo8gsf2*int8gsf2;

    //Hpm - sf1 interference
    double coupcombo1Hpmsf1 = 0, coupcombo2Hpmsf1 = 0, coupcombo3Hpmsf1 = 0, coupcombo4Hpmsf1 = 0, coupcombo5Hpmsf1 = 0, coupcombo6Hpmsf1 = 0, coupcombo7Hpmsf1 = 0, coupcombo8Hpmsf1 = 0; 
    if (norc == 'n') {
      coupcombo1Hpmsf1 = 0.5*(coupHpm2charneutR*sf1beta1Zid*coupHpm2ffpd*alphasf1char + coupHpm2charneutL*sf1alpha1Zid*coupHpm2ffpu*betasf1char);
      coupcombo2Hpmsf1 = -(coupHpm2charneutR*sf1alpha1Zid*coupHpm2ffpu*alphasf1char + coupHpm2charneutL*sf1beta1Zid*coupHpm2ffpd*betasf1char)*fabs(mneutralinoi)*mfp;
      coupcombo3Hpmsf1 = (-coupHpm2charneutL*sf1alpha1Zid*coupHpm2ffpd*alphasf1char - coupHpm2charneutR*sf1beta1Zid*coupHpm2ffpu*betasf1char)*mf*fabs(mcharginoj)*-ri;
      coupcombo4Hpmsf1 = (-coupHpm2charneutR*sf1alpha1Zid*coupHpm2ffpd*alphasf1char - coupHpm2charneutL*sf1beta1Zid*coupHpm2ffpu*betasf1char)*fabs(mneutralinoi)*-mf;
      coupcombo5Hpmsf1 = (coupHpm2charneutL*-sf1alpha1Zid*coupHpm2ffpu*-alphasf1char - ri*coupHpm2charneutR*-sf1beta1Zid*coupHpm2ffpd*-betasf1char)*mfp*fabs(mcharginoj)*-ri;
      coupcombo6Hpmsf1 = -(-ri*coupHpm2charneutL*-sf1beta1Zid*coupHpm2ffpd*-alphasf1char + coupHpm2charneutR*-sf1alpha1Zid*coupHpm2ffpu*-betasf1char)*fabs(mneutralinoi)*fabs(mcharginoj);
      coupcombo7Hpmsf1 = (-coupHpm2charneutR*-sf1beta1Zid*coupHpm2ffpu*-alphasf1char + ri*coupHpm2charneutL*-sf1alpha1Zid*coupHpm2ffpd*-betasf1char)*mfp*mf;
      coupcombo8Hpmsf1 = 2*(-ri*coupHpm2charneutL*-sf1beta1Zid*coupHpm2ffpu*-alphasf1char + coupHpm2charneutR*-sf1alpha1Zid*coupHpm2ffpd*-betasf1char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj);
    }
    else if (norc == 'c') {
      coupcombo1Hpmsf1 = 0.5*(rj*coupHpm2charneutL*betasf1char*coupHpm2ffpu*sf1alpha1Zid + coupHpm2charneutR*alphasf1char*coupHpm2ffpd*sf1beta1Zid);
      coupcombo2Hpmsf1 = (rj*coupHpm2charneutL*alphasf1char*coupHpm2ffpd*sf1alpha1Zid + coupHpm2charneutR*betasf1char*coupHpm2ffpu*sf1beta1Zid)*fabs(mneutralinoi)*mf;
      coupcombo3Hpmsf1 = -(coupHpm2charneutR*alphasf1char*coupHpm2ffpu*sf1alpha1Zid + rj*coupHpm2charneutL*betasf1char*coupHpm2ffpd*sf1beta1Zid)*mfp*fabs(mcharginoj);
      coupcombo4Hpmsf1 = -(rj*coupHpm2charneutL*alphasf1char*coupHpm2ffpu*sf1alpha1Zid + coupHpm2charneutR*betasf1char*coupHpm2ffpd*sf1beta1Zid)*fabs(mneutralinoi)*mfp;
      coupcombo5Hpmsf1 = (coupHpm2charneutR*alphasf1char*coupHpm2ffpd*sf1alpha1Zid + rj*coupHpm2charneutL*betasf1char*coupHpm2ffpu*sf1beta1Zid)*mf*fabs(mcharginoj);
      coupcombo6Hpmsf1 = (coupHpm2charneutR*betasf1char*coupHpm2ffpu*sf1alpha1Zid + rj*coupHpm2charneutL*alphasf1char*coupHpm2ffpd*sf1beta1Zid)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7Hpmsf1 = -(rj*coupHpm2charneutL*betasf1char*coupHpm2ffpd*sf1alpha1Zid + coupHpm2charneutR*alphasf1char*coupHpm2ffpu*sf1beta1Zid)*mf*mfp;
      coupcombo8Hpmsf1 = -2*(coupHpm2charneutR*betasf1char*coupHpm2ffpd*sf1alpha1Zid + rj*coupHpm2charneutL*alphasf1char*coupHpm2ffpu*sf1beta1Zid)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1Hpmsf1 = 0, int2Hpmsf1 = 0, int3Hpmsf1 = 0, int4Hpmsf1 = 0, int5Hpmsf1 = 0, int6Hpmsf1 = 0, int7Hpmsf1 = 0, int8Hpmsf1 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mfp, m4 = mcharginoj, m5 = mHP, m6 = msf1;
    if( norc == 'n') {
      int1Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if (norc == 'c') {
      int1Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsf1 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }    
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    GammaHpmsf1 = coupcombo1Hpmsf1*int1Hpmsf1 + coupcombo2Hpmsf1*int2Hpmsf1 + coupcombo3Hpmsf1*int3Hpmsf1 + coupcombo4Hpmsf1*int4Hpmsf1 + coupcombo5Hpmsf1*int5Hpmsf1 + coupcombo6Hpmsf1*int6Hpmsf1 + coupcombo7Hpmsf1*int7Hpmsf1 + coupcombo8Hpmsf1*int8Hpmsf1;

    ///Hpm - sf2 interference
    double coupcombo1Hpmsf2 = 0, coupcombo2Hpmsf2 = 0, coupcombo3Hpmsf2 = 0, coupcombo4Hpmsf2 = 0, coupcombo5Hpmsf2 = 0, coupcombo6Hpmsf2 = 0, coupcombo7Hpmsf2 = 0, coupcombo8Hpmsf2 = 0; 
    if (norc == 'n') {
      coupcombo1Hpmsf2 = -0.5*(coupHpm2charneutR*-sf2beta1Zid*coupHpm2ffpd*-alphasf2char + coupHpm2charneutL*-sf2alpha1Zid*coupHpm2ffpu*-betasf2char);
      coupcombo2Hpmsf2 = (coupHpm2charneutR*-sf2alpha1Zid*coupHpm2ffpu*-alphasf2char + coupHpm2charneutL*-sf2beta1Zid*coupHpm2ffpd*-betasf2char)*fabs(mneutralinoi)*mfp;
      coupcombo3Hpmsf2 = (coupHpm2charneutL*sf2alpha1Zid*coupHpm2ffpd*-alphasf2char - coupHpm2charneutR*-sf2beta1Zid*coupHpm2ffpu*-betasf2char)*mf*fabs(mcharginoj)*ri;
      coupcombo4Hpmsf2 = (coupHpm2charneutR*sf2alpha1Zid*coupHpm2ffpd*-alphasf2char + coupHpm2charneutL*-sf2beta1Zid*coupHpm2ffpu*betasf2char)*fabs(mneutralinoi)*mf;
      coupcombo5Hpmsf2 = (ri*coupHpm2charneutL*-sf2alpha1Zid*coupHpm2ffpu*-alphasf2char + coupHpm2charneutR*-sf2beta1Zid*coupHpm2ffpd*-betasf2char)*mfp*fabs(mcharginoj);
      coupcombo6Hpmsf2 = -(coupHpm2charneutL*-sf2beta1Zid*coupHpm2ffpd*-alphasf2char + coupHpm2charneutR*-sf2alpha1Zid*coupHpm2ffpu*-betasf2char)*fabs(mneutralinoi)*fabs(mcharginoj)*rj*ri;
      coupcombo7Hpmsf2 = (coupHpm2charneutR*-sf2beta1Zid*coupHpm2ffpu*-alphasf2char + coupHpm2charneutL*-sf2alpha1Zid*coupHpm2ffpd*-betasf2char)*mfp*mf;
      coupcombo8Hpmsf2 = 2*(ri*coupHpm2charneutL*-sf2beta1Zid*coupHpm2ffpu*-alphasf2char + coupHpm2charneutR*-sf2alpha1Zid*coupHpm2ffpd*-betasf2char)*fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj)*rj;
    }
    else if (norc == 'c') {
      coupcombo1Hpmsf2 = 0.5*(coupHpm2charneutL*betasf2char*coupHpm2ffpu*sf2alpha1Zid + rj*coupHpm2charneutR*alphasf2char*coupHpm2ffpd*sf2beta1Zid);
      coupcombo2Hpmsf2 = -(coupHpm2charneutL*alphasf2char*coupHpm2ffpd*sf2alpha1Zid - rj*coupHpm2charneutR*betasf2char*coupHpm2ffpu*sf2beta1Zid)*fabs(mneutralinoi)*mf;
      coupcombo3Hpmsf2 = -(-rj*coupHpm2charneutR*alphasf2char*coupHpm2ffpu*sf2alpha1Zid + coupHpm2charneutL*betasf2char*coupHpm2ffpd*sf2beta1Zid)*mfp*fabs(mcharginoj);
      coupcombo4Hpmsf2 = (coupHpm2charneutL*alphasf2char*coupHpm2ffpu*sf2alpha1Zid - rj*coupHpm2charneutR*betasf2char*coupHpm2ffpd*sf2beta1Zid)*fabs(mneutralinoi)*mfp;
      coupcombo5Hpmsf2 = -(rj*coupHpm2charneutR*alphasf2char*coupHpm2ffpd*sf2alpha1Zid + coupHpm2charneutL*betasf2char*coupHpm2ffpu*sf2beta1Zid)*mf*fabs(mcharginoj);
      coupcombo6Hpmsf2 = (coupHpm2charneutR*betasf2char*coupHpm2ffpu*sf2alpha1Zid + coupHpm2charneutL*alphasf2char*coupHpm2ffpd*sf2beta1Zid)*fabs(mcharginoj)*fabs(mneutralinoi);
      coupcombo7Hpmsf2 = -rj*(coupHpm2charneutL*betasf2char*coupHpm2ffpd*sf2alpha1Zid + coupHpm2charneutR*alphasf2char*coupHpm2ffpu*sf2beta1Zid)*mf*mfp;
      coupcombo8Hpmsf2 = -2*(-rj*coupHpm2charneutR*betasf2char*coupHpm2ffpd*sf2alpha1Zid + coupHpm2charneutL*alphasf2char*coupHpm2ffpu*sf2beta1Zid)*mf*mfp*fabs(mcharginoj)*fabs(mneutralinoi);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1Hpmsf2 = 0, int2Hpmsf2 = 0, int3Hpmsf2 = 0, int4Hpmsf2 = 0, int5Hpmsf2 = 0, int6Hpmsf2 = 0, int7Hpmsf2 = 0, int8Hpmsf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mfp, m4 = mcharginoj, m5 = mHP, m6 = msf2;
    if(norc == 'n') {
      int1Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }
    else if( norc == 'c') {
      int1Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp1gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int4Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp2gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int5Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp3gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int2Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp4gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int3Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp5gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int6Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp6gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int7Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp7gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
      int8Hpmsf2 = 2*fabs(m1)*dgauss(gneuticharjffp8gsfpdgauss,fabs(mcharginoj),Eupper3,accuracy);
    }  
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    GammaHpmsf2 = coupcombo1Hpmsf2*int1Hpmsf2 + coupcombo2Hpmsf2*int2Hpmsf2 + coupcombo3Hpmsf2*int3Hpmsf2 + coupcombo4Hpmsf2*int4Hpmsf2 + coupcombo5Hpmsf2*int5Hpmsf2 + coupcombo6Hpmsf2*int6Hpmsf2 + coupcombo7Hpmsf2*int7Hpmsf2 + coupcombo8Hpmsf2*int8Hpmsf2;

    ///Sfp Sfp interference
    double coupcombo1sfpsfp = 0, coupcombo2sfpsfp = 0, coupcombo3sfpsfp = 0, coupcombo4sfpsfp = 0;
    if (norc == 'n') {
      coupcombo1sfpsfp = (sf1beta1Ziu*sf2beta1Ziu + sf1alpha1Ziu*sf2alpha1Ziu)*ri;
      coupcombo2sfpsfp = (sf1alpha1Ziu*sf2beta1Ziu + sf1beta1Ziu*sf2alpha1Ziu)*ri;
      coupcombo3sfpsfp = (-alphasfp1char*alphasfp2char + betasfp1char*betasfp2char)*ri;
      coupcombo4sfpsfp = (betasfp1char*alphasfp2char - alphasfp1char*betasfp2char)*rj*ri;
    }
    else if (norc == 'c') {
      coupcombo1sfpsfp = -betasfp1char*betasfp2char + alphasfp1char*alphasfp2char*rj;
      coupcombo2sfpsfp = rj*alphasfp1char*betasfp2char - alphasfp2char*betasfp1char;
      coupcombo3sfpsfp = (-sf1alpha1Ziu*sf2alpha1Ziu + rj*sf1beta1Ziu*sf2beta1Ziu);
      coupcombo4sfpsfp = (-sf1alpha1Ziu*sf2beta1Ziu + rj*sf2alpha1Ziu*sf1beta1Ziu);
    }
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double int1sfpsfp = 0, int2sfpsfp = 0, int3sfpsfp = 0, int4sfpsfp = 0;
 
    m1 = mneutralinoi, m2 = mfp, m3 = mf, m4 = mcharginoj, m5 = msfp1, m6 = msfp2;
    if (norc == 'n') {
      int1sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp1sfpsfpdgauss,mfp,Eupper,accuracy);
      int2sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp2sfpsfpdgauss,mfp,Eupper,accuracy);
      int3sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp3sfpsfpdgauss,mfp,Eupper,accuracy);
      int4sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp4sfpsfpdgauss,mfp,Eupper,accuracy);
    }
    else if (norc == 'c') {
      int1sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp1sfpsfpdgauss,mfp,Eupper,accuracy);
      int3sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp2sfpsfpdgauss,mfp,Eupper,accuracy);
      int2sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp3sfpsfpdgauss,mfp,Eupper,accuracy);
      int4sfpsfp = 2*fabs(m1)*dgauss(gneuticharjffp4sfpsfpdgauss,mfp,Eupper,accuracy);
    }    
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    if (norc == 'n') {
      Gammasfpsfp = 4*coupcombo2sfpsfp*coupcombo4sfpsfp*-fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj)*int1sfpsfp + 2*coupcombo2sfpsfp*coupcombo3sfpsfp*fabs(mneutralinoi)*mfp*int2sfpsfp + 2*coupcombo1sfpsfp*coupcombo4sfpsfp*-mf*fabs(mcharginoj)*int3sfpsfp + coupcombo1sfpsfp*coupcombo3sfpsfp*int4sfpsfp;
    }
    else if (norc == 'c') {
      Gammasfpsfp = 4*coupcombo2sfpsfp*coupcombo4sfpsfp*-fabs(mneutralinoi)*mfp*mf*fabs(mcharginoj)*int1sfpsfp + 2*coupcombo2sfpsfp*coupcombo3sfpsfp*fabs(mneutralinoi)*mf*int2sfpsfp + 2*coupcombo1sfpsfp*coupcombo4sfpsfp*-mfp*fabs(mcharginoj)*int3sfpsfp + coupcombo1sfpsfp*coupcombo3sfpsfp*int4sfpsfp;
    } 
    else {
      throw("problem: norc must be n or c for neut or chargino respectively as decaying particle in neutralinoamplitudedecaycharginoffprimebar");
      errorflag = -1;
    }

    double Gammasf1sf2 = 0;
    ///Sf - Sf interference
    double coupcombo1sf1sf2 = 0, coupcombo2sf1sf2 = 0, coupcombo3sf1sf2 = 0, coupcombo4sf1sf2 = 0;
    coupcombo3sf1sf2 = -(rc*sf1alpha1Zid*sf2alpha1Zid + sf1beta1Zid*sf2beta1Zid)*rj;
    coupcombo4sf1sf2 = (ri*sf1beta1Zid*sf2alpha1Zid - sf1alpha1Zid*sf2beta1Zid)*rj*rc;
    coupcombo1sf1sf2 = -(betasf1char*-betasf2char + alphasf1char*alphasf2char)*ri;
    coupcombo2sf1sf2 = rc*(-alphasf1char*-betasf2char - betasf1char*alphasf2char);

    double int1sf1sf2 = 0, int2sf1sf2 = 0, int3sf1sf2 = 0, int4sf1sf2 = 0;
    m1 = mneutralinoi, m2 = mf, m3 = mcharginoj, m4 = mfp, m5 = msf1, m6 = msf2;
    int1sf1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp1sf1sf2dgauss,mf,Eupper2,accuracy);
    int2sf1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp2sf1sf2dgauss,mf,Eupper2,accuracy);
    int3sf1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp3sf1sf2dgauss,mf,Eupper2,accuracy);
    int4sf1sf2 = 2*fabs(m1)*dgauss(gneuticharjffp4sf1sf2dgauss,mf,Eupper2,accuracy);
    
      Gammasf1sf2 = (-rc*ri*coupcombo1sf1sf2*coupcombo3sf1sf2*int4sf1sf2 + 2*ri*coupcombo1sf1sf2*coupcombo4sf1sf2*mf*-fabs(mcharginoj)*int2sf1sf2 -rc*2*coupcombo2sf1sf2*coupcombo3sf1sf2*fabs(mneutralinoi)*mfp*int3sf1sf2 + 4*coupcombo2sf1sf2*coupcombo4sf1sf2*fabs(mneutralinoi)*mf*-fabs(mcharginoj)*mfp*int1sf1sf2);
   

    amplitudeW = Nc/(512*pow(PI,3)*pow(fabs(mneutralinoi),3))*(GammaW + Gammasf1 + Gammasf2 + Gammasfp1 + Gammasfp2 -2*Gammasfp1sf1 - 2*Gammasfp1sf2 - 2*Gammasfp2sf1 - 2*Gammasfp2sf2 + 2*GammaWHpm + 2*GammaWgoldstone+ GammaHpm + Gammagoldstone -2*GammaWSfp1 - 2*GammaWSfp2 - 2*GammaWSf1 - 2*GammaWSf2 + 2*GammaHgoldstone - 2*Gammagsfp1 - 2*Gammagsfp2 - 2*Gammagsf1 - 2*Gammagsf2 - 2*GammaHpmsfp1 - 2*GammaHpmsfp2 - 2*GammaHpmsf1 - 2*GammaHpmsf2 + 2*Gammasfpsfp - 2*Gammasf1sf2);
    // fout << "amplitudeW = " << amplitudeW << endl;
    // fout << "GammaW = " << GammaW << " Gammasf1 = " << Gammasf1 << " Gammasf2 = " << Gammasf2 << " Gammasfp1 = " << Gammasfp1 << " Gammasfp2 = " << Gammasfp2 << endl;
    // fout << "Gammasfp1sf1 = " << Gammasfp1sf1 << " Gammasfp1sf2 = " << Gammasfp1sf2 <<" Gammasfp2sf1 = " << Gammasfp2sf1 <<" Gammasfp2sf2 = " << Gammasfp2sf2 << endl;
    // fout << "GammaWHpm = " << GammaWHpm << " GammaWgoldstone = " << GammaWgoldstone << " GammaHpm = " << GammaHpm << " Gammagoldstone = " << Gammagoldstone << endl;
    // fout << "GammaWSfp1 = " << GammaWSfp1 << " GammaWSfp2 = " << GammaWSfp2 << " GammaWSf1 = " << GammaWSf1 << " GammaWSf2 = " << GammaWSf2 << endl;
    // fout << "GammaHgoldstone = " << GammaHgoldstone << " Gammagsfp1 = " << Gammagsfp1 << " Gammagsfp2 = " << Gammagsfp2 << " Gammagsf1 = " << Gammagsf1 << " Gammagsf2 = " << Gammagsf2 << endl;
    // fout << "GammaHpmsfp1 = " << GammaHpmsfp1 << " GammaHpmsfp2 = " << GammaHpmsfp2 << " GammaHpmsf1 = " << GammaHpmsf1 << " GammaHpmsf2 = " << GammaHpmsf2 << endl;
    // fout << "Gammasfpsfp = " << Gammasfpsfp << " Gammasf1sf2 = " << Gammasf1sf2 << endl;
  }

  return amplitudeW;
}
    



double higgsAamplitudedecaygammagammaNMSSM (double m1, double g, double gprime, double alpha, double mWboson, DoubleMatrix & CPOMix, double beta, double mtop, double mbottom, double mcharm, double mtau, double mch1, double mch2, double thetaL, double thetaR, double lam, int higgs)
{
  double prefactor=0, Itr=0, Iti=0, Ibr = 0, Ibi = 0, Icr = 0, Ici = 0, Itaur = 0, Itaui = 0, Ichar1r = 0, Ichar1i = 0, Ichar2r = 0, Ichar2i = 0, couplingt = 0, couplingb = 0, couplingc = 0, couplingtau = 0, couplingch1 = 0, couplingch2 = 0, kintr = 0, kinti = 0, kinbr =0, kinbi = 0, kincr = 0, kinci = 0, kintaur = 0, kintaui = 0, kinch1r = 0, kinch1i = 0, kinch2r = 0, kinch2i = 0, matelemmodsquare=0, amplitudeW=0;

  DoubleVector foftau(double mpart, double mcomp); ///CF(CA) in NMSSMTools
  DoubleVector tfoftau(3), bfoftau(3), cfoftau(3), taufoftau(3), ch1foftau(3), ch2foftau(3);
  ///Initialise these components
  for (int i = 1; i <= 3; i++) {
    tfoftau(i) = 0; bfoftau(i) = 0; cfoftau(i) = 0; taufoftau(i) = 0; ch1foftau(i) = 0; ch2foftau(i) = 0;
  }
  tfoftau = foftau(mtop, m1); bfoftau = foftau(mbottom, m1); cfoftau = foftau(mcharm, m1); taufoftau = foftau(mtau, m1); ch1foftau = foftau(mch1, m1); ch2foftau = foftau(mch2, m1);

  kintr = tfoftau(3)*(tfoftau(1)); kinbr = bfoftau(3)*(bfoftau(1)); kincr = cfoftau(3)*(cfoftau(1)); kintaur = taufoftau(3)*(taufoftau(1));
  kinti = tfoftau(3)*(tfoftau(2)); kinbi = bfoftau(3)*(bfoftau(2)); kinci = cfoftau(3)*(cfoftau(2)); kintaui = taufoftau(3)*(taufoftau(2));
  
  kinch1r = ch1foftau(3)*(ch1foftau(1)); kinch2r = ch2foftau(3)*(ch2foftau(1));
  kinch1i = ch1foftau(3)*(ch1foftau(2)); kinch2i = ch2foftau(3)*(ch2foftau(2));

  couplingt = 4./3*CPOMix(higgs,1)/(sin(beta)); couplingc = 4./3*CPOMix(higgs,1)/(sin(beta)); couplingb = 1./3*CPOMix(higgs,2)/(cos(beta)); couplingtau = CPOMix(higgs,2)/(cos(beta));
  
  couplingch1 = 2*mWboson/(g*mch1)*(lam/(pow(2,0.5))*CPOMix(higgs,3)*cos(thetaL)*cos(thetaR) - g/(pow(2,0.5))*(CPOMix(higgs,1)*sin(thetaL)*cos(thetaR) + CPOMix(higgs,2)*cos(thetaL)*sin(thetaR)));
  couplingch2 = 2*mWboson/(g*mch2)*(lam/(pow(2,0.5))*CPOMix(higgs,3)*sin(thetaL)*sin(thetaR) + g/(pow(2,0.5))*(CPOMix(higgs,1)*cos(thetaL)*sin(thetaR) + CPOMix(higgs,2)*sin(thetaL)*cos(thetaR)));

  Itr = couplingt*kintr; Icr = couplingc*kincr; Ibr = couplingb*kinbr; Itaur = couplingtau*kintaur; Ichar1r = couplingch1*kinch1r; Ichar2r = couplingch2*kinch2r;
  Iti = couplingt*kinti; Ici = couplingc*kinci; Ibi = couplingb*kinbi; Itaui = couplingtau*kintaui; Ichar1i = couplingch1*kinch1i; Ichar2i = couplingch2*kinch2i;

  DoubleVector matelemsum(2);
  for (int i = 1; i <= 2; i++) {
    matelemsum(i) = 0;
  }
  matelemsum(1) = Itr + Ibr + Icr + Itaur + Ichar1r + Ichar2r;
  matelemsum(2) = Iti + Ibi + Ici + Itaui + Ichar1i + Ichar2i;

  prefactor = (GFosqrt2*pow(alpha,2))/(32*pow(PI,3))*pow(m1,3);

  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
  amplitudeW = prefactor*matelemmodsquare;
     
  return amplitudeW;

}


double higgsAamplitudedecaygluongluonNMSSM (double m1, double g, double gs, double alphas, double mWboson, DoubleMatrix & CPOMix, double beta, double mtop, double mbottom, double mcharm, double lam, int higgs, bool QCD)
{
  double prefactor=0, Itr=0, Iti=0, Ibr = 0, Ibi = 0, Icr = 0, Ici = 0, couplingt = 0, couplingb = 0, couplingc = 0, kintr = 0, kinti = 0, kinbr =0, kinbi = 0, kincr = 0, kinci = 0, matelemmodsquare=0, amplitudeW=0;


  DoubleVector foftau(double mpart, double mcomp); ///CF(CA) in NMSSMTools
  DoubleVector tfoftau(3), bfoftau(3), cfoftau(3);
  ///Initialise these components
  for (int i = 1; i <= 3; i++) {
    tfoftau(i) = 0; bfoftau(i) = 0; cfoftau(i) = 0;
  }

  tfoftau = foftau(mtop, m1); bfoftau = foftau(mbottom, m1); cfoftau = foftau(mcharm, m1);

  kintr = tfoftau(3)*(tfoftau(1)); kinbr = bfoftau(3)*(bfoftau(1)); kincr = cfoftau(3)*(cfoftau(1)); 
  kinti = tfoftau(3)*(tfoftau(2)); kinbi = bfoftau(3)*(bfoftau(2)); kinci = cfoftau(3)*(cfoftau(2));

  couplingt = CPOMix(higgs,1)/(sin(beta)); couplingc = CPOMix(higgs,1)/(sin(beta)); couplingb = CPOMix(higgs,2)/(cos(beta));
  
  Itr = couplingt*kintr; Icr = couplingc*kincr; Ibr = couplingb*kinbr;
  Iti = couplingt*kinti; Ici = couplingc*kinci; Ibi = couplingb*kinbi;

  DoubleVector matelemsum(2);
  for (int i = 1; i <= 2; i++) {
    matelemsum(i) = 0;
  }
  matelemsum(1) = Itr + Ibr + Icr;
  matelemsum(2) = Iti + Ibi + Ici;

  prefactor = GFosqrt2*pow(alphas,2)/(16*pow(PI,3))*pow(m1,3);

  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
  amplitudeW = prefactor*matelemmodsquare;
  
  double SMTOTRE = 0, SMTOTIM = 0, SQTOTRE = 0, SQTOTIM = 0;
  SMTOTRE = Itr + Ibr + Icr;
  SQTOTRE = 0; ///No squark loop contributions as CP odd higgs
  SMTOTIM = Iti + Ibi + Ici;
  SQTOTIM = 0; ///No squark loop contributions as CP odd higgs

  if (QCD == true) {
    int NF = 0;
    NF = 6;
    DoubleVector hggQCDcorrections(double amplitudeW, double alphas, int Nf, char higgs, double prefactor, double SMtotr, double SMtoti, double sqtotr, double sqtoti);
    amplitudeW = hggQCDcorrections(amplitudeW, alphas, NF, 'A', prefactor, SMTOTRE, SMTOTIM, SQTOTRE, SQTOTIM)(1); ///Pass hggQCDcorrections 'A' as it just matters whether it is CPeven (so 95/4 in FQCD) or CPodd (so 97/4 in FQCD)
  }
  else if (QCD == false) {
    amplitudeW = amplitudeW;
  }
     
  return amplitudeW;
}


double higgsAamplitudedecayZgammaNMSSM (double m1, double g, double gp, double alpha, double mWboson, double mZboson, DoubleMatrix & CPOMix, double beta, double mtop, double mbottom, double mcharm, double mch1, double mch2, double thetaL, double thetaR, double lam, int higgs)
{
  double prefactor=0, Itr=0, Iti=0, Ibr = 0, Ibi = 0, Icr = 0, Ici = 0, Ichar1r = 0, Ichar1i = 0, Ichar2r = 0, Ichar2i = 0, couplingt = 0, couplingb = 0, couplingc = 0, couplingch1 =0, couplingch2 = 0, kintr = 0, kinti = 0, kinbr =0, kinbi = 0, kincr = 0, kinci = 0, kinch1r = 0, kinch1i = 0, kinch2r = 0, kinch2i = 0, matelemmodsquare=0, amplitudeW=0;
  double sin2thW = 0, sinthW = 0, costhW = 0;

  DoubleVector foftau(double mpart, double mcomp); ///CF(CA) in NMSSMTools
  DoubleVector tfoftau(3), bfoftau(3), cfoftau(3), ch1foftau(3), ch2foftau(3), tZfoftau(3), bZfoftau(3), cZfoftau(3), ch1Zfoftau(3), ch2Zfoftau(3);
  ///Initialise these components
  for (int i = 1; i <= 3; i++) {
    tfoftau(i) = 0; bfoftau(i) = 0; cfoftau(i) = 0; ch1foftau(i) = 0; ch2foftau(i) = 0;
    tZfoftau(i) = 0; bZfoftau(i) = 0; cZfoftau(i) = 0; ch1Zfoftau(i) = 0; ch2Zfoftau(i) = 0;
  }
  tfoftau = foftau(mtop, m1); bfoftau = foftau(mbottom, m1); cfoftau = foftau(mcharm, m1); ch1foftau = foftau(mch1, m1); ch2foftau = foftau(mch2, m1);
  tZfoftau = foftau(mtop, mZboson); bZfoftau = foftau(mbottom, mZboson); cZfoftau = foftau(mcharm, mZboson); ch1Zfoftau = foftau(mch1, mZboson); ch2Zfoftau = foftau(mch2, mZboson);

  sin2thW = pow(gp,2)/(pow(g,2)+pow(gp,2)); sinthW = pow(sin2thW,0.5); costhW = g/(pow(pow(g,2)+pow(gp,2),0.5));

  kintr = tfoftau(3)*tZfoftau(3)/(2*(tfoftau(3)-tZfoftau(3)))*(tfoftau(1)-tZfoftau(1)); kinbr = bfoftau(3)*bZfoftau(3)/(2*(bfoftau(3)-bZfoftau(3)))*(bfoftau(1)-bZfoftau(1)); kincr = cfoftau(3)*cZfoftau(3)/(2*(cfoftau(3)-cZfoftau(3)))*(cfoftau(1)-cZfoftau(1)); kinch1r = ch1foftau(3)*ch1Zfoftau(3)/(2*(ch1foftau(3)-ch1Zfoftau(3)))*(ch1foftau(1)-ch1Zfoftau(1)); kinch2r = ch2foftau(3)*ch2Zfoftau(3)/(2*(ch2foftau(3)-ch2Zfoftau(3)))*(ch2foftau(1)-ch2Zfoftau(1));
  kinti = tfoftau(3)*tZfoftau(3)/(2*(tfoftau(3)-tZfoftau(3)))*(tfoftau(2)-tZfoftau(2)); kinbi = bfoftau(3)*bZfoftau(3)/(2*(bfoftau(3)-bZfoftau(3)))*(bfoftau(2)-bZfoftau(2)); kinci = cfoftau(3)*cZfoftau(3)/(2*(cfoftau(3)-cZfoftau(3)))*(cfoftau(2)-cZfoftau(2)); kinch1i = ch1foftau(3)*ch1Zfoftau(3)/(2*(ch1foftau(3)-ch1Zfoftau(3)))*(ch1foftau(2)-ch1Zfoftau(2)); kinch2i = ch2foftau(3)*ch2Zfoftau(3)/(2*(ch2foftau(3)-ch2Zfoftau(3)))*(ch2foftau(2)-ch2Zfoftau(2));
 
  couplingt = -2*(1-8*sin2thW/3)/(sinthW*costhW)*CPOMix(higgs,1)/(sin(beta)); couplingc = -2*(1-8*sin2thW/3)/(sinthW*costhW)*CPOMix(higgs,1)/(sin(beta)); couplingb =(-1+4*sin2thW/3)/(sinthW*costhW)*CPOMix(higgs,2)/(cos(beta));

  
  couplingch1 = 4*mWboson/(mch1*g*sinthW*costhW)*(-pow(sin(thetaR),2) - 0.5*pow(cos(thetaR),2) - pow(sin(thetaL),2) - 0.5*pow(cos(thetaL),2) + 2*sin2thW)*(lam/(pow(2,0.5))*CPOMix(higgs,3)*cos(thetaL)*cos(thetaR) - g/(pow(2,0.5))*(CPOMix(higgs,1)*sin(thetaL)*cos(thetaR) + CPOMix(higgs,2)*cos(thetaL)*sin(thetaR)));

  couplingch2 = 4*mWboson/(mch2*g*sinthW*costhW)*(-pow(cos(thetaR),2) - 0.5*pow(sin(thetaR),2) - pow(cos(thetaL),2) - 0.5*pow(sin(thetaL),2) + 2*sin2thW)*(lam/(pow(2,0.5))*CPOMix(higgs,3)*sin(thetaL)*sin(thetaR) + g/(pow(2,0.5))*(CPOMix(higgs,1)*cos(thetaL)*sin(thetaR) + CPOMix(higgs,2)*sin(thetaL)*cos(thetaR)));

  
  Itr = couplingt*kintr; Icr = couplingc*kincr; Ibr = couplingb*kinbr; Ichar1r = couplingch1*kinch1r; Ichar2r = couplingch2*kinch2r; 
  Iti = couplingt*kinti; Ici = couplingc*kinci; Ibi = couplingb*kinbi; Ichar1i = couplingch1*kinch1i; Ichar2i = couplingch2*kinch2i;

  DoubleVector matelemsum(2);
  for (int i = 1; i <= 2; i++) {
    matelemsum(i) = 0;
  }
  matelemsum(1) = Itr + Ibr + Icr + Ichar1r + Ichar2r;
  matelemsum(2) = Iti + Ibi + Ici + Ichar1i + Ichar2i;

  // prefactor = pow(g,2)*pow(m1,3)*pow(alpha,2)/(512*pow(PI,3)*pow(mWboson,2))*pow((1-pow(mZboson/m1,2)),3);
  prefactor = GFosqrt2*pow(m1,3)*pow(alpha,2)/(64*pow(PI,3))*pow((1-pow(mZboson/m1,2)),3);

  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
  amplitudeW = prefactor*matelemmodsquare;
     
  return amplitudeW;
}


double higgsCPevenamplitudedecaygammagammaNMSSM(double m1, double mtop, double mbottom, double mcharm, double mtau, double mWboson, double mHpm, double mchar1, double mchar2, double mscharmL, double mscharmR, double mstop1, double mstop2, double msstrangeL, double msstrangeR, double msbottom1, double msbottom2, double msmuonL, double msmuonR, double mstau1, double mstau2, DoubleMatrix & CPEMix, double beta, double g, double gp, double alpha, double thetat, double thetab, double thetatau, double thetaL, double thetaR, double At, double Ab, double Atau, double mu, double mueff, double lam, double kappa, double Alambda, int higgs)
{
  double amplitudeW = 0, prefactor = 0, couplingt = 0, couplingb = 0, couplingc = 0, couplingtau = 0, couplingW = 0, couplingHpm = 0, couplingch1 = 0, couplingch2 = 0, couplingscL = 0, couplingscR = 0, couplingst1 = 0, couplingst2 = 0, couplingssL = 0, couplingssR = 0, couplingsb1 = 0, couplingsb2 = 0, couplingsmuL = 0, couplingsmuR = 0, couplingstau1 = 0, couplingstau2 = 0;
  double ft = 0, fb = 0, ftau = 0;
  DoubleVector tfoftau(3), bfoftau(3), cfoftau(3), taufoftau(3), Wfoftau(3), Hpmfoftau(3), ch1foftau(3), ch2foftau(3), scLfoftau(3), scRfoftau(3), ssLfoftau(3), ssRfoftau(3), st1foftau(3), st2foftau(3), sb1foftau(3), sb2foftau(3), stau1foftau(3), stau2foftau(3), smuLfoftau(3), smuRfoftau(3);
  ///Initialise
  for (int i = 1; i<=3; i++) {
    tfoftau(i) = 0; bfoftau(i) = 0; cfoftau(i) = 0, taufoftau(i) = 0, Wfoftau(i) = 0, Hpmfoftau(i) = 0, ch1foftau(i) = 0, ch2foftau(i) = 0, scLfoftau(i) = 0, scRfoftau(i) = 0, ssLfoftau(i) = 0, ssRfoftau(i) = 0, st1foftau(i) = 0, st2foftau(i) = 0, sb1foftau(i) = 0, sb2foftau(i) = 0, stau1foftau(i) = 0, stau2foftau(i) = 0, smuLfoftau(i) = 0, smuRfoftau(i) = 0;
  }
  double kintr = 0, kinbr = 0, kincr = 0, kintaur = 0, kinWr = 0, kinHpmr = 0, kinch1r = 0, kinch2r = 0, kinscLr = 0, kinscRr = 0, kinssLr = 0, kinssRr = 0, kinst1r = 0, kinst2r = 0, kinsb1r = 0, kinsb2r = 0, kinsmuLr = 0, kinsmuRr = 0, kinstau1r = 0, kinstau2r = 0;
  double kinti = 0, kinbi = 0, kinci = 0, kintaui = 0, kinWi = 0, kinHpmi = 0, kinch1i = 0, kinch2i = 0, kinscLi = 0, kinscRi = 0, kinssLi = 0, kinssRi = 0, kinst1i = 0, kinst2i = 0, kinsb1i = 0, kinsb2i = 0, kinsmuLi = 0, kinsmuRi = 0, kinstau1i = 0, kinstau2i = 0;
  double Itr = 0, Icr = 0, Ibr = 0, Itaur = 0, Ichar1r = 0, Ichar2r = 0, IWr = 0, IHpmr = 0, Iti = 0, Ici = 0, Ibi = 0, Itaui = 0, Ichar1i = 0, Ichar2i = 0, IWi = 0, IHpmi = 0, IscLr = 0, IscRr = 0, IssLr = 0, IssRr = 0, IsmuLr = 0, IsmuRr = 0, IscLi = 0, IscRi = 0, IssLi = 0, IssRi = 0, IsmuLi = 0, IsmuRi = 0, Ist1r = 0, Ist2r = 0, Isb1r = 0, Isb2r = 0, Istau1r = 0, Istau2r = 0, Ist1i = 0, Ist2i = 0, Isb1i = 0, Isb2i = 0, Istau1i = 0, Istau2i = 0;

  DoubleVector foftau(double mpart, double mcomp); ///CF(CA) in NMSSMTools

  tfoftau = foftau(mtop, m1); bfoftau = foftau(mbottom, m1); cfoftau = foftau(mcharm, m1); taufoftau = foftau(mtau, m1); Wfoftau = foftau(mWboson, m1); Hpmfoftau = foftau(mHpm, m1); ch1foftau = foftau(mchar1, m1); ch2foftau = foftau(mchar2, m1); scLfoftau = foftau(mscharmL, m1); scRfoftau = foftau(mscharmR, m1); ssLfoftau = foftau(msstrangeL, m1); ssRfoftau = foftau(msstrangeR, m1); st1foftau = foftau(mstop1, m1); st2foftau = foftau(mstop2, m1); sb1foftau = foftau(msbottom1, m1); sb2foftau = foftau(msbottom2, m1); stau1foftau = foftau(mstau1, m1); stau2foftau = foftau(mstau2, m1); smuLfoftau = foftau(msmuonL, m1); smuRfoftau = foftau(msmuonR, m1);

  couplingt = 4./3*CPEMix(higgs,1)/sin(beta); couplingc = 4./3*CPEMix(higgs,1)/sin(beta); couplingb = CPEMix(higgs,2)/(3*cos(beta)); couplingtau = CPEMix(higgs,2)/cos(beta);
  couplingW = CPEMix(higgs,1)*sin(beta) + CPEMix(higgs,2)*cos(beta);

  couplingch1 = (lam/(pow(2,0.5))*CPEMix(higgs,3)*cos(thetaL)*cos(thetaR) + g/(pow(2,0.5))*(CPEMix(higgs,1)*sin(thetaL)*cos(thetaR) + CPEMix(higgs,2)*cos(thetaL)*sin(thetaR)))*1/(pow(GFosqrt2*2,0.5)*mchar1);
  couplingch2 = (lam/(pow(2,0.5))*CPEMix(higgs,3)*sin(thetaL)*sin(thetaR) - g/(pow(2,0.5))*(CPEMix(higgs,1)*cos(thetaL)*sin(thetaR) + CPEMix(higgs,2)*sin(thetaL)*cos(thetaR)))*1/(pow(GFosqrt2*2,0.5)*mchar2);

  couplingHpm = (lam*mueff/(pow(2,0.5))*(2*CPEMix(higgs,3)*pow(cos(beta),2) + 2*CPEMix(higgs,3)*pow(sin(beta),2)) - pow(lam,2)*mWboson*sin(beta)/g*2*CPEMix(higgs,2)*cos(beta)*sin(beta) - pow(lam,2)*mWboson*sin(beta)/g*2*CPEMix(higgs,1)*cos(beta)*sin(beta) + mueff*kappa*pow(2,0.5)*2*CPEMix(higgs,3)*cos(beta)*sin(beta) + lam*Alambda/pow(2,0.5)*2*CPEMix(higgs,3)*cos(beta)*sin(beta) + pow(gp,2)/4*mWboson/g*(sin(beta)*(2*CPEMix(higgs,1)*pow(cos(beta),2) - 2*CPEMix(higgs,1)*pow(sin(beta),2)) + cos(beta)*(2*CPEMix(higgs,2)*pow(sin(beta),2) - 2*CPEMix(higgs,2)*pow(cos(beta),2))) + g/4*mWboson*(sin(beta)*(2*CPEMix(higgs,1)*pow(cos(beta),2) + 2*CPEMix(higgs,1)*pow(sin(beta),2) + 2*2*CPEMix(higgs,2)*sin(beta)*cos(beta)) + cos(beta)*(2*CPEMix(higgs,2)*pow(cos(beta),2) + 2*CPEMix(higgs,2)*pow(sin(beta),2) + 2*2*CPEMix(higgs,1)*sin(beta)*cos(beta))) + lam/pow(2,0.5)*0)/(2*pow(mHpm,2)*pow(2*GFosqrt2,0.5));

  couplingscL = 4./3*2*mWboson/(g*pow(mscharmL,2))*(pow(gp,2)/12+pow(g,2)/4)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingscR = 4./3*2*mWboson/(g*pow(mscharmR,2))*(pow(gp,2)/6)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingssL = 1./3*2*mWboson/(g*pow(msstrangeL,2))*2*(pow(gp,2)/12 + pow(g,2)/4)*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingssR = 1./3*2*mWboson/(g*pow(msstrangeR,2))*(pow(gp,2)/6)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingsmuL = 2*mWboson/(g*pow(msmuonL,2))*2*mWboson/g*(-pow(gp,2)/4+pow(g,2)/4)*(sin(beta)*CPEMix(higgs,1) - CPEMix(higgs,2));
  couplingsmuR = 2*mWboson/(g*pow(msmuonR,2))*2*mWboson/g*(pow(gp,2)/2)*(sin(beta)*CPEMix(higgs,1) - CPEMix(higgs,2));

  ft = g*mtop/(pow(2,0.5)*mWboson*sin(beta)); fb = g*mbottom/(pow(2,0.5)*mWboson*cos(beta)); ftau = g*mtau/(pow(2,0.5)*mWboson*cos(beta));

  couplingst1 = 1/(2*pow(2*GFosqrt2,0.5)*pow(mstop1,2))*(pow(cos(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) + (pow(gp,2)/12 - pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(sin(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - (pow(gp,2)/3)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + 2*sin(thetat)*cos(thetat)*ft/(pow(2,0.5))*(At*CPEMix(higgs,1) - mueff*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,3)));

  couplingst2 = 1/(2*pow(2*GFosqrt2,0.5)*pow(mstop2,2))*(pow(sin(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) + (pow(gp,2)/12 - pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(cos(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - (pow(gp,2)/3)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) - 2*sin(thetat)*cos(thetat)*ft/(pow(2,0.5))*(At*CPEMix(higgs,1) - mueff*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,3)));

  couplingsb1 = 1/(2*pow(2*GFosqrt2,0.5)*pow(msbottom1,2))*(pow(cos(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + (pow(gp,2)/12 + pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(sin(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + pow(gp,2)/6*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + 2*sin(thetab)*cos(thetab)*fb/(pow(2,0.5))*(-mueff*CPEMix(higgs,1)+Ab*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3)));

  couplingsb2 = 1/(2*pow(2*GFosqrt2,0.5)*pow(msbottom2,2))*(pow(sin(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + (pow(gp,2)/12 + pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(cos(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + pow(gp,2)/6*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) - 2*sin(thetab)*cos(thetab)*fb/(pow(2,0.5))*(-mueff*CPEMix(higgs,1)+Ab*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3)));			
  
  couplingstau1 = 1/(2*pow(2*GFosqrt2,0.5)*pow(mstau1,2))*(pow(sin(thetatau),2)*pow(2,0.5)*(pow(ftau,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + (-pow(gp,2)/4+pow(g,2)/4)*pow(2,0.5)*mWboson/g*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2))) + pow(cos(thetatau),2)*pow(2,0.5)*(pow(ftau,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + pow(gp,2)/2*(pow(2,0.5)*mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2))) - 2*sin(thetatau)*cos(thetatau)*ftau/(pow(2,0.5))*(-mueff*CPEMix(higgs,1) + Atau*CPEMix(higgs,2) - lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3)));

  couplingstau2 = 1/(2*pow(2*GFosqrt2,0.5)*pow(mstau2,2))*(pow(cos(thetatau),2)*pow(2,0.5)*(pow(ftau,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + (-pow(gp,2)/4+pow(g,2)/4)*pow(2,0.5)*mWboson/g*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2))) + pow(sin(thetatau),2)*pow(2,0.5)*(pow(ftau,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + pow(gp,2)/2*(pow(2,0.5)*mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2))) + 2*sin(thetatau)*cos(thetatau)*ftau/(pow(2,0.5))*(-mueff*CPEMix(higgs,1) + Atau*CPEMix(higgs,2) - lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3)));

  kintr = 2*tfoftau(3)*(1 + (1-tfoftau(3))*tfoftau(1)); kincr = 2*cfoftau(3)*(1 + (1-cfoftau(3))*cfoftau(1)); kinbr = 2*bfoftau(3)*(1 + (1-bfoftau(3))*bfoftau(1)); kintaur = 2*taufoftau(3)*(1 + (1-taufoftau(3))*taufoftau(1));
  kinti = 2*tfoftau(3)*((1-tfoftau(3))*tfoftau(2)); kinci = 2*cfoftau(3)*((1-cfoftau(3))*cfoftau(2)); kinbi = 2*bfoftau(3)*((1-bfoftau(3))*bfoftau(2)); kintaui = 2*taufoftau(3)*((1-taufoftau(3))*taufoftau(2));
  
  kinWr = -(2+3*Wfoftau(3) +3*Wfoftau(3)*(2-Wfoftau(3))*Wfoftau(1)); kinHpmr = Hpmfoftau(3)*(Hpmfoftau(3)*Hpmfoftau(1) -1); kinch1r = 2*ch1foftau(3)*(1+ (1-ch1foftau(3))*ch1foftau(1)); kinch2r = 2*ch2foftau(3)*(1+ (1-ch2foftau(3))*ch2foftau(1));
  kinWi = -(3*Wfoftau(3)*(2-Wfoftau(3))*Wfoftau(2)); kinHpmi = Hpmfoftau(3)*(Hpmfoftau(3)*Hpmfoftau(2)); kinch1i = 2*ch1foftau(3)*((1-ch1foftau(3))*ch1foftau(2)); kinch2i = 2*ch2foftau(3)*((1-ch2foftau(3))*ch2foftau(2));

  kinscLr = scLfoftau(3)*(scLfoftau(3)*scLfoftau(1)-1); kinscRr = scRfoftau(3)*(scRfoftau(3)*scRfoftau(1)-1); kinssLr = ssLfoftau(3)*(ssLfoftau(3)*ssLfoftau(1)-1); kinssRr = ssRfoftau(3)*(ssRfoftau(3)*ssRfoftau(1)-1); kinsmuLr = smuLfoftau(3)*(smuLfoftau(3)*smuLfoftau(1)-1); kinsmuRr = smuRfoftau(3)*(smuRfoftau(3)*smuRfoftau(1)-1);
  kinscLi = scLfoftau(3)*(scLfoftau(3)*scLfoftau(2)); kinscRi = scRfoftau(3)*(scRfoftau(3)*scRfoftau(2)); kinssLi = ssLfoftau(3)*(ssLfoftau(3)*ssLfoftau(2)); kinssRi = ssRfoftau(3)*(ssRfoftau(3)*ssRfoftau(2));  kinsmuLi = smuLfoftau(3)*(smuLfoftau(3)*smuLfoftau(2)); kinsmuRi = smuRfoftau(3)*(smuRfoftau(3)*smuRfoftau(2));

  kinst1r = st1foftau(3)*(st1foftau(3)*st1foftau(1)-1); kinst2r = st2foftau(3)*(st2foftau(3)*st2foftau(1)-1); kinsb1r = sb1foftau(3)*(sb1foftau(3)*sb1foftau(1)-1); kinsb2r = sb2foftau(3)*(sb2foftau(3)*sb2foftau(1)-1); kinstau1r = stau1foftau(3)*(stau1foftau(3)*stau1foftau(1)-1); kinstau2r = stau2foftau(3)*(stau2foftau(3)*stau2foftau(1)-1);
  kinst1i = st1foftau(3)*(st1foftau(3)*st1foftau(2)); kinst2i = st2foftau(3)*(st2foftau(3)*st2foftau(2)); kinsb1i = sb1foftau(3)*(sb1foftau(3)*sb1foftau(2)); kinsb2i = sb2foftau(3)*(sb2foftau(3)*sb2foftau(2)); kinstau1i = stau1foftau(3)*(stau1foftau(3)*stau1foftau(2)); kinstau2i = stau2foftau(3)*(stau2foftau(3)*stau2foftau(2));

  Itr = couplingt*kintr; Icr = couplingc*kincr; Ibr = couplingb*kinbr; Itaur = couplingtau*kintaur; Ichar1r = couplingch1*kinch1r; Ichar2r = couplingch2*kinch2r; IWr = couplingW*kinWr; IHpmr = couplingHpm*kinHpmr;
  Iti = couplingt*kinti; Ici = couplingc*kinci; Ibi = couplingb*kinbi; Itaui = couplingtau*kintaui; Ichar1i = couplingch1*kinch1i; Ichar2i = couplingch2*kinch2i; IWi = couplingW*kinWi; IHpmi = couplingHpm*kinHpmi;

  IscLr = couplingscL*kinscLr; IscRr = couplingscR*kinscRr; IssLr = couplingssL*kinssLr; IssRr = couplingssR*kinssRr; IsmuLr = couplingsmuL*kinsmuLr; IsmuRr = couplingsmuR*kinsmuRr;
  IscLi = couplingscL*kinscLi; IscRi = couplingscR*kinscRi; IssLi = couplingssL*kinssLi; IssRi = couplingssR*kinssRi; IsmuLi = couplingsmuL*kinsmuLi; IsmuRi = couplingsmuR*kinsmuRi;

  Ist1r = couplingst1*kinst1r; Ist2r = couplingst2*kinst2r; Isb1r = couplingsb1*kinsb1r; Isb2r = couplingsb2*kinsb2r; Istau1r = couplingstau1*kinstau1r; Istau2r = couplingstau2*kinstau2r;
  Ist1i = couplingst1*kinst1i; Ist2i = couplingst2*kinst2i; Isb1i = couplingsb1*kinsb1i; Isb2i = couplingsb2*kinsb2i; Istau1i = couplingstau1*kinstau1i; Istau2i = couplingstau2*kinstau2i;

  DoubleVector matelemsum(2); double matelemmodsquare = 0;
  for (int i = 1; i <= 2; i++) {
    matelemsum(i) = 0;
  }
  matelemsum(1) = Itr + Ibr + Icr + Itaur + Ichar1r + Ichar2r + IWr + IHpmr + IscLr + IscRr + IssLr + IssRr + IsmuLr + IsmuRr + Ist1r + Ist2r + Isb1r + Isb2r + Istau1r + Istau2r;
  matelemsum(2) = Iti + Ibi + Ici + Itaui + Ichar1i + Ichar2i + IWi + IHpmi + IscLi + IscRi + IssLi + IssRi + IsmuLi + IsmuRi + Ist1i + Ist2i + Isb1i + Isb2i + Istau1i + Istau2i;


  prefactor = GFosqrt2/(4*PI)*pow(m1,3)/2*pow(alpha/PI,2)/16;

  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);

  amplitudeW = prefactor*matelemmodsquare;

  return amplitudeW;
}



double higgsCPevenamplitudedecaygluongluonNMSSM(double m1, double mtop, double mbottom, double mcharm, double mWboson, double mscharmL, double mscharmR, double mstop1, double mstop2, double msstrangeL, double msstrangeR, double msbottom1, double msbottom2, double msupL, double msupR, double msdownL, double msdownR, double runmt, double runmb, DoubleMatrix & CPEMix, double beta, double g, double gp, double gs, double alphas, double thetat, double thetab, double thetaL, double thetaR, double At, double Ab, double mu, double mueff, double lam, double kappa, double Alambda, int higgs, bool QCD)
{
  double amplitudeW = 0, prefactor = 0, couplingt = 0, couplingb = 0, couplingc = 0, couplingscL = 0, couplingscR = 0, couplingst1 = 0, couplingst2 = 0, couplingssL = 0, couplingssR = 0, couplingsb1 = 0, couplingsb2 = 0, couplingsuL = 0, couplingsuR = 0, couplingsdL = 0, couplingsdR = 0;
  double ft = 0, fb = 0;
  DoubleVector tfoftau(3), bfoftau(3), cfoftau(3), taufoftau(3), Wfoftau(3), Hpmfoftau(3), ch1foftau(3), ch2foftau(3), scLfoftau(3), scRfoftau(3), ssLfoftau(3), ssRfoftau(3), st1foftau(3), st2foftau(3), sb1foftau(3), sb2foftau(3), stau1foftau(3), stau2foftau(3), suLfoftau(3), suRfoftau(3), sdLfoftau(3), sdRfoftau(3);

  ///Initialise
  for (int i = 1; i<=3; i++) {
    tfoftau(i) = 0; bfoftau(i) = 0; cfoftau(i) = 0, scLfoftau(i) = 0, scRfoftau(i) = 0, ssLfoftau(i) = 0, ssRfoftau(i) = 0, st1foftau(i) = 0, st2foftau(i) = 0, sb1foftau(i) = 0, sb2foftau(i) = 0, suLfoftau(i) = 0, suRfoftau(i) = 0, sdLfoftau(i) = 0, sdRfoftau(i) = 0;
  }
  double kintr = 0, kinbr = 0, kincr = 0, kinscLr = 0, kinscRr = 0, kinssLr = 0, kinssRr = 0, kinst1r = 0, kinst2r = 0, kinsb1r = 0, kinsb2r = 0, kinsuLr = 0, kinsuRr = 0, kinsdLr = 0, kinsdRr = 0;
  double kinti = 0, kinbi = 0, kinci = 0, kinscLi = 0, kinscRi = 0, kinssLi = 0, kinssRi = 0, kinst1i = 0, kinst2i = 0, kinsb1i = 0, kinsb2i = 0, kinsuLi = 0, kinsuRi = 0, kinsdLi = 0, kinsdRi = 0;
  double Itr = 0, Icr = 0, Ibr = 0, Iti = 0, Ici = 0, Ibi = 0, IscLr = 0, IscRr = 0, IssLr = 0, IssRr = 0, IscLi = 0, IscRi = 0, IssLi = 0, IssRi = 0, Ist1r = 0, Ist2r = 0, Isb1r = 0, Isb2r = 0, Ist1i = 0, Ist2i = 0, Isb1i = 0, Isb2i = 0, IsuLr = 0, IsuRr = 0, IsuLi = 0, IsuRi = 0, IsdLr = 0, IsdRr = 0, IsdLi = 0, IsdRi = 0;

  DoubleVector foftau(double mpart, double mcomp); ///CF(CA) in NMSSMTools
  
  tfoftau = foftau(mtop, m1); bfoftau = foftau(mbottom, m1); cfoftau = foftau(mcharm, m1); scLfoftau = foftau(mscharmL, m1); scRfoftau = foftau(mscharmR, m1); ssLfoftau = foftau(msstrangeL, m1); ssRfoftau = foftau(msstrangeR, m1); st1foftau = foftau(mstop1, m1); st2foftau = foftau(mstop2, m1); sb1foftau = foftau(msbottom1, m1); sb2foftau = foftau(msbottom2, m1); suLfoftau = foftau(msupL, m1); suRfoftau = foftau(msupR, m1); sdLfoftau = foftau(msdownL, m1); sdRfoftau = foftau(msdownR, m1);

  couplingt = CPEMix(higgs,1)/sin(beta); couplingc = CPEMix(higgs,1)/sin(beta); couplingb = CPEMix(higgs,2)/(cos(beta));

  couplingscL = 2*mWboson/(g*pow(mscharmL,2))*(pow(gp,2)/12-pow(g,2)/4)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingscR = 2*mWboson/(g*pow(mscharmR,2))*(-pow(gp,2)/3)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));

  couplingssL = 2*mWboson/(g*pow(msstrangeL,2))*2*(pow(gp,2)/12 + pow(g,2)/4)*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingssR = 2*mWboson/(g*pow(msstrangeR,2))*(pow(gp,2)/6)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));

  couplingsuL = 2*mWboson/(g*pow(msupL,2))*(pow(gp,2)/12-pow(g,2)/4)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingsuR = 2*mWboson/(g*pow(msupR,2))*(-pow(gp,2)/3)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingsdL = 2*mWboson/(g*pow(msdownL,2))*2*(pow(gp,2)/12 + pow(g,2)/4)*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));
  couplingsdR = 2*mWboson/(g*pow(msdownR,2))*(pow(gp,2)/6)*2*(mWboson/g)*(sin(beta)*CPEMix(higgs,1) - cos(beta)*CPEMix(higgs,2));

  ft = g*runmt/(pow(2,0.5)*mWboson*sin(beta)); fb = g*runmb/(pow(2,0.5)*mWboson*cos(beta));

  couplingst1 = mWboson/(g*pow(mstop1,2))*(pow(cos(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) + (pow(gp,2)/12 - pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(sin(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - (pow(gp,2)/3)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + 2*sin(thetat)*cos(thetat)*ft/(pow(2,0.5))*(At*CPEMix(higgs,1) - mueff*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,3)));

  couplingst2 = mWboson/(g*pow(mstop2,2))*(pow(sin(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) + (pow(gp,2)/12 - pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(cos(thetat),2)*pow(2,0.5)*(pow(ft,2)*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - (pow(gp,2)/3)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) - 2*sin(thetat)*cos(thetat)*ft/(pow(2,0.5))*(At*CPEMix(higgs,1) - mueff*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,3)));

  couplingsb1 = mWboson/(g*pow(msbottom1,2))*(pow(cos(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + (pow(gp,2)/12 + pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(sin(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + pow(gp,2)/6*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + 2*sin(thetab)*cos(thetab)*fb/(pow(2,0.5))*(-mueff*CPEMix(higgs,1)+Ab*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3)));

  couplingsb2 = mWboson/(g*pow(msbottom2,2))*(pow(sin(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + (pow(gp,2)/12 + pow(g,2)/4)*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) + pow(cos(thetab),2)*pow(2,0.5)*(pow(fb,2)*pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2) + pow(gp,2)/6*(pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,1) - pow(2,0.5)*mWboson*cos(beta)/g*CPEMix(higgs,2))) - 2*sin(thetab)*cos(thetab)*fb/(pow(2,0.5))*(-mueff*CPEMix(higgs,1)+Ab*CPEMix(higgs,2)-lam*pow(2,0.5)*mWboson*sin(beta)/g*CPEMix(higgs,3)));	
  
  kintr = 2*tfoftau(3)*(1 + (1-tfoftau(3))*tfoftau(1)); kincr = 2*cfoftau(3)*(1 + (1-cfoftau(3))*cfoftau(1)); kinbr = 2*bfoftau(3)*(1 + (1-bfoftau(3))*bfoftau(1));
  kinti = 2*tfoftau(3)*((1-tfoftau(3))*tfoftau(2)); kinci = 2*cfoftau(3)*((1-cfoftau(3))*cfoftau(2)); kinbi = 2*bfoftau(3)*((1-bfoftau(3))*bfoftau(2));
  
  kinscLr = scLfoftau(3)*(scLfoftau(3)*scLfoftau(1)-1); kinscRr = scRfoftau(3)*(scRfoftau(3)*scRfoftau(1)-1); kinssLr = ssLfoftau(3)*(ssLfoftau(3)*ssLfoftau(1)-1); kinssRr = ssRfoftau(3)*(ssRfoftau(3)*ssRfoftau(1)-1);
  kinscLi = scLfoftau(3)*(scLfoftau(3)*scLfoftau(2)); kinscRi = scRfoftau(3)*(scRfoftau(3)*scRfoftau(2)); kinssLi = ssLfoftau(3)*(ssLfoftau(3)*ssLfoftau(2)); kinssRi = ssRfoftau(3)*(ssRfoftau(3)*ssRfoftau(2));

  kinsuLr = suLfoftau(3)*(suLfoftau(3)*suLfoftau(1)-1); kinsuRr = suRfoftau(3)*(suRfoftau(3)*suRfoftau(1)-1); kinsdLr = sdLfoftau(3)*(sdLfoftau(3)*sdLfoftau(1)-1); kinsdRr = sdRfoftau(3)*(sdRfoftau(3)*sdRfoftau(1)-1);
  kinsuLi = suLfoftau(3)*(suLfoftau(3)*suLfoftau(2)); kinsuRi = suRfoftau(3)*(suRfoftau(3)*suRfoftau(2)); kinsdLi = sdLfoftau(3)*(sdLfoftau(3)*sdLfoftau(2)); kinsdRi = sdRfoftau(3)*(sdRfoftau(3)*sdRfoftau(2));

  kinst1r = st1foftau(3)*(st1foftau(3)*st1foftau(1)-1); kinst2r = st2foftau(3)*(st2foftau(3)*st2foftau(1)-1); kinsb1r = sb1foftau(3)*(sb1foftau(3)*sb1foftau(1)-1); kinsb2r = sb2foftau(3)*(sb2foftau(3)*sb2foftau(1)-1);
  kinst1i = st1foftau(3)*(st1foftau(3)*st1foftau(2)); kinst2i = st2foftau(3)*(st2foftau(3)*st2foftau(2)); kinsb1i = sb1foftau(3)*(sb1foftau(3)*sb1foftau(2)); kinsb2i = sb2foftau(3)*(sb2foftau(3)*sb2foftau(2));

  Itr = couplingt*kintr; Icr = couplingc*kincr; Ibr = couplingb*kinbr;
  Iti = couplingt*kinti; Ici = couplingc*kinci; Ibi = couplingb*kinbi;

  IscLr = couplingscL*kinscLr; IscRr = couplingscR*kinscRr; IssLr = couplingssL*kinssLr; IssRr = couplingssR*kinssRr;
  IscLi = couplingscL*kinscLi; IscRi = couplingscR*kinscRi; IssLi = couplingssL*kinssLi; IssRi = couplingssR*kinssRi;

  IsuLr = couplingsuL*kinsuLr; IsuRr = couplingsuR*kinsuRr; IsdLr = couplingsdL*kinsdLr; IsdRr = couplingsdR*kinsdRr;
  IsuLi = couplingsuL*kinsuLi; IsuRi = couplingsuR*kinsuRi; IsdLi = couplingsdL*kinsdLi; IsdRi = couplingsdR*kinsdRi;

  Ist1r = couplingst1*kinst1r; Ist2r = couplingst2*kinst2r; Isb1r = couplingsb1*kinsb1r; Isb2r = couplingsb2*kinsb2r;
  Ist1i = couplingst1*kinst1i; Ist2i = couplingst2*kinst2i; Isb1i = couplingsb1*kinsb1i; Isb2i = couplingsb2*kinsb2i;

  DoubleVector matelemsum(2); double matelemmodsquare = 0;
  for (int i = 1; i <= 2; i++) {
    matelemsum(i) = 0;
  }
  matelemsum(1) = Itr + Ibr + Icr + IscLr + IscRr + IssLr + IssRr + IsuLr + IsuRr + IsdLr + IsdRr + Ist1r + Ist2r + Isb1r + Isb2r;
  matelemsum(2) = Iti + Ibi + Ici + IscLi + IscRi + IssLi + IssRi + IsuLi + IsuRi + IsdLi + IsdRi + Ist1i + Ist2i + Isb1i + Isb2i;

  prefactor =  GFosqrt2*1/(4*PI)*pow(m1,3)/2*pow(alphas/PI,2)/8;

  matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
  
  amplitudeW = prefactor*matelemmodsquare;
  
  double SMTOTRE = 0, SMTOTIM = 0, SQTOTRE = 0, SQTOTIM = 0;
  SMTOTRE = Itr + Ibr + Icr;
  SQTOTRE = IscLr + IscRr + IssLr + IssRr + IsuLr + IsuRr + IsdLr + IsdRr + Ist1r + Ist2r + Isb1r + Isb2r;
  SMTOTIM = Iti + Ibi + Ici;
  SQTOTIM = IscLi + IscRi + IssLi + IssRi + IsuLi + IsuRi + IsdLi + IsdRi + Ist1i + Ist2i + Isb1i + Isb2i;

  if (QCD == true) {
    int NF = 0;
    if (higgs == 1) { NF = 5;}
    else if (higgs == 2 || higgs == 3) { NF = 6;}
    else {
      throw("Problem - higgs must be 1, 2, 3 i.e 'h', 'H' or 'H3' in NMSSM!\n");
      errorflag = -1;
    }
    DoubleVector hggQCDcorrections(double amplitudeW, double alphas, int Nf, char higgs, double prefactor, double SMtotr, double SMtoti, double sqtotr, double sqtoti);
    amplitudeW = hggQCDcorrections(amplitudeW, alphas, NF, 'h', prefactor, SMTOTRE, SMTOTIM, SQTOTRE, SQTOTIM)(1); ///Pass hggQCDcorrections 'h' as it just matters whether it is CPeven (so 95/4 in FQCD) or CPodd (so 97/4 in FQCD)
  }
  else if (QCD == false) {
    amplitudeW = amplitudeW;
  }
     
  return amplitudeW;
}


double higgshamplitudedecayZgammaNMSSM (double m1, double g, double gp, double alpha, double mWboson, double mZboson, double mHpm, DoubleMatrix & CPEMix, double beta, double mtop, double mbottom, double mcharm, double mch1, double mch2, double thetaL, double thetaR, double lam, double kappa, double Alambda, double greekmu, double mueff, int higgs)
{
  double prefactor=0, Itr=0, Iti=0, Ibr = 0, Ibi = 0, Icr = 0, Ici = 0, Ichar1r = 0, Ichar1i = 0, Ichar2r = 0, Ichar2i = 0, IWr = 0, IWi = 0, IHpmr = 0, IHpmi = 0, couplingt = 0, couplingb = 0, couplingc = 0, couplingch1 =0, couplingch2 = 0, couplingW = 0, couplingHpm = 0, kintr = 0, kinti = 0, kinbr =0, kinbi = 0, kincr = 0, kinci = 0, kinch1r = 0, kinch1i = 0, kinch2r = 0, kinch2i = 0, kinWr = 0, kinWi = 0, kinHpmr = 0, kinHpmi = 0, matelemmodsquare=0, amplitudeW=0;
  double sin2thW = 0, sinthW = 0, costhW = 0;

  if (m1 < mZboson) { amplitudeW = 0;}
  else {
    
    DoubleVector foftau(double mpart, double mcomp); ///CF(CA) in NMSSMTools
    DoubleVector goftau(double mpart, double mcomp);

    DoubleVector tfoftau(3), bfoftau(3), cfoftau(3), ch1foftau(3), ch2foftau(3), Wfoftau(3), Hpmfoftau(3), tZfoftau(3), bZfoftau(3), cZfoftau(3), ch1Zfoftau(3), ch2Zfoftau(3), WZfoftau(3), HpmZfoftau(3);
    DoubleVector tgoftau(3), bgoftau(3), cgoftau(3), ch1goftau(3), ch2goftau(3), Wgoftau(3), Hpmgoftau(3), tZgoftau(3), bZgoftau(3), cZgoftau(3), ch1Zgoftau(3), ch2Zgoftau(3), WZgoftau(3), HpmZgoftau(3);
    ///Initialise these components
    for (int i = 1; i <= 3; i++) {
      tfoftau(i) = 0; bfoftau(i) = 0; cfoftau(i) = 0; ch1foftau(i) = 0; ch2foftau(i) = 0; Wfoftau(i) = 0; Hpmfoftau(i) = 0; tZfoftau(i) = 0; bZfoftau(i) = 0; cZfoftau(i) = 0; ch1Zfoftau(i) = 0; ch2Zfoftau(i) = 0; WZfoftau(i) = 0; HpmZfoftau(i) = 0;
      tgoftau(i) = 0; bgoftau(i) = 0; cgoftau(i) = 0; ch1goftau(i) = 0; ch2goftau(i) = 0; Wgoftau(i) = 0; Hpmgoftau(i) = 0; tZgoftau(i) = 0; bZgoftau(i) = 0; cZgoftau(i) = 0; ch1Zgoftau(i) = 0; ch2Zgoftau(i) = 0; WZgoftau(i) = 0; HpmZgoftau(i) = 0;
    }
    tfoftau = foftau(mtop, m1); bfoftau = foftau(mbottom, m1); cfoftau = foftau(mcharm, m1); ch1foftau = foftau(mch1, m1); ch2foftau = foftau(mch2, m1); Wfoftau = foftau(mWboson, m1); Hpmfoftau = foftau(mHpm, m1);
    tZfoftau = foftau(mtop, mZboson); bZfoftau = foftau(mbottom, mZboson); cZfoftau = foftau(mcharm, mZboson); ch1Zfoftau = foftau(mch1, mZboson); ch2Zfoftau = foftau(mch2, mZboson); WZfoftau = foftau(mWboson, mZboson); HpmZfoftau = foftau(mHpm, mZboson);
    
    tgoftau = goftau(mtop, m1); bgoftau = goftau(mbottom, m1); cgoftau = goftau(mcharm, m1); ch1goftau = goftau(mch1, m1); ch2goftau = goftau(mch2, m1); Wgoftau = goftau(mWboson, m1); Hpmgoftau = goftau(mHpm, m1);
    tZgoftau = goftau(mtop, mZboson); bZgoftau = goftau(mbottom, mZboson); cZgoftau = goftau(mcharm, mZboson); ch1Zgoftau = goftau(mch1, mZboson); ch2Zgoftau = goftau(mch2, mZboson); WZgoftau = goftau(mWboson, mZboson); HpmZgoftau = goftau(mHpm, mZboson);

    sin2thW = pow(gp,2)/(pow(g,2)+pow(gp,2)); sinthW = pow(sin2thW,0.5); costhW = g/(pow(pow(g,2)+pow(gp,2),0.5));
    
    couplingt = -2*(1-8*sin2thW/3)/(sinthW*costhW)*CPEMix(higgs,1)/(sin(beta)); couplingc = -2*(1-8*sin2thW/3)/(sinthW*costhW)*CPEMix(higgs,1)/(sin(beta)); couplingb =(-1+4*sin2thW/3)/(sinthW*costhW)*CPEMix(higgs,2)/(cos(beta));

    couplingch1 = 4*mWboson/(mch1*g*sinthW*costhW)*(lam/(pow(2,0.5))*CPEMix(higgs,3)*cos(thetaL)*cos(thetaR) + g/(pow(2,0.5))*(CPEMix(higgs,1)*sin(thetaL)*cos(thetaR) + CPEMix(higgs,2)*cos(thetaL)*sin(thetaR)))*(-pow(sin(thetaR),2) - 0.5*pow(cos(thetaR),2) + 2*pow(sinthW,2) - pow(sin(thetaL),2) - 0.5*pow(cos(thetaL),2));
    couplingch2 = 4*mWboson/(mch2*g*sinthW*costhW)*(lam/(pow(2,0.5))*CPEMix(higgs,3)*sin(thetaL)*sin(thetaR) - g/(pow(2,0.5))*(CPEMix(higgs,1)*cos(thetaL)*sin(thetaR) + CPEMix(higgs,2)*sin(thetaL)*cos(thetaR)))*(-pow(cos(thetaR),2) - 0.5*pow(sin(thetaR),2) + 2*pow(sinthW,2) - pow(cos(thetaL),2) - 0.5*pow(sin(thetaL),2));

    couplingHpm = (1-2*sin2thW)/(sinthW*costhW*2*pow(mHpm,2))*1/(pow(GFosqrt2*2,0.5))*(lam*mueff/(pow(2,0.5))*(2*CPEMix(higgs,3)*pow(cos(beta),2) + 2*CPEMix(higgs,3)*pow(sin(beta),2)) - pow(lam,2)*mWboson*sin(beta)/g*2*CPEMix(higgs,2)*cos(beta)*sin(beta) - pow(lam,2)*mWboson*sin(beta)/g*2*CPEMix(higgs,1)*cos(beta)*sin(beta) + mueff*kappa*pow(2,0.5)*2*CPEMix(higgs,3)*cos(beta)*sin(beta) + lam*Alambda/pow(2,0.5)*2*CPEMix(higgs,3)*cos(beta)*sin(beta) + pow(gp,2)/4*mWboson/g*(sin(beta)*(2*CPEMix(higgs,1)*pow(cos(beta),2) - 2*CPEMix(higgs,1)*pow(sin(beta),2)) + cos(beta)*(2*CPEMix(higgs,2)*pow(sin(beta),2) - 2*CPEMix(higgs,2)*pow(cos(beta),2))) + g/4*mWboson*(sin(beta)*(2*CPEMix(higgs,1)*pow(cos(beta),2) + 2*CPEMix(higgs,1)*pow(sin(beta),2) + 2*2*CPEMix(higgs,2)*sin(beta)*cos(beta)) + cos(beta)*(2*CPEMix(higgs,2)*pow(cos(beta),2) + 2*CPEMix(higgs,2)*pow(sin(beta),2) + 2*2*CPEMix(higgs,1)*sin(beta)*cos(beta))) + lam/pow(2,0.5)*0); ///ignored corrections for now - no top or bottom loop corrections ///MUP in NMSSMTools is a fine-tuning parameter - set 0

    couplingW = -g/gp*(CPEMix(higgs,1)*sin(beta) + CPEMix(higgs,2)*cos(beta));

    kintr = tfoftau(3)*tZfoftau(3)/(2*(tfoftau(3)-tZfoftau(3))) + pow(tfoftau(3)*tZfoftau(3),2)/(2*(pow(tfoftau(3)-tZfoftau(3),2)))*(tfoftau(1) - tZfoftau(1)) + pow(tfoftau(3),2)*tZfoftau(3)/(pow(tfoftau(3)-tZfoftau(3),2))*(tgoftau(1)-tZgoftau(1)) + tfoftau(3)*tZfoftau(3)/(2*(tfoftau(3)-tZfoftau(3)))*(tfoftau(1)-tZfoftau(1));
    kinti = pow(tfoftau(3)*tZfoftau(3),2)/(2*(pow(tfoftau(3)-tZfoftau(3),2)))*(tfoftau(2) - tZfoftau(2)) + pow(tfoftau(3),2)*tZfoftau(3)/(pow(tfoftau(3)-tZfoftau(3),2))*(tgoftau(2)-tZgoftau(2)) + tfoftau(3)*tZfoftau(3)/(2*(tfoftau(3)-tZfoftau(3)))*(tfoftau(2)-tZfoftau(2));
    kinbr = bfoftau(3)*bZfoftau(3)/(2*(bfoftau(3)-bZfoftau(3))) + pow(bfoftau(3)*bZfoftau(3),2)/(2*(pow(bfoftau(3)-bZfoftau(3),2)))*(bfoftau(1) - bZfoftau(1)) + pow(bfoftau(3),2)*bZfoftau(3)/(pow(bfoftau(3)-bZfoftau(3),2))*(bgoftau(1)-bZgoftau(1)) + bfoftau(3)*bZfoftau(3)/(2*(bfoftau(3)-bZfoftau(3)))*(bfoftau(1)-bZfoftau(1));
    kinbi = pow(bfoftau(3)*bZfoftau(3),2)/(2*(pow(bfoftau(3)-bZfoftau(3),2)))*(bfoftau(2) - bZfoftau(2)) + pow(bfoftau(3),2)*bZfoftau(3)/(pow(bfoftau(3)-bZfoftau(3),2))*(bgoftau(2)-bZgoftau(2)) + bfoftau(3)*bZfoftau(3)/(2*(bfoftau(3)-bZfoftau(3)))*(bfoftau(2)-bZfoftau(2));
    kincr = cfoftau(3)*cZfoftau(3)/(2*(cfoftau(3)-cZfoftau(3))) + pow(cfoftau(3)*cZfoftau(3),2)/(2*(pow(cfoftau(3)-cZfoftau(3),2)))*(cfoftau(1) - cZfoftau(1)) + pow(cfoftau(3),2)*cZfoftau(3)/(pow(cfoftau(3)-cZfoftau(3),2))*(cgoftau(1)-cZgoftau(1)) + cfoftau(3)*cZfoftau(3)/(2*(cfoftau(3)-cZfoftau(3)))*(cfoftau(1)-cZfoftau(1));
    kinci = pow(cfoftau(3)*cZfoftau(3),2)/(2*(pow(cfoftau(3)-cZfoftau(3),2)))*(cfoftau(2) - cZfoftau(2)) + pow(cfoftau(3),2)*cZfoftau(3)/(pow(cfoftau(3)-cZfoftau(3),2))*(cgoftau(2)-cZgoftau(2)) + cfoftau(3)*cZfoftau(3)/(2*(cfoftau(3)-cZfoftau(3)))*(cfoftau(2)-cZfoftau(2));

    kinWr = 4*(3-pow(gp/g,2))*-Wfoftau(3)*WZfoftau(3)/(2*(Wfoftau(3)-WZfoftau(3)))*(Wfoftau(1) - WZfoftau(1)) + ((1 + 2/Wfoftau(3))*pow(gp/g,2) - (5+ 2/Wfoftau(3)))*(Wfoftau(3)*WZfoftau(3)/(2*(Wfoftau(3)-WZfoftau(3))) + pow(Wfoftau(3)*WZfoftau(3),2)/(2*pow(Wfoftau(3)-WZfoftau(3),2))*(Wfoftau(1)-WZfoftau(1)) + pow(Wfoftau(3),2)*WZfoftau(3)/(pow(Wfoftau(3)-WZfoftau(3),2))*(Wgoftau(1)-WZgoftau(1)));
    kinWi = 4*(3-pow(gp/g,2))*-Wfoftau(3)*WZfoftau(3)/(2*(Wfoftau(3)-WZfoftau(3)))*(Wfoftau(2) - WZfoftau(2)) + ((1 + 2/Wfoftau(3))*pow(gp/g,2) - (5+ 2/Wfoftau(3)))*(pow(Wfoftau(3),2)*WZfoftau(3)/(pow(Wfoftau(3)-WZfoftau(3),2))*(Wgoftau(2)-WZgoftau(2)));

    kinHpmr = Hpmfoftau(3)*HpmZfoftau(3)/(2*(Hpmfoftau(3)-HpmZfoftau(3))) + pow(Hpmfoftau(3)*HpmZfoftau(3),2)/(2*pow(Hpmfoftau(3)-HpmZfoftau(3),2))*(Hpmfoftau(1)-HpmZfoftau(1)) + pow(Hpmfoftau(3),2)*HpmZfoftau(3)/(pow(Hpmfoftau(3)-HpmZfoftau(3),2))*(Hpmgoftau(1)-HpmZgoftau(1));
    kinHpmi = pow(Hpmfoftau(3)*HpmZfoftau(3),2)/(2*pow(Hpmfoftau(3)-HpmZfoftau(3),2))*(Hpmfoftau(2)-HpmZfoftau(2)) + pow(Hpmfoftau(3),2)*HpmZfoftau(3)/(pow(Hpmfoftau(3)-HpmZfoftau(3),2))*(Hpmgoftau(2)-HpmZgoftau(2));
   
    kinch1r = ch1foftau(3)*ch1Zfoftau(3)/(2*(ch1foftau(3)-ch1Zfoftau(3))) + pow(ch1foftau(3)*ch1Zfoftau(3),2)/(2*pow(ch1foftau(3)-ch1Zfoftau(3),2))*(ch1foftau(1) - ch1Zfoftau(1)) + pow(ch1foftau(3),2)*ch1Zfoftau(3)/pow(ch1foftau(3) - ch1Zfoftau(3),2)*(ch1goftau(1) - ch1Zgoftau(1)) + ch1foftau(3)*ch1Zfoftau(3)/(2*(ch1foftau(3)-ch1Zfoftau(3)))*(ch1foftau(1)-ch1Zfoftau(1));
    kinch1i = pow(ch1foftau(3)*ch1Zfoftau(3),2)/(2*pow(ch1foftau(3)-ch1Zfoftau(3),2))*(ch1foftau(2) - ch1Zfoftau(2)) + pow(ch1foftau(3),2)*ch1Zfoftau(3)/pow(ch1foftau(3) - ch1Zfoftau(3),2)*(ch1goftau(2) - ch1Zgoftau(2)) + ch1foftau(3)*ch1Zfoftau(3)/(2*(ch1foftau(3)-ch1Zfoftau(3)))*(ch1foftau(2)-ch1Zfoftau(2));
    kinch2r = ch2foftau(3)*ch2Zfoftau(3)/(2*(ch2foftau(3)-ch2Zfoftau(3))) + pow(ch2foftau(3)*ch2Zfoftau(3),2)/(2*pow(ch2foftau(3)-ch2Zfoftau(3),2))*(ch2foftau(1) - ch2Zfoftau(1)) + pow(ch2foftau(3),2)*ch2Zfoftau(3)/pow(ch2foftau(3) - ch2Zfoftau(3),2)*(ch2goftau(1) - ch2Zgoftau(1)) + ch2foftau(3)*ch2Zfoftau(3)/(2*(ch2foftau(3)-ch2Zfoftau(3)))*(ch2foftau(1)-ch2Zfoftau(1));
    kinch2i = pow(ch2foftau(3)*ch2Zfoftau(3),2)/(2*pow(ch2foftau(3)-ch2Zfoftau(3),2))*(ch2foftau(2) - ch2Zfoftau(2)) + pow(ch2foftau(3),2)*ch2Zfoftau(3)/pow(ch2foftau(3) - ch2Zfoftau(3),2)*(ch2goftau(2) - ch2Zgoftau(2)) + ch2foftau(3)*ch2Zfoftau(3)/(2*(ch2foftau(3)-ch2Zfoftau(3)))*(ch2foftau(2)-ch2Zfoftau(2));
       
    Itr = couplingt*kintr; Icr = couplingc*kincr; Ibr = couplingb*kinbr; Ichar1r = couplingch1*kinch1r; Ichar2r = couplingch2*kinch2r; 
    Iti = couplingt*kinti; Ici = couplingc*kinci; Ibi = couplingb*kinbi; Ichar1i = couplingch1*kinch1i; Ichar2i = couplingch2*kinch2i; 
    IWr = couplingW*kinWr; IWi = couplingW*kinWi; IHpmr = couplingHpm*kinHpmr; IHpmi = couplingHpm*kinHpmi;

    DoubleVector matelemsum(2);
    for (int i = 1; i <= 2; i++) {
      matelemsum(i) = 0;
    }
    matelemsum(1) = Itr + Ibr + Icr + Ichar1r + Ichar2r + IWr + IHpmr;
    matelemsum(2) = Iti + Ibi + Ici + Ichar1i + Ichar2i + IWi + IHpmi;
    
    prefactor = GFosqrt2*pow(m1,3)*pow(alpha,2)/(64*pow(PI,3))*pow((1-pow(mZboson/m1,2)),3);
    
    matelemmodsquare = pow(matelemsum(1),2) + pow(matelemsum(2),2);
    amplitudeW = prefactor*matelemmodsquare;

  }  
  return amplitudeW;

}

 

double higgshamplitudedecayneutineutjNMSSM (double m1, double mneuti, double mneutj, double g, double gp, DoubleMatrix & CPEMix, DoubleMatrix & mixNeut, double lam, double kappa, int neuti, int neutj, int higgs) 
{
  double amplitudeW = 0;
  double coupling = 0, squareplus = 0, squareminus = 0, lambda = 0, factor = 0;
  if (m1 < fabs(mneuti)+fabs(mneutj)) { amplitudeW = 0;}
  else {
    if(neuti != neutj) { factor = 2;} ///accounts for decay being neuti neutj or neutj neuti when i!=j
    else if (neuti == neutj) { factor = 1;} ///for same neutralino they are QM indistinguishable so don't get factor of 2
    squareplus = 1 - pow(mneutj/m1+mneuti/m1,2);
    squareminus = 1 - pow(mneutj/m1-mneuti/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgshamplitudedecayneutineutjNMSSM\n");
      errorflag = -1;
    } 
    
    coupling = lam/(pow(2,0.5))*(CPEMix(higgs,1)*(mixNeut(neuti,3)*mixNeut(neutj,5) + mixNeut(neuti,5)*mixNeut(neutj,3)) + CPEMix(higgs,2)*(mixNeut(neuti,4)*mixNeut(neutj,5) + mixNeut(neuti,5)*mixNeut(neutj,4)) + CPEMix(higgs,3)*(mixNeut(neuti,4)*mixNeut(neutj,3)+mixNeut(neuti,3)*mixNeut(neutj,4))) - pow(2,0.5)*kappa*CPEMix(higgs,3)*mixNeut(neuti,5)*mixNeut(neutj,5) + gp/2*(-CPEMix(higgs,1)*(mixNeut(neuti,1)*mixNeut(neutj,4) + mixNeut(neuti,4)*mixNeut(neutj,1)) + CPEMix(higgs,2)*(mixNeut(neuti,1)*mixNeut(neutj,3) + mixNeut(neuti,3)*mixNeut(neutj,1))) + g/2*(CPEMix(higgs,1)*(mixNeut(neuti,2)*mixNeut(neutj,4) + mixNeut(neuti,4)*mixNeut(neutj,2)) - CPEMix(higgs,2)*(mixNeut(neuti,2)*mixNeut(neutj,3) + mixNeut(neuti,3)*mixNeut(neutj,2)));

    amplitudeW = factor*squareplus*pow(m1,2)*lambda*pow(coupling,2)/(16*PI*fabs(m1));
  }
  return amplitudeW;
}



double higgsAamplitudedecayHpmWboson(double m1, double mWboson, double mHpm, double g, double thetaA, int pseudoscalar, bool nmssmIsIt) ///Does A/A2 -> H+W- (note multiply by 2 if want to include H-W+ as well as H+W- in this)
{
  double amplitudeW = 0;
  if (m1 < mWboson + mHpm) {amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, coupling = 0;
    squareplus = 1 - pow(mHpm/m1 + mWboson/m1,2);
    squareminus = 1 - pow(mHpm/m1 - mWboson/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsAamplitudedecayHpmWboson\n");
      errorflag = -1;
    } 
    
    if (nmssmIsIt == false) { coupling = 1;}
    else if (nmssmIsIt == true) { 
      if( pseudoscalar == 1) {
	coupling = cos(thetaA);
      }
      else if (pseudoscalar == 2) {
	coupling = sin(thetaA);
      }
      else{
	throw("problem: pseudoscalar must be 1 or 2 in higgsAamplitudedecayHpmWboson");
	errorflag = -1;
      }
    }

    amplitudeW = GFosqrt2*pow(fabs(m1),3)*pow(coupling,2)/(8*PI)*pow(lambda,3);
  }
  return amplitudeW;
}


double CPEhCPOACPOACoupling  (DoubleMatrix & CPEMix, DoubleMatrix & CPOMix, int higgs, int pseudoscalar1, int pseudoscalar2, int j, int k, int l)
{
  double coupling = 0;
  coupling = CPEMix(higgs,j)*(CPOMix(pseudoscalar1,k)*CPOMix(pseudoscalar2,l) + CPOMix(pseudoscalar1,l)*CPOMix(pseudoscalar2,k));
  return coupling;
}


double higgsCPevenamplitudedecayAANMSSM(double m1, double mA1, double mA2, double mWboson, double runmt, double runmb, double g, double gp, double beta, DoubleMatrix & CPEMix, DoubleMatrix & CPOMix, double lam, double kappa, double Alambda, double Akappa, double mueff, int higgs, int pseudoscalar1, int pseudoscalar2) 
{
  double amplitudeW = 0;
  if (fabs(m1) < fabs(mA1) + fabs(mA2)) {
    amplitudeW = 0;
  }
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, prefactor = 0, coupling = 0;
    squareplus = 1 - pow(mA1/m1 + mA2/m1,2);
    squareminus = 1 - pow(mA1/m1 - mA2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecayAANMSSM\n");
      errorflag = -1;
    } 
    
    prefactor = 1/(32*PI*m1);
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;

    coupling = (pow(g,2)+pow(gp,2))/(4*pow(2,0.5))*(hvev1*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,1,1) - CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,2)) + hvev2*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,2,2) - CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,1))) + lam*Alambda/(pow(2,0.5))*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,3)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,3)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,2)) - kappa*Akappa/(pow(2,0.5))*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,3,3) + pow(lam,2)/pow(2,0.5)*(hvev1*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,2)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,3,3)) + hvev2*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,1)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,3,3)) + mueff/lam*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,1)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,2,2))) + pow(kappa,2)*pow(2,0.5)*mueff/lam*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,3,3) + lam*kappa/(pow(2,0.5))*(hvev1*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,3,3)-2*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,2,3)) + hvev2*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,3,3)-2*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,3)) + 2*mueff/lam*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,2)-CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,3) - CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,3)));

    amplitudeW = prefactor*lambda*pow(coupling,2); ///Multiplied by 2 later if A A2 to account for indistinguishability

  }
  return amplitudeW;
}
    

double higgsCPevenamplitudedecaypseudoscalarZNMSSM (double m1, double mA, double mZboson, double g, double gp, double beta, DoubleMatrix & CPEMix, DoubleMatrix & CPOMix, int higgs, int pseudoscalar) 
{
  double amplitudeW = 0;
  if (m1 < mA + mZboson) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, coupling = 0;
    squareplus = 1 - pow(mA/m1+mZboson/m1,2);
    squareminus = 1 - pow(mA/m1-mZboson/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaypseudoscalarZNMSSM\n");
      errorflag = -1;
    } 
    coupling = (CPEMix(higgs,1)*cos(beta) - CPEMix(higgs,2)*sin(beta))*(CPOMix(pseudoscalar,1)*cos(beta) - CPOMix(pseudoscalar,2)*sin(beta));
    amplitudeW = (pow(g,2)+pow(gp,2))*pow(m1,3)/(64*PI*pow(mZboson,2))*pow(coupling,2)*pow(lambda,3);

  }
  return amplitudeW;
}


double higgsCPevenamplitudedecayHpHmNMSSM (double m1, double mHpm, double mWboson,  double g, double gp, double mtop, double mbottom, double beta, double lam, double mueff, double kappa, double Alambda, DoubleMatrix & CPEMix, int higgs)
{
  double amplitudeW = 0;
  if (m1 < 2*mHpm) {amplitudeW = 0;}
  else {
    double squareplus = 0, lambda = 0, couplingHpm = 0;
    squareplus = 1 - pow(2*mHpm/m1,2);
    lambda = pow(squareplus,0.5);
    if (squareplus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecayHpHmNMSSM\n");
      errorflag = -1;
    } 
    couplingHpm = (lam*mueff/(pow(2,0.5))*(2*CPEMix(higgs,3)*pow(cos(beta),2) + 2*CPEMix(higgs,3)*pow(sin(beta),2)) - pow(lam,2)*mWboson*sin(beta)/g*2*CPEMix(higgs,2)*cos(beta)*sin(beta) - pow(lam,2)*mWboson*sin(beta)/g*2*CPEMix(higgs,1)*cos(beta)*sin(beta) + mueff*kappa*pow(2,0.5)*2*CPEMix(higgs,3)*cos(beta)*sin(beta) + lam*Alambda/pow(2,0.5)*2*CPEMix(higgs,3)*cos(beta)*sin(beta) + pow(gp,2)/4*mWboson/g*(sin(beta)*(2*CPEMix(higgs,1)*pow(cos(beta),2) - 2*CPEMix(higgs,1)*pow(sin(beta),2)) + cos(beta)*(2*CPEMix(higgs,2)*pow(sin(beta),2) - 2*CPEMix(higgs,2)*pow(cos(beta),2))) + g/4*mWboson*(sin(beta)*(2*CPEMix(higgs,1)*pow(cos(beta),2) + 2*CPEMix(higgs,1)*pow(sin(beta),2) + 2*2*CPEMix(higgs,2)*sin(beta)*cos(beta)) + cos(beta)*(2*CPEMix(higgs,2)*pow(cos(beta),2) + 2*CPEMix(higgs,2)*pow(sin(beta),2) + 2*2*CPEMix(higgs,1)*sin(beta)*cos(beta))) + lam/pow(2,0.5)*0);

    amplitudeW = lambda*pow(couplingHpm,2)/(16*PI*m1);
  }
  return amplitudeW;
}

double hHH3Couplings(DoubleMatrix & CPEMix, int higgsno, int higgs1, int higgs2, int x, int y, int z) {
  double coupling = 0;
  coupling = CPEMix(higgsno,x)*CPEMix(higgs1,y)*CPEMix(higgs2,z) + CPEMix(higgsno,x)*CPEMix(higgs2,y)*CPEMix(higgs1,z) + CPEMix(higgs1,x)*CPEMix(higgsno,y)*CPEMix(higgs2,z) + CPEMix(higgs1,x)*CPEMix(higgsno,z)*CPEMix(higgs2,y) + CPEMix(higgs2,x)*CPEMix(higgsno,y)*CPEMix(higgs1,z) + CPEMix(higgs2,x)*CPEMix(higgs1,y)*CPEMix(higgsno,z);

  return coupling;
}

double higgsCPevenamplitudedecayhhorhHorHHNMSSM(double m1, double mh1, double mh2, double g, double gp, double mWboson, double mtop, double mbottom, double beta, double lam, double Alambda, double kappa, double Akappa, double mueff, DoubleMatrix & CPEMix, DoubleMatrix & CPOMix, int higgs1, int higgs2, int starthiggs)
{
  double amplitudeW = 0;
  if(m1 < mh1 + mh2) {amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, coupling = 0, deltah1h2 = 0, hvev1 = 0, hvev2 = 0;
    squareplus = 1 - pow(mh1/m1+mh2/m1,2);
    squareminus = 1 - pow(mh1/m1-mh2/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecayhhorhHorHHNMSSM\n");
      errorflag = -1;
    } 
    if (higgs1 == higgs2) { deltah1h2 = 1;}
    else {deltah1h2 = 2;}
    prefactor = deltah1h2/(32*PI*m1);
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;
    
    coupling = (pow(g,2)+pow(gp,2))/(4*pow(2,0.5))*(hvev1*(hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,1,1,1)-hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,1,2,2))+ hvev2*(hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,2,2,2) - hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,2,1,1))) - lam*Alambda/pow(2,0.5)*hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,1,2,3) + kappa*Akappa/(3*pow(2,0.5))*hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,3,3,3) + pow(lam,2)/pow(2,0.5)*(hvev1*(hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,1,2,2) + hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,1,3,3)) + hvev2*(hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,2,1,1) + hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,2,3,3)) + mueff/lam*(hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,3,1,1)+hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,3,2,2))) + pow(kappa,2)*pow(2,0.5)*mueff/lam*hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,3,3,3) - lam*kappa/(pow(2,0.5))*(hvev1*hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,3,2,3) + hvev2*hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,3,1,3) + 2*mueff/lam*hHH3Couplings(CPEMix,starthiggs,higgs1,higgs2,1,2,3));

    amplitudeW = prefactor*lambda*pow(coupling,2);
  }
  return amplitudeW;
}



double higgsA2amplitudedecayA1CPevenNMSSM(double m1, double mA1, double mh, double mWboson, double runmt, double runmb, double g, double gp, double beta, DoubleMatrix & CPEMix, DoubleMatrix & CPOMix, double lam, double kappa, double Alambda, double Akappa, double mueff, int higgs) 
{
  double amplitudeW = 0;
  if (fabs(m1) < fabs(mA1) + fabs(mh)) {
    amplitudeW = 0;
  }
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, prefactor = 0, coupling = 0;
    squareplus = 1 - pow(mA1/m1 + mh/m1,2);
    squareminus = 1 - pow(mA1/m1 - mh/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsA2amplitudedecayA1CPevenNMSSM\n");
      errorflag = -1;
    } 
    
    prefactor = 1/(16*PI*m1);
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;
    int pseudoscalar1 = 1, pseudoscalar2 = 2;

    coupling = (pow(g,2)+pow(gp,2))/(4*pow(2,0.5))*(hvev1*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,1,1) - CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,2)) + hvev2*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,2,2) - CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,1))) + lam*Alambda/(pow(2,0.5))*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,3)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,3)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,2)) - kappa*Akappa/(pow(2,0.5))*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,3,3) + pow(lam,2)/pow(2,0.5)*(hvev1*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,2)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,3,3)) + hvev2*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,1)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,3,3)) + mueff/lam*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,1)+CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,2,2))) + pow(kappa,2)*pow(2,0.5)*mueff/lam*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,3,3) + lam*kappa/(pow(2,0.5))*(hvev1*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,3,3)-2*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,2,3)) + hvev2*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,3,3)-2*CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,3)) + 2*mueff/lam*(CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,3,1,2)-CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,1,2,3) - CPEhCPOACPOACoupling(CPEMix,CPOMix,higgs,pseudoscalar1,pseudoscalar2,2,1,3)));

    amplitudeW = prefactor*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecayWHpmNMSSM (double m1, double mWboson, double mHpm, double beta, double g, DoubleMatrix & CPEMix, int higgs)
{
  double amplitudeW = 0;
  if (m1 < mWboson + mHpm) {amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0;
    squareplus = 1 - pow(mWboson/m1+mHpm/m1,2);
    squareminus = 1 - pow(mWboson/m1-mHpm/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecayWHpmNMSSM\n");
      errorflag = -1;
    } 
    
    amplitudeW = GFosqrt2*pow(m1,3)/(8*PI)*pow(CPEMix(higgs,1)*cos(beta)-CPEMix(higgs,2)*sin(beta),2)*pow(lambda,3);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecaystopistopiNMSSM (double m1, double mstopi, double thetat, double runmt, double g, double gp, double mWboson, double beta, DoubleMatrix & CPEMix, double At, double mueff, double lam, int stop, int higgs) 
{
  double amplitudeW = 0;
  if (m1 < 2*mstopi) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, huq = 0, coupling = 0, angle1 = 0, angle2 = 0;
    squareplus = 1 - 4*pow(mstopi/m1,2);
    squareminus = 1;
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaystopistopiNMSSM\n");
      errorflag = -1;
    } 
    hvev1 = (pow(2,0.5)*mWboson*sin(beta))/g;
    hvev2 = (pow(2,0.5)*mWboson*cos(beta))/g;
    huq = runmt/hvev1;
    if (stop == 1) {
      angle1 = cos(thetat); angle2 = sin(thetat);
    }
    else if (stop == 2) {
      angle1 = -sin(thetat); angle2 = cos(thetat);
    }
    else{
      throw("problem: stop must be 1 or 2 in higgsCPevenamplitudedecaystopistopiNMSSM\n");
      errorflag = -1;
    }
    coupling = pow(angle1,2)*pow(2,0.5)*(pow(huq,2)*hvev1*CPEMix(higgs,1) + (pow(gp,2)/12 - pow(g,2)/4)*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) + pow(angle2,2)*pow(2,0.5)*(pow(huq,2)*hvev1*CPEMix(higgs,1) - pow(gp,2)/3*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) + 2*angle1*angle2*huq/(pow(2,0.5))*(At*CPEMix(higgs,1) - mueff*CPEMix(higgs,2) - lam*hvev2*CPEMix(higgs,3));

    amplitudeW = 3/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecaystopistopjNMSSM (double m1, double mstopi, double mstopj, double thetat, double runmt, double g, double gp, double mWboson, double beta, DoubleMatrix & CPEMix, double At, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0;
  if (m1 < mstopi+mstopj) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, huq = 0, coupling = 0;
    squareplus = 1 - pow(mstopi/m1+mstopj/m1,2);
    squareminus = 1- pow(mstopi/m1-mstopj/m1,2); 
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaystopistopjNMSSM\n");
      errorflag = -1;
    } 
    hvev1 = (pow(2,0.5)*mWboson*sin(beta))/g;
    hvev2 = (pow(2,0.5)*mWboson*cos(beta))/g;
    huq = runmt/hvev1;

    coupling = cos(thetat)*sin(thetat)*(pow(2,0.5)*(pow(huq,2)*hvev1*CPEMix(higgs,1) - pow(gp,2)/3*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) - pow(2,0.5)*(pow(huq,2)*hvev1*CPEMix(higgs,1) + (pow(gp,2)/12 - pow(g,2)/4)*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2)))) + (pow(cos(thetat),2)-pow(sin(thetat),2))*huq/(pow(2,0.5))*(At*CPEMix(higgs,1) - mueff*CPEMix(higgs,2) - lam*hvev2*CPEMix(higgs,3));

    amplitudeW = 3/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecaysbottomisbottomiNMSSM (double m1, double msbottomi, double thetab, double runmb, double g, double gp, double mWboson, double beta, DoubleMatrix & CPEMix, double Ab, double mueff, double lam, int sbottom, int higgs) 
{
  double amplitudeW = 0;
  if (m1 < 2*msbottomi) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, hdq = 0, coupling = 0, angle1 = 0, angle2 = 0;
    squareplus = 1 - 4*pow(msbottomi/m1,2);
    squareminus = 1;
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaysbottomisbottomiNMSSM\n");
      errorflag = -1;
    } 
    hvev1 = (pow(2,0.5)*mWboson*sin(beta))/g;
    hvev2 = (pow(2,0.5)*mWboson*cos(beta))/g;
    hdq = runmb/hvev2;
    if (sbottom == 1) {
      angle1 = cos(thetab); angle2 = sin(thetab);
    }
    else if (sbottom == 2) {
      angle1 = -sin(thetab); angle2 = cos(thetab);
    }
    else{
      throw("problem: sbottom must be 1 or 2 in higgsCPevenamplitudedecaysbottomisbottomiNMSSM");
      errorflag = -1;
    }

    coupling = pow(angle1,2)*pow(2,0.5)*(pow(hdq,2)*hvev2*CPEMix(higgs,2) + (pow(gp,2)/12 + pow(g,2)/4)*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) + pow(angle2,2)*pow(2,0.5)*(pow(hdq,2)*hvev2*CPEMix(higgs,2) + pow(gp,2)/6*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) + 2*angle1*angle2*hdq/(pow(2,0.5))*(Ab*CPEMix(higgs,2) - mueff*CPEMix(higgs,1) - lam*hvev1*CPEMix(higgs,3));

    amplitudeW = 3/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecaysbottomisbottomjNMSSM (double m1, double msbottomi, double msbottomj, double thetab, double runmb, double g, double gp, double mWboson, double beta, DoubleMatrix & CPEMix, double Ab, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0;
  if (m1 < msbottomi+msbottomj) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, hdq = 0, coupling = 0;
    squareplus = 1 - pow(msbottomi/m1+msbottomj/m1,2);
    squareminus = 1- pow(msbottomi/m1-msbottomj/m1,2); 
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaysbottomisbottomjNMSSM\n");
      errorflag = -1;
    } 
    hvev1 = (pow(2,0.5)*mWboson*sin(beta))/g;
    hvev2 = (pow(2,0.5)*mWboson*cos(beta))/g;
    hdq = runmb/hvev2;

    coupling = cos(thetab)*sin(thetab)*(pow(2,0.5)*(pow(hdq,2)*hvev2*CPEMix(higgs,2) + pow(gp,2)/6*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) - pow(2,0.5)*(pow(hdq,2)*hvev2*CPEMix(higgs,2) + (pow(gp,2)/12 + pow(g,2)/4)*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2)))) + (pow(cos(thetab),2)-pow(sin(thetab),2))*hdq/(pow(2,0.5))*(Ab*CPEMix(higgs,2) - mueff*CPEMix(higgs,1) - lam*hvev1*CPEMix(higgs,3));

    amplitudeW = 3/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecaystauistauiNMSSM (double m1, double mstaui, double thetatau, double runmtau, double g, double gp, double mWboson, double beta, DoubleMatrix & CPEMix, double Atau, double mueff, double lam, int stau, int higgs) 
{
  double amplitudeW = 0;
  if (m1 < 2*mstaui) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, hlq = 0, coupling = 0, angle1 = 0, angle2 = 0;
    squareplus = 1 - 4*pow(mstaui/m1,2);
    squareminus = 1;
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaystauistauiNMSSM\n");
      errorflag = -1;
    } 
    hvev1 = (pow(2,0.5)*mWboson*sin(beta))/g;
    hvev2 = (pow(2,0.5)*mWboson*cos(beta))/g;
    hlq = runmtau/hvev2;
    if (stau == 1) {
      angle1 = sin(thetatau); angle2 = cos(thetatau);
    }
    else if (stau == 2) {
      angle1 = -cos(thetatau); angle2 = sin(thetatau);
    }
    else{
      throw("problem: stau must be 1 or 2 in higgsCPevenamplitudedecaystauistauiNMSSM");
      errorflag = -1;
    }

    coupling = pow(angle1,2)*pow(2,0.5)*(pow(hlq,2)*hvev2*CPEMix(higgs,2) + (-pow(gp,2)/4 + pow(g,2)/4)*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) + pow(angle2,2)*pow(2,0.5)*(pow(hlq,2)*hvev2*CPEMix(higgs,2) + pow(gp,2)/2*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) - 2*angle1*angle2*hlq/(pow(2,0.5))*(Atau*CPEMix(higgs,2) - mueff*CPEMix(higgs,1) - lam*hvev1*CPEMix(higgs,3));

    amplitudeW = 1/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double higgsCPevenamplitudedecaystauistaujNMSSM (double m1, double mstaui, double mstauj, double thetatau, double runmtau, double g, double gp, double mWboson, double beta, DoubleMatrix & CPEMix, double Atau, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0;
  if (m1 < mstaui+mstauj) { amplitudeW = 0;}
  else {
    double squareplus = 0, squareminus = 0, lambda = 0, hvev1 = 0, hvev2 = 0, hlq = 0, coupling = 0;
    squareplus = 1 - pow(mstaui/m1+mstauj/m1,2);
    squareminus = 1- pow(mstaui/m1-mstauj/m1,2); 
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in higgsCPevenamplitudedecaystauistaujNMSSM\n");
      errorflag = -1;
    } 
    hvev1 = (pow(2,0.5)*mWboson*sin(beta))/g;
    hvev2 = (pow(2,0.5)*mWboson*cos(beta))/g;
    hlq = runmtau/hvev2;

    coupling = cos(thetatau)*sin(thetatau)*(pow(2,0.5)*(pow(hlq,2)*hvev2*CPEMix(higgs,2) + pow(gp,2)/2*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2))) - pow(2,0.5)*(pow(hlq,2)*hvev2*CPEMix(higgs,2) + (-pow(gp,2)/4 + pow(g,2)/4)*(hvev1*CPEMix(higgs,1) - hvev2*CPEMix(higgs,2)))) - (pow(sin(thetatau),2)-pow(cos(thetatau),2))*hlq/(pow(2,0.5))*(Atau*CPEMix(higgs,2) - mueff*CPEMix(higgs,1) - lam*hvev1*CPEMix(higgs,3));

    amplitudeW = 1/(16*PI*m1)*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double stop2amplitudedecaystop1CPevenhiggsNMSSM (double mst2, double mst1, double mh, double mt , double thetat, DoubleMatrix & CPEMix, double beta, double mWboson, double g, double gp, double At, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0, coupling = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, ft = 0, hvev1 = 0, hvev2 = 0, CL = 0, CR = 0, CLR = 0;
  if(mst2 < mst1 + mh) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*mst2);
    squareplus = 1 - pow(mst1/mst2 + mh/mst2,2);
    squareminus = 1 - pow(mst1/mst2 - mh/mst2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stop2amplitudedecaystop1CPevenhiggsNMSSM\n");
      errorflag = -1;
    } 
    ft = g*mt/(pow(2,0.5)*mWboson*sin(beta));
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;
    CL = -pow(2,0.5)*(pow(ft,2)*hvev1*CPEMix(higgs,1) + (pow(gp,2)/12-pow(g,2)/4)*(hvev1*CPEMix(higgs,1)-hvev2*CPEMix(higgs,2)));
    CR = -pow(2,0.5)*(pow(ft,2)*hvev1*CPEMix(higgs,1) - pow(gp,2)/3*(hvev1*CPEMix(higgs,1)-hvev2*CPEMix(higgs,2)));
    CLR = -ft/pow(2,0.5)*(At*CPEMix(higgs,1)-mueff*CPEMix(higgs,2)-lam*hvev2*CPEMix(higgs,3));
    coupling = cos(thetat)*sin(thetat)*(CR-CL) + (pow(cos(thetat),2)-pow(sin(thetat),2))*CLR;
    amplitudeW = prefactor*lambda*pow(coupling,2);
  }
  return amplitudeW;
}
    

double stop2amplitudedecaystop1CPoddhiggsNMSSM (double mst2, double mst1, double ma, double mt , double thetat, DoubleMatrix & CPOMix, double beta, double mWboson, double g , double At, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0, coupling = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, ft = 0, hvev2 = 0, ALR = 0;
  if(mst2 < mst1 + ma) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*mst2);
    squareplus = 1 - pow(mst1/mst2 + ma/mst2,2);
    squareminus = 1 - pow(mst1/mst2 - ma/mst2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stop2amplitudedecaystop1CPoddhiggsNMSSM\n");
      errorflag = -1;
    } 
    ft = g*mt/(pow(2,0.5)*mWboson*sin(beta));
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;
    ALR = -(ft/pow(2,0.5))*(At*CPOMix(higgs,1) + mueff*CPOMix(higgs,2) + lam*hvev2*CPOMix(higgs,3));
    coupling = (pow(cos(thetat),2)-pow(sin(thetat),2))*ALR;
    amplitudeW = prefactor*lambda*pow(coupling,2);

  }
  return amplitudeW;
}


double sbottom2amplitudedecaysbottom1CPevenhiggsNMSSM (double msb2, double msb1, double mh, double mb , double thetab, DoubleMatrix & CPEMix, double beta, double mWboson, double g, double gp, double Ab, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0, coupling = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, fb = 0, hvev1 = 0, hvev2 = 0, CL = 0, CR = 0, CLR = 0;
  if(msb2 < msb1 + mh) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*msb2);
    squareplus = 1 - pow(msb1/msb2 + mh/msb2,2);
    squareminus = 1 - pow(msb1/msb2 - mh/msb2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sbottom2amplitudedecaysbottom1CPevenhiggsNMSSM\n");
      errorflag = -1;
    } 
    fb = g*mb/(pow(2,0.5)*mWboson*cos(beta));
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;
    CL = -pow(2,0.5)*(pow(fb,2)*hvev2*CPEMix(higgs,2) + (pow(gp,2)/12+pow(g,2)/4)*(hvev1*CPEMix(higgs,1)-hvev2*CPEMix(higgs,2)));
    CR = -pow(2,0.5)*(pow(fb,2)*hvev2*CPEMix(higgs,2) + pow(gp,2)/6*(hvev1*CPEMix(higgs,1)-hvev2*CPEMix(higgs,2)));
    CLR = -fb/pow(2,0.5)*(Ab*CPEMix(higgs,2)-mueff*CPEMix(higgs,1)-lam*hvev1*CPEMix(higgs,3));
    coupling = cos(thetab)*sin(thetab)*(CR-CL) + (pow(cos(thetab),2)-pow(sin(thetab),2))*CLR;
    amplitudeW = prefactor*lambda*pow(coupling,2);

  }
  return amplitudeW;
}


double sbottom2amplitudedecaysbottom1CPoddhiggsNMSSM (double msb2, double msb1, double ma, double mb , double thetab, DoubleMatrix & CPOMix, double beta, double mWboson, double g , double Ab, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0, coupling = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, fb = 0, hvev1 = 0, ALR = 0;
  if(msb2 < msb1 + ma) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*msb2);
    squareplus = 1 - pow(msb1/msb2 + ma/msb2,2);
    squareminus = 1 - pow(msb1/msb2 - ma/msb2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sbottom2amplitudedecaysbottom1CPoddhiggsNMSSM\n");
      errorflag = -1;
    } 
    fb = g*mb/(pow(2,0.5)*mWboson*cos(beta));
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    ALR = -(fb/pow(2,0.5))*(Ab*CPOMix(higgs,2) + mueff*CPOMix(higgs,1) + lam*hvev1*CPOMix(higgs,3));
    coupling = (pow(cos(thetab),2)-pow(sin(thetab),2))*ALR;
    amplitudeW = prefactor*lambda*pow(coupling,2);

  }
  return amplitudeW;
}


double stau2amplitudedecaystau1CPevenhiggsNMSSM (double mstau2, double mstau1, double mh, double mtau, double thetatau, DoubleMatrix & CPEMix, double beta, double mWboson, double g, double gp, double Atau, double mueff, double lam, int higgs) 
{
  double amplitudeW = 0, coupling = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, ftau = 0, hvev1 = 0, hvev2 = 0, CL = 0, CR = 0, CLR = 0;
  if(mstau2 < mstau1 + mh) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*mstau2);
    squareplus = 1 - pow(mstau1/mstau2 + mh/mstau2,2);
    squareminus = 1 - pow(mstau1/mstau2 - mh/mstau2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stau2amplitudedecaystau1CPevenhiggsNMSSM\n");
      errorflag = -1;
    } 
    ftau = g*mtau/(pow(2,0.5)*mWboson*cos(beta));
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    hvev2 = pow(2,0.5)*mWboson*cos(beta)/g;
    CL = -pow(2,0.5)*(pow(ftau,2)*hvev2*CPEMix(higgs,2) + (-pow(gp,2)/4+pow(g,2)/4)*(hvev1*CPEMix(higgs,1)-hvev2*CPEMix(higgs,2)));
    CR = -pow(2,0.5)*(pow(ftau,2)*hvev2*CPEMix(higgs,2) + pow(gp,2)/2*(hvev1*CPEMix(higgs,1)-hvev2*CPEMix(higgs,2)));
    CLR = -ftau/pow(2,0.5)*(Atau*CPEMix(higgs,2)-mueff*CPEMix(higgs,1)-lam*hvev1*CPEMix(higgs,3));
    coupling = cos(thetatau)*sin(thetatau)*(CR-CL) + (pow(cos(thetatau),2)-pow(sin(thetatau),2))*CLR;
    amplitudeW = prefactor*lambda*pow(coupling,2);
  }
  return amplitudeW;
}


double stau2amplitudedecaystau1CPoddhiggsNMSSM
(double mstau2, double mstau1, double ma, double mtau, double thetatau,
 DoubleMatrix & CPOMix, double beta, double mWboson, double g , double Atau,
 double mueff, double lam, int higgs) {
  double amplitudeW = 0, coupling = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, ftau = 0, hvev1 = 0, ALR = 0;
  if(mstau2 < mstau1 + ma) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*mstau2);
    squareplus = 1 - pow(mstau1/mstau2 + ma/mstau2,2);
    squareminus = 1 - pow(mstau1/mstau2 - ma/mstau2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stau2amplitudedecaystau1CPoddhiggsNMSSM\n");
      errorflag = -1;
    } 
    ftau = g*mtau/(pow(2,0.5)*mWboson*cos(beta));
    hvev1 = pow(2,0.5)*mWboson*sin(beta)/g;
    ALR = -(ftau/pow(2,0.5))*(Atau*CPOMix(higgs,2) + mueff*CPOMix(higgs,1) + lam*hvev1*CPOMix(higgs,3));
    coupling = (pow(cos(thetatau),2)-pow(sin(thetatau),2))*ALR;
    amplitudeW = prefactor*lambda*pow(coupling,2);

  }
  return amplitudeW;
}


double chargino2amplitudedecaychargino1CPevenhiggsNMSSM (double mchar2, double mchar1, double mh, double g, double lam, double thetaL, double thetaR, DoubleMatrix & CPEMix, int higgs) 
{
  double amplitudeW = 0, lambda = 0, squareplus = 0, squareminus = 0, coupling1 = 0, coupling2 = 0, coupling = 0, prefactor = 0;
  if (fabs(mchar2) < fabs(mchar1) + mh) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(32*PI*fabs(mchar2));
    coupling1 = (lam/(pow(2,0.5))*CPEMix(higgs,3)*cos(thetaL)*sin(thetaR) + g/(pow(2,0.5))*(CPEMix(higgs,1)*sin(thetaL)*sin(thetaR) - CPEMix(higgs,2)*cos(thetaL)*cos(thetaR)));
    coupling2 = (lam/(pow(2,0.5))*CPEMix(higgs,3)*sin(thetaL)*cos(thetaR) - g/(pow(2,0.5))*(CPEMix(higgs,1)*cos(thetaL)*cos(thetaR) - CPEMix(higgs,2)*sin(thetaL)*sin(thetaR)));
    squareplus = 1 - pow(mchar1/mchar2 + mh/mchar2,2);
    squareminus = 1 - pow(mchar1/mchar2 - mh/mchar2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in chargino2amplitudedecaychargino1CPevenhiggsNMSSM\n");
      errorflag = -1;
    } 
    coupling = (pow(coupling1,2)+pow(coupling2,2))*(pow(mchar1,2)+pow(mchar2,2)-pow(mh,2)) + 4*coupling1*coupling2*mchar1*mchar2;
    amplitudeW = prefactor*lambda*coupling;

  }
  return amplitudeW;
}

 
double chargino2amplitudedecaychargino1CPoddhiggsNMSSM (double mchar2, double mchar1, double mA, double g, double lam, double thetaL, double thetaR, DoubleMatrix & CPOMix, int higgs) 
{
  double amplitudeW = 0, lambda = 0, squareplus = 0, squareminus = 0, C1 = 0, C2 = 0, coupling = 0, prefactor = 0;
  if (fabs(mchar2) < fabs(mchar1) + mA) {
    amplitudeW = 0;
  }
  else {
    int pseudoscalar = higgs;
    prefactor = 1/(32*PI*fabs(mchar2));
    C1 = (lam/pow(2,0.5)*CPOMix(pseudoscalar,3)*cos(thetaL)*sin(thetaR) - pow(2,-0.5)*g*(CPOMix(pseudoscalar,1)*sin(thetaL)*sin(thetaR) - CPOMix(pseudoscalar,2)*cos(thetaL)*cos(thetaR)));
    C2 = (lam/pow(2,0.5)*CPOMix(pseudoscalar,3)*sin(thetaL)*cos(thetaR) - pow(2,-0.5)*g*(CPOMix(pseudoscalar,1)*-cos(thetaL)*cos(thetaR) + CPOMix(pseudoscalar,2)*sin(thetaR)*sin(thetaL)));
    squareplus = 1 - pow(mchar1/mchar2 + mA/mchar2,2);
    squareminus = 1 - pow(mchar1/mchar2 - mA/mchar2,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in chargino2amplitudedecaychargino1CPevoddhiggsNMSSM\n");
      errorflag = -1;
    } 
    coupling = (pow(C1,2)+pow(C2,2))*(pow(mchar1,2)+pow(mchar2,2)-pow(mA,2)) + 4*C1*C2*mchar1*mchar2;
    amplitudeW = prefactor*lambda*coupling;
  }
  return amplitudeW;
} 


double neutralinoamplitudedecaycharginoWNMSSM (double mneut, double mchar, double mWboson, double g, double thetaL, double thetaR, DoubleMatrix & mixNeut, int neutralino, int chargino) 
{
  double amplitudeW = 0, squareplus = 0, squareminus = 0, lambda = 0, coupleL = 0, coupleR = 0, coupling = 0, prefactor = 0, V2 = 0, V1 = 0, U2 = 0, U1 = 0;
  if (fabs(mneut) < fabs(mchar) + mWboson) {
    amplitudeW = 0;
  }
  else {
    prefactor = pow(g,2)/(32*PI*fabs(mneut));
    
    if (chargino == 1) {
      V2 = cos(thetaR); V1 = sin(thetaR); U2 = cos(thetaL); U1 = sin(thetaL);
    }
    else if (chargino == 2) {
      V2 = sin(thetaR); V1 = -cos(thetaR); U2 = sin(thetaL); U1 = -cos(thetaL);
    }
    else{
      throw("problem: chargino must be 1 or 2 in neutralinoamplitudedecaycharginoWNMSSM");
      errorflag = -1;
    }

    coupleL = -1/pow(2,0.5)*mixNeut(neutralino,4)*V2 + mixNeut(neutralino,2)*V1;
    coupleR = 1/pow(2,0.5)*mixNeut(neutralino,3)*U2 + mixNeut(neutralino,2)*U1;

    squareplus = 1 - pow(fabs(mchar)/fabs(mneut) + mWboson/fabs(mneut),2);
    squareminus = 1 - pow(fabs(mchar)/fabs(mneut) - mWboson/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaycharginoWNMSSM\n");
      errorflag = -1;
    } 

    coupling = -12*mneut*mchar*coupleL*coupleR + (pow(coupleL,2)+pow(coupleR,2))*((pow(mchar,2)+pow(mneut,2)-pow(mWboson,2)) + (pow(mneut,2)+pow(mWboson,2)-pow(mchar,2))*(pow(mneut,2)-pow(mchar,2)-pow(mWboson,2))/pow(mWboson,2));

    amplitudeW = prefactor*lambda*coupling;
  }

  return amplitudeW;
}
    

double neutralinoamplitudedecayneutralinoZNMSSM (double mneuti, double mneutj, double mZboson, double g, double gp, DoubleMatrix & mixNeut, int neutralinoi, int neutralinoj)
{
  double amplitudeW = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, costhetaW = 0, coupleZL = 0, coupleZR = 0, coupling = 0;
  if (fabs(mneuti) < fabs(mneutj) + mZboson) { 
    amplitudeW = 0;
  }
  else {
    prefactor = pow(g,2)/(32*PI*fabs(mneuti));
    squareplus = 1 - pow(fabs(mneutj)/fabs(mneuti) + mZboson/fabs(mneuti),2);
    squareminus = 1 - pow(fabs(mneutj)/fabs(mneuti) - mZboson/fabs(mneuti),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayneutralinoZNMSSM\n");
      errorflag = -1;
    } 

    costhetaW = g/pow(pow(g,2)+pow(gp,2),0.5);

    coupleZR = 1/(2*costhetaW)*(mixNeut(neutralinoi,3)*mixNeut(neutralinoj,3) - mixNeut(neutralinoi,4)*mixNeut(neutralinoj,4));
    coupleZL = -coupleZR;

    coupling = -12*mneuti*mneutj*coupleZL*coupleZR + (pow(coupleZL,2)+pow(coupleZR,2))*((pow(mneuti,2)+pow(mneutj,2)-pow(mZboson,2)) + (pow(mneuti,2)-pow(mneutj,2)+pow(mZboson,2))*(pow(mneuti,2)-pow(mneutj,2)-pow(mZboson,2))/pow(mZboson,2));

    amplitudeW = prefactor*lambda*coupling;
  }
  return amplitudeW;
}


double neutralinoamplitudecharginoHpmNMSSM (double mneut, double mchar, double mHp, double g, double gp, double beta, double thetaL, double thetaR, double lam, DoubleMatrix & mixNeut, int neutralino, int chargino)
{
  double amplitudeW = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, coupHpZiWjL = 0, coupHpZiWjR = 0, coupling = 0, V1 = 0, V2 = 0, U1 = 0, U2 = 0;
  if (fabs(mneut) < fabs(mchar) + mHp) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(32*PI*fabs(mneut));
    squareplus = 1 - pow(fabs(mchar)/fabs(mneut) + mHp/fabs(mneut),2);
    squareminus = 1 - pow(fabs(mchar)/fabs(mneut) - mHp/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaycharginoHpmNMSSM\n");
      errorflag = -1;
    } 
    
    if (chargino == 1) {
      V2 = cos(thetaR); V1 = sin(thetaR); U2 = cos(thetaL); U1 = sin(thetaL);
    }
    else if (chargino == 2) {
      V2 = sin(thetaR); V1 = -cos(thetaR); U2 = sin(thetaL); U1 = -cos(thetaL);
    }
    else{
      throw("problem: chargino must be 1 or 2 in neutralinoamplitudecharginoHpmNMSSM\n");
      errorflag = -1;
    }

    coupHpZiWjL = lam*cos(beta)*mixNeut(neutralino,5)*U2 - sin(beta)/(pow(2,0.5))*(gp*mixNeut(neutralino,1)+g*mixNeut(neutralino,2))*U2 + sin(beta)*g*mixNeut(neutralino,3)*U1;
    coupHpZiWjR = lam*sin(beta)*mixNeut(neutralino,5)*V2 + cos(beta)/(pow(2,0.5))*(gp*mixNeut(neutralino,1)+g*mixNeut(neutralino,2))*V2 + cos(beta)*g*mixNeut(neutralino,4)*V1;

    coupling = (pow(coupHpZiWjL,2)+pow(coupHpZiWjR,2))*(pow(mchar,2)+pow(mneut,2)-pow(mHp,2)) + 4*coupHpZiWjL*coupHpZiWjR*mneut*mchar;

    amplitudeW = prefactor*coupling*lambda;
  }
  return amplitudeW;
}


double neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM (double mneuti, double mneutj, double mhiggs, double g, double gp, double lam, double kappa, DoubleMatrix & mixNeut, DoubleMatrix & CPEMix, int neutralinoi, int neutralinoj, int higgs) 
{
  double amplitudeW = 0, prefactor = 0, squareplus = 0, squareminus = 0, lambda = 0, coupling = 0, coupHZiZj = 0;
  if (fabs(mneuti) < fabs(mneutj) + mhiggs) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(8*PI*fabs(mneuti));
    squareplus = 1 - pow(fabs(mneutj)/fabs(mneuti) + mhiggs/fabs(mneuti),2);
    squareminus = 1 - pow(fabs(mneutj)/fabs(mneuti) - mhiggs/fabs(mneuti),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayneutralinoCPevenhiggsNMSSM\n");
      errorflag = -1;
    } 

    coupHZiZj = 0.5*(lam/(pow(2,0.5))*(CPEMix(higgs,1)*(mixNeut(neutralinoj,3)*mixNeut(neutralinoi,5) + mixNeut(neutralinoj,5)*mixNeut(neutralinoi,3)) + CPEMix(higgs,2)*(mixNeut(neutralinoj,4)*mixNeut(neutralinoi,5)+mixNeut(neutralinoi,4)*mixNeut(neutralinoj,5)) + CPEMix(higgs,3)*(mixNeut(neutralinoj,4)*mixNeut(neutralinoi,3) + mixNeut(neutralinoj,3)*mixNeut(neutralinoi,4))) - pow(2,0.5)*kappa*CPEMix(higgs,3)*mixNeut(neutralinoj,5)*mixNeut(neutralinoi,5) + gp/2*(-CPEMix(higgs,1)*(mixNeut(neutralinoj,1)*mixNeut(neutralinoi,4)+mixNeut(neutralinoj,4)*mixNeut(neutralinoi,1)) + CPEMix(higgs,2)*(mixNeut(neutralinoj,1)*mixNeut(neutralinoi,3)+mixNeut(neutralinoi,1)*mixNeut(neutralinoj,3))) + g/2*(CPEMix(higgs,1)*(mixNeut(neutralinoj,2)*mixNeut(neutralinoi,4)+mixNeut(neutralinoj,4)*mixNeut(neutralinoi,2)) - CPEMix(higgs,2)*(mixNeut(neutralinoj,2)*mixNeut(neutralinoi,3)+mixNeut(neutralinoj,3)*mixNeut(neutralinoi,2))));

    coupling = 2*pow(coupHZiZj,2)*(pow(mneuti,2)+pow(mneutj,2)-pow(mhiggs,2)) + 4*pow(coupHZiZj,2)*mneuti*mneutj;

    amplitudeW = prefactor*coupling*lambda;
  }
  return amplitudeW;
}
    

double neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM (double mneuti, double mneutj, double ma, double g, double gp, double lam, double kappa, DoubleMatrix & mixNeut, DoubleMatrix & CPOMix, int neuti, int neutj, int higgsa) 
{
  double amplitudeW = 0, lambda = 0, squareplus = 0, squareminus = 0, prefactor = 0, coupling = 0, coupAZiZj = 0;
  if (fabs(mneuti) < fabs(mneutj) + ma) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(4*PI*fabs(mneuti));
    squareplus = 1 - pow(fabs(mneutj)/fabs(mneuti) + ma/fabs(mneuti),2);
    squareminus = 1 - pow(fabs(mneutj)/fabs(mneuti) - ma/fabs(mneuti),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecayneutralinoCPoddhiggsNMSSM\n");
      errorflag = -1;
    } 

    coupAZiZj = -0.5*(lam/pow(2,0.5)*(CPOMix(higgsa,1)*(mixNeut(neutj,3)*mixNeut(neuti,5) + mixNeut(neuti,3)*mixNeut(neutj,5)) + CPOMix(higgsa,2)*(mixNeut(neutj,4)*mixNeut(neuti,5) + mixNeut(neuti,4)*mixNeut(neutj,5)) + CPOMix(higgsa,3)*(mixNeut(neutj,4)*mixNeut(neuti,3) + mixNeut(neutj,3)*mixNeut(neuti,4))) - pow(2,0.5)*kappa*CPOMix(higgsa,3)*mixNeut(neuti,5)*mixNeut(neutj,5) - gp/2*(-CPOMix(higgsa,1)*(mixNeut(neutj,1)*mixNeut(neuti,4) + mixNeut(neuti,1)*mixNeut(neutj,4)) + CPOMix(higgsa,2)*(mixNeut(neutj,1)*mixNeut(neuti,3) + mixNeut(neuti,1)*mixNeut(neutj,3))) - g/2*(CPOMix(higgsa,1)*(mixNeut(neutj,2)*mixNeut(neuti,4) + mixNeut(neutj,4)*mixNeut(neuti,2)) - CPOMix(higgsa,2)*(mixNeut(neutj,2)*mixNeut(neuti,3)+mixNeut(neutj,3)*mixNeut(neuti,2))));

    coupling = pow(coupAZiZj,2)*(pow(mneuti,2)+pow(mneutj,2) - pow(ma,2)) - 2*pow(coupAZiZj,2)*mneuti*mneutj;

    amplitudeW = coupling*prefactor*lambda;
  }
  return amplitudeW;
}
    

double neutralinoamplitudedecaysfermionfermionfirst2genNMSSM (double mneut, double msf, double mf, double g, double gp, DoubleMatrix & mixNeut, int neut, char type, char LorR) ///type indicates type of fermion, 'u' for up type quark, 'd' for down type quark, 'l' for charged lepton, 'n' for neutrino, note ignoring yukawa of fermion here as first 2 gen
{
  double amplitudeW = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, costhetaW = 0, sinthetaW = 0, coup1 = 0, coup2 = 0, coupling = 0, q = 0, N = 0;
  DoubleVector c(5);
  for (int i=1;i<=5;i++) { c(i) = 0;}
  if (fabs(mneut) < mf + msf) {
    amplitudeW = 0;
  }
  else {
    squareplus = 1 - pow(msf/fabs(mneut) + mf/fabs(mneut),2);
    squareminus = 1 - pow(msf/fabs(mneut) - mf/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudedecaysfermionfermionfirst2genNMSSM\n");
      errorflag = -1;
    } 
    costhetaW = g/pow(pow(gp,2)+pow(g,2),0.5);
    sinthetaW = gp/pow(pow(gp,2)+pow(g,2),0.5);

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);

    if (type == 'u') {
      N = 3;
      q = 2./3;
      coup1 = -pow(2,0.5)*(q*c(1)*sinthetaW + (0.5-q*pow(sinthetaW,2))*c(2)/costhetaW);
      coup2 = -q*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1));
    }
    else if (type == 'd') {
      N = 3;
      q = -1./3;
      coup1 = pow(2,0.5)*(c(1)*sinthetaW*-q + (0.5+q*pow(sinthetaW,2))*c(2)/costhetaW);
      coup2 = -q*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1));
    }
    else if (type == 'l') {
      N = 1;
      q = -1;
      coup1 = pow(2,0.5)*(c(1)*sinthetaW*-q + (0.5-pow(sinthetaW,2))*c(2)/costhetaW);
      coup2 = -q*pow(2,0.5)*sinthetaW*(c(2)*gp/g-c(1));
    }
    else if (type == 'n') {
      N = 1;
      q = 0;
      coup1 = -c(2)/(pow(2,0.5)*costhetaW);
      coup2 = 0;
    }
    else{
      throw("problem: type must be u or d or l or n in neutralinoamplitudedecaysfermionsfermionfirst2genNMSSM\n");
      errorflag = -1;
    }
    
    if (LorR == 'L') {
      coupling = coup1;
    }
    else if (LorR == 'R') {
      coupling = coup2;
    }
    else{
      throw("problem: LorR must be L or R in neutralinoamplitudedecaysfermionsfermionfirst2genNMSSM\n");
      errorflag = -1;
    }
    prefactor = N*pow(g,2)/(32*PI*fabs(mneut));
    amplitudeW = prefactor*lambda*(pow(coupling,2))*(pow(mneut,2)-pow(msf,2)+pow(mf,2));
  }
  return amplitudeW;
}
      
  
double neutralinoamplitudestoptopNMSSM (double mneut, double mst, double mt, double g, double gp, double thetat, double beta, double mWboson, DoubleMatrix & mixNeut, double runmt, int neut, int stop) 
{
  double amplitudeW = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, ft = 0, coup1 = 0, coup2 = 0, sinthetaW = 0, costhetaW = 0;
  DoubleVector c(5);
  for (int i=1;i<=5;i++) { c(i) = 0;}
  if (fabs(mneut) < mst + mt) {
    amplitudeW = 0;
  }
  else {
    prefactor = 3*pow(g,2)/(32*PI*fabs(mneut));
    squareplus = 1 - pow(mst/fabs(mneut) + mt/fabs(mneut),2);
    squareminus = 1 - pow(mst/fabs(mneut) - mt/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudestoptopNMSSM\n");
      errorflag = -1;
    } 
    costhetaW = g/pow(pow(gp,2)+pow(g,2),0.5);
    sinthetaW = gp/pow(pow(gp,2)+pow(g,2),0.5);

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);
    ft = g*runmt/(pow(2,0.5)*mWboson*sin(beta));

    if ( stop == 1) {
      coup1 = cos(thetat)*pow(2,0.5)*(-2./3*c(1)*sinthetaW + (-0.5 + 2./3*pow(sinthetaW,2))*c(2)/costhetaW) - sin(thetat)*ft/g*mixNeut(neut,4);
      coup2 = -2./3*sin(thetat)*pow(2,0.5)*sinthetaW*(c(2)*gp/g-c(1)) - cos(thetat)*ft/g*mixNeut(neut,4);
    }
    else if (stop == 2) {
      coup1 = -sin(thetat)*pow(2,0.5)*(-2./3*c(1)*sinthetaW + (-0.5+2./3*pow(sinthetaW,2))*c(2)/costhetaW) - cos(thetat)*ft/g*mixNeut(neut,4);
      coup2 = -2./3*cos(thetat)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) + sin(thetat)*ft/g*mixNeut(neut,4);
    }
    else{
      throw("problem: stop must be 1 or 2 in neutralinoamplitudestoptopNMSSM");
      errorflag = -1;
    }
    amplitudeW = prefactor*lambda*((pow(coup1,2)+pow(coup2,2))*(pow(mneut,2)-pow(mst,2)+pow(mt,2)) + 4*mt*mneut*coup1*coup2);
  }
  return amplitudeW;
}

double neutralinoamplitudesbottombottomNMSSM (double mneut, double msb, double mb, double g, double gp, double thetab, double beta, double mWboson, DoubleMatrix & mixNeut, double runmb, int neut, int sbottom) 
{
  double amplitudeW = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, fb = 0, coup1 = 0, coup2 = 0, sinthetaW = 0, costhetaW = 0;
  DoubleVector c(5);
  for (int i=1;i<=5;i++) { c(i) = 0;}
  if (fabs(mneut) < msb + mb) {
    amplitudeW = 0;
  }
  else {
    prefactor = 3*pow(g,2)/(32*PI*fabs(mneut));
    squareplus = 1 - pow(msb/fabs(mneut) + mb/fabs(mneut),2);
    squareminus = 1 - pow(msb/fabs(mneut) - mb/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudesbottombottomNMSSM\n");
      errorflag = -1;
    } 
    costhetaW = g/pow(pow(gp,2)+pow(g,2),0.5);
    sinthetaW = gp/pow(pow(gp,2)+pow(g,2),0.5);

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);
    fb = g*runmb/(pow(2,0.5)*mWboson*cos(beta));

    if ( sbottom == 1) {
      coup1 = cos(thetab)*pow(2,0.5)*(1./3*c(1)*sinthetaW + (0.5 - 1./3*pow(sinthetaW,2))*c(2)/costhetaW) - sin(thetab)*fb/g*mixNeut(neut,3);
      coup2 = 1./3*sin(thetab)*pow(2,0.5)*sinthetaW*(c(2)*gp/g-c(1)) - cos(thetab)*fb/g*mixNeut(neut,3);
    }
    else if (sbottom == 2) {
      coup1 = -sin(thetab)*pow(2,0.5)*(1./3*c(1)*sinthetaW + (0.5-1./3*pow(sinthetaW,2))*c(2)/costhetaW) - cos(thetab)*fb/g*mixNeut(neut,3);
      coup2 = 1./3*cos(thetab)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) + sin(thetab)*fb/g*mixNeut(neut,3);
    }
    else{
      throw("problem: sbottom must be 1 or 2 in neutralinoamplitudesbottombottomNMSSM\n");
      errorflag = -1;
    }
    amplitudeW = prefactor*lambda*((pow(coup1,2)+pow(coup2,2))*(pow(mneut,2)-pow(msb,2)+pow(mb,2)) + 4*mb*mneut*coup1*coup2);
  }
  return amplitudeW;
}


double neutralinoamplitudestautauNMSSM (double mneut, double mstau, double mtau, double g, double gp, double thetatau, double beta, double mWboson, DoubleMatrix & mixNeut, double runmtau, int neut, int stau) 
{
  double amplitudeW = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, ftau = 0, coup1 = 0, coup2 = 0, sinthetaW = 0, costhetaW = 0;
  DoubleVector c(5);
  for (int i=1;i<=5;i++) { c(i) = 0;}
  if (fabs(mneut) < mstau + mtau) {
    amplitudeW = 0;
  }
  else {
    prefactor = pow(g,2)/(32*PI*fabs(mneut));
    squareplus = 1 - pow(mstau/fabs(mneut) + mtau/fabs(mneut),2);
    squareminus = 1 - pow(mstau/fabs(mneut) - mtau/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudestautauNMSSM\n");
      errorflag = -1;
    } 
    costhetaW = g/pow(pow(gp,2)+pow(g,2),0.5);
    sinthetaW = gp/pow(pow(gp,2)+pow(g,2),0.5);

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);
    ftau = g*runmtau/(pow(2,0.5)*mWboson*cos(beta));

    if ( stau == 1) {
      coup1 = cos(thetatau)*pow(2,0.5)*(c(1)*sinthetaW + (0.5 - pow(sinthetaW,2))*c(2)/costhetaW) - sin(thetatau)*ftau/g*mixNeut(neut,3);
      coup2 = sin(thetatau)*pow(2,0.5)*sinthetaW*(c(2)*gp/g-c(1)) - cos(thetatau)*ftau/g*mixNeut(neut,3);
    }
    else if (stau == 2) {
      coup1 = -sin(thetatau)*pow(2,0.5)*(c(1)*sinthetaW + (0.5-pow(sinthetaW,2))*c(2)/costhetaW) - cos(thetatau)*ftau/g*mixNeut(neut,3);
      coup2 = cos(thetatau)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) + sin(thetatau)*ftau/g*mixNeut(neut,3);
    }
    else{
      throw("problem: stau must be 1 or 2 in neutralinoamplitudestautauNMSSM");
      errorflag = -1;
    }
    amplitudeW = prefactor*lambda*((pow(coup1,2)+pow(coup2,2))*(pow(mneut,2)-pow(mstau,2)+pow(mtau,2)) + 4*mtau*mneut*coup1*coup2);
  }
  return amplitudeW;
}


double neutralinoamplitudestauneutrinotauneutrinoNMSSM (double mneut, double mstaunu, double mtaunu, double g, double gp, DoubleMatrix & mixNeut, int neut) 
{
  double amplitudeW = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, coup1 = 0, costhetaW = 0, sinthetaW = 0;
  DoubleVector c(5);
  for (int i=1;i<=5;i++) { c(i) = 0;}
  if (fabs(mneut) < mstaunu + mtaunu) {
    amplitudeW = 0;
  }
  else {
    prefactor = pow(g,2)/(32*PI*fabs(mneut));
    squareplus = 1 - pow(mstaunu/fabs(mneut) + mtaunu/fabs(mneut),2);
    squareminus = 1 - pow(mstaunu/fabs(mneut) - mtaunu/fabs(mneut),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in neutralinoamplitudestauneutrinotauneutrinoNMSSM\n");
      errorflag = -1;
    } 
    costhetaW = g/pow(pow(gp,2)+pow(g,2),0.5);
    sinthetaW = gp/pow(pow(gp,2)+pow(g,2),0.5);

    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    
    coup1 = -c(2)/(pow(2,0.5)*costhetaW);
    
    amplitudeW = prefactor*lambda*pow(coup1,2)*(pow(mneut,2)-pow(mstaunu,2));
  }
  return amplitudeW;
}


double squarkamplitudedecayquarkneutralinoNMSSM (double m1, double mq, double mneut, double g, double gp, DoubleMatrix & mixNeut, char uord, char LorR, int neut) 
{
  double amplitudeW = 0;
  if (m1 < mq + fabs(mneut)) { amplitudeW = 0;}
  else {
    double coupling = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, sinthetaW = 0, costhetaW = 0;
    DoubleVector c(5);
    for (int i=1;i<=5;i++) { c(i) = 0;}

    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));

    squareplus = 1 - pow(mq/m1 + fabs(mneut)/m1,2);
    squareminus = 1 - pow(mq/m1 - fabs(mneut)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in squarkamplitudedecayquarkneutralinoNMSSM\n");
      errorflag = -1;
    } 

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);

    prefactor = pow(g,2)/(16*PI*m1);
    
    if (uord == 'u' && LorR == 'L') {
      coupling = -pow(2,0.5)*(2./3*c(1)*sinthetaW + (0.5 - 2./3*pow(sinthetaW,2))*c(2)/costhetaW);
    }
    else if (uord == 'u' && LorR == 'R') {
      coupling = -2./3*pow(2,0.5)*sinthetaW*(c(2)*gp/g-c(1));
    }
    else if (uord == 'd' && LorR == 'L') {
      coupling = pow(2,0.5)*(c(1)*1./3*sinthetaW + (0.5-1./3*pow(sinthetaW,2))*c(2)/costhetaW);
    }
    else if (uord == 'd' && LorR == 'R') {
      coupling = pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1))*1./3;
    }
    else{
      throw("problem: uord must be u or d and LorR must be L or R in squarkamplitudedecayquarkneutralinoNMSSM\n");
      errorflag = -1;
    }

    amplitudeW = prefactor*pow(coupling,2)*(pow(m1,2)-pow(mneut,2) - pow(mq,2))*lambda;
    
  }
  return amplitudeW;
}

    
double sleptonamplitudedecayleptonneutralinoNMSSM (double m1, double ml, double mneut, double g, double gp, DoubleMatrix & mixNeut, char uord, char LorR, int neut) 
{
  double amplitudeW = 0;
  if (m1 < ml + fabs(mneut)) { amplitudeW = 0;}
  else {
    double coupling = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, sinthetaW = 0, costhetaW = 0;
    DoubleVector c(5);
    for (int i=1;i<=5;i++) { c(i) = 0;}

    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));

    squareplus = 1 - pow(ml/m1 + fabs(mneut)/m1,2);
    squareminus = 1 - pow(ml/m1 - fabs(mneut)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sleptonamplitudedecayleptonneutralinoNMSSM\n");
      errorflag = -1;
    } 

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);

    prefactor = pow(g,2)/(16*PI*m1);
    
    if (uord == 'u' && LorR == 'L') {
      coupling = -c(2)/(pow(2,0.5)*costhetaW);
    }
    else if (uord == 'u' && LorR == 'R') {
      coupling = 0; ///no sneutrinoR
    }
    else if (uord == 'd' && LorR == 'L') {
      coupling = pow(2,0.5)*(c(1)*sinthetaW + (0.5-pow(sinthetaW,2))*c(2)/costhetaW);
    }
    else if (uord == 'd' && LorR == 'R') {
      coupling = pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1));
    }
    else{
      throw("problem: uord must be u or d and LorR must be L or R in sleptonamplitudedecayleptonneutralinoNMSSM\n");
      errorflag = -1;
    }

    amplitudeW = prefactor*pow(coupling,2)*(pow(m1,2)-pow(mneut,2) - pow(ml,2))*lambda;
    
  }
  return amplitudeW;
}

double stopamplitudedecaytopneutralinoNMSSM (double m1, double mt, double mneut, double g, double gp, double thetat, DoubleMatrix & mixNeut, double runmt, double mWboson, double beta, int stop, int neut)
{
  double amplitudeW = 0;
  if (m1 < mt + fabs(mneut)) { amplitudeW = 0;}
  else {
    double coupling1 = 0, coupling2 = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, sinthetaW = 0, costhetaW = 0, ft = 0;
    DoubleVector c(5);
    for (int i=1;i<=5;i++) { c(i) = 0;}

    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));

    squareplus = 1 - pow(mt/m1 + fabs(mneut)/m1,2);
    squareminus = 1 - pow(mt/m1 - fabs(mneut)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stopamplitudedecaytopneutralinoNMSSM\n");
      errorflag = -1;
    } 
    ft = g*runmt/(pow(2,0.5)*mWboson*sin(beta));

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);

    prefactor = pow(g,2)/(16*PI*m1);
    
    if (stop == 1) {
      coupling1 = cos(thetat)*pow(2,0.5)*(-2./3*c(1)*sinthetaW + (-0.5+2./3*pow(sinthetaW,2))*c(2)/costhetaW) - sin(thetat)*ft/g*mixNeut(neut,4);
      coupling2 = -2./3*sin(thetat)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) - cos(thetat)*ft/g*mixNeut(neut,4);
    }
    else if (stop == 2) {
      coupling1 = -sin(thetat)*pow(2,0.5)*(-2./3*c(1)*sinthetaW + (-0.5+2./3*pow(sinthetaW,2))*c(2)/costhetaW) - cos(thetat)*ft/g*mixNeut(neut,4);
      coupling2 = -2./3*cos(thetat)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) + sin(thetat)*ft/g*mixNeut(neut,4);
    }
    else{
      throw("problem: stop must be 1 or 2 in stopamplitudedecaytopneutralinoNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = prefactor*((pow(coupling1,2)+pow(coupling2,2))*(pow(m1,2) - pow(mt,2) - pow(mneut,2)) - 4*coupling1*coupling2*mt*mneut)*lambda;

  }
  return amplitudeW;
}


double sbottomamplitudedecaybottomneutralinoNMSSM (double m1, double mb, double mneut, double g, double gp, double thetab, DoubleMatrix & mixNeut, double runmb, double mWboson, double beta, int sbottom, int neut)
{
  double amplitudeW = 0;
  if (m1 < mb + fabs(mneut)) { amplitudeW = 0;}
  else {
    double coupling1 = 0, coupling2 = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, sinthetaW = 0, costhetaW = 0, fb = 0;
    DoubleVector c(5);
    for (int i=1;i<=5;i++) { c(i) = 0;}

    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));

    squareplus = 1 - pow(mb/m1 + fabs(mneut)/m1,2);
    squareminus = 1 - pow(mb/m1 - fabs(mneut)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in sbottomamplitudedecaybottomneutralinoNMSSM\n");
      errorflag = -1;
    } 
    fb = g*runmb/(pow(2,0.5)*mWboson*cos(beta));

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);

    prefactor = pow(g,2)/(16*PI*m1);
    
    if (sbottom == 1) {
      coupling1 = cos(thetab)*pow(2,0.5)*(1./3*c(1)*sinthetaW + (0.5-1./3*pow(sinthetaW,2))*c(2)/costhetaW) - sin(thetab)*fb/g*mixNeut(neut,3);
      coupling2 = 1./3*sin(thetab)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) - cos(thetab)*fb/g*mixNeut(neut,3);
    }
    else if (sbottom == 2) {
      coupling1 = -sin(thetab)*pow(2,0.5)*(1./3*c(1)*sinthetaW + (0.5-1./3*pow(sinthetaW,2))*c(2)/costhetaW) - cos(thetab)*fb/g*mixNeut(neut,3);
      coupling2 = 1./3*cos(thetab)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) + sin(thetab)*fb/g*mixNeut(neut,3);
    }
    else{
      throw("problem: sbottom must be 1 or 2 in sbottomamplitudedecaybottomneutralinoNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = prefactor*((pow(coupling1,2)+pow(coupling2,2))*(pow(m1,2) - pow(mb,2) - pow(mneut,2)) - 4*coupling1*coupling2*mb*mneut)*lambda;
  }
  return amplitudeW;
}


double stauamplitudedecaytauneutralinoNMSSM (double m1, double mtau, double mneut, double g, double gp, double thetatau, DoubleMatrix & mixNeut, double runmtau, double mWboson, double beta, int stau, int neut)
{
  double amplitudeW = 0;
  if (m1 < mtau + fabs(mneut)) { amplitudeW = 0;}
  else {
    double coupling1 = 0, coupling2 = 0, squareplus = 0, squareminus = 0, lambda = 0, prefactor = 0, sinthetaW = 0, costhetaW = 0, ftau = 0;
    DoubleVector c(5);
    for (int i=1;i<=5;i++) { c(i) = 0;}

    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));

    squareplus = 1 - pow(mtau/m1 + fabs(mneut)/m1,2);
    squareminus = 1 - pow(mtau/m1 - fabs(mneut)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in stauamplitudedecaytauneutralinoNMSSM\n");
      errorflag = -1;
    } 
    ftau = g*runmtau/(pow(2,0.5)*mWboson*cos(beta));

    c(1) = mixNeut(neut,1)*costhetaW + mixNeut(neut,2)*sinthetaW;
    c(2) = -mixNeut(neut,1)*sinthetaW + mixNeut(neut,2)*costhetaW;
    c(3) = mixNeut(neut,3);
    c(4) = mixNeut(neut,4);
    c(5) = mixNeut(neut,5);

    prefactor = pow(g,2)/(16*PI*m1);
    
    if (stau == 1) {
      coupling1 = cos(thetatau)*pow(2,0.5)*(c(1)*sinthetaW + (0.5-pow(sinthetaW,2))*c(2)/costhetaW) - sin(thetatau)*ftau/g*mixNeut(neut,3);
      coupling2 = sin(thetatau)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) - cos(thetatau)*ftau/g*mixNeut(neut,3);
    }
    else if (stau == 2) {
      coupling1 = -sin(thetatau)*pow(2,0.5)*(c(1)*sinthetaW + (0.5-pow(sinthetaW,2))*c(2)/costhetaW) - cos(thetatau)*ftau/g*mixNeut(neut,3);
      coupling2 = cos(thetatau)*pow(2,0.5)*sinthetaW*(c(2)*gp/g - c(1)) + sin(thetatau)*ftau/g*mixNeut(neut,3);
    }
    else{
      throw("problem: stau must be 1 or 2 in stauamplitudedecaytauneutralinoNMSSM\n");
      errorflag = -1;
    }
    
    amplitudeW = prefactor*((pow(coupling1,2)+pow(coupling2,2))*(pow(m1,2) - pow(mtau,2) - pow(mneut,2)) - 4*coupling1*coupling2*mtau*mneut)*lambda;

  }
  return amplitudeW;
}


double charginoiamplitudedecayneutralinojHpmNMSSM (double mchar, double mneut, double mHpm, double g, double gp, double thetaL, double thetaR, double beta, DoubleMatrix & mixNeut, double lam, int chargino, int neut)
{
  double amplitudeW = 0;
  if (fabs(mchar) < fabs(mneut) + mHpm) { amplitudeW = 0;}
  else {
    double prefactor = 0, coupling1 = 0, coupling2 = 0, squareplus = 0, squareminus = 0, lambda = 0;
    squareplus = 1 - pow(mHpm/fabs(mchar) + fabs(mneut)/fabs(mchar),2);
    squareminus = 1 - pow(mHpm/fabs(mchar) - fabs(mneut)/fabs(mchar),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoiamplitudedecayneutralinojHpmNMSSM\n");
      errorflag = -1;
    } 

    prefactor = pow(g,2)/(32*PI*fabs(mchar));
    
    if (chargino == 1) {
      coupling1 = 1/g*(lam*sin(beta)*mixNeut(neut,5)*cos(thetaR)+ cos(beta)/pow(2,0.5)*(gp*mixNeut(neut,1) + g*mixNeut(neut,2))*cos(thetaR) + g*cos(beta)*mixNeut(neut,4)*sin(thetaR));
      coupling2 = 1/g*(lam*cos(beta)*mixNeut(neut,5)*cos(thetaL) - sin(beta)/pow(2,0.5)*(gp*mixNeut(neut,1) + g*mixNeut(neut,2))*cos(thetaL) + g*sin(beta)*mixNeut(neut,3)*sin(thetaL));
    }
    else if (chargino == 2) {
      coupling1 = 1/g*(lam*sin(beta)*mixNeut(neut,5)*sin(thetaR)+ cos(beta)/pow(2,0.5)*(gp*mixNeut(neut,1) + g*mixNeut(neut,2))*sin(thetaR) - g*cos(beta)*mixNeut(neut,4)*cos(thetaR));
      coupling2 = 1/g*(lam*cos(beta)*mixNeut(neut,5)*sin(thetaL) - sin(beta)/pow(2,0.5)*(gp*mixNeut(neut,1) + g*mixNeut(neut,2))*sin(thetaL) - g*sin(beta)*mixNeut(neut,3)*cos(thetaL));
    }
    else{
      throw("problem: chargino must be 1 or 2 in charginoiamplitudedecayneutralinojHpmNMSSM\n");
      errorflag = -1;
    }

    amplitudeW = prefactor*lambda*((pow(coupling1,2)+pow(coupling2,2))*(pow(mneut,2)+pow(mchar,2)-pow(mHpm,2)) + 4*coupling1*coupling2*mneut*mchar);

  }
  return amplitudeW;
}


double charginoiamplitudedecayneutralinojWNMSSM (double mchar, double mneut, double mWboson, double g, double gp, double thetaL, double thetaR, DoubleMatrix & mixNeut, int chargino, int neut) 
{
  double amplitudeW = 0, squareplus = 0, squareminus = 0, lambda = 0, coupleL = 0, coupleR = 0, coupling = 0, prefactor = 0, V2 = 0, V1 = 0, U2 = 0, U1 = 0;
  if (fabs(mchar) < fabs(mneut) + mWboson) {
    amplitudeW = 0;
  }
  else {
    prefactor = pow(g,2)/(32*PI*fabs(mchar));
    
    if (chargino == 1) {
      V2 = cos(thetaR); V1 = sin(thetaR); U2 = cos(thetaL); U1 = sin(thetaL);
    }
    else if (chargino == 2) {
      V2 = sin(thetaR); V1 = -cos(thetaR); U2 = sin(thetaL); U1 = -cos(thetaL);
    }
    else{
      throw("problem: chargino must be 1 or 2 in charginoiamplitudedecayneutralinojWNMSSM\n");
    }

    coupleL = -1/pow(2,0.5)*mixNeut(neut,4)*V2 + mixNeut(neut,2)*V1;
    coupleR = 1/pow(2,0.5)*mixNeut(neut,3)*U2 + mixNeut(neut,2)*U1;

    squareplus = 1 - pow(fabs(mneut)/fabs(mchar) + mWboson/fabs(mchar),2);
    squareminus = 1 - pow(fabs(mneut)/fabs(mchar) - mWboson/fabs(mchar),2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in charginoiamplitudedecayneutralinojWNMSSM\n");
      errorflag = -1;
    } 

    coupling = -12*mneut*mchar*coupleL*coupleR + (pow(coupleL,2)+pow(coupleR,2))*((pow(mchar,2)+pow(mneut,2)-pow(mWboson,2)) + (pow(mchar,2)+pow(mWboson,2)-pow(mneut,2))*(pow(mchar,2)-pow(mneut,2)-pow(mWboson,2))/pow(mWboson,2));

    amplitudeW = prefactor*lambda*coupling;
  }
  return amplitudeW;
}


double HpmamplitudecharginojneutralinoiNMSSM (double mHp, double mchar, double mneut, double g, double gp, double beta, double thetaL, double thetaR, double lam, DoubleMatrix & mixNeut, int neutralino, int chargino)
{
  double amplitudeW = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, coupHpZiWjL = 0, coupHpZiWjR = 0, coupling = 0, V1 = 0, V2 = 0, U1 = 0, U2 = 0;

  if (mHp < fabs(mchar) + fabs(mneut)) {
    amplitudeW = 0;
  }
  else {
    prefactor = 1/(16*PI*mHp);
    squareplus = 1 - pow(fabs(mchar)/mHp + fabs(mneut)/mHp,2);
    squareminus = 1 - pow(fabs(mchar)/mHp - fabs(mneut)/mHp,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in HpmamplitudecharginojneutralinoiNMSSM\n");
      errorflag = -1;
    } 
    
    if (chargino == 1) {
      V2 = cos(thetaR); V1 = sin(thetaR); U2 = cos(thetaL); U1 = sin(thetaL);
    }
    else if (chargino == 2) {
      V2 = sin(thetaR); V1 = -cos(thetaR); U2 = sin(thetaL); U1 = -cos(thetaL);
    }
    else{
      throw("problem: chargino must be 1 or 2 in HpmamplitudecharginojneutralinoiNMSSM\n");
      errorflag = -1;
    }

    coupHpZiWjL = lam*cos(beta)*mixNeut(neutralino,5)*U2 - sin(beta)/(pow(2,0.5))*(gp*mixNeut(neutralino,1)+g*mixNeut(neutralino,2))*U2 + sin(beta)*g*mixNeut(neutralino,3)*U1;
    coupHpZiWjR = lam*sin(beta)*mixNeut(neutralino,5)*V2 + cos(beta)/(pow(2,0.5))*(gp*mixNeut(neutralino,1)+g*mixNeut(neutralino,2))*V2 + cos(beta)*g*mixNeut(neutralino,4)*V1;

    coupling = (pow(coupHpZiWjL,2)+pow(coupHpZiWjR,2))*(pow(mHp,2)-pow(mneut,2)-pow(mchar,2)) - 4*coupHpZiWjL*coupHpZiWjR*mneut*mchar;

    amplitudeW = prefactor*coupling*lambda;

  }
  return amplitudeW;
}

double snutauamplitudedecaynutauneutralinoNMSSM (double m1, double mneut, double g, double gp, DoubleMatrix & mixNeut, int neutralino)
{
  double amplitudeW = 0, prefactor = 0, lambda = 0, squareplus = 0, squareminus = 0, coup = 0, costhetaW = 0, sinthetaW = 0, c2 = 0; ///c2 is c(2) from above formulae
  if (m1 < fabs(mneut)) { amplitudeW = 0;}
  else {
    prefactor = pow(g,2)/(16*PI*m1);
    squareplus = 1 - pow(fabs(mneut)/m1,2);
    squareminus = 1 - pow(fabs(mneut)/m1,2);
    lambda = pow(squareplus*squareminus,0.5);
    if (squareplus*squareminus < 0) {
      throw ("problem: lambda will give nan in snutauamplitudedecaynutauneutralinoNMSSM\n");
      errorflag = -1;
    } 

    sinthetaW = gp/(pow(pow(g,2)+pow(gp,2),0.5));
    costhetaW = g/(pow(pow(g,2)+pow(gp,2),0.5));

    c2 = -mixNeut(neutralino,1)*sinthetaW + mixNeut(neutralino,2)*costhetaW;

    coup = -c2/(pow(2,0.5)*costhetaW);

    amplitudeW = prefactor*lambda*(pow(m1,2)-pow(mneut,2))*pow(coup,2);

  }
  return amplitudeW;
}

